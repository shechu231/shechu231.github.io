<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021年一月新番</title>
    <url>/2021/12/22/2021%E5%B9%B4%E4%B8%80%E6%9C%88%E6%96%B0%E7%95%AA/</url>
    <content><![CDATA[<h1 id="老番续作"><a href="#老番续作" class="headerlink" title="老番续作"></a>老番续作</h1><p>《擅长捉弄人的高木同学》第三季</p>
<p>期待着，期待着，《擅长捉弄人的高木同学》第三季的动画时间终于确定在明年一月上映，想想再过不久就又可以吃到高木同学和西片两人的狗粮了，还真是让人兴奋呢！（如果《擅长捉弄人的（元）高木同学》能动画化岂不是更刺激吗？）</p>
<p><img src="/img/2022(1).jpg"></p>
<h3 id="《公主连结！Re-Dive-》第二季"><a href="#《公主连结！Re-Dive-》第二季" class="headerlink" title="《公主连结！Re:Dive 》第二季"></a>《公主连结！Re:Dive 》第二季</h3><p>说实话，这部动画一开始是拒绝的，毕竟骑士君呆头呆脑的让我很难有代入感，怎奈臭鼬实在是太可爱了，不知不觉第一季就看完了。如果你是爱猫人士的话不妨关注一下！</p>
<p><img src="/img/2021(2).jpg"></p>
<h3 id="《魔法科高校的劣等生-追忆篇》"><a href="#《魔法科高校的劣等生-追忆篇》" class="headerlink" title="《魔法科高校的劣等生 追忆篇》"></a>《魔法科高校的劣等生 追忆篇》</h3><p>这已经是这个作品的第三期动画化，不得不说“抗中奇侠”司波达也在日本还是很有人气的，虽然这部作品在政治方面有一些敏感遭受一些“爱国网友”的抵制，但是整体感觉还是很不错的，如果你还没看过前两部推荐看一下！</p>
<p><img src="/img/2021(3).jpg"></p>
<h3 id="进击的巨人最终季"><a href="#进击的巨人最终季" class="headerlink" title="进击的巨人最终季"></a>进击的巨人最终季</h3><p><img src="/img/2021(4).jpg"></p>
<h3 id="现实主义勇者的王国再建记-第二季"><a href="#现实主义勇者的王国再建记-第二季" class="headerlink" title="现实主义勇者的王国再建记(第二季)"></a>现实主义勇者的王国再建记(第二季)</h3><p>轻小说《现实主义勇者的王国再建记》讲述了被召唤到异世界的相马一也的冒险历程。在故事中，原本是为了保护自己而献出富国强兵的计策，因而受到国王赏识，竟然还要让位给相马一也，作为国王女儿的婚约者，可以说是无路可逃。因此，相马一也为了国家的再建募集所需人才，他将遇到什么样的人呢？</p>
<p><img src="/img/2022(7).jpg"></p>
<h3 id="平凡的职业造就最强-第三季"><a href="#平凡的职业造就最强-第三季" class="headerlink" title="平凡的职业造就最强(第三季)"></a>平凡的职业造就最强(第三季)</h3><p><img src="/img/2022(8).jpg"></p>
<h3 id="瓦尼塔斯的手记-第二季"><a href="#瓦尼塔斯的手记-第二季" class="headerlink" title="瓦尼塔斯的手记(第二季)"></a>瓦尼塔斯的手记(第二季)</h3><p>《潘多拉之心》作者望月淳的新作</p>
<p><img src="/img/2022(9).jpg"></p>
<h1 id="漫改动画"><a href="#漫改动画" class="headerlink" title="漫改动画"></a>漫改动画</h1><h3 id="怪人开发部的黑井桑"><a href="#怪人开发部的黑井桑" class="headerlink" title="怪人开发部的黑井桑"></a>怪人开发部的黑井桑</h3><p><img src="/img/2022(10).jpg"></p>
<h3 id="东方少年"><a href="#东方少年" class="headerlink" title="东方少年"></a>东方少年</h3><p>电视动画《#东方少年#》改编自大高忍原作的同名漫画作品，由ACGT制作， 预计于2022年播出。</p>
<p><img src="/img/2022(11).jpg"></p>
<h3 id="终末的病毒"><a href="#终末的病毒" class="headerlink" title="终末的病毒"></a>终末的病毒</h3><p>故事发生在未来的2040年。男主【怜人】是国立先端医科大学的学生，患有了罕见的病，可惜药物需要在5年后才能研发出来，无奈【怜人】在与青梅竹马【绘理沙】表白之后接受了长达5年的冷冻睡眠治疗。</p>
<p>过了5年后，【怜人】被唤醒，第一映入眼帘的是大姐姐执行官【周防美来】，紫色头发，身穿黑色制服，左眼下有泪痣，总是一脸冷漠的表情。</p>
<p>经她介绍，在2041年，一种专门感染男性的新型病毒【MK】开始在世界各地蔓延，病毒通过空气传播且传染力超强。被感染者的细胞死亡、皮肤变为紫色并伴随出血症状，三日内即可致死。</p>
<p>4年时间，全世界99.9%的男性皆感染病毒而死，剩下50亿的女人，但是接受冷冻治疗的男主却不明原因获得了MK病毒的抗体，对于能够免疫病毒的男性已经成了世界的稀缺资源……..</p>
<p><img src="/img/2022(12).jpg"></p>
<h3 id="蔷薇王的葬列"><a href="#蔷薇王的葬列" class="headerlink" title="蔷薇王的葬列"></a>蔷薇王的葬列</h3><p>十五世纪赫赫有名的两大家族──红蔷薇兰开斯特与白蔷薇约克所掀起的蔷薇战争。<a href="https://baike.baidu.com/item/%E7%BA%A6%E5%85%8B%E7%8E%8B%E6%9C%9D/8631122">约克王朝</a>的最後一任国王「理查三世」，因为一个不为人知的天大秘密，一出生就被母亲视为恶魔之子。无法受到母亲关爱的理查，便将协助自己的父亲登上王位视为活下去的最大动力。在一次偶然的机会下，理查遇到了一位自称牧羊人的神秘男子，他的人生也开始有了转变。</p>
<p><img src="/img/2022(13).jpg"></p>
<h3 id="Slow-Loop"><a href="#Slow-Loop" class="headerlink" title="Slow Loop"></a>Slow Loop</h3><p>电视动画片<em>SLOW LOOP</em>改编自内野舞子在<em>Manga Time Kirara Forward</em>连载的同名漫画作品 [1] ，由CONNECT负责动画制作，秋田谷典昭担任导演，<a href="https://baike.baidu.com/item/%E5%B1%B1%E7%94%B0%E7%94%B1%E9%A6%99/19315916">山田由香</a>担任总编剧，泷本祥子负责角色设计 [2] ，于2022年1月7日起在<a href="https://baike.baidu.com/item/AT-X/8056947">AT-X</a>、<a href="https://baike.baidu.com/item/%E4%B8%9C%E4%BA%AC%E9%A6%96%E9%83%BD%E7%94%B5%E8%A7%86%E5%8F%B0/22089563">东京首都电视台</a>、<a href="https://baike.baidu.com/item/SUN%E7%94%B5%E8%A7%86%E5%8F%B0/2999198">SUN电视台</a>、KBS京都、<a href="https://baike.baidu.com/item/%E7%88%B1%E7%9F%A5%E7%94%B5%E8%A7%86%E5%8F%B0/6746269">爱知电视台</a>、BS11播出</p>
<p>在海边，少女日和独自享受过世的父亲教给她的飞钓。和往常一样钓鱼的时候，突然遇到准备下水的天真烂漫的少女小春。</p>
<p>两个人决定一起钓鱼，但她们实际上是父母再婚对象的女儿……</p>
<p>要不要和因为意外的相遇而成为“姐妹”的日和与小春一起，一边钓鱼一边悠闲地度过呢？</p>
<p><img src="/img/2022(14).jpg"></p>
<h3 id="明日酱的水手服"><a href="#明日酱的水手服" class="headerlink" title="明日酱的水手服"></a>明日酱的水手服</h3><p>“第一次”是“无论多少次”——。<br>　　故事的舞台是乡下的名门女子中学私立梅学园。明天穿这个学校的水手服是小路的“梦想”。少女“梦想”的中学水手服生活终于开始了。广阔、绿意盎然的田园风光。缓缓流逝的青春时光。<br>　　乡下×中学生×水手服“能交到100个朋友吗？”博以柔软的笔触赠与的温柔校园故事…</p>
<p><img src="/img/2022(15).jpg"></p>
<h3 id="与变成了异世界美少女的大叔一起冒险"><a href="#与变成了异世界美少女的大叔一起冒险" class="headerlink" title="与变成了异世界美少女的大叔一起冒险"></a>与变成了异世界美少女的大叔一起冒险</h3><p>津留崎优&amp;池泽真的漫画《#与变成了异世界美少女的大叔一起冒险#》宣布TV动画化~<br>　　【简介】<br>　　经由全<del>裸</del>的女神大人之手，没有女人缘的大叔和他的帅气亲友一起进行了异世界转移！ 但是没想到女神大人却恶作剧一般的将他转移后的肉体变成了绝世的美少女！？<br>　　于是为了取回男儿之身，他与亲友一同踏上了打倒魔王的旅程——！！<br>　　由「变成了美少女的大叔」和「帅气大叔」为您带来的，充满了狂气的异世界冒险恋爱喜剧开幕了！！</p>
<p><img src="/img/2022(16).jpg"></p>
<h3 id="更衣人偶坠入爱河"><a href="#更衣人偶坠入爱河" class="headerlink" title="更衣人偶坠入爱河"></a>更衣人偶坠入爱河</h3><p>电视动画片《更衣人偶坠入爱河》改编自福田晋一创作的同名漫画作品，于2021年4月15日宣布动画决定的消息 [1-2] 。该片由CloverWorks负责制作，于2022年1月播出。</p>
<p><img src="/img/2022(17).jpg"></p>
<h1 id="轻改动画"><a href="#轻改动画" class="headerlink" title="轻改动画"></a>轻改动画</h1><h3 id="天才王子的赤字国家振兴术"><a href="#天才王子的赤字国家振兴术" class="headerlink" title="天才王子的赤字国家振兴术"></a>天才王子的赤字国家振兴术</h3><p>电视动画片《天才王子的赤字国家重生术》改编自鸟羽彻创作的轻小说作品《<a href="https://baike.baidu.com/item/%E5%A4%A9%E6%89%8D%E7%8E%8B%E5%AD%90%E7%9A%84%E8%B5%A4%E5%AD%97%E5%9B%BD%E5%AE%B6%E9%87%8D%E7%94%9F%E6%9C%AF%EF%BD%9E%E5%AF%B9%E4%BA%86%EF%BC%8C%E5%B0%B1%E6%9D%A5%E5%8D%96%E5%9B%BD%E5%90%A7%EF%BD%9E/24016057">天才王子的赤字国家重生术～对了，就来卖国吧～</a>》，于2021年1月31日宣布动画决定。</p>
<p><img src="/img/2022(18).jpg"></p>
<h3 id="自称贤者弟子的贤者（轻改）"><a href="#自称贤者弟子的贤者（轻改）" class="headerlink" title="自称贤者弟子的贤者（轻改）"></a>自称贤者弟子的贤者（轻改）</h3><p>一部异世界转生动画，讲述一位男性玩家咲森鉴来到游戏世界，转生成为一位美少女的奇幻冒险之旅。值得一提的是角色原案是<strong>藤原老师</strong>，因此画面看是来很是华丽。</p>
<p>无限可能性扩大的VRMO-PRPG『电弧·地球在线』。</p>
<p>由玩家建立的阿尔卡特王国的九个贤者之一</p>
<p>充满威严的老年传唤术士丹伯夫也是玩家之一。</p>
<p>有一天，他发现了世界的异常。</p>
<p>产生了游戏中没有的味觉和嗅觉，也不能注销。</p>
<p>而且，NPC还做出了很有人情味的反应。</p>
<p>—那是游戏毫无疑问成为现实的证明。</p>
<p>而且在这个世界上已经过了30年了。</p>
<p>然后，不知道怎么回事，丹布尔夫因为各种原因，变成了一个既年幼又美丽的少女！</p>
<p>为了解开急剧变化的世界之谜</p>
<p>丹伯夫以贤者的弟子米拉为名出发。</p>
<p>在冒险的尽头等待的东西是一。</p>
<p><img src="/img/2022(19).jpg"></p>
<h3 id="里亚德录大地"><a href="#里亚德录大地" class="headerlink" title="里亚德录大地"></a>里亚德录大地</h3><p>电视动画片《里亚德录大地》改编自Ceez创作的同名小说作品，于2021年2月22日宣布动画化决定的消息 [1] 。该片由MAHO FILM负责动画制作，于2022年1月5日起播出。</p>
<p><img src="/img/2022(20).jpg"></p>
<h3 id="平家物语"><a href="#平家物语" class="headerlink" title="平家物语"></a>平家物语</h3><p>电视动画片《平家物语》改编自古川日出男所译的日本古代同名长篇小说作品，于2021年9月3日宣布动画化的消息。该片由Science SARU负责制作，于2022年1月起在<a href="https://baike.baidu.com/item/%E5%AF%8C%E5%A3%AB%E7%94%B5%E8%A7%86%E5%8F%B0/768542">富士电视台</a>的“＋Ultra”栏目播出。此外，该片亦于2021年9月15日起在流媒体平台FOD先行播放</p>
<p><img src="/img/2022(21).jpg"></p>
<h1 id="其他动画"><a href="#其他动画" class="headerlink" title="其他动画"></a>其他动画</h1><h3 id="CUE！"><a href="#CUE！" class="headerlink" title="CUE！"></a>CUE！</h3><p>电视动画片《CUE!》改编自恋爱养成类游戏《[CUE! -See You Everyday-](<a href="https://baike.baidu.com/item/CUE">https://baike.baidu.com/item/CUE</a>! -See You Everyday-/54198083)》，于2020年11月宣布动画化决定，由梦太公司、Graphinica负责制作。</p>
<p><img src="/img/2022(22).jpg"></p>
<h3 id="TRIBE-NINE"><a href="#TRIBE-NINE" class="headerlink" title="TRIBE NINE"></a>TRIBE NINE</h3><p><img src="/img/2022(24).jpg"></p>
<h3 id="永远的831"><a href="#永远的831" class="headerlink" title="永远的831"></a>永远的831</h3><p>神山健治导演、剧本的原创长篇动画《永远的831》将作为WOWOW开台30周年纪念作品，在2022年1月开播！</p>
<p><img src="/img/2022(23).jpg"></p>
]]></content>
      <categories>
        <category>动漫</category>
      </categories>
  </entry>
  <entry>
    <title>C++基础学习</title>
    <url>/2022/01/20/C++%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>Docker安装设置</title>
    <url>/2022/02/23/Docker%E5%AE%89%E8%A3%85%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="离线安装Docker系统-课上重点）"><a href="#离线安装Docker系统-课上重点）" class="headerlink" title="离线安装Docker系统(课上重点）"></a>离线安装Docker系统(课上重点）</h2><h3 id="第一步：下载docker离线包"><a href="#第一步：下载docker离线包" class="headerlink" title="第一步：下载docker离线包"></a>第一步：下载docker离线包</h3><blockquote>
<p><a href="https://download.docker.com/linux/static/stable/x86_64/docker-20.10.6.tgz">https://download.docker.com/linux/static/stable/x86_64/docker-20.10.6.tgz</a></p>
</blockquote>
<p>说明，也可以从<a href="https://download.docker.com/linux/static/stable/%E7%BD%91%E5%9D%80%E4%B8%8B%E8%BD%BD%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC">https://download.docker.com/linux/static/stable/网址下载指定版本</a></p>
<blockquote>
<p><a href="https://github.com/Jrohy/docker-install/">https://github.com/Jrohy/docker-install/</a></p>
</blockquote>
<p><img src="https://s2.loli.net/2022/02/23/Oy87ghT9o4kWjzI.png" alt="image-20220223104857703"></p>
<blockquote>
<p>第三步：将下载好的资源放在一个目录，例如：</p>
</blockquote>
<p><img src="https://s2.loli.net/2022/02/23/DFiLwXbKZBTer56.png" alt="image-20220223104922341"></p>
<blockquote>
<p>第四步:在linux环境下，创建/root/setup/docker目录，然后拷贝下载好的资源到此目录（可通过MobaXterm工具直接上传到linux目录）,例如</p>
</blockquote>
<p><img src="https://s2.loli.net/2022/02/23/fg4mulHbJWBA6xi.png" alt="image-20220223104955242"></p>
<blockquote>
<p>第五步：执行安装操作</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入/root/setup/docker 文件夹</span><br><span class="line">cd /root/setup/docker</span><br><span class="line"></span><br><span class="line"># 为 install.sh添加执行权限</span><br><span class="line">chmod +x install.sh</span><br><span class="line"></span><br><span class="line"># 安装</span><br><span class="line">./install.sh -f docker-20.10.6.tgz</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第六步：安装成功以后，检查安装状态</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>

<h2 id="在线安装Docker"><a href="#在线安装Docker" class="headerlink" title="在线安装Docker"></a>在线安装Docker</h2><p>设置 yum 仓库地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">     --add-repo \</span><br><span class="line">     http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>更新 yum 缓存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum makecache fast #yum 是包管理器</span><br></pre></td></tr></table></figure>

<p>安装新版 docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<h1 id="安装MySql数据库"><a href="#安装MySql数据库" class="headerlink" title="安装MySql数据库"></a>安装MySql数据库</h1><p>第一步：在hub.<a href="https://so.csdn.net/so/search?q=docker&spm=1001.2101.3001.7020">docker</a>.com上搜索mysql镜像</p>
<p><img src="https://s2.loli.net/2022/02/23/L5QSCYm7Deu2Wab.png" alt="image-20220223105543400"></p>
<p>第二步：拉取指定版本的mysql，也可以指定拉取版本，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull mysql:8.0.23</span><br></pre></td></tr></table></figure>

<p>第三步：检查mysql镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p>第四步：启动运行mysql镜像 (docker run 用于启动一个容器)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /usr/local/docker/mysql/mysql-files:/var/lib/mysql-files \</span><br><span class="line">-v /usr/local/docker/mysql/conf:/etc/mysql \</span><br><span class="line">-v /usr/local/docker/mysql/logs:/var/log/mysql \</span><br><span class="line">-v /usr/local/docker/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:8.0.23</span><br></pre></td></tr></table></figure>

<p>假如安装过程中失败了，则可通过docker ps -a 查看以前的容器，假如已存在，则通过docker rm 镜像id 删除再重新安装即可。</p>
<h2 id="登陆mysql服务"><a href="#登陆mysql服务" class="headerlink" title="登陆mysql服务"></a>登陆mysql服务</h2><p>第一步：进入容器 (退出容器用exit)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker exec -it mysql bash</span><br></pre></td></tr></table></figure>

<p>第二步：登陆(默认密码root)，一定要先进入mysql容器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -proot</span><br></pre></td></tr></table></figure>

<h2 id="停止和启动mysql服务"><a href="#停止和启动mysql服务" class="headerlink" title="停止和启动mysql服务"></a>停止和启动mysql服务</h2><p>停止mysql服务（可选）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop mysql</span><br></pre></td></tr></table></figure>

<p>启动mysql服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start mysql</span><br></pre></td></tr></table></figure>

<p>假如希望查看mysql启动时的日志，可以执行 docker container logs mysql 这个指令。</p>
<p>设置mysql开机自启动（可选）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker update mysql --restart=always</span><br></pre></td></tr></table></figure>

<h1 id="安装Redis数据库"><a href="#安装Redis数据库" class="headerlink" title="安装Redis数据库"></a>安装Redis数据库</h1><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>第一步：下载镜像文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure>

<p>第二步：准备配置文件</p>
<p>创建redis配置文件目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/local/docker/redis01/conf</span><br></pre></td></tr></table></figure>

<p>在配置文件录下创建redis.conf配置文件(这个文件一定要创建，否在我们进行目录挂载时默认生成的是一个目录)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch /usr/local/docker/redis01/conf/redis.conf</span><br></pre></td></tr></table></figure>

<p>第三步：创建redis实例并启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker run -p 6379:6379 --name redis01 \</span><br><span class="line">-v /usr/local/docker/redis01/data:/data \</span><br><span class="line">-v /usr/local/docker/redis01/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf </span><br></pre></td></tr></table></figure>

<p>第四步：查看正在运行的进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<h2 id="访问redis服务器"><a href="#访问redis服务器" class="headerlink" title="访问redis服务器"></a>访问redis服务器</h2><p>第一步：控制台直接连接redis测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it redis01 bash</span><br></pre></td></tr></table></figure>

<p>第二步：检测redis 版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server  -v</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -v</span><br></pre></td></tr></table></figure>

<p>第三步：登录redis(默认不需要密码)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure>

<p>或者直接将上面的两个步骤合为一个步骤执行也可以，指令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it redis01 redis-cli</span><br></pre></td></tr></table></figure>

<h2 id="停止和启动redis服务"><a href="#停止和启动redis服务" class="headerlink" title="停止和启动redis服务"></a>停止和启动redis服务</h2><blockquote>
<p>停止redis服务？</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop redis01</span><br></pre></td></tr></table></figure>

<blockquote>
<p>启动redis服务？</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start redis01</span><br></pre></td></tr></table></figure>

<blockquote>
<p>重启 redis 服务？</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart redis01</span><br></pre></td></tr></table></figure>

<h1 id="安装Nginx代理"><a href="#安装Nginx代理" class="headerlink" title="安装Nginx代理"></a>安装<a href="https://so.csdn.net/so/search?q=Nginx&spm=1001.2101.3001.7020">Nginx</a>代理</h1><h2 id="安装步骤-1"><a href="#安装步骤-1" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>第一步：拉取nginx镜像 （从这里hub.docker.com去查找）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>

<p>第二步：查看images镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p>第三步:创建数据卷(这个对象会在宿主机直接创建一个目录)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume create nginx-vol</span><br></pre></td></tr></table></figure>

<p>说明:查看数据卷对应的宿主机目录,可以通过如下指令:</p>
<p>第四步：启动nginx服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name nginx  -p 80:80 -v nginx-vol:/etc/nginx -d nginx</span><br></pre></td></tr></table></figure>

<p>其中:/etc/nginx 为nginx容器启动时,nginx镜像文件默认的解压目录</p>
<p>说明:假如以后想修改nginx配置,可以直接去nginx-vol数据卷对应的目录去修改.</p>
<h2 id="访问nginx服务"><a href="#访问nginx服务" class="headerlink" title="访问nginx服务"></a>访问nginx服务</h2><p>进行访问检测，如图所示：</p>
<p><img src="https://s2.loli.net/2022/02/23/GHV96QJIsfjkyhl.png" alt="image-20220223110042196"></p>
<h2 id="停止和nginx服务"><a href="#停止和nginx服务" class="headerlink" title="停止和nginx服务"></a>停止和nginx服务</h2><blockquote>
<p>停止nginx服务</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop nginx</span><br></pre></td></tr></table></figure>

<blockquote>
<p>启动nginx服务</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start nginx</span><br></pre></td></tr></table></figure>

<blockquote>
<p>重启nginx服务</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart nginx</span><br></pre></td></tr></table></figure>

<h1 id="安装Nacos组件"><a href="#安装Nacos组件" class="headerlink" title="安装Nacos组件"></a>安装<a href="https://so.csdn.net/so/search?q=Nacos&spm=1001.2101.3001.7020">Nacos</a>组件</h1><h2 id="安装步骤-2"><a href="#安装步骤-2" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>第一步：拉取nacos（hub.docker.com）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull nacos/nacos-server:1.4.1</span><br></pre></td></tr></table></figure>

<p>第二步： mysql中执行nacos的sql脚本文件</p>
<p>1)将此文件nacos-mysql.sql(这个文件可从code服务器下载)拷贝到mysql容器的宿主机对应的挂载目录(可通过docker inspect mysql查看你mysql的挂载目录)</p>
<p>2)在linux环境下启动并登录mysql</p>
<p>进入mysql容器(前提是mysql已启动)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql bash</span><br></pre></td></tr></table></figure>

<p>登录mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p>3)通过source指令运行容器目录下的sql文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span>  /etc/mysql/nacos-mysql.sql  <span class="comment">#这里的/etc/mysql为容器中的一个目录(要选择你自己挂载的目录)</span></span><br></pre></td></tr></table></figure>

<p>例如:</p>
<p>第三步：创建并启动nacos容器(拷贝下面内容时,账号和密码要用自己宿主机ip,自己数据库的账号密码)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run  \</span><br><span class="line">-e TZ=&quot;Asia/Shanghai&quot; \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_DATABASE_NUM=1 \</span><br><span class="line">-e MYSQL_SERVICE_HOST=192.168.126.129 \</span><br><span class="line">-e MYSQL_SERVICE_PORT=3306 \</span><br><span class="line">-e MYSQL_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_SERVICE_PASSWORD=root \</span><br><span class="line">-e MYSQL_SERVICE_DB_NAME=nacos_config \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">--name nacos \</span><br><span class="line">--restart=always \</span><br><span class="line">-d nacos/nacos-server:1.4.1</span><br></pre></td></tr></table></figure>

<p>参数说明</p>
<ul>
<li>单节点模式<br>MODE=standalone</li>
<li>数据库地址<br>MYSQL_SERVICE_HOST</li>
<li>数据库用户名<br>MYSQL_SERVICE_USER</li>
<li>数据库密码<br>MYSQL_SERVICE_PASSWORD</li>
<li>需连接的数据库名称<br>MYSQL_SERVICE_DB_NAME</li>
<li>端口映射<br>-p 8848:8848</li>
<li>任意时候重启容器，开机就能自动启动容器（需设置docker为开机自启）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--restart=always</span><br></pre></td></tr></table></figure>

<p>第四步：检查nacos服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p>假如启动失败，检查启动日志，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker container logs nacos</span><br></pre></td></tr></table></figure>

<p>其中，nacos的启动日志在/home/nacos/logs/start.out文件中。</p>
<h2 id="访问nacos服务"><a href="#访问nacos服务" class="headerlink" title="访问nacos服务"></a>访问nacos服务</h2><p>启动nacos，然后在windows中输入<a href="http://ip:port/nacos方式进行访问测试">http://ip:port/nacos方式进行访问测试</a></p>
<p><img src="https://s2.loli.net/2022/02/23/jVeDicOoQR36tUs.png" alt="image-20220223110346950"></p>
<p>说明,nacos登录时,默认用户名和密码都是nacos.</p>
<h2 id="Nacos-与-MySQL-通讯分析"><a href="#Nacos-与-MySQL-通讯分析" class="headerlink" title="Nacos 与 MySQL 通讯分析"></a>Nacos 与 MySQL 通讯分析</h2><p><img src="https://s2.loli.net/2022/02/23/avjJVKiqDoMfYg9.png" alt="image-20220223110402874"></p>
<h2 id="停止和启动nacos服务"><a href="#停止和启动nacos服务" class="headerlink" title="停止和启动nacos服务"></a>停止和启动nacos服务</h2><blockquote>
<p>停止nacos服务</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop nacos</span><br></pre></td></tr></table></figure>

<blockquote>
<p>启动nacos服务</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start nacos</span><br></pre></td></tr></table></figure>

<blockquote>
<p>重启nacos服务</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart nacos</span><br></pre></td></tr></table></figure>

<h1 id="Docker服务基本操作"><a href="#Docker服务基本操作" class="headerlink" title="Docker服务基本操作"></a><a href="https://so.csdn.net/so/search?q=Docker&spm=1001.2101.3001.7020">Docker</a>服务基本操作</h1><h2 id="查看Docker状态"><a href="#查看Docker状态" class="headerlink" title="查看Docker状态"></a>查看Docker状态</h2><p>查看docker是否启动了,是否是运行状态.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/02/23/Hm3GuqTC7drV962.png" alt="image-20220223110508398"></p>
<h2 id="停止docker服务"><a href="#停止docker服务" class="headerlink" title="停止docker服务"></a>停止docker服务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>

<h2 id="启动docker服务"><a href="#启动docker服务" class="headerlink" title="启动docker服务"></a>启动docker服务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h2 id="设置Docker开机自启"><a href="#设置Docker开机自启" class="headerlink" title="设置Docker开机自启"></a>设置Docker开机自启</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>

<h2 id="禁用Docker开机自启"><a href="#禁用Docker开机自启" class="headerlink" title="禁用Docker开机自启"></a>禁用Docker开机自启</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl disable docker</span><br></pre></td></tr></table></figure>

<h2 id="重新启动Docker服务"><a href="#重新启动Docker服务" class="headerlink" title="重新启动Docker服务"></a>重新启动Docker服务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h2 id="查看Docker信息"><a href="#查看Docker信息" class="headerlink" title="查看Docker信息"></a>查看Docker信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>

<p>查看docker info中具体key的信息,例如:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info | grep <span class="string">&#x27;Docker Root Dir:&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Docker镜像加速"><a href="#Docker镜像加速" class="headerlink" title="Docker镜像加速"></a>Docker镜像加速</h2><p>由于国内网络问题，需要配置加速器来加速。修改配置文件 /etc/docker/daemon.json</p>
<p>下面命令直接生成文件 daemon.json</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">    &quot;http://hub-mirror.c.163.com&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;max-concurrent-downloads&quot;: 10,</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-level&quot;: &quot;warn&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;10m&quot;,</span><br><span class="line">    &quot;max-file&quot;: &quot;3&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">  &quot;data-root&quot;: &quot;/var/lib/docker&quot;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>说明：在执行如上指令时，保证你的登录用户为root管理员用户,并且设置好以后重启docker服务.</p>
<h1 id="Docker数据管理实践"><a href="#Docker数据管理实践" class="headerlink" title="Docker数据管理实践"></a><a href="https://so.csdn.net/so/search?q=Docker&spm=1001.2101.3001.7020">Docker</a>数据管理实践</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在容器中管理数据主要有两种方式：</p>
<ul>
<li>数据卷（Volumes）</li>
<li>挂载主机目录 (Bind mounts)</li>
</ul>
<h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>数据卷是一个可供一个或多个容器使用的特殊目录，可以在容器之间共享和重用，默认会一直存在，即使容器被删除。</p>
<h2 id="数据卷操作"><a href="#数据卷操作" class="headerlink" title="数据卷操作"></a>数据卷操作</h2><p>第一步：创建数据卷，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume create container-vol</span><br></pre></td></tr></table></figure>

<p>第二步：查看所有数据卷，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>

<p>查看指定 数据卷 的信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume inspect container-vol</span><br></pre></td></tr></table></figure>

<p>查询的结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/container-vol/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;container-vol&quot;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第三步：启动挂载数据卷的容器，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --mount source=container-vol,target=/root centos:7 bash</span><br></pre></td></tr></table></figure>

<p>或者采用如下简写方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -v container-vol:/root centos:7 bash</span><br></pre></td></tr></table></figure>

<p>-v <a href="https://so.csdn.net/so/search?q=container&spm=1001.2101.3001.7020">container</a>-vol:/root 把数据卷 container-vol 挂载到容器的 /root 目录</p>
<p>第四步：删除数据卷(如果数据卷被容器使用则无法删除)，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume rm container-vol</span><br></pre></td></tr></table></figure>

<p>清理无主数据卷</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure>

<h2 id="挂载主机目录"><a href="#挂载主机目录" class="headerlink" title="挂载主机目录"></a>挂载主机目录</h2><p>我们还可以在启动容器时，以目录直接挂载的方式进行数据操作，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -v /usr/app:/opt/app centos:7 bash</span><br></pre></td></tr></table></figure>

<p>其中：<br>1)/usr/app：为宿主机目录<br>2)/opt/app: 为启动容器的一个目录<br>3)-v 用于指定挂载目录，如果本地目录(宿主机目录)不存在， Docker 会自动为你按照挂载目录进行目录的创建。</p>
<p>例如:</p>
<p><img src="https://s2.loli.net/2022/02/23/bVu7AXePkBQv3zc.png" alt="image-20220223110917877"></p>
<p>查看挂载目录信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect 91a #91a 为容器id</span><br></pre></td></tr></table></figure>

<p>显示结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Type&quot;: &quot;bind&quot;,</span><br><span class="line">        &quot;Source&quot;: &quot;/usr/app&quot;,</span><br><span class="line">        &quot;Destination&quot;: &quot;/opt/app&quot;,</span><br><span class="line">        &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">        &quot;RW&quot;: true,</span><br><span class="line">        &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>JAVA</category>
        <category>Docker</category>
        <category>Redis</category>
        <category>Mysql</category>
        <category>Sentinel</category>
        <category>Nacos</category>
      </categories>
  </entry>
  <entry>
    <title>Go语言学习</title>
    <url>/2022/03/23/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>flume日志收集</title>
    <url>/2022/02/28/Hadoop%E5%85%A5%E9%97%A8-2/</url>
    <content><![CDATA[<h1 id="Apache-Flume"><a href="#Apache-Flume" class="headerlink" title="Apache Flume"></a>Apache Flume</h1><h2 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h2><p>Flume系统中核心的角色是<strong>agent</strong>，agent本身是一个Java进程，一般运行在日志收集节点。</p>
<p><strong>Agent</strong>：代理，flume集群中，每个节点都是一个agent，包含了flume单节点：接受、封装、承载、传输event到目的地的过程。这个过程中包含三部分（source、channel、sink）。</p>
<p>每一个agent相当于一个数据传递员，内部有三个组件：</p>
<p><strong>Source</strong>：采集源，用于跟数据源对接，以获取数据；</p>
<p><strong>Sink</strong>：下沉地，采集数据的传送目的，用于往下一级agent传递数据或者往 最终存储系统传递数据；</p>
<p><strong>Channel</strong>：agent内部的数据传输通道，用于从source将数据传递到sink；</p>
<h3 id="简单结构"><a href="#简单结构" class="headerlink" title="简单结构"></a>简单结构</h3><p>单个agent采集数据</p>
<p><img src="https://s2.loli.net/2022/02/28/ibskxN4BtafZ5eF.png" alt="image-20220228153822969"></p>
<h3 id="复杂结构"><a href="#复杂结构" class="headerlink" title="复杂结构"></a>复杂结构</h3><p>多级agent之间串联</p>
<p><img src="https://s2.loli.net/2022/02/28/P1qeFn9QDopwL7h.png" alt="image-20220228153920554"></p>
<h2 id="Flume安装部署"><a href="#Flume安装部署" class="headerlink" title="Flume安装部署"></a>Flume安装部署</h2><p>上传安装包到数据源所在节点上</p>
<p>然后解压 tar -zxvf apache-flume-1.9.0-bin.tar.gz</p>
<p>然后进入flume的目录，修改conf下的flume-env.sh，在里面配置JAVA_HOME</p>
<h2 id="flume初体验"><a href="#flume初体验" class="headerlink" title="flume初体验"></a>flume初体验</h2><p>进入conf目录下，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim http_logger.properties</span><br></pre></td></tr></table></figure>

<p>配置文件详解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># example.conf: A single-node Flume configuration</span><br><span class="line"></span><br><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type  =  http   #指定source的类型http</span><br><span class="line">a1.sources.r1.bind  =  0.0.0.0  #指定source的来源。一般为本机，被动接收</span><br><span class="line">a1.sources.r1.port  =  22222    #指定端口</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<p>在/opt/servers/flume-1.9.0/目录下执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/flume-ng agent -c conf -f conf/http_logger.properties -n a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure>

<p>注：</p>
<p>-c conf 指定flume自身的配置文件所在目录</p>
<p>-f conf/netcat-logger.con 指定我们所描述的采集方案</p>
<p>-n a1 指定我们这个agent的名字</p>
<p>flume启动后占用当前窗口，复制一个新的窗口在任意目录下执行以下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X POST -d &#x27;[&#123;&quot;headers&quot;:&#123;&quot;tester&quot;:&quot;tony&quot;&#125;,&quot;body&quot;:&quot;hello http flume&quot;&#125;]&#x27; http://hadoop01:22222</span><br></pre></td></tr></table></figure>

<h1 id="练习案例"><a href="#练习案例" class="headerlink" title="练习案例"></a>练习案例</h1><h2 id="Source练习"><a href="#Source练习" class="headerlink" title="Source练习"></a>Source练习</h2><p><a href="https://flume.apache.org/releases/content/1.9.0/FlumeUserGuide.html">https://flume.apache.org/releases/content/1.9.0/FlumeUserGuide.html</a></p>
<h3 id="avro"><a href="#avro" class="headerlink" title="avro"></a>avro</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim avro_logger.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1.sources  =  r1</span><br><span class="line">a1.sinks  =  k1</span><br><span class="line">a1.channels  =  c1</span><br><span class="line"> </span><br><span class="line">a1.sources.r1.type  =  avro</span><br><span class="line">a1.sources.r1.bind  =  0.0.0.0</span><br><span class="line">a1.sources.r1.port  =  22222</span><br><span class="line"> </span><br><span class="line">a1.sinks.k1.type  =  logger</span><br><span class="line"> </span><br><span class="line">a1.channels.c1.type  =  memory</span><br><span class="line">a1.channels.c1.capacity  =  1000</span><br><span class="line">a1.channels.c1.transactionCapacity  =  100</span><br><span class="line"> </span><br><span class="line">a1.sources.r1.channels  =  c1</span><br><span class="line">a1.sinks.k1.channel  =  c1</span><br></pre></td></tr></table></figure>

<p>在/opt/data/flumedata下创建文件log.txt并编辑添加数据</p>
<p>在flume安装目录下的conf目录下执行命令启动agent</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/flume-ng agent -c conf -f conf/avro_logger.conf -n a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure>

<p>模拟发送avro在flume的bin目录下执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/flume-ng avro-client -c conf -H hadoop01 -p 22222 -F /opt/data/flumedata/log.txt</span><br></pre></td></tr></table></figure>



<h3 id="Spooldir"><a href="#Spooldir" class="headerlink" title="Spooldir"></a>Spooldir</h3><p>spooldir：source源，用于监控文件目录</p>
<p>注意：</p>
<p>1）对于文件中要源源不断写入的这情况，不适合使用spooldir。</p>
<p>2）对于已经监控的文件，如果有相同文件名再次放入到监控目录中，此时服务会报错，并不再进行监控。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1.sources  =  r1</span><br><span class="line">a1.sinks  =  k1</span><br><span class="line">a1.channels  =  c1</span><br><span class="line"> </span><br><span class="line">a1.sources.r1.type  =  spooldir </span><br><span class="line">a1.sources.r1.spoolDir = /opt/data/spooldir</span><br><span class="line"> </span><br><span class="line">a1.sinks.k1.type  =  logger</span><br><span class="line"> </span><br><span class="line">a1.channels.c1.type  =  memory</span><br><span class="line">a1.channels.c1.capacity  =  1000</span><br><span class="line">a1.channels.c1.transactionCapacity  =  100</span><br><span class="line"> </span><br><span class="line">a1.sources.r1.channels  =  c1</span><br><span class="line">a1.sinks.k1.channel  =  c1</span><br></pre></td></tr></table></figure>

<ol>
<li><p>在/home/data目录下创建文件夹spooldir</p>
</li>
<li><p>启动</p>
</li>
<li><p>在spooldir中vim文件并添加内容并保存。发现flume日志中打印编辑内容。</p>
<h3 id="采集目录到HDFS"><a href="#采集目录到HDFS" class="headerlink" title="采集目录到HDFS"></a>采集目录到HDFS</h3></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">##注意：不能往监控目中重复丢同名文件</span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line">a1.sources.r1.spoolDir = /opt/data/spooldir</span><br><span class="line">#a1.sources.r1.fileHeader = true</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = /flume/events/%y-%m-%d/%H%M/</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = events-</span><br><span class="line">a1.sinks.k1.hdfs.round = true</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 10</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = minute</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 3</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 20</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 5</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1</span><br><span class="line">#获取时间</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line">#生成的文件类型，默认是Sequencefile，可用DataStream，则为普通文本</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>

<h3 id="参数解析："><a href="#参数解析：" class="headerlink" title="参数解析："></a>参数解析：</h3><p>· rollInterval</p>
<p>默认值：30</p>
<p>hdfs sink间隔多长将临时文件滚动成最终目标文件，单位：秒；</p>
<p>如果设置成0，则表示不根据时间来滚动文件；</p>
<p>注：滚动（roll）指的是，hdfs sink将临时文件重命名成最终目标文件，并新打开一个临时文件来写入数据；</p>
<h4 id="·-rollSize"><a href="#·-rollSize" class="headerlink" title="· rollSize"></a>· rollSize</h4><p>默认值：1024</p>
<p>当临时文件达到该大小（单位：bytes）时，滚动成目标文件；</p>
<p>如果设置成0，则表示不根据临时文件大小来滚动文件；</p>
<h4 id="·-rollCount"><a href="#·-rollCount" class="headerlink" title="· rollCount"></a>· rollCount</h4><p>默认值：10</p>
<p>当events数据达到该数量时候，将临时文件滚动成目标文件；</p>
<p>如果设置成0，则表示不根据events数据来滚动文件；</p>
<h4 id="·-round"><a href="#·-round" class="headerlink" title="· round"></a>· round</h4><p>默认值：false</p>
<p>对文件目录进行滚动。</p>
<p>是否启用时间上的“舍弃”，这里的“舍弃”，类似于“四舍五入”。</p>
<h4 id="·-roundValue"><a href="#·-roundValue" class="headerlink" title="· roundValue"></a>· roundValue</h4><p>默认值：1</p>
<p>时间上进行“舍弃”的值；</p>
<h4 id="·-roundUnit"><a href="#·-roundUnit" class="headerlink" title="· roundUnit"></a>· roundUnit</h4><p>默认值：seconds</p>
<p>时间上进行“舍弃”的单位，包含：second,minute,hour</p>
<table>
<thead>
<tr>
<th align="left">Alias</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%{host}</td>
<td align="left">Substitute value of event header named “host”. Arbitrary header names are supported.</td>
</tr>
<tr>
<td align="left">%t</td>
<td align="left">Unix time in milliseconds</td>
</tr>
<tr>
<td align="left">%a</td>
<td align="left">locale’s short weekday name (Mon, Tue, …)</td>
</tr>
<tr>
<td align="left">%A</td>
<td align="left">locale’s full weekday name (Monday, Tuesday, …)</td>
</tr>
<tr>
<td align="left">%b</td>
<td align="left">locale’s short month name (Jan, Feb, …)</td>
</tr>
<tr>
<td align="left">%B</td>
<td align="left">locale’s long month name (January, February, …)</td>
</tr>
<tr>
<td align="left">%c</td>
<td align="left">locale’s date and time (Thu Mar 3 23:05:25 2005)</td>
</tr>
<tr>
<td align="left">%d</td>
<td align="left">day of month (01)</td>
</tr>
<tr>
<td align="left">%e</td>
<td align="left">day of month without padding (1)</td>
</tr>
<tr>
<td align="left">%D</td>
<td align="left">date; same as %m/%d/%y</td>
</tr>
<tr>
<td align="left">%H</td>
<td align="left">hour (00..23)</td>
</tr>
<tr>
<td align="left">%I</td>
<td align="left">hour (01..12)</td>
</tr>
<tr>
<td align="left">%j</td>
<td align="left">day of year (001..366)</td>
</tr>
<tr>
<td align="left">%k</td>
<td align="left">hour ( 0..23)</td>
</tr>
<tr>
<td align="left">%m</td>
<td align="left">month (01..12)</td>
</tr>
<tr>
<td align="left">%n</td>
<td align="left">month without padding (1..12)</td>
</tr>
<tr>
<td align="left">%M</td>
<td align="left">minute (00..59)</td>
</tr>
<tr>
<td align="left">%p</td>
<td align="left">locale’s equivalent of am or pm</td>
</tr>
<tr>
<td align="left">%s</td>
<td align="left">seconds since 1970-01-01 00:00:00 UTC</td>
</tr>
<tr>
<td align="left">%S</td>
<td align="left">second (00..59)</td>
</tr>
<tr>
<td align="left">%y</td>
<td align="left">last two digits of year (00..99)</td>
</tr>
<tr>
<td align="left">%Y</td>
<td align="left">year (2010)</td>
</tr>
<tr>
<td align="left">%z</td>
<td align="left">+hhmm numeric timezone (for example, -0400)</td>
</tr>
<tr>
<td align="left">%[localhost]</td>
<td align="left">Substitute the hostname of the host where the agent is running</td>
</tr>
<tr>
<td align="left">%[IP]</td>
<td align="left">Substitute the IP address of the host where the agent is running</td>
</tr>
<tr>
<td align="left">%[FQDN]</td>
<td align="left">Substitute the canonical hostname of the host where the agent is running</td>
</tr>
</tbody></table>
<h3 id="采集文件到HDFS"><a href="#采集文件到HDFS" class="headerlink" title="采集文件到HDFS"></a>采集文件到HDFS</h3><p>exec只能指定一个文件进行监控，监控的是源源不断写入的文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Name the components on this agent</span><br><span class="line">#a1.sources = r1 r2 r3</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line">a1.sources.r1.command = tail -F /opt/data/exec/test.log</span><br><span class="line"></span><br><span class="line">#a1.sources.r2.type = exec</span><br><span class="line">#a1.sources.r2.command = tail -F /opt/data/exec/test2.log</span><br><span class="line"></span><br><span class="line">#a1.sources.r3.type = exec</span><br><span class="line">#a1.sources.r3.command = tail -F /opt/data/exec/test3.log</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = /flume/exec/%y-%m-%d/%H%M/</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = events-</span><br><span class="line">a1.sinks.k1.hdfs.round = true</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 10</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = minute</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 3</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 20</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 5</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line">#生成的文件类型，默认是Sequencefile，可用DataStream，则为普通文本</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">#a1.sources.r2.channels = c1</span><br><span class="line">#a1.sources.r3.channels = c1</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>

<h5 id="开发shell脚本定时追加文件内容"><a href="#开发shell脚本定时追加文件内容" class="headerlink" title="开发shell脚本定时追加文件内容"></a>开发shell脚本定时追加文件内容</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /opt/servers/shells/</span><br><span class="line">cd  /opt/servers/shells/</span><br><span class="line">vim exec.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line"> date &gt;&gt; /opt/data/exec/test.log;</span><br><span class="line">  sleep 0.5;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>启动脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh /opt/servers/shells/exec.sh</span><br></pre></td></tr></table></figure>

<h3 id="TailDir的使用"><a href="#TailDir的使用" class="headerlink" title="TailDir的使用"></a>TailDir的使用</h3><p>同时监控多个文件的持续写入</p>
<p>固定文件：1.txt 2.txt</p>
<p>持续写入文件：test.log 3.txt</p>
<p>source:taildir</p>
<p>sink:hdfs</p>
<p>channel:memory</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.positionFile = /opt/data/taildir/taildir_position.json</span><br><span class="line">a1.sources.r1.filegroups = f1 f2</span><br><span class="line">a1.sources.r1.filegroups.f1 = /opt/data/taildir/a/.*txt.*</span><br><span class="line">a1.sources.r1.filegroups.f2 = /opt/data/taildir/b/test.log</span><br><span class="line">a1.sources.r1.maxBatchCount = 1000</span><br><span class="line">a1.sources.r1.fileHeader = true</span><br><span class="line">a1.sources.r1.headers.f1.aaa = bbb</span><br><span class="line">a1.sources.r1.headers.f2.headerKey1 = value2</span><br><span class="line">a1.sources.r1.headers.f2.headerKey2 = value2-2</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 10000</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sources.r1.channels = c1</span><br></pre></td></tr></table></figure>

<h1 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h1><p>Hadoop01：JDK、Hadoop、Flume</p>
<p>Hadoop02：JDK、Flume</p>
<p>Hadoop03：JDK、Flume</p>
<p>只需要将hadoop01安装好的Flume文件夹发送到02 03两个节点相应的位置即可。</p>
<h2 id="案例练习"><a href="#案例练习" class="headerlink" title="案例练习"></a>案例练习</h2><h3 id="多级"><a href="#多级" class="headerlink" title="多级"></a>多级</h3><p>Hadoop01</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1.sources  =  r1</span><br><span class="line">a1.sinks  =  k1</span><br><span class="line">a1.channels  =  c1</span><br><span class="line"> </span><br><span class="line">a1.sources.r1.type  =  http</span><br><span class="line">a1.sources.r1.bind  =  0.0.0.0</span><br><span class="line">a1.sources.r1.port  =  22222</span><br><span class="line"> </span><br><span class="line">a1.sinks.k1.type  =  avro</span><br><span class="line">a1.sinks.k1.hostname  =  hadoop02</span><br><span class="line">a1.sinks.k1.port  =  22222</span><br><span class="line"> </span><br><span class="line">a1.channels.c1.type  =  memory</span><br><span class="line">a1.channels.c1.capacity  =  1000</span><br><span class="line">a1.channels.c1.transactionCapacity  =  100</span><br><span class="line"> </span><br><span class="line">a1.sources.r1.channels  =  c1</span><br><span class="line">a1.sinks.k1.channel  =  c1</span><br></pre></td></tr></table></figure>

<p>hadoop02</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1.sources  =  r1</span><br><span class="line">a1.sinks  =  k1 </span><br><span class="line">a1.channels  =  c1</span><br><span class="line"> </span><br><span class="line">a1.sources.r1.type  =  avro</span><br><span class="line">a1.sources.r1.bind  =  0.0.0.0</span><br><span class="line">a1.sources.r1.port  =  22222</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type  =  avro</span><br><span class="line">a1.sinks.k1.hostname  =  hadoop03</span><br><span class="line">a1.sinks.k1.port  =  22222</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">a1.channels.c1.type  =  memory </span><br><span class="line">a1.channels.c1.capacity  =  1000</span><br><span class="line">a1.channels.c1.transactionCapacity  =  100</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels  =  c1</span><br><span class="line">a1.sinks.k1.channel  =  c1</span><br></pre></td></tr></table></figure>

<p>hadoop03</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1.sources  =  r1</span><br><span class="line">a1.sinks  =  k1</span><br><span class="line">a1.channels  =  c1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type  =  avro</span><br><span class="line">a1.sources.r1.bind  =  0.0.0.0</span><br><span class="line">a1.sources.r1.port  =  22222</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type  =  logger</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type  =  memory</span><br><span class="line">a1.channels.c1.capacity  =  1000</span><br><span class="line">a1.channels.c1.transactionCapacity  =  100</span><br><span class="line"> </span><br><span class="line">a1.sources.r1.channels  =  c1</span><br><span class="line">a1.sinks.k1.channel  =  c1</span><br></pre></td></tr></table></figure>

<p>按照顺序从hadoop03启动节点</p>
<h3 id="扇入-fan-in"><a href="#扇入-fan-in" class="headerlink" title="扇入(fan-in)"></a>扇入(fan-in)</h3><p>Hadoop01</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1.sources  =  r1</span><br><span class="line">a1.sinks  =  k1</span><br><span class="line">a1.channels  =  c1</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">a1.sources.r1.type  =  http</span><br><span class="line">a1.sources.r1.bind  =  0.0.0.0</span><br><span class="line">a1.sources.r1.port  =  22222</span><br><span class="line">  </span><br><span class="line">a1.sinks.k1.type  =  avro</span><br><span class="line">a1.sinks.k1.hostname  =  hadoop03</span><br><span class="line">a1.sinks.k1.port  =  22222</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type  =  memory</span><br><span class="line">a1.channels.c1.capacity  =  1000</span><br><span class="line">a1.channels.c1.transactionCapacity  =  100</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels  =  c1</span><br><span class="line">a1.sinks.k1.channel  =  c1</span><br></pre></td></tr></table></figure>

<p>Hadoop02</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1.sources  =  r1</span><br><span class="line">a1.sinks  =  k1</span><br><span class="line">a1.channels  =  c1</span><br><span class="line"> </span><br><span class="line">a1.sources.r1.type  =  http</span><br><span class="line">a1.sources.r1.bind  =  0.0.0.0</span><br><span class="line">a1.sources.r1.port  =  22222</span><br><span class="line"> </span><br><span class="line">a1.sinks.k1.type  =  avro</span><br><span class="line">a1.sinks.k1.hostname  =  hadoop03</span><br><span class="line">a1.sinks.k1.port  =  22222</span><br><span class="line"> </span><br><span class="line">a1.channels.c1.type  =  memory</span><br><span class="line"> </span><br><span class="line">a1.channels.c1.capacity  =  1000</span><br><span class="line"> </span><br><span class="line">a1.channels.c1.transactionCapacity  =  100</span><br><span class="line"> </span><br><span class="line">a1.sources.r1.channels  =  c1</span><br><span class="line">a1.sinks.k1.channel  =  c1</span><br></pre></td></tr></table></figure>

<p>Hadoop03</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1.sources  =  r1 </span><br><span class="line">a1.sinks  =  k1 </span><br><span class="line">a1.channels  =  c1</span><br><span class="line"> </span><br><span class="line">a1.sources.r1.type  =  avro</span><br><span class="line">a1.sources.r1.bind  =  0.0.0.0</span><br><span class="line">a1.sources.r1.port  =  22222</span><br><span class="line"> </span><br><span class="line">a1.sinks.k1.type  =  logger</span><br><span class="line"> </span><br><span class="line">a1.channels.c1.type  =  memory</span><br><span class="line">a1.channels.c1.capacity  =  1000</span><br><span class="line">a1.channels.c1.transactionCapacity  =  100</span><br><span class="line"> </span><br><span class="line">a1.sources.r1.channels  =  c1</span><br><span class="line">a1.sinks.k1.channel  =  c1</span><br></pre></td></tr></table></figure>

<h3 id="扇出-fanout"><a href="#扇出-fanout" class="headerlink" title="扇出(fanout)"></a>扇出(fanout)</h3><p>Hadoop01</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1.sources  =  r1</span><br><span class="line">a1.sinks  =  k1 k2</span><br><span class="line">a1.channels  =  c1 c2</span><br><span class="line"> </span><br><span class="line">a1.sources.r1.type  =  http</span><br><span class="line">a1.sources.r1.bind  =  0.0.0.0</span><br><span class="line">a1.sources.r1.port  =  22222</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type  =  avro</span><br><span class="line">a1.sinks.k1.hostname  =  hadoop02</span><br><span class="line">a1.sinks.k1.port  =  22222</span><br><span class="line"> </span><br><span class="line">a1.sinks.k2.type  =  avro</span><br><span class="line">a1.sinks.k2.hostname  =  hadoop03</span><br><span class="line">a1.sinks.k2.port  =  22222</span><br><span class="line"> </span><br><span class="line">a1.channels.c1.type  =  memory</span><br><span class="line">a1.channels.c1.capacity  =  1000</span><br><span class="line">a1.channels.c1.transactionCapacity  =  100</span><br><span class="line"> </span><br><span class="line">a1.channels.c2.type  =  memory</span><br><span class="line">a1.channels.c2.capacity  =  1000</span><br><span class="line">a1.channels.c2.transactionCapacity  =  100</span><br><span class="line"> </span><br><span class="line">a1.sources.r1.channels  =  c1 c2</span><br><span class="line">a1.sinks.k1.channel  =  c1</span><br><span class="line">a1.sinks.k2.channel  =  c2</span><br></pre></td></tr></table></figure>

<p>Hadoop02</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1.sources  =  r1</span><br><span class="line">a1.sinks  =  k1</span><br><span class="line">a1.channels  =  c1</span><br><span class="line"> </span><br><span class="line">a1.sources.r1.type  =  avro</span><br><span class="line">a1.sources.r1.bind  =  0.0.0.0</span><br><span class="line">a1.sources.r1.port  =  22222</span><br><span class="line"> </span><br><span class="line">a1.sinks.k1.type  =  logger</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type  =  memory</span><br><span class="line">a1.channels.c1.capacity  =  1000</span><br><span class="line">a1.channels.c1.transactionCapacity  =  100</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels  =  c1</span><br><span class="line">a1.sinks.k1.channel  =  c1</span><br></pre></td></tr></table></figure>

<p>Hadoop03</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1.sources  =  r1</span><br><span class="line">a1.sinks  =  k1</span><br><span class="line">a1.channels  =  c1</span><br><span class="line"> </span><br><span class="line">a1.sources.r1.type  =  avro</span><br><span class="line">a1.sources.r1.bind  =  0.0.0.0</span><br><span class="line">a1.sources.r1.port  =  22222</span><br><span class="line"> </span><br><span class="line">a1.sinks.k1.type  =  logger</span><br><span class="line"> </span><br><span class="line">a1.channels.c1.type  =  memory</span><br><span class="line">a1.channels.c1.capacity  =  1000</span><br><span class="line">a1.channels.c1.transactionCapacity  =  100</span><br><span class="line"> </span><br><span class="line">a1.sources.r1.channels  =  c1</span><br><span class="line">a1.sinks.k1.channel  =  c1</span><br></pre></td></tr></table></figure>

<h1 id="离线数据分析"><a href="#离线数据分析" class="headerlink" title="离线数据分析"></a>离线数据分析</h1><h1 id="Hive离线分析"><a href="#Hive离线分析" class="headerlink" title="Hive离线分析"></a>Hive离线分析</h1><h2 id="回顾业务流程"><a href="#回顾业务流程" class="headerlink" title="回顾业务流程"></a>回顾业务流程</h2><p><img src="https://s2.loli.net/2022/03/02/MDmQA8WsljweP3u.png" alt="image-20220302150910132"></p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="1-启动Hadoop"><a href="#1-启动Hadoop" class="headerlink" title="1.启动Hadoop"></a>1.启动Hadoop</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure>

<h3 id="修改flume配置文件"><a href="#修改flume配置文件" class="headerlink" title="修改flume配置文件"></a>修改flume配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1.sources  =  r1</span><br><span class="line">a1.sinks  =  k1</span><br><span class="line">a1.channels  =  c1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type  =  avro</span><br><span class="line">a1.sources.r1.bind  =  0.0.0.0</span><br><span class="line">a1.sources.r1.port  =  22222</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://hadoop01:8020/flux/reportTime=%Y-%m-%d</span><br><span class="line">a1.sinks.k1.hdfs.fileType=DataStream</span><br><span class="line">a1.sinks.k1.serializer = text</span><br><span class="line">a1.sinks.k1.serializer.appendNewline = false</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type  =  memory</span><br><span class="line">a1.channels.c1.capacity  =  1000</span><br><span class="line">a1.channels.c1.transactionCapacity  =  100</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels  =  c1</span><br><span class="line">a1.sinks.k1.channel  =  c1</span><br></pre></td></tr></table></figure>

<h3 id="启动flume"><a href="#启动flume" class="headerlink" title="启动flume"></a>启动flume</h3><p>进入flume的根目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/flume-ng agent -c conf/ -f conf/jtlog_hdfs.conf -n a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Java</category>
        <category>大数据</category>
        <category>Hadoop</category>
        <category>flume</category>
      </categories>
  </entry>
  <entry>
    <title>JAVASCRIPT基础</title>
    <url>/2021/12/27/JAVASCRIPT%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JAVASCRIPT</category>
      </categories>
  </entry>
  <entry>
    <title>JAVA加密算法简介</title>
    <url>/2021/12/31/JAVA%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV134411T7rq">看雪视频</a></p>
<h2 id="URL编码算法"><a href="#URL编码算法" class="headerlink" title="URL编码算法:"></a>URL编码算法:</h2><p>URL编码规则:</p>
<p><img src="https://s2.loli.net/2021/12/31/9t8xMgmaNolh1Sq.png" alt="image-20211231095801508"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String original = <span class="string">&quot;URL 参数&quot;</span>;</span><br><span class="line">String encoded = URLEncoder.encode(original, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">System.out.println(encoded);</span><br><span class="line">String ori = <span class="keyword">new</span> String(URLDecoder.decode(encoded, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">System.out.println(ori);</span><br></pre></td></tr></table></figure>

<h2 id="Base64编码"><a href="#Base64编码" class="headerlink" title="Base64编码:"></a>Base64编码:</h2><p><img src="https://s2.loli.net/2021/12/31/SDmYX4sdPZg5UO9.png" alt="image-20211231103138487"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String original = <span class="string">&quot;URL 参数&quot;</span>;</span><br><span class="line">String b64 = Base64.getEncoder().encodeToString(original.getBytes());</span><br><span class="line">System.out.println(b64);</span><br><span class="line">String ori = <span class="keyword">new</span> String(Base64.getDecoder().decode(b64),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">System.out.println(ori);</span><br></pre></td></tr></table></figure>

<h2 id="MD5算法"><a href="#MD5算法" class="headerlink" title="MD5算法"></a>MD5算法</h2><p><img src="https://s2.loli.net/2021/12/31/8hoUbXVPnWC5R7K.png" alt="image-20211231103314919"></p>
<p><img src="https://s2.loli.net/2021/12/31/qkXZRalIgzjMiUF.png" alt="image-20211231105456295"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String original = <span class="string">&quot;URL 参数&quot;</span>;</span><br><span class="line">MessageDigest md = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    md=MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">md.update(original.getBytes());</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;%032x&quot;</span>, <span class="keyword">new</span> BigInteger(<span class="number">1</span>, md.digest())));</span><br></pre></td></tr></table></figure>

<h4 id="加盐数据"><a href="#加盐数据" class="headerlink" title="加盐数据"></a>加盐数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String original = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">String salt = <span class="string">&quot;Random salt&quot;</span>;</span><br><span class="line">MessageDigest md = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    md=MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">md.update((salt+original).getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;%032x&quot;</span>, <span class="keyword">new</span> BigInteger(<span class="number">1</span>, md.digest())));</span><br></pre></td></tr></table></figure>

<h2 id="SHA-1加密算法"><a href="#SHA-1加密算法" class="headerlink" title="SHA-1加密算法"></a>SHA-1加密算法</h2><p><img src="https://s2.loli.net/2021/12/31/YaLQGlTI4O9MUkn.png" alt="image-20211231143424988"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String s = &quot;SHA1摘要算法测试&quot;;</span><br><span class="line">MessageDigest md = null;</span><br><span class="line">try &#123;</span><br><span class="line">    md=MessageDigest.getInstance(&quot;SHA-256&quot;);//SHA-256,md5,SHA-1，RipeMD160</span><br><span class="line">&#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">md.update(s.getBytes(&quot;UTF-8&quot;));</span><br><span class="line">byte[] r = md.digest();</span><br><span class="line">System.out.println(String.format(&quot;%x&quot;, new BigInteger(1, r)).length());</span><br></pre></td></tr></table></figure>

<h2 id="HmacMD5算法："><a href="#HmacMD5算法：" class="headerlink" title="HmacMD5算法："></a>HmacMD5算法：</h2><p><img src="https://s2.loli.net/2021/12/31/FKa1u4f93SRTs5O.png" alt="image-20211231151944093"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String algorithm = &quot;HmacSHA1&quot;;</span><br><span class="line">String data=&quot;helloworld&quot;;</span><br><span class="line">KeyGenerator keyGen = null;</span><br><span class="line">keyGen = KeyGenerator.getInstance(algorithm);</span><br><span class="line">SecretKey skey = keyGen.generateKey();</span><br><span class="line">Mac mac = null;</span><br><span class="line">mac = Mac.getInstance(algorithm);</span><br><span class="line">mac.init(skey);</span><br><span class="line">mac.update(data.getBytes(&quot;UTF-8&quot;));</span><br><span class="line">byte[] result = mac.doFinal();</span><br><span class="line">System.out.println(String.format(&quot;%x&quot;,new BigInteger(1,result)));</span><br></pre></td></tr></table></figure>

<h2 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法:"></a>对称加密算法:</h2><p><img src="https://s2.loli.net/2021/12/31/TBzAEOkXGZ29mCh.png" alt="image-20211231152023524"></p>
<p><img src="https://s2.loli.net/2021/12/31/PGgpCNm4S2zYQxq.png" alt="image-20211231152049436"></p>
<p><img src="https://s2.loli.net/2021/12/31/knf2PUJNjX8BAuw.png" alt="image-20211231152108989"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] key = <span class="string">&quot;1234567890abcdef&quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">String message=<span class="string">&quot;Hello,world! encrypted using AES&quot;</span>;</span><br><span class="line"><span class="keyword">byte</span>[] data = message.getBytes(StandardCharsets.UTF_8);</span><br><span class="line"><span class="keyword">byte</span>[] encrypted=encrypted(key, data);</span><br><span class="line">System.out.println(Base64.getEncoder().encodeToString(encrypted));</span><br><span class="line"><span class="keyword">byte</span>[] decrypted = decrypted(key, encrypted);</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(decrypted,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] encrypted(<span class="keyword">byte</span>[] key,<span class="keyword">byte</span>[] data) <span class="keyword">throws</span> NoSuchPaddingException, NoSuchAlgorithmException, BadPaddingException, IllegalBlockSizeException, InvalidKeyException &#123;</span><br><span class="line">        String CIPHER_NAME = <span class="string">&quot;AES/ECB/PKCS5Padding&quot;</span>;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(CIPHER_NAME);</span><br><span class="line">        SecretKeySpec keySpec = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, keySpec);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] decrypted(<span class="keyword">byte</span>[] key,<span class="keyword">byte</span>[] data) <span class="keyword">throws</span> NoSuchPaddingException, NoSuchAlgorithmException, BadPaddingException, IllegalBlockSizeException, InvalidKeyException &#123;</span><br><span class="line">        String CIPHER_NAME = <span class="string">&quot;AES/ECB/PKCS5Padding&quot;</span>;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(CIPHER_NAME);</span><br><span class="line">        SecretKeySpec keySpec = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, keySpec);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="口令加密算法"><a href="#口令加密算法" class="headerlink" title="口令加密算法"></a>口令加密算法</h2><p><img src="https://s2.loli.net/2021/12/31/64gyFvG1iBxEJVP.png" alt="image-20211231155250957"></p>
<p><img src="https://s2.loli.net/2021/12/31/c7QGiHVYmFBXjUe.png" alt="image-20211231155328590"></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>JAVA多线程</title>
    <url>/2022/01/19/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="1-sleep、wait、notify的作用"><a href="#1-sleep、wait、notify的作用" class="headerlink" title="1.sleep、wait、notify的作用"></a>1.sleep、wait、notify的作用</h2><p>sleep用于线程的休眠，可以指定休眠的时长，如果在一个同步块中，sleep不会释放锁。</p>
<p>wait是Object提供的一个方法，可以对象来进行线程的休眠，如果在一个同步块中，wait会释放锁。</p>
<p>notify也是Object提供的一个方法，可以唤醒处于wait状态的线程，如果在一个同步块中，notify不会释放锁。</p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * sleep wait notify演示</span><br><span class="line"> */</span><br><span class="line">public class SleepWaitNotifyTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        final Object lock = new Object();</span><br><span class="line"></span><br><span class="line">        /*Thread thread1 = new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                synchronized (lock) &#123;</span><br><span class="line">                    System.out.println(&quot;线程1开始执行逻辑&quot;);</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(5000);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(&quot;线程1执行完毕&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        Thread thread2 = new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                synchronized (lock) &#123;</span><br><span class="line">                    System.out.println(&quot;线程2开始执行逻辑&quot;);</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(5000);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(&quot;线程2执行完毕&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread2.start();*/</span><br><span class="line">        Thread thread3 = new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                synchronized (lock) &#123;</span><br><span class="line">                    System.out.println(&quot;线程3开始执行逻辑&quot;);</span><br><span class="line">                    try &#123;</span><br><span class="line">                        lock.wait(); //wait释放锁</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(&quot;线程3执行完毕&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread3.start();</span><br><span class="line"></span><br><span class="line">        Thread thread4 = new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                synchronized (lock) &#123;</span><br><span class="line">                    System.out.println(&quot;线程4开始执行逻辑&quot;);</span><br><span class="line">                    lock.notify(); //notify不释放锁</span><br><span class="line">                    System.out.println(&quot;线程4执行完毕&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread4.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-java中的线程池"><a href="#2-java中的线程池" class="headerlink" title="2.java中的线程池"></a>2.java中的线程池</h3><p>java中的线程池有4种：<br>动态的线程池:newCachedThreadPool<br>固定线程数的线程池：newFixedThreadPool<br>固定只有一条线程的线程池：newSingleThreadExecutorPool<br>以固定频率执行的线程池：newScheduledThreadPool<br>一般来说，这4种线程池都不使用，一般使用ThreadPoolExecutor来自定义线程池。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 创建一个线程数量是动态的线程池</span><br><span class="line"> */</span><br><span class="line">public class NewCachedThreadPool &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        //向线程池中扔20个任务并打印</span><br><span class="line">        for (int i = 1; i &lt;= 20; i++) &#123;</span><br><span class="line">            final int temp = i;</span><br><span class="line">            executorService.execute(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(3_000);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+&quot;：第&quot;+temp+&quot;个任务执行结束！&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;主线程执行完毕！！！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建一个固定线程数为5的线程池</span><br><span class="line"> */</span><br><span class="line">public class NewFixedThreadPool &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(5);</span><br><span class="line"></span><br><span class="line">        //向线程池中扔20个任务并打印</span><br><span class="line">        for (int i = 1; i &lt;= 20; i++) &#123;</span><br><span class="line">            final int temp = i;</span><br><span class="line">            executorService.execute(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(3_000);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+&quot;：第&quot;+temp+&quot;个任务执行结束！&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;主线程执行完毕！！！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建一个以固定频率执行的线程池</span><br><span class="line"> */</span><br><span class="line">public class NewScheduledThreadPool &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        //创建一个以固定频率执行的线程池</span><br><span class="line">        ScheduledThreadPoolExecutor scheduledThreadPool =</span><br><span class="line">                (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(5);</span><br><span class="line"></span><br><span class="line">        //向线程池中扔5个任务按照某种频率来执行</span><br><span class="line">        for (int i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">            final int temp = i;</span><br><span class="line">            scheduledThreadPool.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    String threadName = Thread.currentThread().getName();</span><br><span class="line">                    System.out.println(threadName + &quot;：开始执行……&quot;);</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(5_000);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(threadName + &quot;：第&quot; + temp + &quot;个任务执行结束！&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, 5, 10, TimeUnit.SECONDS); //初始延迟时间、间隔周期、单位</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;主线程执行完毕！！！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建一个固定只有一条线程的线程池</span><br><span class="line"> */</span><br><span class="line">public class NewSingleThreadExecutorPool &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建一个固定只有一条线程的线程池</span><br><span class="line">		ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">        //向线程池中扔20个任务并打印</span><br><span class="line">        for (int i = 1; i &lt;= 20; i++) &#123;</span><br><span class="line">            final int temp = i;</span><br><span class="line">            executorService.execute(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(3_000);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+&quot;：第&quot;+temp+&quot;个任务执行结束！&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;主线程执行完毕！！！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="16-ThreadPoolExcutor各参数的含义"><a href="#16-ThreadPoolExcutor各参数的含义" class="headerlink" title="16.ThreadPoolExcutor各参数的含义"></a>16.ThreadPoolExcutor各参数的含义</h3><p>corePoolSize：核心线程数，指线程池不关闭就一直存活的线程数。maximumPoolSize：最大线程数，指线程池能同时存活的最大线程数。<br>keepAliveTime：空闲的线程保留的时间，指非核心线程空闲的最大时间，超过这个时间就会将这些空闲的非核心线程销毁掉。<br>unit：空闲线程的保留时间单位。<br>workQueue：工作的阻塞队列，存储等待执行的任务。<br>threadFactory：线程工厂，指定了线程池中的线程的创建方式和销毁方式。<br>handler：拒绝策略，指线程池在达到上限（达到最大线程数且任务队列也满了）的情况下的执行逻辑。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 自定义线程池</span><br><span class="line"> */</span><br><span class="line">public class ThreadPoolExecutorTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        createThreadPool();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建线程池方法</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static void createThreadPool() &#123;</span><br><span class="line">        //创建一个阻塞队列</span><br><span class="line">        BlockingQueue&lt;Runnable&gt; blcQ = new ArrayBlockingQueue&lt;&gt;(1);</span><br><span class="line">        //创建线程工厂</span><br><span class="line">        ThreadFactory threadFactory = new MyThreadFactory();</span><br><span class="line">        //创建拒绝策略</span><br><span class="line">        RejectedExecutionHandler handler = new ThreadPoolExecutor.AbortPolicy();</span><br><span class="line">        ThreadPoolExecutor threadPool = new ThreadPoolExecutor(1,</span><br><span class="line">                2, 5L, TimeUnit.SECONDS, blcQ,</span><br><span class="line">                threadFactory, handler);</span><br><span class="line">        System.out.println(&quot;线程池创建完毕---------------------------------&quot;);</span><br><span class="line"></span><br><span class="line">        //任务1</span><br><span class="line">        threadPool.execute(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                sleepSeconds(5, &quot;任务1&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //任务2</span><br><span class="line">        threadPool.execute(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                sleepSeconds(5, &quot;任务2&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //任务3</span><br><span class="line">        threadPool.execute(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                sleepSeconds(1, &quot;任务3&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //任务4</span><br><span class="line">        threadPool.execute(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                sleepSeconds(1, &quot;任务4&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 当未处理完的任务数大于核心线程数且小于等于核心数与任务队列的大小之和</span><br><span class="line">         * &#123;corePoolSize &lt;toExecuteRunnableCount&lt;=(corePoolSize+ workQueueSize)&#125;时，</span><br><span class="line">         * 线程池不会再新创建线程去处理任务队列中的任务，而是等到核心线程将自己的任务执行完后去执行。</span><br><span class="line">         *</span><br><span class="line">         * 当未处理完的任务数大于核心线程数与任务队列的大小之和</span><br><span class="line">         * 且小于最大线程数与任务队列大小之和&#123;(corePoolSize+ workQueueSize)</span><br><span class="line">         * &lt;toExecuteRunnableCount &lt;=(maximumPoolSize+ workQueueSize)&#125;时，</span><br><span class="line">         * 线程池会再新创建线程去处理任务队列中的任务。</span><br><span class="line">         *</span><br><span class="line">         * 当未处理完的任务数大于最大线程数与任务队列大小之和</span><br><span class="line">         * &#123; toExecuteRunnableCount &gt;( maximumPoolSize+ workQueueSize)&#125;时，</span><br><span class="line">         * 线程池会将多出来的任务去执行拒绝策略。</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 模拟线程执行任务的方法</span><br><span class="line">     *</span><br><span class="line">     * @param seconds</span><br><span class="line">     * @param jobName</span><br><span class="line">     */</span><br><span class="line">    private static void sleepSeconds(int seconds, String jobName) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;正在执行任务:&quot; + jobName);</span><br><span class="line">            Thread.sleep(seconds * 1000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 线程工厂</span><br><span class="line">     */</span><br><span class="line">    static class MyThreadFactory implements ThreadFactory &#123;</span><br><span class="line"></span><br><span class="line">        private AtomicInteger threadNum = new AtomicInteger();</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public Thread newThread(Runnable r) &#123;</span><br><span class="line">            threadNum.getAndIncrement();//threadNum++</span><br><span class="line">            return new Thread(r, &quot;线程池中的线程&quot; + threadNum + &quot;：&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">最大核心线程数设置为：CPU的核心数 * 2 +1 最为合适</span><br></pre></td></tr></table></figure>

<p><strong>直接提交队列</strong>：设置为SynchronousQueue队列，SynchronousQueue是一个特殊的BlockingQueue，它没有容量，没执行一个插入操作就会阻塞，需要再执行一个删除操作才会被唤醒，反之每一个删除操作也都要等待对应的插入操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pool = new ThreadPoolExecutor(1, 2, 1000, TimeUnit.MILLISECONDS, new SynchronousQueue&lt;Runnable&gt;(),Executors.defaultThreadFactory(),new ThreadPoolExecutor.AbortPolicy());</span><br></pre></td></tr></table></figure>

<p><strong>有界的任务队列</strong>：有界的任务队列可以使用ArrayBlockingQueue实现，如下所示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pool = new ThreadPoolExecutor(1, 2, 1000, TimeUnit.MILLISECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(10),Executors.defaultThreadFactory(),new ThreadPoolExecutor.AbortPolicy());</span><br></pre></td></tr></table></figure>

<p><strong>无界的任务队列</strong>：有界任务队列可以使用LinkedBlockingQueue实现，如下所示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pool = new ThreadPoolExecutor(1, 2, 1000, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;(),Executors.defaultThreadFactory(),new ThreadPoolExecutor.AbortPolicy());</span><br></pre></td></tr></table></figure>

<p><strong>优先任务队列：</strong>优先任务队列通过PriorityBlockingQueue实现，下面我们通过一个例子演示下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pool = new ThreadPoolExecutor(1, 2, 1000, TimeUnit.MILLISECONDS, new PriorityBlockingQueue&lt;Runnable&gt;(),Executors.defaultThreadFactory(),new ThreadPoolExecutor.AbortPolicy());</span><br></pre></td></tr></table></figure>

<p><strong>拒绝策略</strong></p>
<p><strong>1、AbortPolicy策略：该策略会直接抛出异常，阻止系统正常工作；</strong></p>
<p><strong>2、CallerRunsPolicy策略：如果线程池的线程数量达到上限，该策略会把任务队列中的任务放在调用者线程当中运行；</strong></p>
<p><strong>3、DiscardOledestPolicy策略：该策略会丢弃任务队列中最老的一个任务，也就是当前任务队列中最先被添加进去的，马上要被执行的那个任务，并尝试再次提交；</strong></p>
<p><strong>4、DiscardPolicy策略：该策略会默默丢弃无法处理的任务，不予任何处理。当然使用此策略，业务场景中需允许任务的丢失；</strong></p>
<p>**以上内置的策略均实现了*<em>RejectedExecutionHandler接口，*<em>当然你也可以自己扩展RejectedExecutionHandler接口，定义自己的拒绝策略，我们看下示例代码：</em></em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//自定义拒绝策略</span><br><span class="line">       pool = new ThreadPoolExecutor(1, 2, 1000, TimeUnit.MILLISECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(5),</span><br><span class="line">               Executors.defaultThreadFactory(), new RejectedExecutionHandler() &#123;</span><br><span class="line">           public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) &#123;</span><br><span class="line">               System.out.println(r.toString()+&quot;执行了拒绝策略&quot;);</span><br><span class="line">               </span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure>

<p><strong>ThreadFactory自定义线程创建</strong></p>
<p>线程池中线程就是通过ThreadPoolExecutor中的ThreadFactory，线程工厂创建的。那么通过自定义ThreadFactory，可以按需要对线程池中创建的线程进行一些特殊的设置，如命名、优先级等，下面代码我们通过ThreadFactory对线程池中创建的线程进行记录与命名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//自定义线程工厂</span><br><span class="line">        pool = new ThreadPoolExecutor(2, 4, 1000, TimeUnit.MILLISECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(5),</span><br><span class="line">                new ThreadFactory() &#123;</span><br><span class="line">            public Thread newThread(Runnable r) &#123;</span><br><span class="line">                System.out.println(&quot;线程&quot;+r.hashCode()+&quot;创建&quot;);</span><br><span class="line">                //线程命名</span><br><span class="line">                Thread th = new Thread(r,&quot;threadPool&quot;+r.hashCode());</span><br><span class="line">                return th;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, new ThreadPoolExecutor.CallerRunsPolicy());</span><br></pre></td></tr></table></figure>

<p><strong>1、beforeExecute：线程池中任务运行前执行</strong></p>
<p><strong>2、afterExecute：线程池中任务运行完毕后执行</strong></p>
<p><strong>3、terminated：线程池退出后执行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//实现自定义接口</span><br><span class="line">        pool = new ThreadPoolExecutor(2, 4, 1000, TimeUnit.MILLISECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(5),</span><br><span class="line">                new ThreadFactory() &#123;</span><br><span class="line">            public Thread newThread(Runnable r) &#123;</span><br><span class="line">                System.out.println(&quot;线程&quot;+r.hashCode()+&quot;创建&quot;);</span><br><span class="line">                //线程命名</span><br><span class="line">                Thread th = new Thread(r,&quot;threadPool&quot;+r.hashCode());</span><br><span class="line">                return th;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, new ThreadPoolExecutor.CallerRunsPolicy()) &#123;</span><br><span class="line">    </span><br><span class="line">            protected void beforeExecute(Thread t,Runnable r) &#123;</span><br><span class="line">                System.out.println(&quot;准备执行：&quot;+ ((ThreadTask)r).getTaskName());</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            protected void afterExecute(Runnable r,Throwable t) &#123;</span><br><span class="line">                System.out.println(&quot;执行完毕：&quot;+((ThreadTask)r).getTaskName());</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            protected void terminated() &#123;</span><br><span class="line">                System.out.println(&quot;线程池退出&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">pool.shutdown();</span><br></pre></td></tr></table></figure>



<h3 id="超卖问题（四种办法）"><a href="#超卖问题（四种办法）" class="headerlink" title="超卖问题（四种办法）"></a>超卖问题（四种办法）</h3><h4 id="Good-java类："><a href="#Good-java类：" class="headerlink" title="Good.java类："></a>Good.java类：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Goods implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private Integer id; //id</span><br><span class="line"></span><br><span class="line">    private String name; //商品名称</span><br><span class="line"></span><br><span class="line">    private Integer store; //库存</span><br><span class="line"></span><br><span class="line">    private Integer version; //版本号</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getStore() &#123;</span><br><span class="line">        return store;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStore(Integer store) &#123;</span><br><span class="line">        this.store = store;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getVersion() &#123;</span><br><span class="line">        return version;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setVersion(Integer version) &#123;</span><br><span class="line">        this.version = version;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="RedisDistributeLock-java："><a href="#RedisDistributeLock-java：" class="headerlink" title="RedisDistributeLock.java："></a>RedisDistributeLock.java：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class RedisDistributeLock &#123;</span><br><span class="line"></span><br><span class="line">    // 分布式锁前缀名</span><br><span class="line">    private static final String REDIS_LOCK_PREFIX = &quot;redis_lock_&quot;;</span><br><span class="line"></span><br><span class="line">    // 成功标识</span><br><span class="line">    private static final Long SUCCESS = 1L;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加锁</span><br><span class="line">     *</span><br><span class="line">     * @param lockName       锁的名字，用于区分不同业务，最终加锁的key为分布式锁前缀+锁的名字</span><br><span class="line">     * @param acquireTimeOut 请求超时时间，单位毫秒，一个线程不能一直尝试加锁，这样会导致请求的堆积，约定一个时间，在该时间内尝试加锁是有效的，否则不给予加锁</span><br><span class="line">     * @param expireTime     分布式锁过期时间，单位毫秒，防止死锁的出现，需要设置一个兜底的过期时间</span><br><span class="line">     * @return 唯一值，返回一个唯一值作为存入Redis的value值，用于解锁使用，这个值可以是UUID，数据库唯一ID或成的Code</span><br><span class="line">     */</span><br><span class="line">    public String getLock(String lockName, Long acquireTimeOut, Long expireTime) &#123;</span><br><span class="line">        // 生成当前线程的唯一值</span><br><span class="line">        String uniqueValue = UUID.randomUUID().toString();</span><br><span class="line">        // 设置当前线程可以获取锁的最大毫秒数</span><br><span class="line">        long endTime = System.currentTimeMillis() + acquireTimeOut;</span><br><span class="line">        // 如果当前系统时间还没有超过可以获取锁的最大时间，那么就尝试获取锁</span><br><span class="line">        while (System.currentTimeMillis() &lt; endTime) &#123;</span><br><span class="line">            // 使用lua脚本来实现redis原子性操作，这个命令表示设置key，如果key存在则设置失败返回0，否则成功返回1</span><br><span class="line">            String luaScript = &quot;if (redis.call(&#x27;setnx&#x27;, KEYS[1], ARGV[1]) == 1) then&quot; +</span><br><span class="line">                    &quot;    return redis.call(&#x27;expire&#x27;, KEYS[1], ARGV[2]);&quot; +</span><br><span class="line">                    &quot;else&quot; +</span><br><span class="line">                    &quot;    return 0;&quot; +</span><br><span class="line">                    &quot;end&quot;;</span><br><span class="line"></span><br><span class="line">            RedisScript&lt;Long&gt; redisScript = new DefaultRedisScript&lt;&gt;(luaScript, Long.class);</span><br><span class="line">            // 尝试加锁</span><br><span class="line">            Object result = redisTemplate.execute(redisScript, Collections.singletonList(REDIS_LOCK_PREFIX + lockName), uniqueValue, String.valueOf(expireTime / 1000));</span><br><span class="line">            // 如果设置key成功，代表加锁成功</span><br><span class="line">            if (SUCCESS.equals(result)) &#123;</span><br><span class="line">                return uniqueValue;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                // 如果未拿到锁，那么立刻重新获取不是很好，稍等片刻再继续尝试</span><br><span class="line">                Thread.sleep(100);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 超过了当前线程可以获取锁的时间，那么直接返回</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解锁</span><br><span class="line">     *</span><br><span class="line">     * @param lockName    锁的名字，用于区分不同业务，最终加锁的key为分布式锁前缀+锁的名字</span><br><span class="line">     * @param uniqueValue 唯一值，存入Redis时的value值，用于区分解锁的线程是否是加锁线程</span><br><span class="line">     */</span><br><span class="line">    public void releaseLock(String lockName, String uniqueValue) &#123;</span><br><span class="line">        if (!StringUtils.isEmpty(lockName) &amp;&amp; !StringUtils.isEmpty(uniqueValue)) &#123;</span><br><span class="line">            // 判断下唯一值是否相同，目的是自己的锁自己解，不要把别的线程锁给解了</span><br><span class="line">            String luaScript = &quot;if (redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1]) then&quot; +</span><br><span class="line">                    &quot;    return redis.call(&#x27;del&#x27;, KEYS[1]);&quot; +</span><br><span class="line">                    &quot;else&quot; +</span><br><span class="line">                    &quot;    return 0;&quot; +</span><br><span class="line">                    &quot;end&quot;;</span><br><span class="line">            RedisScript&lt;Long&gt; redisScript = new DefaultRedisScript&lt;&gt;(luaScript, Long.class);</span><br><span class="line">            // 执行解锁lua脚本</span><br><span class="line">            redisTemplate.execute(redisScript, Collections.singletonList(REDIS_LOCK_PREFIX + lockName), uniqueValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="GoodsService-java类"><a href="#GoodsService-java类" class="headerlink" title="GoodsService.java类:"></a>GoodsService.java类:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 商品业务类</span><br><span class="line"> */</span><br><span class="line">@Service</span><br><span class="line">public class GoodsService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private GoodsMapper goodsMapper;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    RedisDistributeLock redisDistributeLock;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 1.减库存 会出现超卖</span><br><span class="line">     *</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Transactional</span><br><span class="line">    public int updateByPrimaryKeyStore(Integer id) &#123;</span><br><span class="line">        System.out.println(new Date());</span><br><span class="line"></span><br><span class="line">        int update = 0;</span><br><span class="line"></span><br><span class="line">        //查一下商品库存</span><br><span class="line">        Goods goods = goodsMapper.selectByPrimaryKey(id);</span><br><span class="line"></span><br><span class="line">        //判断库存是否大于0</span><br><span class="line">        if (goods.getStore() &gt; 0) &#123;</span><br><span class="line">            //库存大于0，可以减库存</span><br><span class="line">            update = goodsMapper.updateByPrimaryKeyStore(id);</span><br><span class="line"></span><br><span class="line">            if (update &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;减库存成功，可以下订单&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.println(&quot;减库存失败，不能下订单&quot;);</span><br><span class="line">                throw new RuntimeException(&quot;减库存失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //返回结果</span><br><span class="line">       return update;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 2.减库存，解决超卖问题（事务提交以及排它锁机制，双重判断）</span><br><span class="line">     *</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">   /* @Transactional</span><br><span class="line">    public int updateByPrimaryKeyStore(Integer id) &#123;</span><br><span class="line">        System.out.println(new Date());</span><br><span class="line"></span><br><span class="line">        int update = 0;</span><br><span class="line">        //查一下商品库存，共享锁，其他事务也可以读</span><br><span class="line">        Goods goods = goodsMapper.selectByPrimaryKey(id);</span><br><span class="line"></span><br><span class="line">        //判断库存是否大于0</span><br><span class="line"></span><br><span class="line">        if (goods.getStore() &gt; 0) &#123;</span><br><span class="line">            //B</span><br><span class="line">            //库存大于0，可以减库存，排它锁，其他事务只能等当前事务提交或回滚之后释放了排他锁，其他事务才可以执行</span><br><span class="line">            update = goodsMapper.updateByPrimaryKeyStore(id);</span><br><span class="line"></span><br><span class="line">            if (update &gt; 0) &#123;</span><br><span class="line">                //查一下商品库存</span><br><span class="line">                Goods goods2 = goodsMapper.selectByPrimaryKey(id);</span><br><span class="line"></span><br><span class="line">                if (goods2.getStore() &gt;= 0) &#123;</span><br><span class="line">                    System.out.println(&quot;减库存成功，可以下订单&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    System.out.println(&quot;减库存失败，不能下订单&quot;);</span><br><span class="line">                    throw new RuntimeException(&quot;减库存失败&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.println(&quot;减库存失败，不能下订单&quot;);</span><br><span class="line">                throw new RuntimeException(&quot;减库存失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //返回结果</span><br><span class="line">        return update;</span><br><span class="line">    &#125;*/</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 减库存 没有事务，基于乐观锁解决超卖问题，给数据库的表加一个version字段用于版本控制</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    /*public int updateByPrimaryKeyStore(Integer id) &#123;</span><br><span class="line">        System.out.println(new Date());</span><br><span class="line"></span><br><span class="line">        int update = 0;</span><br><span class="line">        //查一下商品库存</span><br><span class="line">        Goods goods = goodsMapper.selectByPrimaryKey(id);</span><br><span class="line"></span><br><span class="line">        //判断库存是否大于0</span><br><span class="line">        if (goods.getStore() &gt; 0) &#123;</span><br><span class="line">            //库存大于0，可以减库存</span><br><span class="line">            update = goodsMapper.updateByPrimaryKeyStoreByVersion(id, goods.getVersion());</span><br><span class="line">            if (update &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;减库存成功，可以下订单&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.println(&quot;减库存失败，不能下订单&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //返回结果</span><br><span class="line">        return update;</span><br><span class="line">    &#125;*/</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 4.减库存，基于悲观锁 + 事务 解决超卖问题</span><br><span class="line">     *</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    /*@Transactional</span><br><span class="line">    public int updateByPrimaryKeyStore(Integer id) &#123;</span><br><span class="line">        System.out.println(new Date());</span><br><span class="line"></span><br><span class="line">        int update = 0;</span><br><span class="line">        //查一下商品库存，悲观锁加在查询上面</span><br><span class="line">        Goods goods = goodsMapper.selectByPrimaryKeyByForUpdate(id);</span><br><span class="line"></span><br><span class="line">        //判断库存是否大于0</span><br><span class="line">        if (goods.getStore() &gt; 0) &#123;</span><br><span class="line">            //库存大于0，可以减库存，排它锁</span><br><span class="line">            update = goodsMapper.updateByPrimaryKeyStore(id);</span><br><span class="line">            if (update &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;减库存成功，可以下订单&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.println(&quot;减库存失败，不能下订单&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;减库存失败，不能下订单&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //返回结果</span><br><span class="line">        return update;</span><br><span class="line">    &#125;*/</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 5.减库存，使用分布式锁</span><br><span class="line">     *</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    /*public int updateByPrimaryKeyStore(Integer id) &#123;</span><br><span class="line">        System.out.println(new Date());</span><br><span class="line"></span><br><span class="line">        int update = 0;</span><br><span class="line">        //查一下商品库存</span><br><span class="line">        Goods goods = goodsMapper.selectByPrimaryKey(id);</span><br><span class="line">        String uniqueValue = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //判断库存是否大于0</span><br><span class="line">            if (goods.getStore() &gt; 0) &#123;</span><br><span class="line">                //获取分布式锁</span><br><span class="line">                uniqueValue = redisDistributeLock.getLock(&quot;store&quot;,</span><br><span class="line">                        5000L, 8000L);</span><br><span class="line">                if(uniqueValue != null)&#123;</span><br><span class="line">                    //再次查一下商品库存</span><br><span class="line">                    Goods goods2 = goodsMapper.selectByPrimaryKey(id);</span><br><span class="line">                    if (goods2.getStore() &gt; 0) &#123;</span><br><span class="line">                        update = goodsMapper.updateByPrimaryKeyStore(id);</span><br><span class="line">                        if (goods2.getStore() &gt;= 0) &#123;</span><br><span class="line">                            System.out.println(&quot;减库存成功，可以下订单&quot;);</span><br><span class="line">                            return update;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;减库存失败，不能下订单&quot;);</span><br><span class="line">            //返回结果</span><br><span class="line">            return update;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            //释放分布式锁</span><br><span class="line">            redisDistributeLock.releaseLock(&quot;store&quot;, uniqueValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;*/</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="OversoldApplication-java类"><a href="#OversoldApplication-java类" class="headerlink" title="OversoldApplication.java类:"></a>OversoldApplication.java类:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableTransactionManagement //开启事务</span><br><span class="line">public class OversoldApplication &#123;</span><br><span class="line"></span><br><span class="line">    //倒计算器</span><br><span class="line">    private static CountDownLatch  countDownLatch = new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(OversoldApplication.class, args);</span><br><span class="line">        GoodsService goodsService = context.getBean(&quot;goodsService&quot;, GoodsService.class);</span><br><span class="line">        //创建一个确定的线程池</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(16);</span><br><span class="line">        for (int i = 0; i &lt; 16; i++) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(100);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //提交线程到线程池去执行</span><br><span class="line">            executorService.submit(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //等待，线程就位，但是不运行</span><br><span class="line">                        countDownLatch.await();</span><br><span class="line">                        System.out.println(&quot;Thread:&quot; + Thread.currentThread().getName() + &quot;, time: &quot; + System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">                        //执行业务代码</span><br><span class="line">                        goodsService.updateByPrimaryKeyStore(1);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //倒计算器 -1，那么16个线程就同时开始执行，那么就达到并发效果</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="GoodsMapper类"><a href="#GoodsMapper类" class="headerlink" title="GoodsMapper类:"></a>GoodsMapper类:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 商品Mapper接口</span><br><span class="line"> */</span><br><span class="line">@Mapper</span><br><span class="line">public interface GoodsMapper &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据Id查询商品信息</span><br><span class="line">     *</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    Goods selectByPrimaryKey(Integer id);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据悲观锁查询商品信息</span><br><span class="line">     *</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    Goods selectByPrimaryKeyByForUpdate(Integer id);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据商品id更新库存</span><br><span class="line">     *</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    int updateByPrimaryKeyStore(Integer id);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据商品id和版本号更新库存</span><br><span class="line">     *</span><br><span class="line">     * @param id</span><br><span class="line">     * @param version</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    int updateByPrimaryKeyStoreByVersion(Integer id, Integer version);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



















]]></content>
      <categories>
        <category>JAVA</category>
        <category>多线程</category>
      </categories>
  </entry>
  <entry>
    <title>JSP学习记录</title>
    <url>/2022/05/06/JSP%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--        引入jsp的依赖--&gt;</span><br><span class="line">        &lt;!--引入JSP解析依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;jstl&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/webapp&lt;/directory&gt;</span><br><span class="line">                &lt;targetPath&gt;META-INF/resources&lt;/targetPath&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.4.2.RELEASE&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!-- 工程主入口--&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.spring.BootApplication&lt;/mainClass&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure>

<h2 id="设置配置文件"><a href="#设置配置文件" class="headerlink" title="设置配置文件"></a>设置配置文件</h2><h4 id="创建文件夹webapp在Java下"><a href="#创建文件夹webapp在Java下" class="headerlink" title="创建文件夹webapp在Java下"></a>创建文件夹webapp在Java下</h4><h4 id="application-xml"><a href="#application-xml" class="headerlink" title="application.xml"></a>application.xml</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 应用名称</span><br><span class="line">spring.application.name=web-rtc</span><br><span class="line"></span><br><span class="line"># 应用服务 WEB 访问端口</span><br><span class="line">server.port=8080</span><br><span class="line">spring.mvc.view.prefix=/</span><br><span class="line">spring.mvc.view.suffix=.jsp</span><br></pre></td></tr></table></figure>



<h1 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">自定义标签</span><br><span class="line">传统方式(JSP 1.1):实现tag接口javax.servlet.jsp.tagext.Tag    doStartTag()</span><br><span class="line">简单方式(JSP2.0):实现SimpleTag接口javax.servlet.jsp.tagext.SimpleTag   doTag()</span><br><span class="line">步骤：a.编写标签处理类 b.编写标签描述符 c.导入并使用</span><br><span class="line">a.编写标签处理类</span><br><span class="line">如果在jsp编译阶段 发现自定义标签，就会交给doStartTag()或doTag()</span><br><span class="line">b.编写标签描述符 tld</span><br><span class="line">myTag.tld导入WEB-INF或子目录下/WEB-INF/abc/(特例排除，不能是/WEB-INF/lib、WEB-INF/classes)</span><br><span class="line">使用：引入具体要使用的.tld文件</span><br><span class="line">&lt;%--</span><br><span class="line">a.空标签 &lt;body-content&gt;empty&lt;/body-content&gt;为空没有标签体&lt;d:foreach /&gt;</span><br><span class="line">b.带标签体  &lt;d:foreach&gt;xxx&lt;/d:foreach&gt;</span><br><span class="line">c.带属性 &lt;d:foreach 属性名=&quot;属性值&quot;&gt;xxx&lt;/d:foreach&gt;</span><br><span class="line">d.嵌套    &lt;d:foreach&gt;</span><br><span class="line">&lt;d:foreach&gt;xxx&lt;/d:foreach&gt;</span><br><span class="line">&lt;/d:foreach&gt;--%&gt;</span><br><span class="line">Tag接口：doStartTag:标签处理类的核心方法(标签体的执行逻辑)</span><br><span class="line">该方法有以下两个返回值：0/1</span><br><span class="line">int SKIP_BODY=0;标签体不会被执行</span><br><span class="line">int EVAL_BODY_INCLUDE =1;标签体会被执行</span><br><span class="line">doEndTag():标签执行完毕后的方法，例如可以让标签执行完成后再执行一次</span><br><span class="line">int SKIP_PAGE = 5;后面的JSP页面内容不会被执行</span><br><span class="line">int EVAL_PAGE = 6;后面的JSP页面内容会被继续执行</span><br><span class="line">Tag接口的执行流程:</span><br><span class="line"></span><br><span class="line">JSP引擎将遇到自定义标签时，首先创建标签处理器类的实例对象，然后按照JSP规范定义的通信规则依次调用它的方法。</span><br><span class="line">1、public void setPageContext(PageContext pc)， JSP引擎实例化标签处理器后，将调用setPageContext方法将JSP页面的pageContext对象传递给标签处理器，标签处理器以后可以通过这个pageContext对象与JSP页面进行通信。</span><br><span class="line">2、public void setParent(Tag t)，setPageContext方法执行完后，WEB容器接着调用的setParent方法将当前标签的父标签传递给当前标签处理器，如果当前标签没有父标签，则传递给setParent方法的参数值为null。</span><br><span class="line">3、public int doStartTag()，调用了setPageContext方法和setParent方法之后，WEB容器执行到自定义标签的开始标记时，就会调用标签处理器的doStartTag方法。</span><br><span class="line">4、public int doEndTag()，WEB容器执行完自定义标签的标签体后，就会接着去执行自定义标签的结束标记，此时，WEB容器会去调用标签处理器的doEndTag方法。</span><br><span class="line">5、public void release()，通常WEB容器执行完自定义标签后，标签处理器会驻留在内存中，为其它请求服务器，直至停止web应用时，web容器才会调用release方法。</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/05/07/Spf1CETVsMYK2rw.png" alt="image-20220507101157153"></p>
<p>javax.servlet.jsp.tagext.IterationTag接口：（是Tag的子接口)</p>
<p>如果有循环：IterationTags,</p>
<p>没有循环：Tag</p>
<p>IterationTags接口中存在以下方法：</p>
<p>doAfterBody()：当标签体执行完毕后的曹祖，通过返回值决定，（int EVAL_BODY_AGAIN = 2;）要么重复执行，（int EVAL_BODY_AGAIN ！= 2;）要么不执行。</p>
<h2 id="实例循环遍历三次"><a href="#实例循环遍历三次" class="headerlink" title="实例循环遍历三次"></a>实例循环遍历三次</h2><p><img src="https://s2.loli.net/2022/05/07/drg3aL9tJX6F81q.png" alt="image-20220507102535185"></p>
<p>首先定义标签类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class DateTimeTag extends TagSupport &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 5897918233973977850L;</span><br><span class="line">    private int num;//执行次数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //执行标签</span><br><span class="line">    @Override</span><br><span class="line">    public int doStartTag() throws JspException &#123;</span><br><span class="line">        return EVAL_BODY_INCLUDE;//先执行一次</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int doAfterBody() &#123;</span><br><span class="line">        num--;</span><br><span class="line">        return num&gt;0?EVAL_BODY_AGAIN:-1;//重复执行</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void release() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在/WEB-INF/tld下定义tags.tld文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;taglib version=&quot;2.0&quot; xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot;</span><br><span class="line">        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">        xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd&quot;&gt;</span><br><span class="line">    &lt;tlib-version&gt;1.0&lt;/tlib-version&gt;</span><br><span class="line">    &lt;short-name&gt;mytag&lt;/short-name&gt;</span><br><span class="line">    &lt;uri&gt;http://mytag&lt;/uri&gt;</span><br><span class="line">    &lt;tag&gt;</span><br><span class="line">        &lt;name&gt;mytag&lt;/name&gt;</span><br><span class="line">        &lt;tag-class&gt;com.jt.demo.tag.DateTimeTag&lt;/tag-class&gt;</span><br><span class="line">        &lt;body-content&gt;JSP&lt;/body-content&gt;</span><br><span class="line">        &lt;attribute&gt;</span><br><span class="line">            &lt;name&gt;num&lt;/name&gt;</span><br><span class="line">            &lt;required&gt;true&lt;/required&gt;</span><br><span class="line">        &lt;/attribute&gt;</span><br><span class="line">    &lt;/tag&gt;</span><br><span class="line">&lt;/taglib&gt;</span><br></pre></td></tr></table></figure>

<p>在zidianyibiaoqian.jsp中引用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; pageEncoding=&quot;UTF-8&quot; %&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;mytag&quot; uri=&quot;http://mytag&quot; %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;mytag:mytag num=&quot;3&quot;&gt;</span><br><span class="line">    hello</span><br><span class="line">&lt;/mytag:mytag&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="BodyTag接口使用"><a href="#BodyTag接口使用" class="headerlink" title="BodyTag接口使用"></a>BodyTag接口使用</h2><p><img src="https://s2.loli.net/2022/05/07/mLfT5cgtXR8qFOP.png" alt="image-20220507104949242"></p>
<p>编写ToUpperCase类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ToUpperCase extends BodyTagSupport &#123;</span><br><span class="line">    //告诉程序，我要改变hello为大写，即将doStartTag()的返回值设置成EVAL_BODY_BUFFERED</span><br><span class="line">    //获取并修改</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int doEndTag() throws JspException &#123;</span><br><span class="line">        String content = getBodyContent().getString();//hello</span><br><span class="line">        content= content.toUpperCase();</span><br><span class="line">        try &#123;</span><br><span class="line">            bodyContent.getEnclosingWriter().write(content);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return super.doEndTag();//默认6，标签执行完成后是否执行其他的JSP</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写tags.tld文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;taglib version=&quot;2.0&quot; xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot;</span><br><span class="line">        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">        xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd&quot;&gt;</span><br><span class="line">    &lt;tlib-version&gt;1.0&lt;/tlib-version&gt;</span><br><span class="line">    &lt;short-name&gt;mytag&lt;/short-name&gt;</span><br><span class="line">    &lt;uri&gt;http://mytag&lt;/uri&gt;</span><br><span class="line">    &lt;tag&gt;</span><br><span class="line">        &lt;name&gt;mytag&lt;/name&gt;</span><br><span class="line">        &lt;tag-class&gt;com.jt.demo.tag.DateTimeTag&lt;/tag-class&gt;</span><br><span class="line">        &lt;body-content&gt;JSP&lt;/body-content&gt;</span><br><span class="line">        &lt;attribute&gt;</span><br><span class="line">            &lt;name&gt;num&lt;/name&gt;</span><br><span class="line">            &lt;required&gt;true&lt;/required&gt;</span><br><span class="line">        &lt;/attribute&gt;</span><br><span class="line">    &lt;/tag&gt;</span><br><span class="line">    &lt;tag&gt;</span><br><span class="line">        &lt;name&gt;myToUpperCase&lt;/name&gt;</span><br><span class="line">        &lt;tag-class&gt;com.jt.demo.tag.ToUpperCase&lt;/tag-class&gt;</span><br><span class="line">        &lt;body-content&gt;JSP&lt;/body-content&gt;</span><br><span class="line">    &lt;/tag&gt;</span><br><span class="line">&lt;/taglib&gt;</span><br></pre></td></tr></table></figure>

<p>使用:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mytag:myToUpperCase&gt;</span><br><span class="line">    hello</span><br><span class="line">&lt;/mytag:myToUpperCase&gt;</span><br></pre></td></tr></table></figure>

<h2 id="简单方式，SimpleTag，最大简化，将传统的doStartTag-doEndTag-doafterBody-等方法-简化成一个通用的doTag-方法"><a href="#简单方式，SimpleTag，最大简化，将传统的doStartTag-doEndTag-doafterBody-等方法-简化成一个通用的doTag-方法" class="headerlink" title="简单方式，SimpleTag，最大简化，将传统的doStartTag() doEndTag() doafterBody()等方法 简化成一个通用的doTag()方法"></a>简单方式，SimpleTag，最大简化，将传统的doStartTag() doEndTag() doafterBody()等方法 简化成一个通用的doTag()方法</h2><p><img src="https://s2.loli.net/2022/05/07/gC5ZGwrPjWos9Hv.png" alt="image-20220507110825692"></p>
<h4 id="简单方式不能写JSP"><a href="#简单方式不能写JSP" class="headerlink" title="简单方式不能写JSP"></a>简单方式不能写JSP</h4><p>doTag():传统方式可以对标签最终线上进行修改，核心是缓冲区，简单方式没有缓冲区。如何修改显示内容？流</p>
<h3 id="MySimpleTagIterator类"><a href="#MySimpleTagIterator类" class="headerlink" title="MySimpleTagIterator类:"></a>MySimpleTagIterator类:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class MySimpleTagIterator extends SimpleTagSupport &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 5897918233973977850L;</span><br><span class="line">    private int num;//执行次数</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doTag() throws JspException, IOException &#123;</span><br><span class="line">        JspFragment jspFragment = getJspBody();</span><br><span class="line">        for (int i = 0; i &lt; num; i++) &#123;</span><br><span class="line">            jspFragment.invoke(null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写tags.tld文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;tag&gt;</span><br><span class="line">        &lt;name&gt;mySimpleTag&lt;/name&gt;</span><br><span class="line">        &lt;tag-class&gt;com.jt.demo.tag.MySimpleTagIterator&lt;/tag-class&gt;</span><br><span class="line">        &lt;body-content&gt;scriptless&lt;/body-content&gt;</span><br><span class="line">        &lt;attribute&gt;</span><br><span class="line">            &lt;name&gt;num&lt;/name&gt;</span><br><span class="line">            &lt;required&gt;true&lt;/required&gt;</span><br><span class="line">        &lt;/attribute&gt;</span><br><span class="line">    &lt;/tag&gt;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;simpletag:mySimpleTag num=&quot;5&quot;&gt;123456&lt;/simpletag:mySimpleTag&gt;</span><br></pre></td></tr></table></figure>

<p>另一种：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class MySimpleTagIterator extends SimpleTagSupport &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 5897918233973977850L;</span><br><span class="line">    private int num;//执行次数</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doTag() throws JspException, IOException &#123;</span><br><span class="line">        PageContext pageContext = (PageContext) getJspContext();</span><br><span class="line">        JspWriter out = pageContext.getOut();</span><br><span class="line">        SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        out.println(&quot;[&quot; + df.format(new Date()) + &quot;]&quot;);</span><br><span class="line">       StringWriter sw = new StringWriter();</span><br><span class="line">       //修改输出</span><br><span class="line">       for (int i = 0; i &lt; num; i++) &#123;</span><br><span class="line"></span><br><span class="line">            getJspBody().invoke(sw);</span><br><span class="line">            System.out.println(sw);</span><br><span class="line">            out.print(&quot;aaaaa&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;simpletag:mySimpleTag num=&quot;3&quot;&gt;123456&lt;/simpletag:mySimpleTag&gt;</span><br></pre></td></tr></table></figure>



<h2 id="使用标签登录："><a href="#使用标签登录：" class="headerlink" title="使用标签登录："></a>使用标签登录：</h2><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void doTag() throws JspException, IOException &#123;</span><br><span class="line">        PageContext pageContext =(PageContext) getJspContext();</span><br><span class="line"></span><br><span class="line">        Object name = pageContext.getSession().getAttribute(&quot;name&quot;);</span><br><span class="line">        if(name!=null)&#123;</span><br><span class="line"></span><br><span class="line">            getJspBody().invoke(null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JSP</category>
      </categories>
  </entry>
  <entry>
    <title>JWT学习</title>
    <url>/2022/05/25/JWT/</url>
    <content><![CDATA[<h1 id="1-JWT简单使用"><a href="#1-JWT简单使用" class="headerlink" title="1.JWT简单使用"></a>1.JWT简单使用</h1><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--引入jwt--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.auth0&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;java-jwt&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.10.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//@SpringBootTest</span><br><span class="line">class SpringbootJwt2020ApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    //令牌获取</span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Calendar instance = Calendar.getInstance();</span><br><span class="line">        instance.add(Calendar.SECOND, 2000);</span><br><span class="line"></span><br><span class="line">        String token = JWT.create().withHeader(map) //header</span><br><span class="line">                .withClaim(&quot;userId&quot;, 21)//payload</span><br><span class="line">                .withClaim(&quot;username&quot;, &quot;xiaochen&quot;)//payload</span><br><span class="line">                .withExpiresAt(instance.getTime())//指定令牌的过期时间</span><br><span class="line">                .sign(Algorithm.HMAC256(&quot;!Q@W#E$R&quot;)) //签名</span><br><span class="line">                ;</span><br><span class="line">        System.out.println(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //令牌验证:根据令牌和签名解析数据</span><br><span class="line">    //常见异常：</span><br><span class="line">    //SignatureVerificationException 签名不一致异常</span><br><span class="line">    //TokenExpiredException 令牌过期异常</span><br><span class="line">    //AlgorithmMismatchException 算法不匹配异常</span><br><span class="line">    //InvalidClaimException 失效的payload异常</span><br><span class="line">    @Test</span><br><span class="line">    void test() &#123;</span><br><span class="line">//        String token = &quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1OTk2NDkxMzMsInVzZXJJZCI6MjEsInVzZXJuYW1lIjoieGlhb2NoZW4ifQ.LmTERviRHnmKpOeXO0f9K2nR1C7AovGfAV6Fmx7tcw0&quot;;</span><br><span class="line">        String token = &quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1OTk2NTEzOTgsInVzZXJJZCI6MjEsInVzZXJuYW1lIjoieGlhb2NoZW4ifQ.KgJhjqs0T2WCijB9MDJQE9pCoKaC_eO3H6ILDmrhz1A&quot;;</span><br><span class="line"></span><br><span class="line">        JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(&quot;!Q@W#E$R&quot;)).build();</span><br><span class="line">        DecodedJWT decodedJWT = jwtVerifier.verify(token);</span><br><span class="line">        System.out.println(&quot;用户Id：&quot; + decodedJWT.getClaim(&quot;userId&quot;).asInt());</span><br><span class="line">        System.out.println(&quot;用户名：&quot; + decodedJWT.getClaim(&quot;username&quot;));</span><br><span class="line">        System.out.println(&quot;过期时间：&quot; + decodedJWT.getExpiresAt());</span><br><span class="line"></span><br><span class="line">//        用户Id：21</span><br><span class="line">//        用户名：com.auth0.jwt.impl.JsonNodeClaim@236e3f4e</span><br><span class="line">//        过期时间：Wed Sep 09 19:36:38 CST 2020</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-JWT工具类"><a href="#2-JWT工具类" class="headerlink" title="2.JWT工具类"></a>2.JWT工具类</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.chilly.utils;</span><br><span class="line"></span><br><span class="line">import com.auth0.jwt.JWT;</span><br><span class="line">import com.auth0.jwt.JWTCreator;</span><br><span class="line">import com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line">import com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"></span><br><span class="line">import java.util.Calendar;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Chilly Cui on 2020/9/9.</span><br><span class="line"> */</span><br><span class="line">public class JWTUtils &#123;</span><br><span class="line">    private static String SECRET = &quot;token!Q@W#E$R&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生产token</span><br><span class="line">     */</span><br><span class="line">    public static String getToken(Map&lt;String, String&gt; map) &#123;</span><br><span class="line">        JWTCreator.Builder builder = JWT.create();</span><br><span class="line"></span><br><span class="line">        //payload</span><br><span class="line">        map.forEach((k, v) -&gt; &#123;</span><br><span class="line">            builder.withClaim(k, v);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Calendar instance = Calendar.getInstance();</span><br><span class="line">        instance.add(Calendar.DATE, 7); //默认7天过期</span><br><span class="line"></span><br><span class="line">        builder.withExpiresAt(instance.getTime());//指定令牌的过期时间</span><br><span class="line">        String token = builder.sign(Algorithm.HMAC256(SECRET));//签名</span><br><span class="line">        return token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 验证token</span><br><span class="line">     */</span><br><span class="line">    public static DecodedJWT verify(String token) &#123;</span><br><span class="line">        //如果有任何验证异常，此处都会抛出异常</span><br><span class="line">        DecodedJWT decodedJWT = JWT.require(Algorithm.HMAC256(SECRET)).build().verify(token);</span><br><span class="line">        return decodedJWT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//    /**</span><br><span class="line">//     * 获取token中的 payload</span><br><span class="line">//     */</span><br><span class="line">//    public static DecodedJWT getToken(String token) &#123;</span><br><span class="line">//        DecodedJWT decodedJWT = JWT.require(Algorithm.HMAC256(SECRET)).build().verify(token);</span><br><span class="line">//        return decodedJWT;</span><br><span class="line">//    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-JWT拦截器"><a href="#3-JWT拦截器" class="headerlink" title="3.JWT拦截器"></a>3.JWT拦截器</h1><h4 id="拦截器配置"><a href="#拦截器配置" class="headerlink" title="拦截器配置"></a>拦截器配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.chilly.config;</span><br><span class="line"></span><br><span class="line">import com.chilly.interceptors.JWTInterceptor;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Chilly Cui on 2020/9/9.</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class InterceptorConfig implements WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">        registry.addInterceptor(new JWTInterceptor())</span><br><span class="line">                .addPathPatterns(&quot;/user/test&quot;)</span><br><span class="line">                .excludePathPatterns(&quot;/user/login&quot;)</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="拦截器配置类"><a href="#拦截器配置类" class="headerlink" title="拦截器配置类"></a>拦截器配置类</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.chilly.interceptors;</span><br><span class="line"></span><br><span class="line">import com.auth0.jwt.exceptions.AlgorithmMismatchException;</span><br><span class="line">import com.auth0.jwt.exceptions.InvalidClaimException;</span><br><span class="line">import com.auth0.jwt.exceptions.SignatureVerificationException;</span><br><span class="line">import com.auth0.jwt.exceptions.TokenExpiredException;</span><br><span class="line">import com.chilly.utils.JWTUtils;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Chilly Cui on 2020/9/9.</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">public class JWTInterceptor implements HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request,</span><br><span class="line">                             HttpServletResponse response,</span><br><span class="line">                             Object handler) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        //获取请求头中的令牌</span><br><span class="line">        String token = request.getHeader(&quot;token&quot;);</span><br><span class="line">        log.info(&quot;当前token为：&#123;&#125;&quot;, token);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        try &#123;</span><br><span class="line">            JWTUtils.verify(token);</span><br><span class="line">            return true;</span><br><span class="line">        &#125; catch (SignatureVerificationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(&quot;msg&quot;, &quot;签名不一致&quot;);</span><br><span class="line">        &#125; catch (TokenExpiredException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(&quot;msg&quot;, &quot;令牌过期&quot;);</span><br><span class="line">        &#125; catch (AlgorithmMismatchException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(&quot;msg&quot;, &quot;算法不匹配&quot;);</span><br><span class="line">        &#125; catch (InvalidClaimException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(&quot;msg&quot;, &quot;失效的payload&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(&quot;msg&quot;, &quot;token无效&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        map.put(&quot;state&quot;, false);</span><br><span class="line"></span><br><span class="line">        //响应到前台: 将map转为json</span><br><span class="line">        String json = new ObjectMapper().writeValueAsString(map);</span><br><span class="line">        response.setContentType(&quot;application/json;charset=UTF-8&quot;);</span><br><span class="line">        response.getWriter().println(json);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-用户登录类"><a href="#4-用户登录类" class="headerlink" title="4.用户登录类"></a>4.用户登录类</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.chilly.controller;</span><br><span class="line"></span><br><span class="line">import com.auth0.jwt.exceptions.AlgorithmMismatchException;</span><br><span class="line">import com.auth0.jwt.exceptions.InvalidClaimException;</span><br><span class="line">import com.auth0.jwt.exceptions.SignatureVerificationException;</span><br><span class="line">import com.auth0.jwt.exceptions.TokenExpiredException;</span><br><span class="line">import com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line">import com.chilly.entity.User;</span><br><span class="line">import com.chilly.service.UserService;</span><br><span class="line">import com.chilly.utils.JWTUtils;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Chilly Cui on 2020/9/9.</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/user/login&quot;)</span><br><span class="line">    public Map&lt;String, Object&gt; login(User user) &#123;</span><br><span class="line">        log.info(&quot;用户名：&#123;&#125;&quot;, user.getName());</span><br><span class="line">        log.info(&quot;password: &#123;&#125;&quot;, user.getPassword());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            User userDB = userService.login(user);</span><br><span class="line"></span><br><span class="line">            Map&lt;String, String&gt; payload = new HashMap&lt;&gt;();</span><br><span class="line">            payload.put(&quot;id&quot;, userDB.getId());</span><br><span class="line">            payload.put(&quot;name&quot;, userDB.getName());</span><br><span class="line">            String token = JWTUtils.getToken(payload);</span><br><span class="line"></span><br><span class="line">            map.put(&quot;state&quot;, true);</span><br><span class="line">            map.put(&quot;msg&quot;, &quot;登录成功&quot;);</span><br><span class="line">            map.put(&quot;token&quot;, token);</span><br><span class="line">            return map;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(&quot;state&quot;, false);</span><br><span class="line">            map.put(&quot;msg&quot;, e.getMessage());</span><br><span class="line">            map.put(&quot;token&quot;, &quot;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/user/test&quot;)</span><br><span class="line">    public Map&lt;String, Object&gt; test(HttpServletRequest request) &#123;</span><br><span class="line">        String token = request.getHeader(&quot;token&quot;);</span><br><span class="line">        DecodedJWT verify = JWTUtils.verify(token);</span><br><span class="line">        String id = verify.getClaim(&quot;id&quot;).asString();</span><br><span class="line">        String name = verify.getClaim(&quot;name&quot;).asString();</span><br><span class="line">        log.info(&quot;用户id：&#123;&#125;&quot;, id);</span><br><span class="line">        log.info(&quot;用户名: &#123;&#125;&quot;, name);</span><br><span class="line"></span><br><span class="line">        //TODO 业务逻辑</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;state&quot;, true);</span><br><span class="line">        map.put(&quot;msg&quot;, &quot;请求成功&quot;);</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="DAO层"><a href="#DAO层" class="headerlink" title="DAO层"></a>DAO层</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.chilly.dao;</span><br><span class="line"></span><br><span class="line">import com.chilly.entity.User;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Chilly Cui on 2020/9/9.</span><br><span class="line"> */</span><br><span class="line">@Mapper</span><br><span class="line">public interface UserDAO &#123;</span><br><span class="line">    User login(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.chilly.service;</span><br><span class="line"></span><br><span class="line">import com.chilly.entity.User;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Chilly Cui on 2020/9/9.</span><br><span class="line"> */</span><br><span class="line">public interface UserService &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 登录接口</span><br><span class="line">     *</span><br><span class="line">     * @param user 表单中的user</span><br><span class="line">     * @return 数据库中查询到的User</span><br><span class="line">     */</span><br><span class="line">    User login(User user);</span><br><span class="line">&#125;</span><br><span class="line">//////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">package com.chilly.service;</span><br><span class="line"></span><br><span class="line">import com.chilly.dao.UserDAO;</span><br><span class="line">import com.chilly.entity.User;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.transaction.annotation.Propagation;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Chilly Cui on 2020/9/9.</span><br><span class="line"> */</span><br><span class="line">@Service</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private UserDAO userDAO;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.SUPPORTS)</span><br><span class="line">    public User login(User user) &#123;</span><br><span class="line">        User userDB = userDAO.login(user);</span><br><span class="line">        if (userDB != null) &#123;</span><br><span class="line">            return userDB;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new RuntimeException(&quot;认证失败&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Entity层"><a href="#Entity层" class="headerlink" title="Entity层"></a>Entity层</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.chilly.entity;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Chilly Cui on 2020/9/9.</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">@Accessors(chain = true)</span><br><span class="line">public class User &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>JavaAPI基础</title>
    <url>/2022/03/18/JavaAPI%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="JSON处理大全"><a href="#JSON处理大全" class="headerlink" title="JSON处理大全"></a>JSON处理大全</h1><p>依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.5.8&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;selenium-java&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.141.59&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.47&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.10.3&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.8.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.wanghaomiao&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;JsoupXpath&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.1.1&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.jsoup&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jsoup&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.12.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.wanghaomiao&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;JsoupXpath&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;0.1.1&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package service;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import com.google.gson.Gson;</span><br><span class="line">import com.google.gson.reflect.TypeToken;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class JsonTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        /*JSON 对象与字符串的相互转化</span><br><span class="line">        方法	作用</span><br><span class="line">        JSON.parseObject()	从字符串解析 JSON 对象</span><br><span class="line">        JSON.parseArray()	从字符串解析 JSON 数组</span><br><span class="line">        JSON.toJSONString(obj/array)	将 JSON 对象或 JSON 数组转化为字符串*/</span><br><span class="line">        /*JSONObject object = new JSONObject();</span><br><span class="line">        //string</span><br><span class="line">        object.put(&quot;string&quot;,&quot;string&quot;);</span><br><span class="line">        //int</span><br><span class="line">        object.put(&quot;int&quot;,2);</span><br><span class="line">        //boolean</span><br><span class="line">        object.put(&quot;boolean&quot;,true);</span><br><span class="line">        //array</span><br><span class="line">        List&lt;Integer&gt; integers = Arrays.asList(1,2,3);</span><br><span class="line">        object.put(&quot;list&quot;,integers);</span><br><span class="line">        //null</span><br><span class="line">        object.put(&quot;null&quot;,null);</span><br><span class="line">        System.out.println(object);*/</span><br><span class="line"></span><br><span class="line">        /*JSONObject object = JSONObject</span><br><span class="line">                .parseObject(&quot;&#123;\&quot;boolean\&quot;:true,\&quot;string\&quot;:\&quot;string\&quot;,\&quot;list\&quot;:[1,2,3],\&quot;int\&quot;:2&#125;&quot;);</span><br><span class="line">        //string</span><br><span class="line">        String s = object.getString(&quot;string&quot;);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        //int</span><br><span class="line">        int i = object.getIntValue(&quot;int&quot;);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        //boolean</span><br><span class="line">        boolean b = object.getBooleanValue(&quot;boolean&quot;);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        //list</span><br><span class="line">        List&lt;Integer&gt; integers = JSON.parseArray(object.getJSONArray(&quot;list&quot;).toJSONString(),Integer.class);</span><br><span class="line">        integers.forEach(System.out::println);</span><br><span class="line">        //null0</span><br><span class="line">        System.out.println(object.getString(&quot;null&quot;));*/</span><br><span class="line"></span><br><span class="line">//        jask-json</span><br><span class="line">        /*List&lt;Student&gt; studentList=new ArrayList&lt;&gt;();</span><br><span class="line">        studentList.add(new Student(1L,&quot;王磊&quot;));</span><br><span class="line">        studentList.add(new Student(2L,&quot;张三&quot;));</span><br><span class="line">        String studentListJsonStr=JSONUtil.toJson(studentList);</span><br><span class="line">        System.out.println(&quot;jsonStr:&quot;+studentListJsonStr);</span><br><span class="line">        List&lt;Student&gt; students= (List&lt;Student&gt;) JSONUtil.parseObject(studentListJsonStr,List.class);</span><br><span class="line">        System.out.println(&quot;列表第一个student:&quot;+students.get(0));*/</span><br><span class="line"></span><br><span class="line">        // 创建Bean</span><br><span class="line">        Person p = new Person(&quot;艾伦·耶格尔&quot;, 16, true, Arrays.asList(&quot;自由&quot;, &quot;迫害莱纳&quot;));</span><br><span class="line">        // 创建Gson对象</span><br><span class="line">        Gson gson = new Gson();</span><br><span class="line">        // 调用Gson的String toJson(Object)方法将Bean转换为json字符串</span><br><span class="line">        String pJson = gson.toJson(p);</span><br><span class="line"></span><br><span class="line">        System.out.println(pJson);</span><br><span class="line"></span><br><span class="line">        // 先准备一个List集合</span><br><span class="line">        List&lt;Person&gt; list = new ArrayList&lt;Person&gt;();</span><br><span class="line">        list.add(new Person(&quot;三笠·阿克曼&quot;, 16, false, Arrays.asList(&quot;砍巨人&quot;, &quot;保护艾伦&quot;)));</span><br><span class="line">        list.add(new Person(&quot;阿明·阿诺德&quot;, 16, true, Arrays.asList(&quot;看书&quot;, &quot;玩海螺&quot;)));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        // 创建Gson实例</span><br><span class="line">        gson = new Gson();</span><br><span class="line">        // 调用Gson的toJson方法</span><br><span class="line">        String listJson = gson.toJson(list);</span><br><span class="line">        System.out.println(listJson);</span><br><span class="line">        List fromJson = gson.fromJson(listJson, List.class);</span><br><span class="line">        System.out.println(fromJson.get(0).getClass());</span><br><span class="line">        // 调用Gson的 T fromJson(String, Type)将List集合的json串反序列化为List对象</span><br><span class="line">        List&lt;Person&gt; plist = gson.fromJson(listJson, new TypeToken&lt;List&lt;Person&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">        System.out.println(plist);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;p1&quot;, new Person(&quot;利威尔·阿克曼&quot;, 35, true, Arrays.asList(&quot;砍猴儿&quot;, &quot;打扫卫生&quot;)));</span><br><span class="line">        map.put(&quot;p2&quot;, new Person(&quot;韩吉·佐耶&quot;, 33, false, Arrays.asList(&quot;研究巨人&quot;, &quot;讲故事&quot;)));</span><br><span class="line"></span><br><span class="line">        gson = new Gson();</span><br><span class="line">        String mapJson = gson.toJson(map);</span><br><span class="line"></span><br><span class="line">        System.out.println(mapJson);</span><br><span class="line">        // &#123;&quot;p1&quot;:&#123;&quot;name&quot;:&quot;利威尔·阿克曼&quot;,&quot;age&quot;:35,&quot;isMale&quot;:true,&quot;hobbies&quot;:[&quot;砍猴儿&quot;,&quot;打扫卫生&quot;]&#125;,&quot;p2&quot;:&#123;&quot;name&quot;:&quot;韩吉·佐耶&quot;,&quot;age&quot;:33,&quot;isMale&quot;:false,&quot;hobbies&quot;:[&quot;研究巨人&quot;,&quot;讲故事&quot;]&#125;&#125;</span><br><span class="line">        Map&lt;String, Person&gt; jsonMap = gson.fromJson(mapJson, new TypeToken&lt;Map&lt;String, Person&gt;&gt;() &#123; &#125;.getType());</span><br><span class="line">        System.out.println(jsonMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Student&#123;</span><br><span class="line">        private String name;</span><br><span class="line">        private Long id;</span><br><span class="line"></span><br><span class="line">        public Student() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Student(Long id,String name) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.id = id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setName(String name) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Long getId() &#123;</span><br><span class="line">            return id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setId(Long id) &#123;</span><br><span class="line">            this.id = id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return &quot;Student&#123;&quot; +</span><br><span class="line">                    &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                    &quot;, id=&quot; + id +</span><br><span class="line">                    &#x27;&#125;&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private boolean isMale;</span><br><span class="line">    private List&lt;String&gt; hobbies;</span><br><span class="line"></span><br><span class="line">    // 省略构造器和getter/setter方法，注意重写toString方法，便于查看控制台输出。</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age, boolean isMale, List&lt;String&gt; hobbies) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.isMale = isMale;</span><br><span class="line">        this.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isMale() &#123;</span><br><span class="line">        return isMale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMale(boolean male) &#123;</span><br><span class="line">        isMale = male;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;String&gt; getHobbies() &#123;</span><br><span class="line">        return hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setHobbies(List&lt;String&gt; hobbies) &#123;</span><br><span class="line">        this.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString()</span><br><span class="line">    &#123;</span><br><span class="line">        final StringBuilder sb = new StringBuilder(&quot;Person&#123;&quot;);</span><br><span class="line">        sb.append(&quot;name=&#x27;&quot;).append(name).append(&#x27;\&#x27;&#x27;);</span><br><span class="line">        sb.append(&quot;, age=&quot;).append(age);</span><br><span class="line">        sb.append(&quot;, isMale=&quot;).append(isMale);</span><br><span class="line">        sb.append(&quot;, hobbies=&quot;).append(hobbies);</span><br><span class="line">        sb.append(&#x27;&#125;&#x27;);</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class JSONUtil &#123;</span><br><span class="line">    private static ObjectMapper objectMapper=new ObjectMapper();</span><br><span class="line">    public static String  toJson(Object obj1)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return objectMapper.writeValueAsString(obj1);</span><br><span class="line">        &#125; catch (JsonProcessingException e) &#123;</span><br><span class="line">            System.out.println(&quot;json转换异常&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Object parseObject(String jsonStr,Class targetClass)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return   objectMapper.readValue(jsonStr,targetClass);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            System.out.println(&quot;json转换异常&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="HttpClient基本用法"><a href="#HttpClient基本用法" class="headerlink" title="HttpClient基本用法"></a>HttpClient基本用法</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package service;</span><br><span class="line"></span><br><span class="line">import org.apache.http.HttpEntity;</span><br><span class="line">import org.apache.http.HttpStatus;</span><br><span class="line">import org.apache.http.client.ClientProtocolException;</span><br><span class="line">import org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line">import org.apache.http.client.methods.HttpGet;</span><br><span class="line">import org.apache.http.client.utils.HttpClientUtils;</span><br><span class="line">import org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line">import org.apache.http.impl.client.HttpClients;</span><br><span class="line">import org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class HttpClientTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //1.生成httpclient，相当于该打开一个浏览器</span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">        CloseableHttpResponse response = null;</span><br><span class="line">        //2.创建get请求，相当于在浏览器地址栏输入 网址</span><br><span class="line">        HttpGet request = new HttpGet(&quot;https://www.baidu.com/&quot;);</span><br><span class="line">        request.setHeader(&quot;User-Agent&quot;,&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36&quot;);</span><br><span class="line">        /*HttpHost proxy = new HttpHost(&quot;112.85.168.223&quot;, 9999);</span><br><span class="line">        RequestConfig config = RequestConfig.custom().setProxy(proxy).build();</span><br><span class="line">        request.setConfig(config);*/</span><br><span class="line">        try &#123;</span><br><span class="line">            //3.执行get请求，相当于在输入地址栏后敲回车键</span><br><span class="line">            response = httpClient.execute(request);</span><br><span class="line"></span><br><span class="line">            //4.判断响应状态为200，进行处理</span><br><span class="line">            if(response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) &#123;</span><br><span class="line">                //5.获取响应内容</span><br><span class="line">                HttpEntity httpEntity = response.getEntity();</span><br><span class="line">                String html = EntityUtils.toString(httpEntity, &quot;utf-8&quot;);</span><br><span class="line">                System.out.println(html);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //如果返回状态不是200，比如404（页面不存在）等，根据情况做处理，这里略</span><br><span class="line">                System.out.println(&quot;返回状态不是200&quot;);</span><br><span class="line">                System.out.println(EntityUtils.toString(response.getEntity(), &quot;utf-8&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (ClientProtocolException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            //6.关闭</span><br><span class="line">            HttpClientUtils.closeQuietly(response);</span><br><span class="line">            HttpClientUtils.closeQuietly(httpClient);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="xpath解析"><a href="#xpath解析" class="headerlink" title="xpath解析"></a>xpath解析</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String xpath=&quot;//div[@id=&#x27;post_list&#x27;]/div[./div/div/span[@class=&#x27;article_view&#x27;]/a/num()&gt;1000]/div/h3/allText()&quot;;</span><br><span class="line">String doc = &quot;...&quot;;</span><br><span class="line">JXDocument jxDocument = new JXDocument(doc);</span><br><span class="line">List&lt;Object&gt; rs = jxDocument.sel(xpath);</span><br><span class="line">for (Object o:rs)&#123;</span><br><span class="line">     if (o instanceof Element)&#123;</span><br><span class="line">         int index = ((Element) o).siblingIndex();</span><br><span class="line">         System.out.println(index);</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println(o.toString());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h1 id="Jsonp解析"><a href="#Jsonp解析" class="headerlink" title="Jsonp解析"></a>Jsonp解析</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">                 * 下面是Jsoup展现自我的平台</span><br><span class="line">                 */</span><br><span class="line">                //6.Jsoup解析html</span><br><span class="line">                Document document = Jsoup.parse(html);</span><br><span class="line">                //像js一样，通过标签获取title</span><br><span class="line">                System.out.println(document.getElementsByTag(&quot;title&quot;).first());</span><br><span class="line">                //像js一样，通过id 获取文章列表元素对象</span><br><span class="line">                Element postList = document.getElementById(&quot;post_list&quot;);</span><br><span class="line">                //像js一样，通过class 获取列表下的所有博客</span><br><span class="line">                Elements postItems = postList.getElementsByClass(&quot;post_item&quot;);</span><br><span class="line">                //循环处理每篇博客</span><br><span class="line">                for (Element postItem : postItems) &#123;</span><br><span class="line">                    //像jquery选择器一样，获取文章标题元素</span><br><span class="line">                    Elements titleEle = postItem.select(&quot;.post_item_body a[class=&#x27;titlelnk&#x27;]&quot;);</span><br><span class="line">                    System.out.println(&quot;文章标题:&quot; + titleEle.text());;</span><br><span class="line">                    System.out.println(&quot;文章地址:&quot; + titleEle.attr(&quot;href&quot;));</span><br><span class="line">                    //像jquery选择器一样，获取文章作者元素</span><br><span class="line">                    Elements footEle = postItem.select(&quot;.post_item_foot a[class=&#x27;lightblue&#x27;]&quot;);</span><br><span class="line">                    System.out.println(&quot;文章作者:&quot; + footEle.text());;</span><br><span class="line">                    System.out.println(&quot;作者主页:&quot; + footEle.attr(&quot;href&quot;));</span><br><span class="line">                    System.out.println(&quot;*********************************&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Document document = Jsoup.parse(new File(&quot;d://1.html&quot;), &quot;utf-8&quot;);</span><br><span class="line">            System.out.println(document);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    四、Jsoup另一个值得一提的功能</span><br><span class="line"></span><br><span class="line"> 你肯定有过这种经历，在你的页面文本框中，如果输入html元素的话，保存后再查看很大概率会导致页面排版乱七八糟，如果能对这些内容进行过滤的话，就完美了。</span><br><span class="line"></span><br><span class="line">刚好我Jsoup就能做到。</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        String unsafe = &quot;&lt;p&gt;&lt;a href=&#x27;网址&#x27; onclick=&#x27;stealCookies()&#x27;&gt;博客园&lt;/a&gt;&lt;/p&gt;&quot;;</span><br><span class="line">        System.out.println(&quot;unsafe: &quot; + unsafe);</span><br><span class="line">        String safe = Jsoup.clean(unsafe, Whitelist.basic());</span><br><span class="line">        System.out.println(&quot;safe: &quot; + safe);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="Selenium使用"><a href="#Selenium使用" class="headerlink" title="Selenium使用"></a>Selenium使用</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* selenium总共有八种定位方法</span><br><span class="line">     By.id()  通过id定位</span><br><span class="line"> By.name()  通过name 定位</span><br><span class="line"> By.xpath() 通过xpath定位</span><br><span class="line"> By.className() 通过className定位</span><br><span class="line"> By.cssSelector() 通过CSS 定位</span><br><span class="line"> By.linkText() 通过linkText</span><br><span class="line"> By.tagName() 通过tagName*/</span><br><span class="line">public static void test() throws InterruptedException&#123;</span><br><span class="line">       // 设置 chromedirver 的存放位置</span><br><span class="line">      System.getProperties().setProperty(&quot;webdriver.chrome.driver&quot;, &quot;F:/download/chromedriver_win32_1/chromedriver.exe&quot;);</span><br><span class="line">       // 设置浏览器参数</span><br><span class="line">       ChromeOptions chromeOptions = new ChromeOptions();</span><br><span class="line">       chromeOptions.addArguments(&quot;--no-sandbox&quot;);//禁用沙箱</span><br><span class="line">       chromeOptions.addArguments(&quot;--disable-dev-shm-usage&quot;);//禁用开发者shm</span><br><span class="line">       chromeOptions.addArguments(&quot;--headless&quot;); //无头浏览器，这样不会打开浏览器窗口</span><br><span class="line">       WebDriver driver = new ChromeDriver(chromeOptions);</span><br><span class="line">       //实现窗口最大化</span><br><span class="line">       driver.manage().window().maximize();</span><br><span class="line">       //打开百度首页</span><br><span class="line">       driver.get(&quot;https://www.baidu.com&quot;);</span><br><span class="line">       //通过ID，找到文本输入框</span><br><span class="line">       WebElement shurukuang = driver.findElement(By.id(&quot;kw&quot;));</span><br><span class="line">       //设置输入框的内容</span><br><span class="line">       shurukuang.sendKeys(&quot;战狼2&quot;);</span><br><span class="line">       //通过ID，找到搜索按钮</span><br><span class="line">       WebElement tijiao = driver.findElement(By.id(&quot;su&quot;));</span><br><span class="line">       //点击搜索按钮</span><br><span class="line">       tijiao.click();</span><br><span class="line">       //关闭浏览器</span><br><span class="line">       driver.close();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>Java网络编程</title>
    <url>/2022/03/26/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h3><p>计算机网络</p>
<p>计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</p>
<h3 id="1-2、网络通信的要素"><a href="#1-2、网络通信的要素" class="headerlink" title="1.2、网络通信的要素"></a>1.2、网络通信的要素</h3><p>通信双方地址：</p>
<ul>
<li>ip</li>
<li>端口号</li>
</ul>
<p>规则：网络通信的协议</p>
<ul>
<li>TCP</li>
<li>UDP</li>
</ul>
<p>TCP/IP参考模型</p>
<p><img src="https://s2.loli.net/2022/03/26/AQalHX6Ed9wgGhS.png" alt="image-20220326100249239"></p>
<h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><p>ip地址：InetAddress</p>
<ul>
<li>唯一定位一台网络上的计算机</li>
<li>127.0.0.1：本机 localhost</li>
<li>ip地址的分类<ul>
<li>IPV4/IPV6</li>
<li>公网（互联网）-私网（局域网）</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/26/So6rksN7we8h5lP.png" alt="image-20220326102705723"></p>
<p>域名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TestInetAddress &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            InetAddress byName = InetAddress.getByName(&quot;127.0.0.1&quot;);</span><br><span class="line">            System.out.println(byName);</span><br><span class="line">            InetAddress localHost = InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(localHost);</span><br><span class="line">            InetAddress byName1 = InetAddress.getByName(&quot;www.baidu.com&quot;);</span><br><span class="line">            System.out.println(byName1);</span><br><span class="line">            // 常用方法</span><br><span class="line">            System.out.println(byName1.getAddress());</span><br><span class="line">            System.out.println(byName1.getCanonicalHostName()); // 规范的名字</span><br><span class="line">            System.out.println(byName1.getHostAddress()); // 获得主机地址</span><br><span class="line">            System.out.println(byName1.getHostName()); // 获得电脑名字</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><h3 id="端口表示计算机上的一个程序的进程"><a href="#端口表示计算机上的一个程序的进程" class="headerlink" title="端口表示计算机上的一个程序的进程"></a>端口表示计算机上的一个程序的进程</h3><p>不同的进程有不同的端口号</p>
<ul>
<li>被规定0-65535<br>端口的分类</li>
</ul>
<h4 id="公有端口0-1023"><a href="#公有端口0-1023" class="headerlink" title="公有端口0-1023"></a>公有端口0-1023</h4><p>​    Http:80<br>​    Https:443<br>​    Ftp:21<br>​    Telnet:23<br>​    远程连接：22</p>
<h4 id="程序注册端口：1024-49151，分配给用户或者程序"><a href="#程序注册端口：1024-49151，分配给用户或者程序" class="headerlink" title="程序注册端口：1024-49151，分配给用户或者程序"></a>程序注册端口：1024-49151，分配给用户或者程序</h4><p>​    Tomcat：8080<br>​    MySql：3306<br>​    Oracle：1521<br>​    动态，私有：49152-65535</p>
<h4 id="动态，私有：49152-65535"><a href="#动态，私有：49152-65535" class="headerlink" title="动态，私有：49152-65535"></a>动态，私有：49152-65535</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -ano # 查看所有端口</span><br><span class="line">netstat -ano|findstr &quot;端口号&quot;  # 查看指定的端口</span><br><span class="line">tasklist|findstr &quot;8696&quot;  # 查看指定端口的进程</span><br></pre></td></tr></table></figure>

<h3 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h3><p>协议：约定，就好比我们说的普通话</p>
<p>网络通信协议：速率，传输码率，代码结构，传输控制…</p>
<p>重要：</p>
<ul>
<li>TCP：用户传输协议</li>
<li>UDP：用户数据报协议</li>
</ul>
<p><strong>TCP/IP协议簇，实际上是一组协议</strong></p>
<p><strong>TCP的三次握手和四次挥手</strong></p>
<p>1）Client：嘿，李四，是我，听到了吗？</p>
<p>2）Server：我听到了，你能听到我的吗?</p>
<p>3）Client：好的，我们互相都能听到对方的话，我们的通信可以开始了。</p>
<p><strong>TCP的三次握手和四次挥手</strong></p>
<p>1）Client：嘿，李四，是我，听到了吗？</p>
<p>2）Server：我听到了，你能听到我的吗?</p>
<p>3）Client：好的，我们互相都能听到对方的话，我们的通信可以开始了。<br><img src="https://s2.loli.net/2022/03/26/dk6TQZiNfq4Xta1.png" alt="在这里插入图片描述"></p>
<p>1）Client：我所有东西都说完了</p>
<p>2）Server：我已经全部听到了，但是等等我，我还没说完</p>
<p>3）Server：好了，我已经说完了</p>
<p>4）Client：好的，那我们的通信结束<br><img src="https://s2.loli.net/2022/03/26/SpN3WrsUYIefV6z.png" alt="在这里插入图片描述"></p>
<h3 id="1-6、TCP"><a href="#1-6、TCP" class="headerlink" title="1.6、TCP"></a>1.6、TCP</h3><ul>
<li>客户端<ul>
<li>连接服务器Socket</li>
<li>发送消息</li>
</ul>
</li>
<li>服务端<ul>
<li>建立服务的端口ServerSocket</li>
<li>等待用户的连接 accept</li>
<li>接收用户的消息</li>
</ul>
</li>
</ul>
<h1 id="TcpClient"><a href="#TcpClient" class="headerlink" title="TcpClient"></a>TcpClient</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TcpClient &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Socket socket = null;</span><br><span class="line">        OutputStream outputStream = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            InetAddress serverIP = InetAddress.getByName(&quot;127.0.0.1&quot;);</span><br><span class="line">            int port = 9999;</span><br><span class="line">            socket = new Socket(serverIP, port);</span><br><span class="line">            outputStream = socket.getOutputStream();</span><br><span class="line">            outputStream.write(&quot;你好，我的世界&quot;.getBytes());</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            if(socket!=null)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(outputStream!=null)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="TcpServer"><a href="#TcpServer" class="headerlink" title="TcpServer"></a>TcpServer</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TcpServer &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ServerSocket serverSocket = null;</span><br><span class="line">        Socket socket = null;</span><br><span class="line">        InputStream is = null;</span><br><span class="line">        ByteArrayOutputStream baos =null;</span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line">            serverSocket = new ServerSocket(9999);</span><br><span class="line">            while (true)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            socket = serverSocket.accept();</span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line">            /*byte[] buffer = new byte[5];</span><br><span class="line">            int len;</span><br><span class="line">            while ((len=is.read(buffer))!=-1)&#123;</span><br><span class="line">                String msg = new String(buffer,0,len);</span><br><span class="line">                System.out.println(msg);</span><br><span class="line">            &#125;*/</span><br><span class="line">            //管道流</span><br><span class="line">            baos = new ByteArrayOutputStream();</span><br><span class="line">            byte[] buffer = new byte[5];</span><br><span class="line">            int len;</span><br><span class="line">            while ((len=is.read(buffer))!=-1)&#123;</span><br><span class="line">                baos.write(buffer,0,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            if(baos!=null)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(is!=null)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(socket!=null)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(serverSocket!=null)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结论：服务器设置循环监听，启动一次即可。客户端每次发送的内容会被服务器接收打印。</p>
<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h3 id="TcpUploadClient："><a href="#TcpUploadClient：" class="headerlink" title="TcpUploadClient："></a>TcpUploadClient：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TcpUploadClient &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Socket socket = new Socket(InetAddress.getByName(&quot;127.0.0.1&quot;).getHostAddress(),9000);</span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = new FileInputStream(new File(&quot;D:\\upload.jpg&quot;));</span><br><span class="line">        byte[] buffer = new byte[1024];</span><br><span class="line">        int len;</span><br><span class="line">        while ((len=fis.read(buffer))!=-1)&#123;</span><br><span class="line">            os.write(buffer,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        //通知服务器，我已经结束了</span><br><span class="line">        socket.shutdownOutput();//我已经传输完了</span><br><span class="line"></span><br><span class="line">        //确定服务器接收完毕，才能够断开连接</span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        //String byte[]</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">        byte[] buffer2 = new byte[1024];</span><br><span class="line">        int len2;</span><br><span class="line">        while ((len2=inputStream.read(buffer2))!=-1)&#123;</span><br><span class="line">            baos.write(buffer2,0,len2);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line"></span><br><span class="line">        //关闭文档资源</span><br><span class="line">        inputStream.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="TcpUploadServer："><a href="#TcpUploadServer：" class="headerlink" title="TcpUploadServer："></a>TcpUploadServer：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TcpUploadServer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        //1.创建服务</span><br><span class="line">        ServerSocket serverSocket = new ServerSocket(9000);</span><br><span class="line">        //2.监听客户端连接</span><br><span class="line">        Socket socket = serverSocket.accept();</span><br><span class="line">        //阻塞式监听，会一直等待客户端连接</span><br><span class="line">        //3.获取输入流</span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        //4.文件输出</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(new File(&quot;receive.jpg&quot;));</span><br><span class="line">        byte[] buffer = new byte[1024];</span><br><span class="line">        int len;</span><br><span class="line">        while ((len = is.read(buffer))!=-1)&#123;</span><br><span class="line">            fos.write(buffer,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        //通知客户端接收完毕</span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        os.write(&quot;我接受完毕了，你可以断开了&quot;.getBytes());</span><br><span class="line">        //关闭文件</span><br><span class="line">        fos.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><p>发短信：需用连接，但是要知道对方的地址</p>
<h2 id="UdpClientDemo01"><a href="#UdpClientDemo01" class="headerlink" title="UdpClientDemo01"></a>UdpClientDemo01</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class UdpClientDemo01 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        DatagramSocket socket = new DatagramSocket();</span><br><span class="line"></span><br><span class="line">        //建个包</span><br><span class="line">        String msg = &quot;你好啊，服务器！&quot;;</span><br><span class="line">        InetAddress localhost = InetAddress.getByName(&quot;localhost&quot;);</span><br><span class="line">        int port = 9090;</span><br><span class="line">        //数据，数据长度起始，要发送给谁</span><br><span class="line">        DatagramPacket packet = new DatagramPacket(msg.getBytes(),0,msg.getBytes().length,localhost,port);</span><br><span class="line">        //3.发送包</span><br><span class="line">        socket.send(packet);</span><br><span class="line">        //4.关闭流</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UdpServerDemo02"><a href="#UdpServerDemo02" class="headerlink" title="UdpServerDemo02"></a>UdpServerDemo02</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class UdpServerDemo02 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        //开放端口</span><br><span class="line">        DatagramSocket socket = new DatagramSocket(9090);</span><br><span class="line">        //接收数据</span><br><span class="line">        byte[] buffer = new byte[1024];</span><br><span class="line">        DatagramPacket packet = new DatagramPacket(buffer,0,buffer.length);//接收</span><br><span class="line">        socket.receive(packet);</span><br><span class="line">        System.out.println(packet.getAddress().getHostAddress());</span><br><span class="line">        System.out.println(new String(packet.getData(),0, packet.getLength()));</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结论：UDP没有客户端和服务器的概念，可以互相发送。而TCP只能由客户端往服务器发送。</p>
<p><strong>使用UDP实现发送消息</strong></p>
<h1 id="聊天案例"><a href="#聊天案例" class="headerlink" title="聊天案例"></a>聊天案例</h1><h2 id="UdpSenderDemo01："><a href="#UdpSenderDemo01：" class="headerlink" title="UdpSenderDemo01："></a>UdpSenderDemo01：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class UdpSenderDemo01 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        DatagramSocket socket = new DatagramSocket(8888);</span><br><span class="line">        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            String data = reader.readLine();</span><br><span class="line">            byte[] datas = data.getBytes();</span><br><span class="line">            DatagramPacket packet = new DatagramPacket(datas,0,datas.length,new InetSocketAddress(&quot;127.0.0.1&quot;,6666));</span><br><span class="line">            socket.send(packet);</span><br><span class="line">            if (data.equals(&quot;bye&quot;))&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UdpReceiveDemo01"><a href="#UdpReceiveDemo01" class="headerlink" title="UdpReceiveDemo01"></a>UdpReceiveDemo01</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class UdpReceiveDemo01 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        DatagramSocket socket = new DatagramSocket(6666);</span><br><span class="line">        // 准备接收包裹</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            byte[] container = new byte[1024];</span><br><span class="line">            DatagramPacket packet = new DatagramPacket(container, 0, container.length);</span><br><span class="line">            socket.receive(packet); // 阻塞式接收包裹</span><br><span class="line">            // 断开连接</span><br><span class="line">            byte[] data = packet.getData();</span><br><span class="line">            String receiveData = new String(data,0,data.length);</span><br><span class="line">            System.out.println(receiveData);</span><br><span class="line">            if (receiveData.equals(&quot;bye&quot;))&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结论：可以实现持续发送和持续接收</p>
<p><strong>在线咨询</strong>：两人同时持续发送，持续接收</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TalkSend implements Runnable&#123;</span><br><span class="line">    DatagramSocket socket = null;</span><br><span class="line">    BufferedReader reader = null;</span><br><span class="line"></span><br><span class="line">    private int fromPort;</span><br><span class="line">    private String toIp;</span><br><span class="line">    private int toPort;</span><br><span class="line">    public TalkSend(int fromPort, String toIp, int toPort) &#123;</span><br><span class="line">        this.fromPort = fromPort;</span><br><span class="line">        this.toIp = toIp;</span><br><span class="line">        this.toPort = toPort;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            socket = new DatagramSocket(fromPort);</span><br><span class="line">            reader = new BufferedReader(new InputStreamReader(System.in));</span><br><span class="line">        &#125; catch (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                String data = reader.readLine();</span><br><span class="line">                byte[] datas = data.getBytes();</span><br><span class="line">                DatagramPacket packet = new DatagramPacket(datas,0,datas.length,new InetSocketAddress(this.toIp,this.toPort));</span><br><span class="line">                socket.send(packet);</span><br><span class="line">                if (data.equals(&quot;bye&quot;))&#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class TalkReceive implements Runnable&#123;</span><br><span class="line">    DatagramSocket socket = null;</span><br><span class="line">    private int port;</span><br><span class="line">    private String msgFrom;</span><br><span class="line"></span><br><span class="line">    public TalkReceive(int port,String msgFrom) &#123;</span><br><span class="line">        this.port = port;</span><br><span class="line">        this.msgFrom = msgFrom;</span><br><span class="line">        try &#123;</span><br><span class="line">            socket = new DatagramSocket(port);</span><br><span class="line">        &#125; catch (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        // 准备接收包裹</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                byte[] container = new byte[1024];</span><br><span class="line">                DatagramPacket packet = new DatagramPacket(container, 0, container.length);</span><br><span class="line">                socket.receive(packet); // 阻塞式接收包裹</span><br><span class="line">                // 断开连接</span><br><span class="line">                byte[] data = packet.getData();</span><br><span class="line">                String receiveData = new String(data,0,data.length);</span><br><span class="line">                System.out.println(msgFrom+&quot;:&quot;+receiveData);</span><br><span class="line">                if (receiveData.equals(&quot;bye&quot;))&#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class TalkStudent &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 开启两个线程</span><br><span class="line">        new Thread(new TalkSend(7777,&quot;127.0.0.1&quot;,9999)).start();</span><br><span class="line">        new Thread(new TalkReceive(8888,&quot;老师&quot;)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class TalkTeacher &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 开启两个线程</span><br><span class="line">        new Thread(new TalkSend(5555,&quot;127.0.0.1&quot;,8888)).start();</span><br><span class="line">        new Thread(new TalkReceive(9999,&quot;学生&quot;)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>统一资源定位符：定位互联网上的某一个资源</p>
<h4 id="网络资源下载"><a href="#网络资源下载" class="headerlink" title="网络资源下载"></a>网络资源下载</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">协议://ip地址:端口/项目名/资源  # http://127.0.0.1:8080/MrXie/Security.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class UrlTest &#123;</span><br><span class="line">    // http://127.0.0.1:8080/MrXie/Security.txt</span><br><span class="line">    public static void main(String[] args) throws MalformedURLException &#123;</span><br><span class="line">        URL url = new URL(&quot;http://127.0.0.1:8080/MrXie/Security.txt&quot;);</span><br><span class="line">        System.out.println(url.getProtocol());  // 协议</span><br><span class="line">        System.out.println(url.getHost());  // 主机</span><br><span class="line">        System.out.println(url.getPort());  // 端口</span><br><span class="line">        System.out.println(url.getPath());   // 文件</span><br><span class="line">        System.out.println(url.getFile());  // 文件全路径</span><br><span class="line">        System.out.println(url.getQuery());  // 参数</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">结果</span><br><span class="line">http</span><br><span class="line">127.0.0.1</span><br><span class="line">8080</span><br><span class="line">/MrXie/Security.txt</span><br><span class="line">/MrXie/Security.txt</span><br><span class="line">null</span><br></pre></td></tr></table></figure>

<p><strong>从网络上下载资源</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class UrlDown &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        // 1.下载地址</span><br><span class="line">        URL url = new URL(&quot;http://127.0.0.1:8080/MrXie/Security.txt&quot;);</span><br><span class="line">        // 2.连接到这个资源  HTTP</span><br><span class="line">        HttpURLConnection urlConnection = (HttpURLConnection)url.openConnection();</span><br><span class="line">        InputStream inputStream = urlConnection.getInputStream();</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;SecurityFile.txt&quot;);</span><br><span class="line">        byte[] buffer = new byte[1024];</span><br><span class="line">        int len;</span><br><span class="line">        while ((len = inputStream.read(buffer))!= -1)&#123;</span><br><span class="line">            fos.write(buffer,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        urlConnection.disconnect();  // 断开连接</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将我Tomcat服务器上的资源下载到了本地。<strong>url可以写网络的资源连接</strong>，都可以下载。</p>
<h1 id="手写Web服务器"><a href="#手写Web服务器" class="headerlink" title="手写Web服务器"></a>手写Web服务器</h1><h4 id="处理请求数据信息"><a href="#处理请求数据信息" class="headerlink" title="处理请求数据信息"></a>处理请求数据信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.atguigu.webserver;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class Server01 &#123;</span><br><span class="line"></span><br><span class="line">    private ServerSocket serverSocket;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Server01 server = new Server01();</span><br><span class="line">        server.start();</span><br><span class="line">        server.receive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //启动服务器</span><br><span class="line">    public void start()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            serverSocket = new ServerSocket(8888);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;服务器启动失败&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //接受连接处理</span><br><span class="line">    public void receive()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Socket client = serverSocket.accept();</span><br><span class="line">            System.out.println(&quot;一个客户端建立连接&quot;);</span><br><span class="line">            InputStream is = client.getInputStream();</span><br><span class="line">            int len = 0;</span><br><span class="line">            byte[] buffer = new byte[1024*1024];</span><br><span class="line">            //管道流</span><br><span class="line">            len = is.read(buffer);</span><br><span class="line">            System.out.println(new String(buffer,0,len));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;客户端错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //停止</span><br><span class="line">    public void stop()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="回复响应数据"><a href="#回复响应数据" class="headerlink" title="回复响应数据"></a>回复响应数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.atguigu.webserver;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.OutputStreamWriter;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class Server02 &#123;</span><br><span class="line"></span><br><span class="line">    private ServerSocket serverSocket;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Server02 server = new Server02();</span><br><span class="line">        server.start();</span><br><span class="line">        server.receive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //启动服务器</span><br><span class="line">    public void start()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            serverSocket = new ServerSocket(8888);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;服务器启动失败&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //接受连接处理</span><br><span class="line">    public void receive()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(&quot;你好&quot;);</span><br><span class="line">            Socket client = serverSocket.accept();</span><br><span class="line">            System.out.println(&quot;一个客户端建立连接2&quot;);</span><br><span class="line">            InputStream is = client.getInputStream();</span><br><span class="line">            int len = 0;</span><br><span class="line">            byte[] buffer = new byte[1024*1024];</span><br><span class="line">            //管道流</span><br><span class="line">            len = is.read(buffer);</span><br><span class="line">            System.out.println(new String(buffer,0,len));</span><br><span class="line"></span><br><span class="line">            StringBuilder content = new StringBuilder();</span><br><span class="line">            content.append(&quot;&lt;div&gt;helloworld&lt;/div&gt;&quot;);</span><br><span class="line">            int size = content.length();</span><br><span class="line">            StringBuilder responseInfo = new StringBuilder();</span><br><span class="line">            String blank = &quot; &quot;;</span><br><span class="line">            responseInfo.append(&quot;HTTP/1.1 200 OK\n&quot;);</span><br><span class="line">//            responseInfo.append(&quot;Content-type:text/html&quot;).append(CRLF);</span><br><span class="line">            responseInfo.append(&quot;content-length:&quot;+size+&quot;\n\n&quot;);</span><br><span class="line">            //正文</span><br><span class="line">            responseInfo.append(content);</span><br><span class="line">//            写到客户端</span><br><span class="line">            BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(client.getOutputStream()));</span><br><span class="line">            bw.write(responseInfo.toString());</span><br><span class="line">            bw.flush();</span><br><span class="line">            //返回</span><br><span class="line">            //1.响应行:HTTP/1.1 200 OK</span><br><span class="line">            //2.响应头(最后一行存在空行)</span><br><span class="line">            /*</span><br><span class="line">            Content-type:text/html</span><br><span class="line">            Content-length:39725426</span><br><span class="line">             */</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;客户端错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //停止</span><br><span class="line">    public void stop()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="封装Request请求"><a href="#封装Request请求" class="headerlink" title="封装Request请求"></a>封装Request请求</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.atguigu.webserver;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class Request &#123;</span><br><span class="line">    //协议信息</span><br><span class="line">    public String requestInfo;</span><br><span class="line"></span><br><span class="line">    //请求方式</span><br><span class="line">    public String method;</span><br><span class="line"></span><br><span class="line">    //请求URL</span><br><span class="line">    public String url;</span><br><span class="line">    //请求字符串</span><br><span class="line">    public String queryStr;</span><br><span class="line"></span><br><span class="line">    //获取输入流</span><br><span class="line">    public Request(InputStream inputStream) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int len = 0;</span><br><span class="line">            byte[] buffer = new byte[1024*1024];</span><br><span class="line">            //管道流</span><br><span class="line">            len = inputStream.read(buffer);</span><br><span class="line">            this.requestInfo = new String(buffer,0,len);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Request(Socket socket) throws IOException &#123;</span><br><span class="line">        this(socket.getInputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //分解字符串</span><br><span class="line">    private void parseRequestInfo()&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;--------分解-------------&quot;);</span><br><span class="line">        //获取请求协议</span><br><span class="line">        this.method = this.requestInfo.substring(0,this.requestInfo.indexOf(&quot;/&quot;)).toLowerCase();</span><br><span class="line">        this.url = this.requestInfo.substring(this.requestInfo.indexOf(&quot;/&quot;)+1,this.requestInfo.indexOf(&quot;HTTP/&quot;));</span><br><span class="line">        int queryIdx = this.url.indexOf(&quot;?&quot;);</span><br><span class="line">        if(queryIdx&gt;0)&#123;</span><br><span class="line">            String[] urlArray = this.url.split(&quot;\\?&quot;);</span><br><span class="line">            this.url = urlArray[0];</span><br><span class="line">            this.queryStr=urlArray[1];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //get在url中获取，post可能在请求体中</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="解析xml文件"><a href="#解析xml文件" class="headerlink" title="解析xml文件"></a>解析xml文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.atguigu.webserver;</span><br><span class="line"></span><br><span class="line">import org.xml.sax.Attributes;</span><br><span class="line">import org.xml.sax.SAXException;</span><br><span class="line">import org.xml.sax.helpers.DefaultHandler;</span><br><span class="line"></span><br><span class="line">import javax.xml.parsers.ParserConfigurationException;</span><br><span class="line">import javax.xml.parsers.SAXParser;</span><br><span class="line">import javax.xml.parsers.SAXParserFactory;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class XmlTest01 &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException, SAXException &#123;</span><br><span class="line">        //获取解析工厂</span><br><span class="line">        SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">        //获取解析器</span><br><span class="line">        SAXParser saxParser =null;</span><br><span class="line">        try &#123;</span><br><span class="line">            saxParser = factory.newSAXParser();</span><br><span class="line">        &#125; catch (ParserConfigurationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (SAXException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //加载文档Document注册处理器</span><br><span class="line">        //编写处理器</span><br><span class="line">        PersonHandler handler = new PersonHandler();</span><br><span class="line">        saxParser.parse(Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;com/atguigu/webserver/p.xml&quot;),handler);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class PersonHandler extends DefaultHandler&#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException &#123;</span><br><span class="line">        System.out.println(&quot;开始标签&quot;);</span><br><span class="line">        System.out.println(qName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void characters(char[] ch, int start, int length) throws SAXException &#123;</span><br><span class="line">        String contents = new String(ch,start,length);</span><br><span class="line">        System.out.println(&quot;内容为&quot;+contents);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void endElement(String uri, String localName, String qName) throws SAXException &#123;</span><br><span class="line">        System.out.println(&quot;结束标签:&quot;);</span><br><span class="line">        System.out.println(qName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二种</p>
<p>导入依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.dom4j&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;dom4j&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.1.3&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>解析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void readXml() throws Exception&#123;</span><br><span class="line">      //1.创建Reader对象</span><br><span class="line">       SAXReader saxReader = new SAXReader();</span><br><span class="line">        //2.加载xml</span><br><span class="line">       Document document = saxReader.read(new File(&quot;D:/1.xml&quot;));</span><br><span class="line">       //3.获取根节点</span><br><span class="line">       Element rootElement = document.getRootElement();</span><br><span class="line">       // rootElement.elements()获取根节点下所有的节点，</span><br><span class="line">       List&lt;Element&gt; elements = rootElement.elements();</span><br><span class="line">       //获取节点book1下属性为id的值 003</span><br><span class="line">      rootElement.element(&quot;book1&quot;).attribute(&quot;id&quot;).getValue()；</span><br><span class="line">      </span><br><span class="line">       for (Element element : elements) &#123;</span><br><span class="line">           //依次遍历根节点下的节点  book book book1</span><br><span class="line">           element.getName();</span><br><span class="line">           //依次遍历根节点下的节点对应属性为id的值 001 002 003</span><br><span class="line">           System.out.println(element.attribute(&quot;id&quot;).getValue());</span><br><span class="line">           System.out.println(&quot;----------------------------&quot;);</span><br><span class="line">           //同样道理 继续依次获取该节点下的节点 </span><br><span class="line">           List&lt;Element&gt; child = element.elements();</span><br><span class="line">           for (Element element1 : child) &#123;</span><br><span class="line">               /依次/获取子节点  id title author   、title  author、title author  </span><br><span class="line">                element1.getName();</span><br><span class="line">                //依次获取子节点的值 9  Harry Potter  J K. Rowling、.......</span><br><span class="line">               System.out.println(element1.getText());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       // 获取第二个节点book的属性为id的值 002</span><br><span class="line">       elements.get(1).attribute(&quot;id&quot;).getValue();</span><br><span class="line">       // 获取根节点下第二个节点book所有节点</span><br><span class="line">       List&lt;Element&gt; elements1 = elements.get(1).elements();</span><br><span class="line">       //获取根节点下第二个节点book节点下的第二个节点author的值 Erik T. Ray</span><br><span class="line">        elements.get(1).elements().get(1).getText();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>第三种</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//建立DocumentBuilderFactor，用于获得DocumentBuilder对象：</span><br><span class="line">        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">        //建立DocumentBuidler;</span><br><span class="line">        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();</span><br><span class="line">        //import org.w3c.dom.Document;</span><br><span class="line">        Document document = documentBuilder.parse(new File(&quot;D:/1.xml&quot;));</span><br><span class="line">        NodeList node = document.getElementsByTagName(&quot;linkman&quot;);</span><br><span class="line">        for (int i = 0; i &lt; node.getLength(); i++) &#123;</span><br><span class="line">            Element e = (Element)node.item(i);</span><br><span class="line">            String name = e.getElementsByTagName(&quot;name&quot;).item(0).getFirstChild().getNodeValue();</span><br><span class="line">            String email = e.getElementsByTagName(&quot;email&quot;).item(0).getFirstChild().getNodeValue();</span><br><span class="line">            System.out.println(name);</span><br><span class="line">            System.out.println(email);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
        <category>网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>Netty学习记录</title>
    <url>/2022/06/07/Netty%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="Spring-Boot整合Websocket协议"><a href="#Spring-Boot整合Websocket协议" class="headerlink" title="Spring Boot整合Websocket协议"></a>Spring Boot整合Websocket协议</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- websocket --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="添加配置类WebsocketConfig"><a href="#添加配置类WebsocketConfig" class="headerlink" title="添加配置类WebsocketConfig"></a>添加配置类WebsocketConfig</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.example.websocket.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class WebSocketConfig &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 注入一个ServerEndpointExporter,该Bean会自动注册使用@ServerEndpoint注解申明的websocket endpoint</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public ServerEndpointExporter serverEndpointExporter() &#123;</span><br><span class="line">        return new ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编写WebScoketServer类"><a href="#编写WebScoketServer类" class="headerlink" title="编写WebScoketServer类"></a>编写WebScoketServer类</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.example.websocket.component;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONArray;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.websocket.*;</span><br><span class="line">import javax.websocket.server.PathParam;</span><br><span class="line">import javax.websocket.server.ServerEndpoint;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author websocket服务</span><br><span class="line"> */</span><br><span class="line">@ServerEndpoint(value = &quot;/imserver/&#123;username&#125;&quot;)</span><br><span class="line">@Component</span><br><span class="line">public class WebSocketServer &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger log = LoggerFactory.getLogger(WebSocketServer.class);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 记录当前在线连接数</span><br><span class="line">     */</span><br><span class="line">    public static final Map&lt;String, Session&gt; sessionMap = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 连接建立成功调用的方法</span><br><span class="line">     */</span><br><span class="line">    @OnOpen</span><br><span class="line">    public void onOpen(Session session, @PathParam(&quot;username&quot;) String username) &#123;</span><br><span class="line">        sessionMap.put(username, session);</span><br><span class="line">        log.info(&quot;有新用户加入，username=&#123;&#125;, 当前在线人数为：&#123;&#125;&quot;, username, sessionMap.size());</span><br><span class="line">        JSONObject result = new JSONObject();</span><br><span class="line">        JSONArray array = new JSONArray();</span><br><span class="line">        /*result.set(&quot;users&quot;, array);</span><br><span class="line">        for (Object key : sessionMap.keySet()) &#123;</span><br><span class="line">            JSONObject jsonObject = new JSONObject();</span><br><span class="line">            jsonObject.set(&quot;username&quot;, key);</span><br><span class="line">            // &#123;&quot;username&quot;, &quot;zhang&quot;, &quot;username&quot;: &quot;admin&quot;&#125;</span><br><span class="line">            array.add(jsonObject);</span><br><span class="line">        &#125;</span><br><span class="line">//        &#123;&quot;users&quot;: [&#123;&quot;username&quot;: &quot;zhang&quot;&#125;,&#123; &quot;username&quot;: &quot;admin&quot;&#125;]&#125;</span><br><span class="line">        sendAllMessage(JSONUtil.toJsonStr(result));  // 后台发送消息给所有的客户端*/</span><br><span class="line">        sendAllMessage(&quot;hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 连接关闭调用的方法</span><br><span class="line">     */</span><br><span class="line">    @OnClose</span><br><span class="line">    public void onClose(Session session, @PathParam(&quot;username&quot;) String username) &#123;</span><br><span class="line">        sessionMap.remove(username);</span><br><span class="line">        log.info(&quot;有一连接关闭，移除username=&#123;&#125;的用户session, 当前在线人数为：&#123;&#125;&quot;, username, sessionMap.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 收到客户端消息后调用的方法</span><br><span class="line">     * 后台收到客户端发送过来的消息</span><br><span class="line">     * onMessage 是一个消息的中转站</span><br><span class="line">     * 接受 浏览器端 socket.send 发送过来的 json数据</span><br><span class="line">     * @param message 客户端发送过来的消息</span><br><span class="line">     */</span><br><span class="line">    @OnMessage</span><br><span class="line">    public void onMessage(String message, Session session, @PathParam(&quot;username&quot;) String username) &#123;</span><br><span class="line">        log.info(&quot;服务端收到用户username=&#123;&#125;的消息:&#123;&#125;&quot;, username, message);</span><br><span class="line">        /*JSONObject obj = JSONUtil.parseObj(message);</span><br><span class="line">        String toUsername = obj.getStr(&quot;to&quot;); // to表示发送给哪个用户，比如 admin</span><br><span class="line">        String text = obj.getStr(&quot;text&quot;); // 发送的消息文本  hello</span><br><span class="line">        // &#123;&quot;to&quot;: &quot;admin&quot;, &quot;text&quot;: &quot;聊天文本&quot;&#125;</span><br><span class="line">        Session toSession = sessionMap.get(toUsername); // 根据 to用户名来获取 session，再通过session发送消息文本</span><br><span class="line">        if (toSession != null) &#123;</span><br><span class="line">            // 服务器端 再把消息组装一下，组装后的消息包含发送人和发送的文本内容</span><br><span class="line">            // &#123;&quot;from&quot;: &quot;zhang&quot;, &quot;text&quot;: &quot;hello&quot;&#125;</span><br><span class="line">            JSONObject jsonObject = new JSONObject();</span><br><span class="line">            jsonObject.set(&quot;from&quot;, username);  // from 是 zhang</span><br><span class="line">            jsonObject.set(&quot;text&quot;, text);  // text 同上面的text</span><br><span class="line">            this.sendMessage(jsonObject.toString(), toSession);</span><br><span class="line">            log.info(&quot;发送给用户username=&#123;&#125;，消息：&#123;&#125;&quot;, toUsername, jsonObject.toString());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            log.info(&quot;发送失败，未找到用户username=&#123;&#125;的session&quot;, toUsername);</span><br><span class="line">        &#125;*/</span><br><span class="line">        System.out.println(message);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        sendAllMessage(&quot;用户名&quot;+message);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @OnError</span><br><span class="line">    public void onError(Session session, Throwable error) &#123;</span><br><span class="line">        log.error(&quot;发生错误&quot;);</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 服务端发送消息给客户端</span><br><span class="line">     */</span><br><span class="line">    private void sendMessage(String message, Session toSession) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            log.info(&quot;服务端给客户端[&#123;&#125;]发送消息&#123;&#125;&quot;, toSession.getId(), message);</span><br><span class="line">            toSession.getBasicRemote().sendText(message);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;服务端发送消息给客户端失败&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 服务端发送消息给所有客户端</span><br><span class="line">     */</span><br><span class="line">    private void sendAllMessage(String message) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            for (Session session : sessionMap.values()) &#123;</span><br><span class="line">                log.info(&quot;服务端给客户端[&#123;&#125;]发送消息&#123;&#125;&quot;, session.getId(), message);</span><br><span class="line">                session.getBasicRemote().sendText(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;服务端发送消息给客户端失败&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置application-properties配置文件"><a href="#配置application-properties配置文件" class="headerlink" title="配置application.properties配置文件"></a>配置application.properties配置文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 应用名称</span><br><span class="line">spring.application.name=websocket</span><br><span class="line"></span><br><span class="line"># 应用服务 WEB 访问端口</span><br><span class="line">server.port=8080</span><br><span class="line"></span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/</span><br><span class="line">spring.thymeleaf.suffix=.html</span><br></pre></td></tr></table></figure>

<h2 id="编写index-html"><a href="#编写index-html" class="headerlink" title="编写index.html"></a>编写index.html</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var socket;</span><br><span class="line">    //判断当前浏览器是否支持websocket</span><br><span class="line">    if(window.WebSocket) &#123;</span><br><span class="line">        //go on</span><br><span class="line">        socket = new WebSocket(&quot;ws://localhost:8080/imserver/zhangsan&quot;);</span><br><span class="line">        //相当于channelReado, ev 收到服务器端回送的消息</span><br><span class="line">        socket.onmessage = function (ev) &#123;</span><br><span class="line">            var rt = document.getElementById(&quot;responseText&quot;);</span><br><span class="line">            rt.value = rt.value + &quot;\n&quot; + ev.data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //相当于连接开启(感知到连接开启)</span><br><span class="line">        socket.onopen = function (ev) &#123;</span><br><span class="line">            var rt = document.getElementById(&quot;responseText&quot;);</span><br><span class="line">            rt.value = &quot;连接开启了..&quot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //相当于连接关闭(感知到连接关闭)</span><br><span class="line">        socket.onclose = function (ev) &#123;</span><br><span class="line"></span><br><span class="line">            var rt = document.getElementById(&quot;responseText&quot;);</span><br><span class="line">            rt.value = rt.value + &quot;\n&quot; + &quot;连接关闭了..&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        alert(&quot;当前浏览器不支持websocket&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //发送消息到服务器</span><br><span class="line">    function send(message) &#123;</span><br><span class="line">        if(!window.socket) &#123; //先判断socket是否创建好</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        if(socket.readyState == WebSocket.OPEN) &#123;</span><br><span class="line">            //通过socket 发送消息</span><br><span class="line">            socket.send(message)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            alert(&quot;连接没有开启&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;form onsubmit=&quot;return false&quot;&gt;</span><br><span class="line">    &lt;textarea name=&quot;message&quot; style=&quot;height: 300px; width: 300px&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;发生消息&quot; onclick=&quot;send(this.form.message.value)&quot;&gt;</span><br><span class="line">    &lt;textarea id=&quot;responseText&quot; style=&quot;height: 300px; width: 300px&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;清空内容&quot; onclick=&quot;document.getElementById(&#x27;responseText&#x27;).value=&#x27;&#x27;&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h2 id="NIO网络编程应用实例-群聊系统"><a href="#NIO网络编程应用实例-群聊系统" class="headerlink" title="NIO网络编程应用实例 - 群聊系统"></a>NIO网络编程应用实例 - 群聊系统</h2><p>实例要求：</p>
<p>编写一个 NIO 群聊系统，实现服务器端和客户端之间的数据简单通讯（非阻塞）<br>实现多人群聊<br>服务器端：可以监测用户上线，离线，并实现消息转发功能<br>客户端：通过 Channel 可以无阻塞发送消息给其它所有用户，同时可以接受其它用户发送的消息（有服务器转发得到）<br>目的：进一步理解 NIO 非阻塞网络编程机制<br>示意图分析和代码</p>
<p><img src="https://s2.loli.net/2022/06/07/RPuBFoWdlUmAwHa.png" alt="img"></p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 服务端：</span><br><span class="line"></span><br><span class="line">package com.atguigu.nio.groupchat;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line">import java.nio.ByteBuffer;</span><br><span class="line">import java.nio.channels.Channel;</span><br><span class="line">import java.nio.channels.SelectionKey;</span><br><span class="line">import java.nio.channels.Selector;</span><br><span class="line">import java.nio.channels.ServerSocketChannel;</span><br><span class="line">import java.nio.channels.SocketChannel;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">public class GroupChatServer &#123;</span><br><span class="line"></span><br><span class="line">    //定义属性</span><br><span class="line">    private Selector selector;</span><br><span class="line">    private ServerSocketChannel listenChannel;</span><br><span class="line"></span><br><span class="line">    private static final int PORT = 6667;</span><br><span class="line"></span><br><span class="line">    //构造器</span><br><span class="line">    //初始化工作</span><br><span class="line">    public GroupChatServer() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //得到选择器</span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            //ServerSocketChannel</span><br><span class="line">            listenChannel = ServerSocketChannel.open();</span><br><span class="line">            //绑定端口</span><br><span class="line">            listenChannel.socket().bind(new InetSocketAddress(PORT));</span><br><span class="line">            //设置非阻塞模式</span><br><span class="line">            listenChannel.configureBlocking(false);</span><br><span class="line">            //将该 listenChannel 注册到 selector</span><br><span class="line">            listenChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void listen() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //循环处理</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                int count = selector.select();</span><br><span class="line">                if (count &gt; 0) &#123; //有事件处理</span><br><span class="line">                    // 遍历得到 selectionKey 集合</span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                    while (iterator.hasNext()) &#123;</span><br><span class="line">                        //取出 selectionkey</span><br><span class="line">                        SelectionKey key = iterator.next();</span><br><span class="line">                        //监听到 accept</span><br><span class="line">                        if (key.isAcceptable()) &#123;</span><br><span class="line">                            SocketChannel sc = listenChannel.accept();</span><br><span class="line">                            sc.configureBlocking(false);</span><br><span class="line">                            //将该 sc 注册到 seletor</span><br><span class="line">                            sc.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                            //提示</span><br><span class="line">                            System.out.println(sc.getRemoteAddress() + &quot; 上线 &quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (key.isReadable()) &#123;//通道发送read事件，即通道是可读的状态</span><br><span class="line">                            // 处理读(专门写方法..)</span><br><span class="line">                            readData(key);</span><br><span class="line">                        &#125;</span><br><span class="line">                        //当前的 key 删除，防止重复处理</span><br><span class="line">                        iterator.remove();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    System.out.println(&quot;等待....&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            //发生异常处理....</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //读取客户端消息</span><br><span class="line">    public void readData(SelectionKey key) &#123;</span><br><span class="line">        SocketChannel channel = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //得到 channel</span><br><span class="line">            channel = (SocketChannel) key.channel();</span><br><span class="line">            //创建 buffer</span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(1024);</span><br><span class="line">            int count = channel.read(buffer);</span><br><span class="line">            //根据 count 的值做处理</span><br><span class="line">            if (count &gt; 0) &#123;</span><br><span class="line">                //把缓存区的数据转成字符串</span><br><span class="line">                String msg = new String(buffer.array());</span><br><span class="line">                //输出该消息</span><br><span class="line">                System.out.println(&quot;form客户端:&quot; + msg);</span><br><span class="line">                //向其它的客户端转发消息(去掉自己),专门写一个方法来处理</span><br><span class="line">                sendInfoToOtherClients(msg, channel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                System.out.println(channel.getRemoteAddress() + &quot;离线了..&quot;);</span><br><span class="line">                //取消注册</span><br><span class="line">                key.cancel();</span><br><span class="line">                //关闭通道</span><br><span class="line">                channel.close();</span><br><span class="line">            &#125; catch (IOException e2) &#123;</span><br><span class="line">                e2.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //转发消息给其它客户(通道)</span><br><span class="line">    private void sendInfoToOtherClients(String msg, SocketChannel self) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;服务器转发消息中...&quot;);</span><br><span class="line">        //遍历所有注册到 selector 上的 SocketChannel,并排除 self</span><br><span class="line">        for (SelectionKey key : selector.keys()) &#123;</span><br><span class="line">            //通过 key 取出对应的 SocketChannel</span><br><span class="line">            Channel targetChannel = key.channel();</span><br><span class="line">            //排除自己</span><br><span class="line">            if (targetChannel instanceof SocketChannel &amp;&amp; targetChannel != self) &#123;</span><br><span class="line">                //转型</span><br><span class="line">                SocketChannel dest = (SocketChannel) targetChannel;</span><br><span class="line">                //将 msg 存储到 buffer</span><br><span class="line">                ByteBuffer buffer = ByteBuffer.wrap(msg.getBytes());</span><br><span class="line">                //将 buffer 的数据写入通道</span><br><span class="line">                dest.write(buffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建服务器对象</span><br><span class="line">        GroupChatServer groupChatServer = new GroupChatServer();</span><br><span class="line">        groupChatServer.listen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 客户端：</span><br><span class="line"></span><br><span class="line">package com.atguigu.nio.groupchat;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line">import java.nio.ByteBuffer;</span><br><span class="line">import java.nio.channels.SelectionKey;</span><br><span class="line">import java.nio.channels.Selector;</span><br><span class="line">import java.nio.channels.SocketChannel;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class GroupChatClient &#123;</span><br><span class="line"></span><br><span class="line">    //定义相关的属性</span><br><span class="line">    private final String HOST = &quot;127.0.0.1&quot;;//服务器的ip</span><br><span class="line">    private final int PORT = 6667;//服务器端口</span><br><span class="line">    private Selector selector;</span><br><span class="line">    private SocketChannel socketChannel;</span><br><span class="line">    private String username;</span><br><span class="line"></span><br><span class="line">    //构造器,完成初始化工作</span><br><span class="line">    public GroupChatClient() throws IOException &#123;</span><br><span class="line">        </span><br><span class="line">        selector = Selector.open();</span><br><span class="line">        //连接服务器</span><br><span class="line">        socketChannel = SocketChannel.open(new InetSocketAddress(HOST, PORT));</span><br><span class="line">        //设置非阻塞</span><br><span class="line">        socketChannel.configureBlocking(false);</span><br><span class="line">        //将 channel 注册到selector</span><br><span class="line">        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        //得到 username</span><br><span class="line">        username = socketChannel.getLocalAddress().toString().substring(1);</span><br><span class="line">        System.out.println(username + &quot; is ok...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //向服务器发送消息</span><br><span class="line">    public void sendInfo(String info) &#123;</span><br><span class="line">        info = username + &quot; 说：&quot; + info;</span><br><span class="line">        try &#123;</span><br><span class="line">            socketChannel.write(ByteBuffer.wrap(info.getBytes()));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //读取从服务器端回复的消息</span><br><span class="line">    public void readInfo() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int readChannels = selector.select();</span><br><span class="line">            if (readChannels &gt; 0) &#123;//有可以用的通道</span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                while (iterator.hasNext()) &#123;</span><br><span class="line">                    SelectionKey key = iterator.next();</span><br><span class="line">                    if (key.isReadable()) &#123;</span><br><span class="line">                        //得到相关的通道</span><br><span class="line">                        SocketChannel sc = (SocketChannel) key.channel();</span><br><span class="line">                        //得到一个 Buffer</span><br><span class="line">                        ByteBuffer buffer = ByteBuffer.allocate(1024);</span><br><span class="line">                        //读取</span><br><span class="line">                        sc.read(buffer);</span><br><span class="line">                        //把读到的缓冲区的数据转成字符串</span><br><span class="line">                        String msg = new String(buffer.array());</span><br><span class="line">                        System.out.println(msg.trim());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                iterator.remove(); //删除当前的 selectionKey,防止重复操作</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //System.out.println(&quot;没有可以用的通道...&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        //启动我们客户端</span><br><span class="line">        GroupChatClient chatClient = new GroupChatClient();</span><br><span class="line">        //启动一个线程,每个 3 秒，读取从服务器发送数据</span><br><span class="line">        new Thread() &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                while (true) &#123;</span><br><span class="line">                    chatClient.readInfo();</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.currentThread().sleep(3000);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        //发送数据给服务器端</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line">        while (scanner.hasNextLine()) &#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            chatClient.sendInfo(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="NIO与零拷贝"><a href="#NIO与零拷贝" class="headerlink" title="NIO与零拷贝"></a>NIO与零拷贝</h2><blockquote>
<p>1、尚硅谷这里的零拷贝感觉讲的感觉有点问题，但是为了笔记的完整性，任然保留了这里的笔记。不过笔者考虑再写一篇零拷贝。</p>
<p>2、而且这里课件的图也看不太清</p>
<p>3、读者可以将我写的零拷贝和尚硅谷这里讲的零拷贝对照着看，取长补短</p>
</blockquote>
<h2 id="零拷贝基本介绍"><a href="#零拷贝基本介绍" class="headerlink" title="零拷贝基本介绍"></a>零拷贝基本介绍</h2><p>零拷贝是网络编程的关键，很多性能优化都离不开。<br>在 Java 程序中，常用的零拷贝有 mmap（内存映射）和 sendFile。那么，他们在 OS 里，到底是怎么样的一个的设计？我们分析 mmap 和 sendFile 这两个零拷贝<br>另外我们看下 NIO 中如何使用零拷贝</p>
<h3 id="传统-IO-数据读写"><a href="#传统-IO-数据读写" class="headerlink" title="传统 IO 数据读写"></a>传统 IO 数据读写</h3><p><code>Java</code> 传统 <code>IO</code> 和网络编程的一段代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">File file = new File(&quot;test.txt&quot;);</span><br><span class="line">RandomAccessFile raf = new RandomAccessFile(file, &quot;rw&quot;);</span><br><span class="line"></span><br><span class="line">byte[] arr = new byte[(int) file.length()];</span><br><span class="line">raf.read(arr);</span><br><span class="line"></span><br><span class="line">Socket socket = new ServerSocket(8080).accept();</span><br><span class="line">socket.getOutputStream().write(arr);</span><br></pre></td></tr></table></figure>

<p><strong>DMA</strong>：<code>direct memory access</code> 直接内存拷贝（不使用 <code>CPU</code>）</p>
<h3 id="mmap-优化"><a href="#mmap-优化" class="headerlink" title="mmap 优化"></a>mmap 优化</h3><ol>
<li><code>mmap</code> 通过内存映射，将文件映射到内核缓冲区，同时，用户空间可以共享内核空间的数据。这样，在进行网络传输时，就可以减少内核空间到用户空间的拷贝次数。如下图<img src="https://s2.loli.net/2022/06/07/uJ3KvjYNtLwPGqz.png" alt="img"></li>
</ol>
<h3 id="sendFile-优化"><a href="#sendFile-优化" class="headerlink" title="sendFile 优化"></a>sendFile 优化</h3><p>1.<code>Linux2.1</code> 版本提供了 <code>sendFile</code> 函数，其基本原理如下：数据根本不经过用户态，直接从内核缓冲区进入到 <code>SocketBuffer</code>，同时，由于和用户态完全无关，就减少了一次上下文切换</p>
<p><img src="https://s2.loli.net/2022/06/07/HtON1B2JzXGh34u.png" alt="img"></p>
<p><img src="https://s2.loli.net/2022/06/07/DIubCNSsVLdhcFn.png" alt="img"></p>
<p>2.提示：零拷贝从操作系统角度，是没有 <code>cpu</code> 拷贝</p>
<p>3.<code>Linux在2.4</code> 版本中，做了一些修改，避免了从内核缓冲区拷贝到 <code>Socketbuffer</code> 的操作，直接拷贝到协议栈，从而再一次减少了数据拷贝。具体如下图和小结：</p>
<p>4.这里其实有一次 <code>cpu</code> 拷贝 <code>kernel buffer</code> -&gt; <code>socket buffer</code> 但是，拷贝的信息很少，比如 <code>lenght</code>、<code>offset</code> 消耗低，可以忽略</p>
<h3 id="零拷贝的再次理解"><a href="#零拷贝的再次理解" class="headerlink" title="零拷贝的再次理解"></a>零拷贝的再次理解</h3><ol>
<li>我们说零拷贝，是从操作系统的角度来说的。因为内核缓冲区之间，没有数据是重复的（只有 <code>kernel buffer</code> 有一份数据）。</li>
<li>零拷贝不仅仅带来更少的数据复制，还能带来其他的性能优势，例如更少的上下文切换，更少的 <code>CPU</code> 缓存伪共享以及无 <code>CPU</code> 校验和计算。</li>
</ol>
<h3 id="mmap-和-sendFile-的区别"><a href="#mmap-和-sendFile-的区别" class="headerlink" title="mmap 和 sendFile 的区别"></a>mmap 和 sendFile 的区别</h3><p>mmap 适合小数据量读写，sendFile 适合大文件传输。<br>mmap 需要 4 次上下文切换，3 次数据拷贝；sendFile 需要 3 次上下文切换，最少 2 次数据拷贝。<br>sendFile 可以利用 DMA 方式，减少 CPU 拷贝，mmap 则不能（必须从内核拷贝到 Socket缓冲区）。</p>
<h3 id="NIO-零拷贝案例"><a href="#NIO-零拷贝案例" class="headerlink" title="NIO 零拷贝案例"></a>NIO 零拷贝案例</h3><p>案例要求：</p>
<ol>
<li>使用传统的 <code>IO</code> 方法传递一个大文件</li>
<li>使用 <code>NIO</code> 零拷贝方式传递（<code>transferTo</code>）一个大文件</li>
<li>看看两种传递方式耗时时间分别是多少</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NewIOServer.java</span><br><span class="line"></span><br><span class="line">package com.atguigu.nio.zerocopy;</span><br><span class="line"></span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.nio.ByteBuffer;</span><br><span class="line">import java.nio.channels.ServerSocketChannel;</span><br><span class="line">import java.nio.channels.SocketChannel;</span><br><span class="line"></span><br><span class="line">//服务器</span><br><span class="line">public class NewIOServer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        InetSocketAddress address = new InetSocketAddress(7001);</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        ServerSocket serverSocket = serverSocketChannel.socket();</span><br><span class="line">        serverSocket.bind(address);</span><br><span class="line"></span><br><span class="line">        //创建buffer</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(4096);</span><br><span class="line"></span><br><span class="line">        while (true) &#123;</span><br><span class="line">            SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">            int readcount = 0;</span><br><span class="line">            while (-1 != readcount) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    readcount = socketChannel.read(byteBuffer);</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    // ex.printStackTrace();</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                //</span><br><span class="line">                byteBuffer.rewind(); //倒带 position = 0 mark 作废</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NewIOClient.java</span><br><span class="line"></span><br><span class="line">package com.atguigu.nio.zerocopy;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line">import java.nio.channels.FileChannel;</span><br><span class="line">import java.nio.channels.SocketChannel;</span><br><span class="line"></span><br><span class="line">public class NewIOClient &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        socketChannel.connect(new InetSocketAddress(&quot;localhost&quot;, 7001));</span><br><span class="line">        String filename = &quot;protoc-3.6.1-win32.zip&quot;;</span><br><span class="line">        //得到一个文件channel</span><br><span class="line">        FileChannel fileChannel = new FileInputStream(filename).getChannel();</span><br><span class="line">        //准备发送</span><br><span class="line">        long startTime = System.currentTimeMillis();</span><br><span class="line">        //在 linux 下一个 transferTo 方法就可以完成传输</span><br><span class="line">        //在 windows 下一次调用 transferTo 只能发送 8m, 就需要分段传输文件,而且要主要</span><br><span class="line">        //传输时的位置=》课后思考...</span><br><span class="line">        //transferTo 底层使用到零拷贝</span><br><span class="line">        long transferCount = fileChannel.transferTo(0, fileChannel.size(), socketChannel);</span><br><span class="line">        System.out.println(&quot;发送的总的字节数 = &quot; + transferCount + &quot; 耗时: &quot; + (System.currentTimeMillis() - startTime));</span><br><span class="line"></span><br><span class="line">        //关闭</span><br><span class="line">        fileChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java-AIO-基本介绍"><a href="#Java-AIO-基本介绍" class="headerlink" title="Java AIO 基本介绍"></a>Java AIO 基本介绍</h3><p>JDK7 引入了 AsynchronousI/O，即 AIO。在进行 I/O 编程中，常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务器端得到通知，进行相应的处理<br>AIO 即 NIO2.0，叫做异步不阻塞的 IO。AIO 引入异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用<br>目前 AIO 还没有广泛应用，Netty 也是基于 NIO，而不是 AIO，因此我们就不详解 AIO 了，有兴趣的同学可以参考《Java新一代网络编程模型AIO原理及Linux系统AIO介绍》</p>
<h2 id="BIO、NIO、AIO-对比表"><a href="#BIO、NIO、AIO-对比表" class="headerlink" title="BIO、NIO、AIO 对比表"></a>BIO、NIO、AIO 对比表</h2><table>
<thead>
<tr>
<th></th>
<th>BIO</th>
<th>NIO</th>
<th>AIO</th>
</tr>
</thead>
<tbody><tr>
<td>IO模型</td>
<td>同步阻塞</td>
<td>同步非阻塞（多路复用）</td>
<td>异步非阻塞</td>
</tr>
<tr>
<td>编程难度</td>
<td>简单</td>
<td>复杂</td>
<td>复杂</td>
</tr>
<tr>
<td>可靠性</td>
<td>差</td>
<td>好</td>
<td>好</td>
</tr>
<tr>
<td>吞吐量</td>
<td>低</td>
<td>高</td>
<td>高</td>
</tr>
</tbody></table>
<p><strong>举例说明</strong></p>
<ol>
<li>同步阻塞：到理发店理发，就一直等理发师，直到轮到自己理发。</li>
<li>同步非阻塞：到理发店理发，发现前面有其它人理发，给理发师说下，先干其他事情，一会过来看是否轮到自己.</li>
<li>异步非阻塞：给理发师打电话，让理发师上门服务，自己干其它事情，理发师自己来家给你理发</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>MyCat数据库中间键</title>
    <url>/2022/03/04/MyCat%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E9%94%AE/</url>
    <content><![CDATA[<h2 id="为什么要用MyCat？"><a href="#为什么要用MyCat？" class="headerlink" title="为什么要用MyCat？"></a>为什么要用MyCat？</h2><p><img src="https://s2.loli.net/2022/03/04/HxD7tvdiB1q5mws.png" alt="image-20220304095929912"></p>
<h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p><img src="https://s2.loli.net/2022/03/04/wH2Kt1aub9ZDFeS.png" alt="image-20220304100507586"></p>
<h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><h4 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h4><p><img src="https://s2.loli.net/2022/03/04/PW8hxiB6CrOeMZH.png" alt="image-20220304100845625"></p>
<h2 id="多数据源整合操作"><a href="#多数据源整合操作" class="headerlink" title="多数据源整合操作"></a>多数据源整合操作</h2><p><img src="https://s2.loli.net/2022/03/04/27wRFyLPblUE5uB.png" alt="image-20220304100944375"></p>
<h2 id="Windows安装配置文件"><a href="#Windows安装配置文件" class="headerlink" title="Windows安装配置文件"></a>Windows安装配置文件</h2><h4 id="版本为1-6版本，不然无法启动"><a href="#版本为1-6版本，不然无法启动" class="headerlink" title="版本为1.6版本，不然无法启动"></a>版本为1.6版本，不然无法启动</h4><h3 id="wrapper-conf"><a href="#wrapper-conf" class="headerlink" title="wrapper.conf"></a>wrapper.conf</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#********************************************************************</span><br><span class="line"># Wrapper Properties</span><br><span class="line">#********************************************************************</span><br><span class="line"># Java Application</span><br><span class="line">wrapper.java.command=C:\Program Files\Java\jdk1.8.0_101\bin\java.exe</span><br><span class="line">wrapper.working.dir=..</span><br><span class="line"></span><br><span class="line"># Java Main class.  This class must implement the WrapperListener interface</span><br></pre></td></tr></table></figure>

<h3 id="server-xml"><a href="#server-xml" class="headerlink" title="server.xml"></a>server.xml</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;user name=&quot;root&quot;&gt;</span><br><span class="line">	&lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt;</span><br><span class="line">	&lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!-- 表级 DML 权限设置 --&gt;</span><br><span class="line">	&lt;!-- 		</span><br><span class="line">	&lt;privileges check=&quot;false&quot;&gt;</span><br><span class="line">		&lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;</span><br><span class="line">			&lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span><br><span class="line">			&lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span><br><span class="line">		&lt;/schema&gt;</span><br><span class="line">	&lt;/privileges&gt;		</span><br><span class="line">	 --&gt;</span><br><span class="line">&lt;/user&gt;</span><br></pre></td></tr></table></figure>

<h3 id="schema-xml"><a href="#schema-xml" class="headerlink" title="schema.xml"></a>schema.xml</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;</span><br><span class="line">&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;</span><br><span class="line"></span><br><span class="line">	&lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot;  dataNode=&quot;dn1&quot;&gt;</span><br><span class="line">		</span><br><span class="line">	&lt;/schema&gt;</span><br><span class="line">	&lt;!-- &lt;dataNode name=&quot;dn1$0-743&quot; dataHost=&quot;localhost1&quot; database=&quot;db$0-743&quot;</span><br><span class="line">		/&gt; --&gt;</span><br><span class="line">	&lt;dataNode name=&quot;dn1&quot; dataHost=&quot;localhost1&quot; database=&quot;test&quot; /&gt;</span><br><span class="line">	&lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;</span><br><span class="line">			  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;</span><br><span class="line">		&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class="line">		&lt;!-- can have multi write hosts --&gt;</span><br><span class="line">		&lt;writeHost host=&quot;hostM1&quot; url=&quot;localhost:3306&quot; user=&quot;root&quot;</span><br><span class="line">				   password=&quot;123456&quot;&gt;</span><br><span class="line">			&lt;!-- can have multi read hosts --&gt;</span><br><span class="line">			&lt;readHost host=&quot;hostS2&quot; url=&quot;localhost:3306&quot; user=&quot;root&quot; password=&quot;123456&quot; /&gt;</span><br><span class="line">		&lt;/writeHost&gt;</span><br><span class="line"></span><br><span class="line">		&lt;!-- &lt;writeHost host=&quot;hostM2&quot; url=&quot;localhost:3316&quot; user=&quot;root&quot; password=&quot;123456&quot;/&gt; --&gt;</span><br><span class="line">	&lt;/dataHost&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/mycat:schema&gt;</span><br></pre></td></tr></table></figure>

<h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="https://s2.loli.net/2022/03/04/IxRLzUGY5CJH6F3.png" alt="image-20220304112127300"></p>
<h1 id="分库分表实战"><a href="#分库分表实战" class="headerlink" title="分库分表实战"></a>分库分表实战</h1><h3 id="遇到的问题：服务启动不了，jdk报错"><a href="#遇到的问题：服务启动不了，jdk报错" class="headerlink" title="遇到的问题：服务启动不了，jdk报错"></a>遇到的问题：服务启动不了，jdk报错</h3><p><img src="https://s2.loli.net/2022/03/24/SdQ3RjAcHteJYUD.png" alt="image-20220324130036501"></p>
<h3 id="server-xml-设置登录密码，和端口号"><a href="#server-xml-设置登录密码，和端口号" class="headerlink" title="server.xml:(设置登录密码，和端口号)"></a>server.xml:(设置登录密码，和端口号)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!-- - - Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); </span><br><span class="line">	- you may not use this file except in compliance with the License. - You </span><br><span class="line">	may obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0 </span><br><span class="line">	- - Unless required by applicable law or agreed to in writing, software - </span><br><span class="line">	distributed under the License is distributed on an &quot;AS IS&quot; BASIS, - WITHOUT </span><br><span class="line">	WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the </span><br><span class="line">	License for the specific language governing permissions and - limitations </span><br><span class="line">	under the License. --&gt;</span><br><span class="line">&lt;!DOCTYPE mycat:server SYSTEM &quot;server.dtd&quot;&gt;</span><br><span class="line">&lt;mycat:server xmlns:mycat=&quot;http://io.mycat/&quot;&gt;</span><br><span class="line">	&lt;system&gt;</span><br><span class="line">	&lt;property name=&quot;useSqlStat&quot;&gt;0&lt;/property&gt;  &lt;!-- 1为开启实时统计、0为关闭 --&gt;</span><br><span class="line">	&lt;property name=&quot;useGlobleTableCheck&quot;&gt;0&lt;/property&gt;  &lt;!-- 1为开启全加班一致性检测、0为关闭 --&gt;</span><br><span class="line"></span><br><span class="line">		&lt;property name=&quot;sequnceHandlerType&quot;&gt;2&lt;/property&gt;</span><br><span class="line">      &lt;!--  &lt;property name=&quot;useCompression&quot;&gt;1&lt;/property&gt;--&gt; &lt;!--1为开启mysql压缩协议--&gt;</span><br><span class="line">        &lt;!--  &lt;property name=&quot;fakeMySQLVersion&quot;&gt;5.6.20&lt;/property&gt;--&gt; &lt;!--设置模拟的MySQL版本号--&gt;</span><br><span class="line">	&lt;!-- &lt;property name=&quot;processorBufferChunk&quot;&gt;40960&lt;/property&gt; --&gt;</span><br><span class="line">	&lt;!-- </span><br><span class="line">	&lt;property name=&quot;processors&quot;&gt;1&lt;/property&gt; </span><br><span class="line">	&lt;property name=&quot;processorExecutor&quot;&gt;32&lt;/property&gt; </span><br><span class="line">	 --&gt;</span><br><span class="line">		&lt;!--默认为type 0: DirectByteBufferPool | type 1 ByteBufferArena--&gt;</span><br><span class="line">		&lt;property name=&quot;processorBufferPoolType&quot;&gt;0&lt;/property&gt;</span><br><span class="line">		&lt;!--默认是65535 64K 用于sql解析时最大文本长度 --&gt;</span><br><span class="line">		&lt;!--&lt;property name=&quot;maxStringLiteralLength&quot;&gt;65535&lt;/property&gt;--&gt;</span><br><span class="line">		&lt;!--&lt;property name=&quot;sequnceHandlerType&quot;&gt;0&lt;/property&gt;--&gt;</span><br><span class="line">		&lt;!--&lt;property name=&quot;backSocketNoDelay&quot;&gt;1&lt;/property&gt;--&gt;</span><br><span class="line">		&lt;!--&lt;property name=&quot;frontSocketNoDelay&quot;&gt;1&lt;/property&gt;--&gt;</span><br><span class="line">		&lt;!--&lt;property name=&quot;processorExecutor&quot;&gt;16&lt;/property&gt;--&gt;</span><br><span class="line">		&lt;!--</span><br><span class="line">			&lt;property name=&quot;serverPort&quot;&gt;8066&lt;/property&gt; &lt;property name=&quot;managerPort&quot;&gt;9066&lt;/property&gt; </span><br><span class="line">			&lt;property name=&quot;idleTimeout&quot;&gt;300000&lt;/property&gt; &lt;property name=&quot;bindIp&quot;&gt;0.0.0.0&lt;/property&gt; </span><br><span class="line">			&lt;property name=&quot;frontWriteQueueSize&quot;&gt;4096&lt;/property&gt; &lt;property name=&quot;processors&quot;&gt;32&lt;/property&gt; --&gt;</span><br><span class="line">		&lt;!--分布式事务开关，0为不过滤分布式事务，1为过滤分布式事务（如果分布式事务内只涉及全局表，则不过滤），2为不过滤分布式事务,但是记录分布式事务日志--&gt;</span><br><span class="line">		&lt;property name=&quot;handleDistributedTransactions&quot;&gt;0&lt;/property&gt;</span><br><span class="line">		</span><br><span class="line">			&lt;!--</span><br><span class="line">			off heap for merge/order/group/limit      1开启   0关闭</span><br><span class="line">		--&gt;</span><br><span class="line">		&lt;property name=&quot;useOffHeapForMerge&quot;&gt;1&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">		&lt;!--</span><br><span class="line">			单位为m</span><br><span class="line">		--&gt;</span><br><span class="line">		&lt;property name=&quot;memoryPageSize&quot;&gt;1m&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">		&lt;!--</span><br><span class="line">			单位为k</span><br><span class="line">		--&gt;</span><br><span class="line">		&lt;property name=&quot;spillsFileBufferSize&quot;&gt;1k&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">		&lt;property name=&quot;useStreamOutput&quot;&gt;0&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">		&lt;!--</span><br><span class="line">			单位为m</span><br><span class="line">		--&gt;</span><br><span class="line">		&lt;property name=&quot;systemReserveMemorySize&quot;&gt;384m&lt;/property&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&lt;!--是否采用zookeeper协调切换  --&gt;</span><br><span class="line">		&lt;property name=&quot;useZKSwitch&quot;&gt;true&lt;/property&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&lt;/system&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!-- 全局SQL防火墙设置 --&gt;</span><br><span class="line">	&lt;!-- </span><br><span class="line">	&lt;firewall&gt; </span><br><span class="line">	   &lt;whitehost&gt;</span><br><span class="line">	      &lt;host host=&quot;127.0.0.1&quot; user=&quot;mycat&quot;/&gt;</span><br><span class="line">	      &lt;host host=&quot;127.0.0.2&quot; user=&quot;mycat&quot;/&gt;</span><br><span class="line">	   &lt;/whitehost&gt;</span><br><span class="line">       &lt;blacklist check=&quot;false&quot;&gt;</span><br><span class="line">       &lt;/blacklist&gt;</span><br><span class="line">	&lt;/firewall&gt;</span><br><span class="line">	--&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;user name=&quot;root&quot;&gt;</span><br><span class="line">		&lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt;</span><br><span class="line">		&lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;!-- 表级 DML 权限设置 --&gt;</span><br><span class="line">		&lt;!-- 		</span><br><span class="line">		&lt;privileges check=&quot;false&quot;&gt;</span><br><span class="line">			&lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;</span><br><span class="line">				&lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span><br><span class="line">				&lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span><br><span class="line">			&lt;/schema&gt;</span><br><span class="line">		&lt;/privileges&gt;		</span><br><span class="line">		 --&gt;</span><br><span class="line">	&lt;/user&gt;</span><br><span class="line"></span><br><span class="line">	&lt;user name=&quot;user&quot;&gt;</span><br><span class="line">		&lt;property name=&quot;password&quot;&gt;user&lt;/property&gt;</span><br><span class="line">		&lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt;</span><br><span class="line">		&lt;property name=&quot;readOnly&quot;&gt;true&lt;/property&gt;</span><br><span class="line">	&lt;/user&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mycat:server&gt;</span><br></pre></td></tr></table></figure>

<h1 id="设置数据库连接方式："><a href="#设置数据库连接方式：" class="headerlink" title="设置数据库连接方式："></a>设置数据库连接方式：</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;</span><br><span class="line">&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;</span><br><span class="line"></span><br><span class="line">	&lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot;  dataNode=&quot;dn1&quot;&gt;</span><br><span class="line">		&lt;table name=&quot;order&quot; dataNode=&quot;dn2&quot; &gt;&lt;/table&gt;</span><br><span class="line">		&lt;!--分表策略--&gt;</span><br><span class="line">		&lt;table name=&quot;orders&quot; dataNode=&quot;dn1,dn2&quot; rule=&quot;mod_rule&quot; &gt;&lt;/table&gt;</span><br><span class="line">	&lt;/schema&gt;</span><br><span class="line">	&lt;!-- &lt;dataNode name=&quot;dn1$0-743&quot; dataHost=&quot;localhost1&quot; database=&quot;db$0-743&quot;</span><br><span class="line">		/&gt; --&gt;</span><br><span class="line">	&lt;dataNode name=&quot;dn1&quot; dataHost=&quot;localhost1&quot; database=&quot;mycat1&quot; /&gt;</span><br><span class="line">	&lt;dataNode name=&quot;dn2&quot; dataHost=&quot;localhost2&quot; database=&quot;mycat2&quot; /&gt;</span><br><span class="line">	&lt;!--&lt;dataNode name=&quot;dn4&quot; dataHost=&quot;sequoiadb1&quot; database=&quot;SAMPLE&quot; /&gt;</span><br><span class="line">	 &lt;dataNode name=&quot;jdbc_dn1&quot; dataHost=&quot;jdbchost&quot; database=&quot;db1&quot; /&gt;</span><br><span class="line">	&lt;dataNode	name=&quot;jdbc_dn2&quot; dataHost=&quot;jdbchost&quot; database=&quot;db2&quot; /&gt;</span><br><span class="line">	&lt;dataNode name=&quot;jdbc_dn3&quot; 	dataHost=&quot;jdbchost&quot; database=&quot;db3&quot; /&gt; --&gt;</span><br><span class="line">	&lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;</span><br><span class="line">			  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;</span><br><span class="line">		&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class="line">		&lt;!-- can have multi write hosts --&gt;</span><br><span class="line">		&lt;writeHost host=&quot;hostM1&quot; url=&quot;localhost:3306&quot; user=&quot;root&quot;</span><br><span class="line">				   password=&quot;123456&quot;&gt;</span><br><span class="line">			</span><br><span class="line">		&lt;/writeHost&gt;</span><br><span class="line"></span><br><span class="line">		&lt;!-- &lt;writeHost host=&quot;hostM2&quot; url=&quot;localhost:3316&quot; user=&quot;root&quot; password=&quot;123456&quot;/&gt; --&gt;</span><br><span class="line">	&lt;/dataHost&gt;</span><br><span class="line">	&lt;dataHost name=&quot;localhost2&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot; slaveThreshold=&quot;100&quot;&gt;</span><br><span class="line">		&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class="line">		 &lt;!-- can have multi write hosts --&gt;</span><br><span class="line">		 &lt;writeHost host=&quot;hostM2&quot; url=&quot;localhost:3306&quot; user=&quot;root&quot;</span><br><span class="line">		 password=&quot;123456&quot;&gt;</span><br><span class="line">		 &lt;/writeHost&gt;</span><br><span class="line">	&lt;/dataHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mycat:schema&gt;</span><br></pre></td></tr></table></figure>

<h2 id="设置分片规则"><a href="#设置分片规则" class="headerlink" title="设置分片规则"></a>设置分片规则</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在 rule 配置文件里新增分片规则 mod_rule，并指定规则适用字段为 customer_id， #还有选择分片算法 mod-long（对字段求模运算），customer_id 对两个节点求模，根据结果分片</span><br><span class="line">#配置算法 mod-long 参数 count 为 2，两个节点</span><br><span class="line">&lt;tableRule name=&quot;mod_rule&quot;&gt;</span><br><span class="line"> &lt;rule&gt;</span><br><span class="line"> &lt;columns&gt;customer_id&lt;/columns&gt;</span><br><span class="line"> &lt;algorithm&gt;mod-long&lt;/algorithm&gt;</span><br><span class="line"> &lt;/rule&gt;</span><br><span class="line"> &lt;/tableRule&gt;</span><br><span class="line">…</span><br><span class="line">&lt;function name=&quot;mod-long&quot; class=&quot;io.mycat.route.function.PartitionByMod&quot;&gt;</span><br><span class="line"> &lt;!-- how many data nodes --&gt;</span><br><span class="line"> &lt;property name=&quot;count&quot;&gt;2&lt;/property&gt;</span><br><span class="line"> &lt;/function&gt;</span><br><span class="line"></span><br><span class="line"> #如下图：</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\社畜\AppData\Roaming\Typora\typora-user-images\image-20220324125318385.png" alt="image-20220324125318385"></p>
<p><strong>5</strong>、 在数据节点 <strong>dn2</strong> <strong>上建</strong> <strong>orders</strong> <strong>表</strong> </p>
<p><strong>6</strong>、 重启 <strong>Mycat</strong>，让配置生效**</p>
<p><strong>7</strong>、 访问 <strong>Mycat</strong> <strong>实现分片</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在 mycat 里向 orders 表插入数据，INSERT 字段不能省略</span><br><span class="line">INSERT INTO orders(id,order_type,customer_id,amount) VALUES (1,101,100,100100);</span><br><span class="line">INSERT INTO orders(id,order_type,customer_id,amount) VALUES(2,101,100,100300);</span><br><span class="line">INSERT INTO orders(id,order_type,customer_id,amount) VALUES(3,101,101,120000);</span><br><span class="line">INSERT INTO orders(id,order_type,customer_id,amount) VALUES(4,101,101,103000);</span><br><span class="line">INSERT INTO orders(id,order_type,customer_id,amount) VALUES(5,102,101,100400);</span><br><span class="line">INSERT INTO orders(id,order_type,customer_id,amount) VALUES(6,102,100,100020);</span><br><span class="line">#在mycat、dn1、dn2中查看orders表数据，分表成功</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/03/24/2KkFLWcfnQP4uRe.png" alt="image-20220324125528215"></p>
<h1 id="5-2-Mycat-的分片-join"><a href="#5-2-Mycat-的分片-join" class="headerlink" title="5.2 Mycat 的分片 join"></a><strong>5.2 Mycat</strong> 的分片 join</h1><p>我们要对 orders_detail 也要进行分片操作。Join 的原理如下图： </p>
]]></content>
      <categories>
        <category>mysql</category>
        <category>数据库</category>
        <category>中间键</category>
      </categories>
  </entry>
  <entry>
    <title>PyQT5学习记录</title>
    <url>/2022/07/27/PyQT5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="将-ui文件转换为-py文件"><a href="#将-ui文件转换为-py文件" class="headerlink" title="将.ui文件转换为.py文件"></a>将.ui文件转换为.py文件</h1><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>python -m PyQt5.uic.pyuic demo.ui -o demo.py</p>
<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>pyuic5 demo.ui -o  demo.py</p>
]]></content>
  </entry>
  <entry>
    <title>RabbitMQ学习记录</title>
    <url>/2022/01/19/RabbitMQ%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="Docker-启动Rabbitmq"><a href="#Docker-启动Rabbitmq" class="headerlink" title="Docker 启动Rabbitmq"></a>Docker 启动Rabbitmq</h2><p>下载镜像，<code>rabbitmq:management</code> 镜像中已经安装了管理界面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure>

<p>关闭防火墙</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"> </span><br><span class="line"># 重启 docker 系统服务</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>配置管理员用户名和密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /etc/rabbitmq</span><br><span class="line">vim /etc/rabbitmq/rabbitmq.conf</span><br><span class="line"></span><br><span class="line"># 添加两行配置：</span><br><span class="line">default_user = admin</span><br><span class="line">default_pass = admin</span><br></pre></td></tr></table></figure>

<p>启动Rabbitmq</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name rabbit \</span><br><span class="line">-p 5672:5672 \</span><br><span class="line">-p 15672:15672 \</span><br><span class="line">-v /etc/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf \</span><br><span class="line">-e RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq.conf \</span><br><span class="line">--restart=always \</span><br><span class="line">rabbitmq:management</span><br></pre></td></tr></table></figure>

<p>访问管理控制台 <a href="http://192.168.64.140:15672/">http://192.168.199.128:15672</a><br>用户名密码是 admin</p>
<h2 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h2><p><strong>下载离线安装包文件</strong></p>
<ul>
<li><a href="https://download.csdn.net/download/weixin_38305440/12265906">https://download.csdn.net/download/weixin_38305440/12265906</a></li>
</ul>
<p><strong>上传离线安装包</strong></p>
<ul>
<li><code>rabbitmq-install</code> 目录上传到 <code>/root</code></li>
</ul>
<p><strong>切换到<code>rabbitmq-install</code>目录</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd rabbitmq-install</span><br></pre></td></tr></table></figure>

<p><strong>安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh *.rpm</span><br></pre></td></tr></table></figure>

<h3 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br><span class="line">docker load -i rabbit-image.gz</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>



<h2 id="Yum在线安装"><a href="#Yum在线安装" class="headerlink" title="Yum在线安装"></a>Yum在线安装</h2><p>以下内容来自 RabbitMQ 官方手册</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm --import https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># centos7 用这个</span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/rabbitmq.repo</span><br><span class="line">[bintray-rabbitmq-server]</span><br><span class="line">name=bintray-rabbitmq-rpm</span><br><span class="line">baseurl=https://dl.bintray.com/rabbitmq/rpm/rabbitmq-server/v3.8.x/el/7/</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># centos6 用这个</span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/rabbitmq.repo</span><br><span class="line">[bintray-rabbitmq-server]</span><br><span class="line">name=bintray-rabbitmq-rpm</span><br><span class="line">baseurl=https://dl.bintray.com/rabbitmq/rpm/rabbitmq-server/v3.8.x/el/6/</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line">yum install socat</span><br><span class="line"></span><br><span class="line">wget https://github.com/rabbitmq/erlang-rpm/releases/download/v21.3.8.12/erlang-21.3.8.12-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh erlang-21.3.8.12-1.el7.x86_64.rpm --force --nodeps</span><br><span class="line"></span><br><span class="line">yum install rabbitmq-server</span><br></pre></td></tr></table></figure>

<h2 id="启动rabbitmq服务器"><a href="#启动rabbitmq服务器" class="headerlink" title="启动rabbitmq服务器"></a>启动rabbitmq服务器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置服务,开机自动启动</span><br><span class="line">systemctl enable rabbitmq-server</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">systemctl start rabbitmq-server</span><br></pre></td></tr></table></figure>

<h2 id="rabbitmq管理界面"><a href="#rabbitmq管理界面" class="headerlink" title="rabbitmq管理界面"></a>rabbitmq管理界面</h2><h3 id="启用管理界面"><a href="#启用管理界面" class="headerlink" title="启用管理界面"></a>启用管理界面</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启管理界面插件</span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br><span class="line"></span><br><span class="line"># 防火墙打开 15672 管理端口</span><br><span class="line">firewall-cmd --zone=public --add-port=15672/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h3 id="重启RabbitMQ服务"><a href="#重启RabbitMQ服务" class="headerlink" title="重启RabbitMQ服务"></a>重启RabbitMQ服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart rabbitmq-server</span><br></pre></td></tr></table></figure>

<p>访问<br>访问服务器的15672端口,例如:</p>
<p><a href="http://192.168.64.140:15672/">http://192.168.64.140:15672</a></p>
<p>添加用户<br>添加用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加用户</span><br><span class="line">rabbitmqctl add_user admin admin</span><br><span class="line"># 新用户设置用户为超级管理员</span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure>



<h1 id="简单模式——Hello-Word"><a href="#简单模式——Hello-Word" class="headerlink" title="简单模式——Hello Word"></a>简单模式——Hello Word</h1><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;amqp-client&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.4.3&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        // 连接服务器</span><br><span class="line">        ConnectionFactory f = new ConnectionFactory();</span><br><span class="line">        f.setHost(&quot;192.168.199.128&quot;); // wht6.cn</span><br><span class="line">        f.setPort(5672); // 5672用来收发消息， 15672是管理控制台端口</span><br><span class="line">        f.setUsername(&quot;admin&quot;);</span><br><span class="line">        f.setPassword(&quot;admin&quot;);</span><br><span class="line">        Connection con = f.newConnection();</span><br><span class="line">        Channel c = con.createChannel(); // 通信通道</span><br><span class="line"></span><br><span class="line">        // 在服务器上创建一个队列：helloworld</span><br><span class="line">        // 如果队列在服务器上已经存在，不会重复创建</span><br><span class="line">        /*</span><br><span class="line">        参数：</span><br><span class="line">          第2个参数： 是否是持久队列</span><br><span class="line">          第3个参数： 是否是排他队列、独占队列</span><br><span class="line">          第4个参数： 是否自动删除</span><br><span class="line">          第5个参数： 队列的其他属性</span><br><span class="line">         */</span><br><span class="line">        c.queueDeclare(&quot;helloworld&quot;,false,false,false,null);</span><br><span class="line"></span><br><span class="line">        // 向 helloworld 队列发送消息</span><br><span class="line">        /*</span><br><span class="line">        &quot;&quot; - 默认的交换机</span><br><span class="line">        null - 消息的其他参数属性</span><br><span class="line">         */</span><br><span class="line">        c.basicPublish(&quot;&quot;, &quot;helloworld&quot;, null, &quot;Hello world!&quot;.getBytes());</span><br><span class="line"></span><br><span class="line">        c.close();</span><br><span class="line">        con.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        // 连接服务器</span><br><span class="line">        ConnectionFactory f = new ConnectionFactory();</span><br><span class="line">        f.setHost(&quot;192.168.199.128&quot;); // wht6.cn</span><br><span class="line">        f.setPort(5672); // 5672用来收发消息， 15672是管理控制台端口</span><br><span class="line">        f.setUsername(&quot;admin&quot;);</span><br><span class="line">        f.setPassword(&quot;admin&quot;);</span><br><span class="line">        Connection con = f.newConnection();</span><br><span class="line">        Channel c = con.createChannel(); // 通信通道</span><br><span class="line"></span><br><span class="line">        c.queueDeclare(&quot;helloworld&quot;,false,false,false,null);</span><br><span class="line"></span><br><span class="line">        // 创建回调对象</span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, message) -&gt; &#123;</span><br><span class="line">            byte[] a = message.getBody();</span><br><span class="line">            String s = new String(a);</span><br><span class="line">            System.out.println(&quot;收到： &quot;+s);</span><br><span class="line">        &#125;;</span><br><span class="line">        CancelCallback cancelCallback = consumerTag -&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        // 开始接收消息，把消息传递给一个回调对象进行处理</span><br><span class="line">        /*</span><br><span class="line">        第二个参数：</span><br><span class="line">            是否自动确认， autoAck</span><br><span class="line">            Ack - Acknowledgement</span><br><span class="line">         */</span><br><span class="line">        c.basicConsume(&quot;helloworld&quot;, true, deliverCallback, cancelCallback);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="负载均衡方式发送消息-工作模式"><a href="#负载均衡方式发送消息-工作模式" class="headerlink" title="负载均衡方式发送消息(工作模式)"></a>负载均衡方式发送消息(工作模式)</h4><h3 id="手动确认消息"><a href="#手动确认消息" class="headerlink" title="手动确认消息"></a>手动确认消息</h3><h4 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        // 连接服务器</span><br><span class="line">        ConnectionFactory f = new ConnectionFactory();</span><br><span class="line">        f.setHost(&quot;192.168.64.140&quot;); // wht6.cn</span><br><span class="line">        f.setPort(5672); // 5672用来收发消息， 15672是管理控制台端口</span><br><span class="line">        f.setUsername(&quot;admin&quot;);</span><br><span class="line">        f.setPassword(&quot;admin&quot;);</span><br><span class="line">        Connection con = f.newConnection();</span><br><span class="line">        Channel c = con.createChannel(); // 通信通道</span><br><span class="line">        // 在服务器上创建一个队列：helloworld,第二个参数是否是持久队列，创建过的队列不能变</span><br><span class="line">        c.queueDeclare(&quot;task_queue&quot;,true,false,false,null);</span><br><span class="line">        //向helloworld队列发送消息</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            System.out.print(&quot;输入消息：&quot;);</span><br><span class="line">            String s = new Scanner(System.in).nextLine();</span><br><span class="line">            //发送持久的消息</span><br><span class="line">            c.basicPublish(&quot;&quot;, &quot;task_queue&quot;, MessageProperties.PERSISTENT_BASIC, s.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        // 连接服务器</span><br><span class="line">        ConnectionFactory f = new ConnectionFactory();</span><br><span class="line">        f.setHost(&quot;192.168.64.140&quot;); // wht6.cn</span><br><span class="line">        f.setPort(5672); // 5672用来收发消息， 15672是管理控制台端口</span><br><span class="line">        f.setUsername(&quot;admin&quot;);</span><br><span class="line">        f.setPassword(&quot;admin&quot;);</span><br><span class="line">        Connection con = f.newConnection();</span><br><span class="line">        Channel c = con.createChannel(); // 通信通道</span><br><span class="line">        // 在服务器上创建一个队列：helloworld</span><br><span class="line">        c.queueDeclare(&quot;task_queue&quot;,true,false,false,null);//</span><br><span class="line"></span><br><span class="line">        // 创建对调对象</span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, message) -&gt; &#123;</span><br><span class="line">            String s = new String(message.getBody());</span><br><span class="line">            System.out.println(&quot;收到： &quot;+s);</span><br><span class="line">            //遍历消息所有字符，每遇到一个 &#x27;.&#x27; 暂停1秒，模拟耗时任务</span><br><span class="line">            for (int i = 0; i &lt;s.length(); i++) &#123;</span><br><span class="line">                if (s.charAt(i) == &#x27;.&#x27;) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(1000);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //发送回执</span><br><span class="line">            // c.basicAck(回执, 是否同时确认之前收到过的多条消息);</span><br><span class="line">            c.basicAck(message.getEnvelope().getDeliveryTag(), false);</span><br><span class="line">            System.out.println(&quot;-------------------------消息处理完成&quot;);</span><br><span class="line">        &#125;;</span><br><span class="line">        CancelCallback cancelCallback = consumerTag -&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        // qos=1，每次收一条，处理完之前不收下一条，手动ack模式下才有效</span><br><span class="line">        c.basicQos(1);</span><br><span class="line"></span><br><span class="line">        // 接收消息</span><br><span class="line">        c.basicConsume(&quot;task_queue&quot;,false,deliverCallback,cancelCallback);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Fanout模式——群发模式（发布订阅）"><a href="#Fanout模式——群发模式（发布订阅）" class="headerlink" title="Fanout模式——群发模式（发布订阅）"></a>Fanout模式——群发模式（发布订阅）</h2><h4 id="图解"><a href="#图解" class="headerlink" title="图解:"></a>图解:</h4><h4 id="消费者队列不共享"><a href="#消费者队列不共享" class="headerlink" title="消费者队列不共享"></a>消费者队列不共享</h4><p><img src="https://s2.loli.net/2022/02/05/xPZAsnr2JmWqpfX.png" alt="image-20220205130443682"></p>
<h3 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        // 连接服务器</span><br><span class="line">        ConnectionFactory f = new ConnectionFactory();</span><br><span class="line">        f.setHost(&quot;192.168.64.140&quot;); // wht6.cn</span><br><span class="line">        f.setPort(5672); // 5672用来收发消息， 15672是管理控制台端口</span><br><span class="line">        f.setUsername(&quot;admin&quot;);</span><br><span class="line">        f.setPassword(&quot;admin&quot;);</span><br><span class="line">        Connection con = f.newConnection();</span><br><span class="line">        Channel c = con.createChannel(); // 通信通道</span><br><span class="line"></span><br><span class="line">        // 创建 fanout 交换机： logs</span><br><span class="line">        // c.exchangeDeclare(&quot;logs&quot;, &quot;fanout&quot;);</span><br><span class="line">        c.exchangeDeclare(&quot;logs&quot;, BuiltinExchangeType.FANOUT); //默认非持久</span><br><span class="line"></span><br><span class="line">        // 向 logs 交换机发送消息</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            System.out.print(&quot;输入消息： &quot;);</span><br><span class="line">            String s = new Scanner(System.in).nextLine();</span><br><span class="line">            // 对 fanout 交换机，第二个参数无效</span><br><span class="line">            c.basicPublish(&quot;logs&quot;, &quot;&quot;, null, s.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="消费者-2"><a href="#消费者-2" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        // 连接服务器</span><br><span class="line">        ConnectionFactory f = new ConnectionFactory();</span><br><span class="line">        f.setHost(&quot;192.168.64.140&quot;); // wht6.cn</span><br><span class="line">        f.setPort(5672); // 5672用来收发消息， 15672是管理控制台端口</span><br><span class="line">        f.setUsername(&quot;admin&quot;);</span><br><span class="line">        f.setPassword(&quot;admin&quot;);</span><br><span class="line">        Connection con = f.newConnection();</span><br><span class="line">        Channel c = con.createChannel(); // 通信通道</span><br><span class="line"></span><br><span class="line">        // 1.创建队列 2.创建交换机 3.绑定</span><br><span class="line">        String queue = UUID.randomUUID().toString();</span><br><span class="line">        c.queueDeclare(queue, false, true, true, null);</span><br><span class="line">        c.exchangeDeclare(&quot;logs&quot;, BuiltinExchangeType.FANOUT);</span><br><span class="line">        // 对fanout交换机，第三个参数无效</span><br><span class="line">        c.queueBind(queue, &quot;logs&quot;, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">        // 正常从队列接收消息</span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, message) -&gt; &#123;</span><br><span class="line">            String s = new String(message.getBody());</span><br><span class="line">            System.out.println(&quot;收到： &quot;+s);</span><br><span class="line">        &#125;;</span><br><span class="line">        CancelCallback cancelCallback = consumerTag -&gt; &#123;&#125;;</span><br><span class="line">        c.basicConsume(queue, true, deliverCallback, cancelCallback);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Direct模式——路由模式"><a href="#Direct模式——路由模式" class="headerlink" title="Direct模式——路由模式"></a>Direct模式——路由模式</h2><h4 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h4><p><img src="https://s2.loli.net/2022/02/05/7vgDZnk9QdMHfR1.png" alt="image-20220205134616533"></p>
<h4 id="生产者-3"><a href="#生产者-3" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        // 连接服务器</span><br><span class="line">        ConnectionFactory f = new ConnectionFactory();</span><br><span class="line">        f.setHost(&quot;192.168.199.128&quot;); // wht6.cn</span><br><span class="line">        f.setPort(5672); // 5672用来收发消息， 15672是管理控制台端口</span><br><span class="line">        f.setUsername(&quot;admin&quot;);</span><br><span class="line">        f.setPassword(&quot;admin&quot;);</span><br><span class="line">        Connection con = f.newConnection();</span><br><span class="line">        Channel c = con.createChannel(); // 通信通道</span><br><span class="line"></span><br><span class="line">        // 创建 Direct 交换机： direct_logs</span><br><span class="line">        c.exchangeDeclare(&quot;direct_logs&quot;, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">        // 向交换机发送消息，并携带路由键关键词</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            System.out.print(&quot;输入消息：&quot;);</span><br><span class="line">            String s = new Scanner(System.in).nextLine();</span><br><span class="line">            System.out.print(&quot;输入路由键：&quot;);</span><br><span class="line">            String k = new Scanner(System.in).nextLine();</span><br><span class="line">            // 对默认交换机&quot;&quot;，会自动使用队列名作为路由键</span><br><span class="line">            c.basicPublish(&quot;direct_logs&quot;, k, null, s.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="消费者-3"><a href="#消费者-3" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        // 连接服务器</span><br><span class="line">        ConnectionFactory f = new ConnectionFactory();</span><br><span class="line">        f.setHost(&quot;192.168.199.128&quot;); // wht6.cn</span><br><span class="line">        f.setPort(5672); // 5672用来收发消息， 15672是管理控制台端口</span><br><span class="line">        f.setUsername(&quot;admin&quot;);</span><br><span class="line">        f.setPassword(&quot;admin&quot;);</span><br><span class="line">        Connection con = f.newConnection();</span><br><span class="line">        Channel c = con.createChannel(); // 通信通道</span><br><span class="line"></span><br><span class="line">        // 1.创建随机队列 2.创建交换机 3.使用绑定键关键词绑定</span><br><span class="line">        String queue = UUID.randomUUID().toString();</span><br><span class="line">        c.queueDeclare(queue, false, true, true, null);</span><br><span class="line">        c.exchangeDeclare(&quot;direct_logs&quot;, BuiltinExchangeType.DIRECT);</span><br><span class="line">        System.out.println(&quot;输入绑定键关键词，用空格隔开：&quot;);// aa bb  cc</span><br><span class="line">        String s = new Scanner(System.in).nextLine();</span><br><span class="line">        String[] a = s.split(&quot;\\s+&quot;); //   \s空白字符  +一到多个</span><br><span class="line">        for (String k : a) &#123;</span><br><span class="line">            c.queueBind(queue, &quot;direct_logs&quot;, k);</span><br><span class="line">        &#125;</span><br><span class="line">        // 正常接收消息</span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, message) -&gt; &#123;</span><br><span class="line">            String msg = new String(message.getBody());</span><br><span class="line">            String key = message.getEnvelope().getRoutingKey();</span><br><span class="line">            System.out.println(key+&quot; --- &quot;+msg);</span><br><span class="line">        &#125;;</span><br><span class="line">        CancelCallback cancelCallback = consumerTag -&gt; &#123;&#125;;</span><br><span class="line">        c.basicConsume(queue, true, deliverCallback, cancelCallback);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Topics模式——RabbitMQ主题模式"><a href="#Topics模式——RabbitMQ主题模式" class="headerlink" title="Topics模式——RabbitMQ主题模式"></a>Topics模式——RabbitMQ主题模式</h2><h4 id="关键词匹配"><a href="#关键词匹配" class="headerlink" title="关键词匹配"></a>关键词匹配</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a.orange.b		*.orange.*</span><br><span class="line">lazy.aa.bb		lazy.#</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/02/05/H2CTK6tAYaSyuhm.png" alt="image-20220205141400520"></p>
<h4 id="生产者-4"><a href="#生产者-4" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        // 连接服务器</span><br><span class="line">        ConnectionFactory f = new ConnectionFactory();</span><br><span class="line">        f.setHost(&quot;192.168.199.128&quot;); // wht6.cn</span><br><span class="line">        f.setPort(5672); // 5672用来收发消息， 15672是管理控制台端口</span><br><span class="line">        f.setUsername(&quot;admin&quot;);</span><br><span class="line">        f.setPassword(&quot;admin&quot;);</span><br><span class="line">        Connection con = f.newConnection();</span><br><span class="line">        Channel c = con.createChannel(); // 通信通道</span><br><span class="line"></span><br><span class="line">        // 创建 Topic 交换机： topic_logs</span><br><span class="line">        c.exchangeDeclare(&quot;topic_logs&quot;, BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line">        // 向交换机发送消息，并携带路由键关键词</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            System.out.print(&quot;输入消息：&quot;);</span><br><span class="line">            String s = new Scanner(System.in).nextLine();</span><br><span class="line">            System.out.print(&quot;输入路由键：&quot;);</span><br><span class="line">            String k = new Scanner(System.in).nextLine();</span><br><span class="line">            // 对默认交换机&quot;&quot;，会自动使用队列名作为路由键</span><br><span class="line">            c.basicPublish(&quot;topic_logs&quot;, k, null, s.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="消费者-4"><a href="#消费者-4" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException, TimeoutException &#123;</span><br><span class="line">        // 连接服务器</span><br><span class="line">        ConnectionFactory f = new ConnectionFactory();</span><br><span class="line">        f.setHost(&quot;192.168.199.128&quot;); // wht6.cn</span><br><span class="line">        f.setPort(5672); // 5672用来收发消息， 15672是管理控制台端口</span><br><span class="line">        f.setUsername(&quot;admin&quot;);</span><br><span class="line">        f.setPassword(&quot;admin&quot;);</span><br><span class="line">        Connection con = f.newConnection();</span><br><span class="line">        Channel c = con.createChannel(); // 通信通道</span><br><span class="line"></span><br><span class="line">        // 1.创建随机队列 2.创建交换机 3.使用绑定键关键词绑定</span><br><span class="line">        String queue = UUID.randomUUID().toString();</span><br><span class="line">        c.queueDeclare(queue, false, true, true, null);</span><br><span class="line">        c.exchangeDeclare(&quot;topic_logs&quot;, BuiltinExchangeType.TOPIC);</span><br><span class="line">        System.out.println(&quot;输入绑定键关键词，用空格隔开：&quot;);// aa bb  cc</span><br><span class="line">        String s = new Scanner(System.in).nextLine();</span><br><span class="line">        String[] a = s.split(&quot;\\s+&quot;); //   \s空白字符  +一到多个</span><br><span class="line">        for (String k : a) &#123;</span><br><span class="line">            c.queueBind(queue, &quot;topic_logs&quot;, k);</span><br><span class="line">        &#125;</span><br><span class="line">        // 正常接收消息</span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, message) -&gt; &#123;</span><br><span class="line">            String msg = new String(message.getBody());</span><br><span class="line">            String key = message.getEnvelope().getRoutingKey();</span><br><span class="line">            System.out.println(key+&quot; --- &quot;+msg);</span><br><span class="line">        &#125;;</span><br><span class="line">        CancelCallback cancelCallback = consumerTag -&gt; &#123;&#125;;</span><br><span class="line">        c.basicConsume(queue, true, deliverCallback, cancelCallback);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="BUS配置刷新"><a href="#BUS配置刷新" class="headerlink" title="BUS配置刷新"></a>BUS配置刷新</h2><h4 id="1-在2，3，4，9刷新BUS-Rabbitmq"><a href="#1-在2，3，4，9刷新BUS-Rabbitmq" class="headerlink" title="1.在2，3，4，9刷新BUS,Rabbitmq"></a>1.在2，3，4，9刷新BUS,Rabbitmq</h4><ul>
<li>​    Rabbitmq</li>
<li>​    bus</li>
<li>​    binder-rabbit</li>
<li>09 添加actuator依赖</li>
</ul>
<p>2.修改09的application.yml，添加Rabbitmq连接配置。</p>
<p>3.修改config目录中的三个配置文件，添加Rabbitmq连接配置</p>
<ul>
<li>​    添加Rabbitmq连接配置</li>
<li>​    暴露bus-refresh刷新路径</li>
</ul>
<p>4.提交推送到远程仓库</p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-bus&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-stream-binder-rabbit&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="09额外添加依赖"><a href="#09额外添加依赖" class="headerlink" title="09额外添加依赖"></a>09额外添加依赖</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="配置刷新"><a href="#配置刷新" class="headerlink" title="配置刷新"></a>配置刷新</h3><h5 id="浏览器查看是否暴露bus-refresh"><a href="#浏览器查看是否暴露bus-refresh" class="headerlink" title="浏览器查看是否暴露bus-refresh"></a>浏览器查看是否暴露bus-refresh</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:6001/actuator/</span><br><span class="line">&#123;&quot;_links&quot;:&#123;&quot;self&quot;:&#123;&quot;href&quot;:&quot;http://localhost:6001/actuator&quot;,&quot;templated&quot;:false&#125;,&quot;bus-refresh&quot;:&#123;&quot;href&quot;:&quot;http://localhost:6001/actuator/bus-refresh&quot;,&quot;templated&quot;:false&#125;,&quot;bus-refresh-destination&quot;:&#123;&quot;href&quot;:&quot;http://localhost:6001/actuator/bus-refresh/&#123;destination&#125;&quot;,&quot;templated&quot;:true&#125;&#125;&#125;</span><br><span class="line">测试</span><br><span class="line">POST http://localhost:6001/actuator/bus-refresh</span><br><span class="line">POST http://localhost:6001/actuator/bus-refresh/user-service</span><br><span class="line">查看 2，3，4控制台，有没有重新连接6001配置刷新</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/02/07/zgVOGYXPAZK1uWT.png" alt="image-20220207144311039"></p>
<h2 id="消息服务案例"><a href="#消息服务案例" class="headerlink" title="消息服务案例"></a>消息服务案例</h2><p>1.bus配置刷新</p>
<p>向rabbitmq发送刷新指令，其他模块接收指令并执行刷新操作。</p>
<p>主题模式</p>
<h3 id="sleuth-zipkin链路跟踪"><a href="#sleuth-zipkin链路跟踪" class="headerlink" title="sleuth+zipkin链路跟踪"></a>sleuth+zipkin链路跟踪</h3><p>sleuth</p>
<p>用来产生链路监控日志</p>
<p>A-&gt;B-&gt;C-&gt;D</p>
<p>02,03,04,06添加依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-sleuth&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-4-6添加zipkin客户端，向rabbitmq发送日志"><a href="#2-3-4-6添加zipkin客户端，向rabbitmq发送日志" class="headerlink" title="2,3,4,6添加zipkin客户端，向rabbitmq发送日志"></a>2,3,4,6添加zipkin客户端，向rabbitmq发送日志</h4><p>​    1.在2，3，4，6添加zipkin客户端依赖</p>
<p>​    2.在6中添加rabbitmq依赖</p>
<p>​    3.在6中添加rabbitmq连接配置</p>
<p>​    4.在2，3，4，6添加发送方式配置:rabbit(activemq,kafka,web)</p>
<h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="springboot整合rabbitmq"><a href="#springboot整合rabbitmq" class="headerlink" title="springboot整合rabbitmq"></a>springboot整合rabbitmq</h2><p><img src="https://s2.loli.net/2022/02/07/XJH2vVMjRnthCwE.png" alt="image-20220207170214165"></p>
<h3 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="fanout模式"><a href="#fanout模式" class="headerlink" title="fanout模式"></a>fanout模式</h3><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class RabbitMqConfiguration &#123;</span><br><span class="line">    //1:声明注册fanout模式的交换机</span><br><span class="line">    @Bean</span><br><span class="line">    public FanoutExchange fanoutExchange()&#123;</span><br><span class="line">        return new FanoutExchange(&quot;fanout_order_exchange&quot;,true,false);</span><br><span class="line">    &#125;</span><br><span class="line">    //2:声明队列sms.fanout.queue email.fanout.queue duanxin.fanout.queue</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Queue smsQueue()&#123;</span><br><span class="line">        return new Queue(&quot;sms.fanout.queue&quot;,true);</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue emailQueue()&#123;</span><br><span class="line">        return new Queue(&quot;email.fanout.queue&quot;,true);</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue duanxinQueue()&#123;</span><br><span class="line">        return new Queue(&quot;duanxin.fanout.queue&quot;,true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //3:完成绑定关系（队列和交换机）</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Binding smsBingding()&#123;</span><br><span class="line">        return BindingBuilder.bind(smsQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public Binding emailBingding()&#123;</span><br><span class="line">        return BindingBuilder.bind(emailQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public Binding duanxinBingding()&#123;</span><br><span class="line">        return BindingBuilder.bind(duanxinQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="生产者-5"><a href="#生产者-5" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class OrderService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 模拟用户下单</span><br><span class="line">     * @param userId</span><br><span class="line">     * @param productId</span><br><span class="line">     * @param num</span><br><span class="line">     */</span><br><span class="line">    public void makeOrder(String userId,String productId,int num)&#123;</span><br><span class="line">        String orderId = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(&quot;订单生产成功:&quot;+orderId);</span><br><span class="line">//        3.通过MQ来完成消息的分发</span><br><span class="line">        // 参数1：交换机 参数2：路由key/query队列名称 参数3：消息内容</span><br><span class="line">        String exchangeName = &quot;fanout_order_exchange&quot;;</span><br><span class="line">        String routingKey = &quot;&quot;;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class RabbitMqConfiguration &#123;</span><br><span class="line">    //1:声明注册fanout模式的交换机</span><br><span class="line">    @Bean</span><br><span class="line">    public FanoutExchange fanoutExchange()&#123;</span><br><span class="line">        return new FanoutExchange(&quot;fanout_order_exchange&quot;,true,false);</span><br><span class="line">    &#125;</span><br><span class="line">    //2:声明队列sms.fanout.queue email.fanout.queue duanxin.fanout.queue</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Queue smsQueue()&#123;</span><br><span class="line">        return new Queue(&quot;sms.fanout.queue&quot;,true);</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue emailQueue()&#123;</span><br><span class="line">        return new Queue(&quot;email.fanout.queue&quot;,true);</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue duanxinQueue()&#123;</span><br><span class="line">        return new Queue(&quot;duanxin.fanout.queue&quot;,true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //3:完成绑定关系（队列和交换机）</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Binding smsBingding()&#123;</span><br><span class="line">        return BindingBuilder.bind(smsQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public Binding emailBingding()&#123;</span><br><span class="line">        return BindingBuilder.bind(emailQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public Binding duanxinBingding()&#123;</span><br><span class="line">        return BindingBuilder.bind(duanxinQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">class RabbitmqApplicationTests &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    OrderService orderService;</span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() &#123;</span><br><span class="line">        orderService.makeOrder(&quot;1&quot;,&quot;1&quot;,12);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="消费者-5"><a href="#消费者-5" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">@RabbitListener(queues = &#123;&quot;duanxin.fanout.queue&quot;&#125;)</span><br><span class="line">public class FanoutDuanxinConsumer &#123;</span><br><span class="line"></span><br><span class="line">    @RabbitHandler</span><br><span class="line">    public void reviceMessage(String message)&#123;</span><br><span class="line">        System.out.println(&quot;duanxin.fanout.queue---接受消息-&gt;&quot;+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@RabbitListener(queues = &#123;&quot;email.fanout.queue&quot;&#125;)</span><br><span class="line">public class FanoutEmailConsumer &#123;</span><br><span class="line">    @RabbitHandler</span><br><span class="line">    public void reviceMessage(String message)&#123;</span><br><span class="line">        System.out.println(&quot;email.fanout.queue---接受消息-&gt;&quot;+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@RabbitListener(queues = &#123;&quot;sms.fanout.queue&quot;&#125;)</span><br><span class="line">public class FanoutSmsConsumer &#123;</span><br><span class="line"></span><br><span class="line">    @RabbitHandler</span><br><span class="line">    public void reviceMessage(String message)&#123;</span><br><span class="line">        System.out.println(&quot;sms.fanout.queue---接受消息-&gt;&quot;+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Direct模式"><a href="#Direct模式" class="headerlink" title="Direct模式"></a>Direct模式</h3><h3 id="配置类，设置绑定关系"><a href="#配置类，设置绑定关系" class="headerlink" title="配置类，设置绑定关系"></a>配置类，设置绑定关系</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class DirectRabbitMqConfiguration &#123;</span><br><span class="line"></span><br><span class="line">//    交换机:交换机名，交换机是否持久化，是否自动删除</span><br><span class="line">    @Bean</span><br><span class="line">    public DirectExchange directExchange()&#123;</span><br><span class="line">        return new DirectExchange(&quot;direct_order_exchange&quot;,true,false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //2:声明队列sms.fanout.queue email.fanout.queue duanxin.fanout.queue</span><br><span class="line">    //队列:队列名,设置队列是否删除</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue directSMSQueue()&#123;</span><br><span class="line">        return new Queue(&quot;sms.direct.queue&quot;,true);</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue directEmailQueue()&#123;</span><br><span class="line">        return new Queue(&quot;email.direct.queue&quot;,true);</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue directDuanxinQueue()&#123;</span><br><span class="line">        return new Queue(&quot;duanxin.direct.queue&quot;,true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //3:完成绑定关系（队列和交换机）</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Binding directsmsBingding()&#123;</span><br><span class="line">        return BindingBuilder.bind(directSMSQueue()).to(directExchange()).with(&quot;sms&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public Binding directemailBingding()&#123;</span><br><span class="line">        return BindingBuilder.bind(directEmailQueue()).to(directExchange()).with(&quot;email&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public Binding directduanxinBingding()&#123;</span><br><span class="line">        return BindingBuilder.bind(directDuanxinQueue()).to(directExchange()).with(&quot;duanxin&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="生产者-6"><a href="#生产者-6" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class DirectRabbitMqConfiguration &#123;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">    @Bean</span><br><span class="line">    public DirectExchange directExchange()&#123;</span><br><span class="line">        return new DirectExchange(&quot;direct_order_exchange&quot;,true,false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //2:声明队列sms.fanout.queue email.fanout.queue duanxin.fanout.queue</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Queue smsQueue()&#123;</span><br><span class="line">        return new Queue(&quot;sms.direct.queue&quot;,true);</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue emailQueue()&#123;</span><br><span class="line">        return new Queue(&quot;email.direct.queue&quot;,true);</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue duanxinQueue()&#123;</span><br><span class="line">        return new Queue(&quot;duanxin.direct.queue&quot;,true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //3:完成绑定关系（队列和交换机）</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Binding smsBingding()&#123;</span><br><span class="line">        return BindingBuilder.bind(smsQueue()).to(directExchange()).with(&quot;sms&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public Binding emailBingding()&#123;</span><br><span class="line">        return BindingBuilder.bind(emailQueue()).to(directExchange()).with(&quot;email&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public Binding duanxinBingding()&#123;</span><br><span class="line">        return BindingBuilder.bind(duanxinQueue()).to(directExchange()).with(&quot;duanxin&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="消费者-6"><a href="#消费者-6" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">/**</span><br><span class="line"> * 设置交换机路由的绑定关系</span><br><span class="line"> * 队列:队列名,是否持久化，是否自动删除删除</span><br><span class="line"> * 交换机:交换机名，交换机类型</span><br><span class="line"> * 关键值值key</span><br><span class="line"> */</span><br><span class="line">@RabbitListener(queues = &#123;&quot;duanxin.direct.queue&quot;&#125;)</span><br><span class="line">public class DirectDuanxinConsumer &#123;</span><br><span class="line"></span><br><span class="line">    @RabbitHandler</span><br><span class="line">    public void reviceMessage(String message)&#123;</span><br><span class="line">        System.out.println(&quot;duanxin.fanout.queue---接受消息-&gt;&quot;+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@RabbitListener(queues = &#123;&quot;email.direct.queue&quot;&#125;)</span><br><span class="line">public class DirectEmailConsumer &#123;</span><br><span class="line">    @RabbitHandler</span><br><span class="line">    public void reviceMessage(String message)&#123;</span><br><span class="line">        System.out.println(&quot;email.fanout.queue---接受消息-&gt;&quot;+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@RabbitListener(queues = &#123;&quot;sms.direct.queue&quot;&#125;)</span><br><span class="line">public class DirectSmsConsumer &#123;</span><br><span class="line">    @RabbitHandler</span><br><span class="line">    public void reviceMessage(String message)&#123;</span><br><span class="line">        System.out.println(&quot;sms.fanout.queue---接受消息-&gt;&quot;+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="topic模式"><a href="#topic模式" class="headerlink" title="topic模式"></a>topic模式</h2><h4 id="生产者-7"><a href="#生产者-7" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void makeOrderTopic(String userId,String productId,int num)&#123;</span><br><span class="line">        String orderId = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(&quot;订单生产成功:&quot;+orderId);</span><br><span class="line">//        3.通过MQ来完成消息的分发</span><br><span class="line">        // 参数1：交换机 参数2：路由key/query队列名称 参数3：消息内容</span><br><span class="line">        String exchangeName = &quot;topic_order_exchange&quot;;</span><br><span class="line">        String routeKey = &quot;com.duanxin&quot;;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routeKey,orderId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="消费者-7"><a href="#消费者-7" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">/**</span><br><span class="line"> * 设置交换机路由的绑定关系</span><br><span class="line"> * 队列:队列名,是否持久化，是否自动删除删除</span><br><span class="line"> * 交换机:交换机名，交换机类型</span><br><span class="line"> * 关键值值key</span><br><span class="line"> */</span><br><span class="line">@RabbitListener(bindings = @QueueBinding(</span><br><span class="line">        value = @Queue(value = &quot;duanxin.topic.queue&quot;,durable = &quot;true&quot;,autoDelete = &quot;false&quot;),</span><br><span class="line">        exchange = @Exchange(value = &quot;topic_order_exchange&quot;,type = ExchangeTypes.TOPIC),</span><br><span class="line">        key = &quot;#.duanxin.#&quot;</span><br><span class="line">))</span><br><span class="line">public class TopicDuanxinConsumer &#123;</span><br><span class="line"></span><br><span class="line">    @RabbitHandler</span><br><span class="line">    public void reviceMessage(String message)&#123;</span><br><span class="line">        System.out.println(&quot;duanxin.topic.queue---接受消息-&gt;&quot;+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@RabbitListener(bindings = @QueueBinding(</span><br><span class="line">        value = @Queue(value = &quot;email.topic.queue&quot;,durable = &quot;true&quot;,autoDelete = &quot;false&quot;),</span><br><span class="line">        exchange = @Exchange(value = &quot;topic_order_exchange&quot;,type = ExchangeTypes.TOPIC),</span><br><span class="line">        key = &quot;*.email.#&quot;</span><br><span class="line">))</span><br><span class="line">public class TopicEmailConsumer &#123;</span><br><span class="line">    @RabbitHandler</span><br><span class="line">    public void reviceMessage(String message)&#123;</span><br><span class="line">        System.out.println(&quot;email.topic.queue---接受消息-&gt;&quot;+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@RabbitListener(bindings = @QueueBinding(</span><br><span class="line">        value = @Queue(value = &quot;duanxin.topic.queue&quot;,durable = &quot;true&quot;,autoDelete = &quot;false&quot;),</span><br><span class="line">        exchange = @Exchange(value = &quot;topic_order_exchange&quot;,type = ExchangeTypes.TOPIC),</span><br><span class="line">        key = &quot;#.duanxin.#&quot;</span><br><span class="line">))</span><br><span class="line">public class TopicDuanxinConsumer &#123;</span><br><span class="line"></span><br><span class="line">    @RabbitHandler</span><br><span class="line">    public void reviceMessage(String message)&#123;</span><br><span class="line">        System.out.println(&quot;duanxin.topic.queue---接受消息-&gt;&quot;+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="消费者这边绑定"><a href="#消费者这边绑定" class="headerlink" title="消费者这边绑定"></a>消费者这边绑定</h4><h1 id="ttl队列过期时间"><a href="#ttl队列过期时间" class="headerlink" title="ttl队列过期时间"></a>ttl队列过期时间</h1><h4 id="设置消息过期时间，过期后会被自动删除，RabbitMQ可以对消息和队列设置TTL。目前偶两种方法可以设置"><a href="#设置消息过期时间，过期后会被自动删除，RabbitMQ可以对消息和队列设置TTL。目前偶两种方法可以设置" class="headerlink" title="设置消息过期时间，过期后会被自动删除，RabbitMQ可以对消息和队列设置TTL。目前偶两种方法可以设置."></a>设置消息过期时间，过期后会被自动删除，RabbitMQ可以对消息和队列设置TTL。目前偶两种方法可以设置.</h4><h4 id="应用场景-下单保留时间"><a href="#应用场景-下单保留时间" class="headerlink" title="应用场景:下单保留时间"></a>应用场景:下单保留时间</h4><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置交换机和队列"><a href="#配置交换机和队列" class="headerlink" title="配置交换机和队列"></a>配置交换机和队列</h3><h3 id="队列-消息设置过期时间"><a href="#队列-消息设置过期时间" class="headerlink" title="队列/消息设置过期时间"></a>队列/消息设置过期时间</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class TTLRabbitMqConfiguration &#123;</span><br><span class="line">    // 1.声明注册direct模式的交换机</span><br><span class="line">    @Bean</span><br><span class="line">    public DirectExchange ttldirectExchange()&#123;</span><br><span class="line">        return new DirectExchange(&quot;ttl_order_exchange&quot;,true,false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //队列过期时间</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue ttlQueue()&#123;</span><br><span class="line">        //设置过期时间</span><br><span class="line">        Map&lt;String,Object&gt; args = new HashMap&lt;&gt;();</span><br><span class="line">        args.put(&quot;x-message-ttl&quot;,5000);</span><br><span class="line">        //对队列设置过期时间</span><br><span class="line">        return new Queue(&quot;ttl.direct.queue&quot;,true,false,false,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//3:完成绑定关系（队列和交换机）</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Binding ttlBingding()&#123;</span><br><span class="line">        return BindingBuilder.bind(ttlQueue()).to(ttldirectExchange()).with(&quot;ttl&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="生产发送的消息"><a href="#生产发送的消息" class="headerlink" title="生产发送的消息"></a>生产发送的消息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class OrderService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">public void makeOrderTTL(String userId,String productId,int num)&#123;</span><br><span class="line">        String orderId = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(&quot;订单生产成功:&quot;+orderId);</span><br><span class="line">//        3.通过MQ来完成消息的分发</span><br><span class="line">        // 参数1：交换机 参数2：路由key/query队列名称 参数3：消息内容</span><br><span class="line">        String exchangeName = &quot;ttl_order_exchange&quot;;</span><br><span class="line">        String routeKey = &quot;ttl&quot;;</span><br><span class="line">        </span><br><span class="line">       /* MessagePostProcessor messagePostProcessor = new MessagePostProcessor() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Message postProcessMessage(Message message) throws AmqpException &#123;</span><br><span class="line">                message.getMessageProperties().setExpiration(&quot;5000&quot;);</span><br><span class="line">                message.getMessageProperties().setContentEncoding(&quot;UTF-8&quot;);</span><br><span class="line">                return message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routeKey,orderId,messagePostProcessor);*/</span><br><span class="line">        </span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routeKey,orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    void contextLoads() &#123;</span><br><span class="line">        //orderService.makeOrder(&quot;1&quot;,&quot;1&quot;,12);</span><br><span class="line">        //orderService.makeOrderDirect(&quot;1&quot;,&quot;1&quot;,12);</span><br><span class="line">        //orderService.makeOrderTopic(&quot;1&quot;,&quot;1&quot;,12);</span><br><span class="line">        orderService.makeOrderTTL(&quot;1&quot;,&quot;1&quot;,12);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h3><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class DeadRabbitMqConfiguration &#123;</span><br><span class="line"></span><br><span class="line">//    交换机:交换机名，交换机是否持久化，是否自动删除</span><br><span class="line">    @Bean</span><br><span class="line">    public DirectExchange deadDirectExchange()&#123;</span><br><span class="line">        return new DirectExchange(&quot;dead_direct_exchange&quot;,true,false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //2:声明队列sms.fanout.queue email.fanout.queue duanxin.fanout.queue</span><br><span class="line">    //队列:队列名,设置队列是否删除</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue deadSMSQueue()&#123;</span><br><span class="line">        return new Queue(&quot;dead.direct.queue&quot;,true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //3:完成绑定关系（队列和交换机）</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Binding deadBingding()&#123;</span><br><span class="line">        return BindingBuilder.bind(deadSMSQueue()).to(deadDirectExchange()).with(&quot;dead&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消息过期队列"><a href="#消息过期队列" class="headerlink" title="消息过期队列"></a>消息过期队列</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class TTLRabbitMqConfiguration &#123;</span><br><span class="line">    // 1.声明注册direct模式的交换机</span><br><span class="line">    @Bean</span><br><span class="line">    public DirectExchange ttldirectExchange()&#123;</span><br><span class="line">        return new DirectExchange(&quot;ttl_order_exchange&quot;,true,false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //队列过期时间</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue ttlQueue()&#123;</span><br><span class="line">        //设置过期时间</span><br><span class="line">        Map&lt;String,Object&gt; args = new HashMap&lt;&gt;();</span><br><span class="line">//        args.put(&quot;x-message-ttl&quot;,5000);</span><br><span class="line">        args.put(&quot;x-dead-letter-exchange&quot;,&quot;dead_direct_exchange&quot;);</span><br><span class="line">        args.put(&quot;x-dead-letter-routing-key&quot;,&quot;dead&quot;);</span><br><span class="line">        args.put(&quot;x-max-length&quot;,5);</span><br><span class="line">        return new Queue(&quot;ttl.direct.queue&quot;,true,false,false,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//3:完成绑定关系（队列和交换机）</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Binding ttlBingding()&#123;</span><br><span class="line">        return BindingBuilder.bind(ttlQueue()).to(ttldirectExchange()).with(&quot;ttlmessage&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    void contextLoads() &#123;</span><br><span class="line">        //orderService.makeOrder(&quot;1&quot;,&quot;1&quot;,12);</span><br><span class="line">        //orderService.makeOrderDirect(&quot;1&quot;,&quot;1&quot;,12);</span><br><span class="line">        //orderService.makeOrderTopic(&quot;1&quot;,&quot;1&quot;,12);</span><br><span class="line">        orderService.makeOrderTTL(&quot;1&quot;,&quot;1&quot;,12);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="内存大小查看"><a href="#内存大小查看" class="headerlink" title="内存大小查看"></a>内存大小查看</h3><p><img src="https://s2.loli.net/2022/02/27/GL98cE2TnubyZdf.png" alt="image-20220227112536651"></p>
<blockquote>
<p>rabbitmqctl set_vm_memory_high_watermark absolute 50M</p>
<p>rabbitmqctl set_vm_memory_high_watermark 0.4</p>
</blockquote>
<blockquote>
<p>vm_memory_high_watermark.relative = 0.6</p>
<p>vm_memory_high_watermark.absolute= 5G</p>
</blockquote>
<blockquote>
<p>rabbitmqctl set_disk_free_limit 100GB</p>
</blockquote>
<h5 id="内存换页"><a href="#内存换页" class="headerlink" title="内存换页"></a>内存换页</h5><h1 id="RabbitMQ集群学习"><a href="#RabbitMQ集群学习" class="headerlink" title="RabbitMQ集群学习"></a>RabbitMQ集群学习</h1>]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>Sentinel限流熔断应用实践</title>
    <url>/2021/12/27/Sentinel%E9%99%90%E6%B5%81%E7%86%94%E6%96%AD%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器:"></a>拦截器:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==preHandler==&quot;</span>);</span><br><span class="line">        LocalTime now = LocalTime.now();</span><br><span class="line">        <span class="keyword">int</span> hour = now.getHour();</span><br><span class="line">        <span class="keyword">if</span>(hour&lt;<span class="number">6</span>||hour&gt;<span class="number">23</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;请在6到23点之间访问&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册拦截器(添加到spring容器)，并指定拦截规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> TimeInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/provider/sentinel01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1、preHandle<br>调用时间：Controller方法处理之前</p>
<p>执行顺序：链式Intercepter情况下，Intercepter按照声明的顺序一个接一个执行</p>
<p>若返回false，则中断执行，注意：不会进入afterCompletion</p>
<p>2、postHandle<br>调用前提：preHandle返回true</p>
<p>调用时间：Controller方法处理完之后，DispatcherServlet进行视图的渲染之前，也就是说在这个方法中你可以对ModelAndView进行操作</p>
<p>执行顺序：链式Intercepter情况下，Intercepter按照声明的顺序倒着执行。</p>
<p>备注：postHandle虽然post打头，但post、get方法都能处理</p>
<p>3、afterCompletion<br>调用前提：preHandle返回true</p>
<p>调用时间：DispatcherServlet进行视图的渲染之后</p>
<p>多用于清理资源</p>
]]></content>
      <categories>
        <category>Sentinel</category>
      </categories>
  </entry>
  <entry>
    <title>Spring+Mybatis基础</title>
    <url>/2022/02/09/Spring-Mybatis%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="1-什么是Spring"><a href="#1-什么是Spring" class="headerlink" title="1.什么是Spring"></a>1.什么是Spring</h3><p>开源的轻量级的应用开发框架，它可以简化开发、解耦对象的依赖关系、集成其他框架，而且设计优雅。</p>
<h3 id="2-Spring有哪些核心功能？"><a href="#2-Spring有哪些核心功能？" class="headerlink" title="2.Spring有哪些核心功能？"></a>2.Spring有哪些核心功能？</h3><p>SpringIOC，SpringMVC，SpringAOP</p>
<h3 id="3-什么是SpringIOC？那有哪些依赖注入方式呢"><a href="#3-什么是SpringIOC？那有哪些依赖注入方式呢" class="headerlink" title="3.什么是SpringIOC？那有哪些依赖注入方式呢"></a>3.什么是SpringIOC？那有哪些依赖注入方式呢</h3><p>SpringIOC就是控制反转，我们将对象的依赖关系交给Spring容器来进行管理。</p>
<p>容器通过DI依赖注入的方式来使用创建的Bean对象。</p>
<p>构造器注入、Set方法注入、注解注入</p>
<h3 id="4-注解注入有哪些方式？它们有什么区别"><a href="#4-注解注入有哪些方式？它们有什么区别" class="headerlink" title="4.注解注入有哪些方式？它们有什么区别"></a>4.注解注入有哪些方式？它们有什么区别</h3><p>注解注入有两种方式，@Autowired注解和@Resource注解。</p>
<p>@Autowired注解是Spring框架提供的注解，可以通过构造器注入，也可以通过set方法注入，是基于类型注入的（byType）。</p>
<p>@Resource注解是JDK提供的一个注解，只是Spring框架也能识别它，它只能通过set方法注入，是基于bean名称注入的（byName）。</p>
<h3 id="5-BeanFactory和FactoryBean有什么区别"><a href="#5-BeanFactory和FactoryBean有什么区别" class="headerlink" title="5.BeanFactory和FactoryBean有什么区别"></a>5.BeanFactory和FactoryBean有什么区别</h3><p><img src="https://s2.loli.net/2022/02/09/cAhp6OgmutN3FbZ.png" alt="image-20220209095306247"></p>
<p>BeanFactory是Spring当中的一个接口，Spring当中的容器都实现了这个接口，本质上我们可以认为他就是Spring容器接口。Spring的BeanFactory就是一个IoC容器，它属于Spring框架中的Core（核心）部分 ，Spring AOP、Spring MVC等都是基于Spring Core之上的。FatoryBean是工厂Bean，工厂 Bean 跟普通Bean不同, 其返回的对象不是指定类的实例, 而是该工厂 Bean 的 getObject() 方法所返回的对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">定义工厂bean需要实现FactoryBean接口，并且覆盖其如下方法：</span><br><span class="line">T getObject() throws Exception;</span><br><span class="line">Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Component            //默认名称:     calendarFactory</span><br><span class="line">//@Component(&quot;calendar&quot;)  //指定bean名称  calendar</span><br><span class="line">public class CalendarFactory implements FactoryBean&lt;Calendar&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Calendar getObject() throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;工厂模式调用,实例化方法&quot;);</span><br><span class="line">        return Calendar.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        return Calendar.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">编辑测试类</span><br><span class="line">class Springdemo4ApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() &#123;</span><br><span class="line">        ApplicationContext applicationContext =</span><br><span class="line">                new AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">        //Calendar calendar = (Calendar) applicationContext.getBean(&quot;calendarFactory&quot;);</span><br><span class="line">        Calendar calendar = (Calendar) applicationContext.getBean(Calendar.class);</span><br><span class="line">        System.out.println(calendar.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="BeanFactory的XML基本配置"><a href="#BeanFactory的XML基本配置" class="headerlink" title="BeanFactory的XML基本配置"></a>BeanFactory的XML基本配置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class User &#123;	</span><br><span class="line">	private int id;</span><br><span class="line">	private String name;</span><br><span class="line">	private Friends friends;	</span><br><span class="line">	</span><br><span class="line">	public User() &#123;&#125;</span><br><span class="line">	public int getId() &#123; return id; &#125;</span><br><span class="line">	public void setId(int id) &#123; this.id = id; &#125;</span><br><span class="line">	public String getName() &#123; return name; &#125;</span><br><span class="line">	public void setName(String name) &#123; this.name = name; &#125;</span><br><span class="line">	public Friends getFriends() &#123; return friends; &#125;</span><br><span class="line">	public void setFriends(Friends friends) &#123; this.friends = friends; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Friends &#123;</span><br><span class="line">	private List&lt;String&gt; names;</span><br><span class="line">	public Friends() &#123; &#125;</span><br><span class="line">	public List&lt;String&gt; getNames() &#123; return names; &#125;</span><br><span class="line">	public void setNames(List&lt;String&gt; names) &#123; this.names = names; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xmlns:p=&quot;http://www.springframework.org/schema/p&quot; </span><br><span class="line">    xmlns:context=&quot;http://www.springframework.org/schema/context&quot; </span><br><span class="line">    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; </span><br><span class="line">    xmlns:task=&quot;http://www.springframework.org/schema/task&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;</span><br><span class="line">        http://www.springframework.org/schema/beans </span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span><br><span class="line">        http://www.springframework.org/schema/context </span><br><span class="line">        http://www.springframework.org/schema/context/spring-context-4.2.xsd </span><br><span class="line">        http://www.springframework.org/schema/mvc </span><br><span class="line">        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd </span><br><span class="line">        http://www.springframework.org/schema/task </span><br><span class="line">        http://www.springframework.org/schema/task/spring-task-4.2.xsd&quot;&gt;</span><br><span class="line">	&lt;bean id=&quot;User&quot; class=&quot;com.test.User&quot;&gt;</span><br><span class="line">		&lt;property name=&quot;friends&quot; ref=&quot;UserFriends&quot; /&gt;</span><br><span class="line">	&lt;/bean&gt;</span><br><span class="line">	&lt;bean id=&quot;UserFriends&quot; class=&quot;com.test.Friends&quot;&gt;</span><br><span class="line">		&lt;property name=&quot;names&quot;&gt;</span><br><span class="line">			&lt;list&gt;</span><br><span class="line">				&lt;value&gt;&quot;Li&quot;&lt;/value&gt;</span><br><span class="line">				&lt;value&gt;&quot;Liu&quot;&lt;/value&gt;</span><br><span class="line">			&lt;/list&gt;</span><br><span class="line">		&lt;/property&gt;</span><br><span class="line">	&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">	ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">	User user = ctx.getBean(&quot;User&quot;, User.class);</span><br><span class="line">	for(String friend : user.getFriends().getNames()) &#123;</span><br><span class="line">		System.out.println(friend);</span><br><span class="line">	&#125;</span><br><span class="line">	ctx.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-BeanFactory-是ioc容器的底层实现接口，是ApplicationContext-顶级接口"><a href="#1-BeanFactory-是ioc容器的底层实现接口，是ApplicationContext-顶级接口" class="headerlink" title="1 BeanFactory 是ioc容器的底层实现接口，是ApplicationContext 顶级接口"></a>1 BeanFactory 是ioc容器的底层实现接口，是ApplicationContext 顶级接口</h3><p>spring不允许我们直接操作 BeanFactory bean工厂。</p>
<p>BeanFactory 是顶层容器（根容器），不能被实例化，它定义了所有 IoC 容器 必须遵从<br>的⼀套原则，具体的容器实现可以增加额外的功能。所以为我们提供了ApplicationContext 这个接口 此接口继成BeanFactory 接口，ApplicationContext包含BeanFactory的所有功能,同时还进行更多的扩展。</p>
<p>BeanFactory 接口又衍生出以下接口</p>
<p>⽐如我们常⽤到的ApplicationContext，其下更具体的实现如 ClassPathXmlApplicationContext 包含了解析 xml 等⼀系列的内容，<br>AnnotationConfigApplicationContext 则是包含了注解解析等⼀系列的内容。Spring IoC 容器继承体系<br>⾮常聪明，需要使⽤哪个层次⽤哪个层次即可，不必使⽤功能⼤⽽全的。</p>
<p>ApplicationContext 继承图</p>
<p><img src="https://s2.loli.net/2022/02/22/IjOhvpqK2yzdWcb.png" alt="image-20220222094910121"></p>
<p><strong>CongihuableApplicationContext</strong> 中添加了一些方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	... 其他省略</span><br><span class="line">	</span><br><span class="line">	//刷新ioc容器上下文</span><br><span class="line">	void refresh() throws BeansException, IllegalStateException;</span><br><span class="line"></span><br><span class="line">// 关闭此应用程序上下文，释放所有资源并锁定，销毁所有缓存的单例bean。</span><br><span class="line">	@Override</span><br><span class="line">	void close();</span><br><span class="line"></span><br><span class="line">//确定此应用程序上下文是否处于活动状态，即，是否至少刷新一次且尚未关闭。</span><br><span class="line">	boolean isActive();</span><br><span class="line"></span><br><span class="line">	... 其他省略</span><br><span class="line">	</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="主要作用在ioc容器进行相应的刷新，关闭等操作！"><a href="#主要作用在ioc容器进行相应的刷新，关闭等操作！" class="headerlink" title="主要作用在ioc容器进行相应的刷新，关闭等操作！"></a>主要作用在ioc容器进行相应的刷新，关闭等操作！</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FileSystemXmlApplicationContext 和ClassPathXmlApplicationContext 是用来读取xml文件创建bean对象</span><br><span class="line">ClassPathXmlApplicationContext  ： 读取类路径下xml 创建bean</span><br><span class="line">FileSystemXmlApplicationContext ：读取文件系统下xml创建bean</span><br><span class="line">AnnotationConfigApplicationContext 主要是注解开发获取ioc中的bean实例</span><br></pre></td></tr></table></figure>

<h3 id="2-FactoryBean-是spirng提供的工厂bean的一个接口"><a href="#2-FactoryBean-是spirng提供的工厂bean的一个接口" class="headerlink" title="2 FactoryBean 是spirng提供的工厂bean的一个接口"></a>2 FactoryBean 是spirng提供的工厂bean的一个接口</h3><p>FactoryBean 接口提供三个方法，用来创建对象，<br>FactoryBean 具体返回的对象是由getObject 方法决定的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> */</span><br><span class="line">public interface FactoryBean&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">//创建的具体bean对象的类型</span><br><span class="line">	@Nullable</span><br><span class="line">	T getObject() throws Exception;</span><br><span class="line"></span><br><span class="line"> //工厂bean 具体创建具体对象是由此getObject()方法来返回的</span><br><span class="line">	@Nullable</span><br><span class="line">	Class&lt;?&gt; getObjectType();</span><br><span class="line">	</span><br><span class="line">  //是否单例</span><br><span class="line">	default boolean isSingleton() &#123;</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建一个FactoryBean 用来生产User对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class FactoryBeanTest implements FactoryBean&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //创建的具体bean对象的类型</span><br><span class="line">    @Override</span><br><span class="line">    public Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        return User.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //是否单例</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isSingleton() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //工厂bean 具体创建具体对象是由此getObject()方法来返回的</span><br><span class="line">    @Override</span><br><span class="line">    public User getObject() throws Exception &#123;</span><br><span class="line">        return new User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Junit测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest(classes = &#123;FactoryBeanTest.class&#125;)</span><br><span class="line">@WebAppConfiguration</span><br><span class="line">public class SpringBootDemoApplicationTests &#123;</span><br><span class="line">	@Autowired</span><br><span class="line">	private ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	public void tesst() &#123;</span><br><span class="line">		FactoryBeanTest bean1 = applicationContext.getBean(FactoryBeanTest.class);</span><br><span class="line">		try &#123;</span><br><span class="line">			User object = bean1.getObject();</span><br><span class="line">			System.out.println(object==object);</span><br><span class="line">			System.out.println(object);</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">true</span><br><span class="line">User [id=null, name=null, age=0]</span><br></pre></td></tr></table></figure>

<h5 id="简单的总结："><a href="#简单的总结：" class="headerlink" title="简单的总结："></a>简单的总结：</h5><blockquote>
<p>BeanFactory是个bean 工厂，是一个工厂类(接口)， 它负责生产和管理bean的一个工厂<br>是ioc 容器最底层的接口，是个ioc容器，是spring用来管理和装配普通bean的ioc容器（这些bean成为普通bean）。</p>
</blockquote>
<blockquote>
<p>FactoryBean是个bean，在IOC容器的基础上给Bean的实现加上了一个简单工厂模式和装饰模式，是一个可以生产对象和装饰对象的工厂bean，由spring管理后，生产的对象是由getObject()方法决定的（从容器中获取到的对象不是<br>“ FactoryBeanTest ” 对象）。</p>
</blockquote>
<h5 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h5><p>如果我们希望直接通过构造方法来给User对象和Friends对象互相依赖起来，我们可以这样配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;beans&gt; &lt;!--省略文档声明--&gt;</span><br><span class="line">	&lt;bean id=&quot;User&quot; class=&quot;com.test.User&quot;&gt;</span><br><span class="line">		&lt;constructor-arg ref=&quot;UserFriends&quot; /&gt;</span><br><span class="line">	&lt;/bean&gt;</span><br><span class="line">	&lt;bean id=&quot;UserFriends&quot; class=&quot;com.test.Friends&quot;&gt;</span><br><span class="line">		&lt;property name=&quot;names&quot;&gt;</span><br><span class="line">			&lt;list&gt;</span><br><span class="line">				&lt;value&gt;&quot;Li&quot;&lt;/value&gt;</span><br><span class="line">				&lt;value&gt;&quot;Liu&quot;&lt;/value&gt;</span><br><span class="line">			&lt;/list&gt;</span><br><span class="line">		&lt;/property&gt;</span><br><span class="line">	&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"></span><br><span class="line">然后给User类添加一个构造方法即可：</span><br><span class="line">public User(Friends friends) &#123;</span><br><span class="line">	this.friends = friends;</span><br><span class="line">&#125;</span><br><span class="line">如果构造方法有多个并且需要传入的参数数量相同，那么可以通过type属性来区分：</span><br><span class="line">&lt;constructor-arg value=&quot;1&quot; type=&quot;int&quot; /&gt;</span><br><span class="line">&lt;constructor-arg value=&quot;1.0&quot; type=&quot;double&quot; /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="、、标签"><a href="#、、标签" class="headerlink" title="、、标签"></a><list>、<set>、<map>标签</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">map标签则需要指定键和值：</span><br><span class="line">&lt;map&gt;</span><br><span class="line">	&lt;entry key=&quot;key&quot;&gt;</span><br><span class="line">		&lt;value&gt;value&lt;/value&gt;</span><br><span class="line">	&lt;/entry&gt;</span><br><span class="line">&lt;/map&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="bean的继承"><a href="#bean的继承" class="headerlink" title="bean的继承"></a>bean的继承</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean id=&quot;User0&quot; class=&quot;com.test.User&quot;&gt;</span><br><span class="line">    	&lt;property name=&quot;name&quot; value=&quot;Li&quot;/&gt;</span><br><span class="line">		&lt;property name=&quot;friends&quot; ref=&quot;UserFriends&quot; /&gt;</span><br><span class="line">	&lt;/bean&gt;</span><br><span class="line">	&lt;bean id=&quot;User1&quot; class=&quot;com.test.User&quot;&gt;</span><br><span class="line">		&lt;property name=&quot;name&quot; value=&quot;Liu&quot;/&gt;</span><br><span class="line">		&lt;property name=&quot;friends&quot; ref=&quot;UserFriends&quot; /&gt;</span><br><span class="line">	&lt;/bean&gt;</span><br><span class="line">	&lt;bean id=&quot;UserFriends&quot; class=&quot;com.test.Friends&quot;&gt;</span><br><span class="line">		&lt;!--省略--&gt;</span><br><span class="line">	&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line">可以看到，User0和User1有一个共同的配置，就是都依赖于UserFriends。如果按照上面那样配置，就看起来有些冗余。</span><br><span class="line">所以，Spring引入了parent属性：</span><br><span class="line">&lt;bean id=&quot;User0&quot; class=&quot;com.test.User&quot;&gt;</span><br><span class="line">	&lt;property name=&quot;name&quot; value=&quot;Li&quot;/&gt;</span><br><span class="line">	&lt;property name=&quot;friends&quot; ref=&quot;UserFriends&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">	</span><br><span class="line">&lt;bean id=&quot;User1&quot; class=&quot;com.test.User&quot; parent=&quot;User0&quot;&gt;</span><br><span class="line">	&lt;property name=&quot;name&quot; value=&quot;Liu&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">这样，User1就继承了User0定义的默认值。</span><br><span class="line">还有一种方法就是指定一个模板bean：</span><br><span class="line">&lt;bean id=&quot;User&quot; abstract=&quot;true&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;friends&quot; ref=&quot;UserFriends&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">&lt;bean id=&quot;User0&quot; class=&quot;com.test.User&quot; parent=&quot;User&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;Li&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">	</span><br><span class="line">&lt;bean id=&quot;User1&quot; class=&quot;com.test.User&quot; parent=&quot;User&quot;&gt;</span><br><span class="line">	&lt;property name=&quot;name&quot; value=&quot;Liu&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>



<h3 id="6-Spring当中的BeanPostProcessor是什么"><a href="#6-Spring当中的BeanPostProcessor是什么" class="headerlink" title="6.Spring当中的BeanPostProcessor是什么"></a>6.Spring当中的BeanPostProcessor是什么</h3><p>Spring为我们提供了一个BeanPostProcessor接口，该接口可以在bean初始化时让我们可以干预做一些操作。我们需要自己用一个类，实现该接口，接口中会有两个方法，在bean初始化前做一些事情，在类初始化后做一些事情，加入具体的逻辑即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">定义bean后置处理器，需要实现BeanPostProcessor接口，spring在初始化每个bean前后, 将分别BeanPostProcessor接口的以下两个方法:</span><br><span class="line">default Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">   return bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">default Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">   return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-Spring中的Aware接口"><a href="#7-Spring中的Aware接口" class="headerlink" title="7.Spring中的Aware接口"></a>7.Spring中的Aware接口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在实际的开发中,我们却经常要用到Spring容器本身的功能或资源,Spring提供了一系列Aware接口来实现具体功能。只要我们的bean实现了具体的Aware接口，并实现其方法，Spring容器就会把具体的资源传给我们。</span><br><span class="line"></span><br><span class="line">扩充：我们常用的Aware接口有：</span><br><span class="line">BeanNameAware  获取容器中 Bean 的名称  </span><br><span class="line">BeanFactoryAware 获取当前 BeanFactory ，这样可以调用容器的服务  </span><br><span class="line">ApplicationContextAware 获取当前Spring容器</span><br></pre></td></tr></table></figure>

<h3 id="8-Spring是如何解决循环依赖的"><a href="#8-Spring是如何解决循环依赖的" class="headerlink" title="8.Spring是如何解决循环依赖的"></a>8.Spring是如何解决循环依赖的</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">singletonObjects：一级缓存，存放完全初始化好的Bean的集合，从这个集合中取出来的Bean可以立马返回</span><br><span class="line">earlySingletonObjects：二级缓存，存放创建好但没有初始化属性的Bean的集合，它用来解决循环依赖</span><br></pre></td></tr></table></figure>

<h3 id="9-Spring中的bean是线程安全的吗？那要怎么解决呢"><a href="#9-Spring中的bean是线程安全的吗？那要怎么解决呢" class="headerlink" title="9.Spring中的bean是线程安全的吗？那要怎么解决呢"></a>9.Spring中的bean是线程安全的吗？那要怎么解决呢</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当多个线程操作同一个对象的时候，对这个对象的非静态成员变量的写操作会存在线程安全问题。我们可以通过@Scope（&quot;prototype&quot;）注解来指定创建模式为多例。也可以通过ThreadLocal来解决这个问题（了解）。</span><br></pre></td></tr></table></figure>

<h3 id="10-SpringMVC中有几大组件？分别是哪些呢？它们如何交互工作的"><a href="#10-SpringMVC中有几大组件？分别是哪些呢？它们如何交互工作的" class="headerlink" title="10.SpringMVC中有几大组件？分别是哪些呢？它们如何交互工作的"></a>10.SpringMVC中有几大组件？分别是哪些呢？它们如何交互工作的</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SpringMVC有5大组件。</span><br><span class="line">分别是DispatcherServlet(前端控制器)、HandlerMapping(请求派发控制器)、Controller(请求处理控制器)、ModelAndView(数据和视图名)、ViewResolver(视图解析器)。</span><br><span class="line">1.客户端发送请求，直接请求到DispatcherServlet。</span><br><span class="line">2.DispatcherServlet根据请求信息调用HandlerMapping，解析请求转发到Controller中。</span><br><span class="line">3.处理完业务逻辑后，会返回一个ModelAndView对象。</span><br><span class="line">4.ViewResolver会根据逻辑View进行视图解析。</span><br><span class="line">5.DispatcherServlet返回给客户端进行视图渲染。</span><br></pre></td></tr></table></figure>

<h4 id="11-什么是SpringAOP？那什么是切面编程"><a href="#11-什么是SpringAOP？那什么是切面编程" class="headerlink" title="11.什么是SpringAOP？那什么是切面编程"></a>11.什么是SpringAOP？那什么是切面编程</h4><p>AOP是面向切面的编程。切面编程是将原有业务中共通的处理逻辑抽离出来，进行独立封装，然后通过配置作用到原有传统的业务处理方法上。例如我们常常用来做事务处理，日志处理，异常处理，权限处理等。</p>
<h4 id="12切面编程的三大要素是什么"><a href="#12切面编程的三大要素是什么" class="headerlink" title="12切面编程的三大要素是什么"></a>12切面编程的三大要素是什么</h4><p>切面：共通功能</p>
<p>切入点：对哪些方法进行切入</p>
<p>通知：在方法的什么位置切入</p>
<p>扩充：springAOP有三种配置切面的方式</p>
<p>通过xml+表达式进行配置</p>
<p>通过Aspect注解+表达式进行配置</p>
<p>通过Aspect注解+自定义注解配置</p>
<h3 id="13-SpringAOP的底层原理是什么？Spring当中的动态代理有哪些实现方式？你能分别说说他们的机制吗"><a href="#13-SpringAOP的底层原理是什么？Spring当中的动态代理有哪些实现方式？你能分别说说他们的机制吗" class="headerlink" title="13.SpringAOP的底层原理是什么？Spring当中的动态代理有哪些实现方式？你能分别说说他们的机制吗"></a>13.SpringAOP的底层原理是什么？Spring当中的动态代理有哪些实现方式？你能分别说说他们的机制吗</h3><p>SpringAOP的实现原理是采用动态代理技术。Spring采用两种方法来实现动态代理，分别是JDK动态代理技术和CGLIB动态代理技术。JDK动态代理技术要求我们实现InvocationHandler接口，当我们的代理类调用方法时，会被其invoke方法拦截，进行方法的增强，但它必须基于接口来实现。CGLIB底层采用的是字节码技术来生成代理类，也是在我们调用代理类方法时，被拦截，进行方法的增强，但它可以不基于接口来实现，而采用继承的方式来实现。</p>
<h4 id="14-什么是事务？事务有哪些特征"><a href="#14-什么是事务？事务有哪些特征" class="headerlink" title="14.什么是事务？事务有哪些特征"></a>14.什么是事务？事务有哪些特征</h4><p>事务通常用于数据库领域，事务是指对数据库进行读或写的一组操作序列，要么都执行，要么都不执行，不允许只执行一部分的情况；事务的操作结果只有两种，一种是提交成功，一种是提交不成功恢复到操作之前的状态。</p>
<p>事务的特征包含ACID，即原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。</p>
<p>扩充：Spring中基于注解的事务参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可读可写控制：@Transactional(readOnly = true)</span><br><span class="line">true表示只读，表示数据库的连接是否是只读的，只能用于查询操作，不能用来增、删、改操作，默认是false，一般来说，只有纯查询方法，我们使用只读</span><br><span class="line"></span><br><span class="line">事务超时：@Transactional(timeout = -1)</span><br><span class="line">timeout：-1代表使用数据库默认的超时时间，如果填写例如5这样的数字，即为超时时间为5秒</span><br><span class="line"></span><br><span class="line">回滚控制：@Transactional(noRollbackFor = FileNotFoundException.class, rollbackFor = Exception.class)</span><br><span class="line">rollback-for : 如果没有配置，默认情况下是代码发生运行时异常或者Error错误，Spring事务会进行回滚，非运行时异常(检查式异常、编译时异常)Exception则不会回滚，</span><br><span class="line">可以通过rollback-for指定需要回滚的检查式异常，指定异常之后，被指定的异常和该异常的子类都会得到回滚，并且运行时异常和Error异常仍然会得到回滚</span><br><span class="line">rollback-for 和 no-rollback-for，当rollback-for配置为检查式异常，那么会覆盖掉 no-rollback-for 配置项目，也就是no-rollback-for配置就无效</span><br><span class="line">当rollback-for配置为运行时异常，那么不会覆盖掉 no-rollback-for 配置项目，也就是no-rollback-for配置是有效，与两个配置项的顺序无关</span><br></pre></td></tr></table></figure>

<h3 id="15-Spring当中的事务隔离级别有几种？分别是什么呢"><a href="#15-Spring当中的事务隔离级别有几种？分别是什么呢" class="headerlink" title="15.Spring当中的事务隔离级别有几种？分别是什么呢"></a>15.Spring当中的事务隔离级别有几种？分别是什么呢</h3><p>Spring当中的事务隔离级别有5种。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TransactionDefinition.ISOLATION_DEFAULT: </span><br><span class="line">默认级别，使用数据库默认的隔离级别，MySQL默认是可重复读，Oracle 默认是读已提交。</span><br><span class="line"></span><br><span class="line">TransactionDefinition.ISOLATION_READ_UNCOMMITTED：</span><br><span class="line">读未提交，一个事务能读取到另一个事务还未提交的数据，这个叫读未提交，这种事务隔离级别可能产生脏读，因为如果另一个事务将数据回滚，那么第一个事务读取的数据就是脏数据，数据库最终并没有这条数据，这种方式几乎不用，可能会导致脏读、幻读或不可重复读。</span><br><span class="line"></span><br><span class="line">TransactionDefinition.ISOLATION_READ_COMMITTED: </span><br><span class="line">读已提交，一个事务提交的数据在另一个事务中才能读取到，没有提交则读取不到，可以预防脏读；但是会带来另一个问题，那就是不可重复读，就是在同一个事务中，每次读取数据库，读取到的数据条数都不一致，因为有别的事务在提交事务。</span><br><span class="line"></span><br><span class="line">TransactionDefinition.ISOLATION_REPEATABLE_READ: </span><br><span class="line">可重复读，一个事务提交的数据，在另一个事务中依然也读取不到，也就是一个事务在开始时只能读取此刻的数据，后面数据库发生的变化，这个读取事务是无法感知的，解决了不可重复读问题，但也会带来一个问题，那就是幻读，读取到的数据与数据库真实的数据不一致，产生了幻像。</span><br><span class="line"></span><br><span class="line">TransactionDefinition.ISOLATION_SERIALIZABLE: </span><br><span class="line">串行化，一个事务在操作数据的时候会把该表锁住，其他事务只能等待，这种级别可以解决脏读、幻读、不可重复读。但是这种方式的效率极低，因为会锁住整个表，通常情况下也不会用到该级别。</span><br></pre></td></tr></table></figure>

<h3 id="16-Spirng事务中的事务传播控制有几种"><a href="#16-Spirng事务中的事务传播控制有几种" class="headerlink" title="16.Spirng事务中的事务传播控制有几种"></a>16.Spirng事务中的事务传播控制有几种</h3><p>Spring支持7种事务传播。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">public class ServiceA &#123;           </span><br><span class="line">     public void methodA () &#123;  </span><br><span class="line">         serviceB.methodB ();  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;      </span><br><span class="line">public class ServiceB &#123;           </span><br><span class="line">     public void methodB () &#123;  </span><br><span class="line">     &#125;           </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="17-什么是SpringBoot的自动装配"><a href="#17-什么是SpringBoot的自动装配" class="headerlink" title="17.什么是SpringBoot的自动装配"></a>17.什么是SpringBoot的自动装配</h4><p>SpringBoot会读取classpath下的META-INF/spring.factories文件，其文件中我们可以添加配置好的类，SpringBoot会把这些类自动配置成bean加入的Spring容器中。</p>
<h3 id="18-什么是Mybatis的一级缓存和二级缓存"><a href="#18-什么是Mybatis的一级缓存和二级缓存" class="headerlink" title="18.什么是Mybatis的一级缓存和二级缓存"></a>18.什么是Mybatis的一级缓存和二级缓存</h3><p>一级缓存是默认开启的，是SqlSession级别的缓存， 在操作数据库时需要构造sqlSession对象，不同的sqlSession之间的缓存数据区域是互相不影响的，不同的sqlSession中的缓存是互相不能读取。</p>
<p>二级缓存需要手动开启，在xml中进行配置，是namespace（命名空间）级别的缓存基于，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一级缓存的失效情况：</span><br><span class="line">1.手动调用clearCache()清理Session缓存</span><br><span class="line">2.同一个SqlSession两次查询期间执行了任何一次增删改操作，并commit了</span><br><span class="line">3.同一个SqlSession但是查询条件不同</span><br><span class="line">4.不同的SqlSession对应不同的一级缓存</span><br><span class="line"></span><br><span class="line">二级缓存的开启：</span><br><span class="line">二级缓存默认关闭的，如果配置开启二级缓存，需要同时开启配置下面两项</span><br><span class="line">主配置文件Mybatis-config.xml</span><br><span class="line">&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;   </span><br><span class="line">需要开启二级缓存的Mapper.xml</span><br><span class="line">&lt;cache/&gt;</span><br><span class="line">注意：</span><br><span class="line">1.用二级缓存的POJO类要实现Serializable接口</span><br><span class="line">2.二级缓存在session提交或关闭后才生效</span><br><span class="line"></span><br><span class="line">二级缓存的属性配置：</span><br><span class="line">&lt;cache/&gt;的配置属性：</span><br><span class="line">blocking：默认为false，当指定为true时将采用进行blocking，阻塞的意思，会在查询缓存时锁住对应的Key，如果缓存命中了则会释放对应的锁，否则会在查询数据库以后再释放锁，这样可以阻止并发情况下多个线程同时查询数据。</span><br><span class="line">eviction： 驱逐的意思，也就是元素驱逐算法，默认是LRU，其默认只保存1024个Key，超出时按照最近最少使用算法进行驱逐，除了LRU以外；</span><br><span class="line">系统还提供了FIFO（先进先出）；</span><br><span class="line">SOFT（采用软引用存储Value，便于垃圾回收）</span><br><span class="line">WEAK（采用弱引用存储Value，便于垃圾回收） 三种策略；</span><br><span class="line">flushInterval：清空缓存的时间间隔，单位是毫秒；</span><br><span class="line">readOnly：是否只读，默认为false。</span><br><span class="line">size：用来指定缓存中最多保存的Key的数量，默认只存储最多1024个Key</span><br><span class="line"></span><br><span class="line">二级缓存的相关设置：</span><br><span class="line">1、select标签的useCache属性：配置这个select是否使用二级缓存，一级缓存一直是使用的；默认为true</span><br><span class="line">2、增删改标签的flushCache属性：增删改默认flushCache=true。sql执行以后，会同时清空一级和二级缓存。查询默认flushCache=false</span><br><span class="line">3、sqlSession.clearCache()：只是用来清除一级缓存</span><br><span class="line">4、一级缓存Session/二级缓存Namespaces，在进行了 增/删/改 操作后，默认该作用域下所有select 中的缓存将被clear</span><br><span class="line">注意：缓存都是存放于内存当中的，如果你的服务并发较高，使用二级缓存可能会降低服务器性能，一般我们不会使用二级缓存，常用redis来替换他</span><br></pre></td></tr></table></figure>

<h3 id="19-在Mybatis中用-取值和-取值有什么区别？那什么是SQL注入"><a href="#19-在Mybatis中用-取值和-取值有什么区别？那什么是SQL注入" class="headerlink" title="19.在Mybatis中用#{}取值和${}取值有什么区别？那什么是SQL注入"></a>19.在Mybatis中用#{}取值和${}取值有什么区别？那什么是SQL注入</h3><p>#{}是做预编译取值，${}是做字符串拼接取值，${}可能会产生SQL注入问题。</p>
<p>SQL注入是指的，数据库被拖库，导致重要信息泄露，本质是把用户的数据当做有效代码来执行SQL语句。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">扩充：</span><br><span class="line">如何在mybatis中防范SQL注入</span><br><span class="line">案例1</span><br><span class="line">select * from course where title like &#x27;%#&#123;title&#125;%&#x27;</span><br><span class="line">由于这样写程序会报错，开发人员会将SQL改为:</span><br><span class="line">select * from course where title like &#x27;%$&#123;title&#125;%&#x27;</span><br><span class="line">此时程序不再报错，但会产生了SQL语句拼接问题，如果Java代码未对用户输入的内容做处理可能产生SQL注入漏洞</span><br><span class="line">可将SQL语句设计如下：</span><br><span class="line">select * from course where tile like concat(&#x27;%&#x27;, #&#123;title&#125;, &#x27;%&#x27;)</span><br><span class="line"></span><br><span class="line">案例2</span><br><span class="line">select * from news where id in (#&#123;id&#125;) 1,2,3,4</span><br><span class="line">由于这样写程序会报错，开发人员将SQL查询语句修改如下：</span><br><span class="line">select * from news where id in ($&#123;id&#125;)  </span><br><span class="line">此时便引入了SQL语句拼接的问题，如果研发人员未对用户输入的内容做过滤，容易产生SQL注入漏洞。</span><br><span class="line">可使用MyBatis自带循环标签解决SQL语句动态拼接的问题：</span><br><span class="line">select * from news where id in</span><br><span class="line">&lt;foreach collection=&quot;ids&quot; item=&quot;item&quot; open=&quot;(&quot;separator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class="line">#&#123;item&#125; </span><br><span class="line">&lt;/foreach&gt;</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>Spring</category>
        <category>JAVA</category>
        <category>Myabtis</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security</title>
    <url>/2022/01/02/Spring-Security/</url>
    <content><![CDATA[<h2 id="单点登陆系统解决方案设计"><a href="#单点登陆系统解决方案设计" class="headerlink" title="单点登陆系统解决方案设计"></a>单点登陆系统解决方案设计</h2><ul>
<li><p>解决方案1：用户登陆成功以后，将用户登陆状态存储到redis数据库，例如：</p>
<p><img src="https://s2.loli.net/2022/01/02/kNXm3WpAeJsMuaO.png" alt="image-20220102213249449"></p>
<p><strong>说明,在这套方案中,用户登录成功后,会基于UUID生成一个token,然后与用户信息绑定在一起存储到数据库.后续用户在访问资源时,基于token从数据库查询用户状态,这种方式因为要基于数据库存储和查询用户状态,所以性能表现一般.</strong></p>
<ul>
<li><p>解决方案2：用户登陆成功以后，将用户信息存储到token（令牌），然后写到客户端进行存储。（本次设计方案）</p>
<p><img src="https://s2.loli.net/2022/01/02/o7m31DfnadlW4E8.png" alt="image-20220102213424982"></p>
</li>
</ul>
</li>
</ul>
<h2 id="工程结构设计"><a href="#工程结构设计" class="headerlink" title="工程结构设计"></a>工程结构设计</h2><p>基于服务的划分，设计工程结构如下：</p>
<p><img src="https://s2.loli.net/2022/01/02/kfv7z5N8YT2LgVG.png" alt="image-20220102213522034"></p>
<h1 id="SSO父工程创建及初始化"><a href="#SSO父工程创建及初始化" class="headerlink" title="SSO父工程创建及初始化"></a>SSO父工程创建及初始化</h1><h2 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h2><p>第一步：创建父工程，例如：</p>
<p><img src="https://s2.loli.net/2022/01/02/p6mwGPcuY4BvhLT.png" alt="image-20220102213631000"></p>
<p>第二步：删除父工程src目录(可选)。</p>
<h2 id="父工程pom文件初始配置"><a href="#父工程pom文件初始配置" class="headerlink" title="父工程pom文件初始配置"></a>父工程pom文件初始配置</h2><p>初始化pom文件内容，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.jt&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;02-sso&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;!--maven父工程的pom文件中一般要定义子模块,</span><br><span class="line">    子工程中所需依赖版本的管理,公共依赖并且父工程的打包方式一般为pom方式--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--第一步: 定义子工程中核心依赖的版本管理(注意,只是版本管理)--&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;!--spring boot 核心依赖版本定义(spring官方定义)--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.3.2.RELEASE&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--Spring Cloud 微服务规范(由spring官方定义)--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;Hoxton.SR9&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;&lt;!--假如scope是import,type必须为pom--&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;&lt;!--引入三方依赖的版本设计--&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--Spring Cloud alibaba 依赖版本管理 (参考官方说明)--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.2.6.RELEASE&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line">    &lt;!--第二步: 添加子工程的所需要的公共依赖--&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--lombok 依赖,子工程中假如需要lombok,不需要再引入--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;&lt;!--provided 表示此依赖仅在编译阶段有效--&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--单元测试依赖,子工程中需要单元测试时,不需要再次引入此依赖了--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;&lt;!--test表示只能在test目录下使用此依赖--&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;&lt;!--排除一些不需要的依赖--&gt;</span><br><span class="line">                    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--其它依赖...--&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;!--第三步: 定义当前工程模块及子工程的的统一编译和运行版本--&gt;</span><br><span class="line">    &lt;build&gt;&lt;!--项目构建配置,我们基于maven完成项目的编译,测试,打包等操作,</span><br><span class="line">    都是基于pom.xml完成这一列的操作,但是编译和打包的配置都是要写到build元素</span><br><span class="line">    内的,而具体的编译和打包配置,又需要plugin去实现,plugin元素不是必须的,maven</span><br><span class="line">    有默认的plugin配置,常用插件可去本地库进行查看--&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!--通过maven-compiler-plugin插件设置项目</span><br><span class="line">            的统一的jdk编译和运行版本--&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;!--假如本地库没有这个版本,这里会出现红色字体错误--&gt;</span><br><span class="line">                &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;8&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;8&lt;/target&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<h1 id="系统基础服务工程设计及实现"><a href="#系统基础服务工程设计及实现" class="headerlink" title="系统基础服务工程设计及实现"></a>系统基础服务工程设计及实现</h1><h2 id="业务描述"><a href="#业务描述" class="headerlink" title="业务描述"></a>业务描述</h2><p>本次设计系统服务(System)，主要用于提供基础数据服务，例如日志信息，用户信息等。</p>
<h2 id="表结构设计"><a href="#表结构设计" class="headerlink" title="表结构设计"></a>表结构设计</h2><p>系统服务模块，基本表结构设计，例如：</p>
<p><img src="https://s2.loli.net/2022/01/02/OKc1ZLEY2tuI7wz.png" alt="image-20220102214357341"></p>
<h4 id="多对多要表之间添加一个映射表"><a href="#多对多要表之间添加一个映射表" class="headerlink" title="多对多要表之间添加一个映射表"></a>多对多要表之间添加一个映射表</h4><h2 id="工程数据初始化"><a href="#工程数据初始化" class="headerlink" title="工程数据初始化"></a>工程数据初始化</h2><p>将jt-sso.sql文件在mysql中执行一下,其过程如下:<br>第一:登录mysql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -proot</span><br></pre></td></tr></table></figure>

<p>第二:通过source指令执行jt-sso.sql文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source d:/jt-sso.sql</span><br></pre></td></tr></table></figure>

<h2 id="创建系统服务工程并初始化"><a href="#创建系统服务工程并初始化" class="headerlink" title="创建系统服务工程并初始化"></a>创建系统服务工程并初始化</h2><h4 id="系统工程的目的是和数据库建立连接"><a href="#系统工程的目的是和数据库建立连接" class="headerlink" title="系统工程的目的是和数据库建立连接"></a>系统工程的目的是和数据库建立连接</h4><p>第一步：创建sso-system工程，例如：</p>
<p><img src="https://s2.loli.net/2022/01/02/r5q8DaX7MAyFHg9.png" alt="image-20220102214511915"></p>
<p>第二步：添加项目依赖，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--1.数据库访问相关--&gt;</span><br><span class="line">        &lt;!--1.1 mysql 数据库驱动--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--1.2 mybatis plus 插件--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--服务治理相关--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--Web 服务相关--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>第三步：在项目中添加bootstrap.yml文件，其内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8061</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: sso-system</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: localhost:8848</span><br><span class="line">      config:</span><br><span class="line">        server-addr: localhost:8848</span><br><span class="line">        file-extension: yml</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:///jt-sso?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">   sentinel:</span><br><span class="line">   	transport:</span><br><span class="line">   		dashboard: localhost:8180</span><br><span class="line">   	eager:true //取消懒加载</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>说明，可将连接数据库的配置，添加到配置中心。</p>
<p>第四步：在项目中添加启动类，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SystemApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SystemApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第五步：在项目中添加单元测试类，测试数据库连接，例如：</p>
<p><img src="https://s2.loli.net/2022/01/02/YXLsVUT6xfjF5Rm.png" alt="image-20220102222044562"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt;</span><br><span class="line"></span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">public class DataSourceTests &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private DataSource dataSource;//HikariDataSource，HikariPool,CopyOnWriteArrayList()</span><br><span class="line">    @Test</span><br><span class="line">    void testGetConnection() throws SQLException &#123;</span><br><span class="line">    	//使用dataSource获取链接时，首先要获取的是连接池，然后从池中获取连接</span><br><span class="line">    	//这里有三个设计模式:单例模式，享元模式，桥接模式</span><br><span class="line">        Connection conn=</span><br><span class="line">        dataSource.getConnection();</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ThreadLocal面试"><a href="#ThreadLocal面试" class="headerlink" title="ThreadLocal面试"></a>ThreadLocal面试</h4><h4 id="面试-SPI"><a href="#面试-SPI" class="headerlink" title="面试 SPI"></a>面试 SPI</h4><h4 id="面试HikariCP"><a href="#面试HikariCP" class="headerlink" title="面试HikariCP"></a>面试HikariCP</h4><h4 id="门面设计模式"><a href="#门面设计模式" class="headerlink" title="门面设计模式"></a>门面设计模式</h4><h2 id="Pojo对象逻辑实现"><a href="#Pojo对象逻辑实现" class="headerlink" title="Pojo对象逻辑实现"></a>Pojo对象逻辑实现</h2><p>添加项目User对象，用于封装用户信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.system.pojo;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 通过此对象封装用户信息</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 4831304712151465443L;</span><br><span class="line">    private Long id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    private String status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Dao对象逻辑实现"><a href="#Dao对象逻辑实现" class="headerlink" title="Dao对象逻辑实现"></a>Dao对象逻辑实现</h2><p>第一步：创建UserMapper接口，并定义基于用户名查询用户信息，基于用户id查询用户权限信息的方法，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.system.dao;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line">import com.jt.system.pojo.User;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line">import org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">@Mapper 注解由Mybatis官方提供，用于告诉mybatis底层为此注解描述的接口</span><br><span class="line">创建其实现类及对象，然后将对象交给spring管理</span><br><span class="line">注意:@Mapper描述的数据层接口，要默认放在项目启动类所在包或子包中.会默认为spring注入一个</span><br><span class="line">Sqlsession对象。</span><br><span class="line">*/</span><br><span class="line">@Mapper</span><br><span class="line">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 基于用户名获取用户信息</span><br><span class="line">     * @param username</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Select(&quot;select id,username,password,status &quot; +</span><br><span class="line">            &quot;from tb_users &quot; +</span><br><span class="line">            &quot;where username=#&#123;username&#125;&quot;)</span><br><span class="line">    User selectUserByUsername(String username);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 基于用户id查询用户权限</span><br><span class="line">     * @param userId 用户id</span><br><span class="line">     * @return 用户的权限</span><br><span class="line">     * 涉及到的表:tb_user_roles,tb_role_menus,tb_menus</span><br><span class="line">     */</span><br><span class="line">    @Select(&quot;select distinct m.permission &quot; +</span><br><span class="line">            &quot;from tb_user_roles ur join tb_role_menus rm on ur.role_id=rm.role_id&quot; +</span><br><span class="line">            &quot;     join tb_menus m on rm.menu_id=m.id &quot; +</span><br><span class="line">            &quot;where ur.user_id=#&#123;userId&#125;&quot;)</span><br><span class="line">    List&lt;String&gt; selectUserPermissions(Long userId);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步：创建UserMapperTests类，对业务方法做单元测试，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt;</span><br><span class="line"></span><br><span class="line">import com.jt.system.pojo.User;</span><br><span class="line">import com.jt.system.dao.UserMapper;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">public class UserMapperTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void testSelectUserByUsername()&#123;</span><br><span class="line">        User user =</span><br><span class="line">        userMapper.selectUserByUsername(&quot;admin&quot;);</span><br><span class="line">        if(user == null)&#123;</span><br><span class="line">        	throw new IllegalArgumentException(&quot;user is not exits&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    void testSelectUserPermissions()&#123;</span><br><span class="line">        List&lt;String&gt; permission=</span><br><span class="line">        userMapper.selectUserPermissions(1L);</span><br><span class="line">        System.out.println(permission);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Service对象逻辑实现"><a href="#Service对象逻辑实现" class="headerlink" title="Service对象逻辑实现"></a>Service对象逻辑实现</h2><p>创建UserService接口及实现泪，定义用户及用户权限查询逻辑，代码如下：</p>
<p>第一步:定义service接口,代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.system.service;</span><br><span class="line"></span><br><span class="line">import com.jt.system.pojo.User;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface UserService &#123;</span><br><span class="line">    User selectUserByUsername(String username);</span><br><span class="line">    List&lt;String&gt; selectUserPermissions(Long userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步:定义service接口实现类,代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.system.service.impl;</span><br><span class="line"></span><br><span class="line">import com.jt.system.dao.UserMapper;</span><br><span class="line">import com.jt.system.pojo.User;</span><br><span class="line">import com.jt.system.service.UserService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    @Cacheable(value = &quot;permissionCache&quot;)//permissionCache名字为cache的名字</span><br><span class="line">    @Override</span><br><span class="line">    public User selectUserByUsername(String username) &#123;</span><br><span class="line">        return userMapper.selectUserByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;String&gt; selectUserPermissions(Long userId) &#123;</span><br><span class="line">        return userMapper.selectUserPermissions(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Controller对象逻辑实现"><a href="#Controller对象逻辑实现" class="headerlink" title="Controller对象逻辑实现"></a>Controller对象逻辑实现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.system.controller;</span><br><span class="line"></span><br><span class="line">import com.jt.system.pojo.User;</span><br><span class="line">import com.jt.system.service.UserService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/user/&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/login/&#123;username&#125;&quot;)</span><br><span class="line">    public User doSelectUserByUsername(</span><br><span class="line">            @PathVariable(&quot;username&quot;) String username)&#123;</span><br><span class="line">        return userService.selectUserByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line">    @GetMapping(&quot;/permission/&#123;userId&#125;&quot;)</span><br><span class="line">    public List&lt;String&gt; doSelectUserPermissions(</span><br><span class="line">            @PathVariable(&quot;userId&quot;) Long userId)&#123;</span><br><span class="line">        return userService.selectUserPermissions(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="启动服务进行访问测试"><a href="#启动服务进行访问测试" class="headerlink" title="启动服务进行访问测试"></a>启动服务进行访问测试</h2><p>启动sso-system工程服务，打开浏览器分别对用户及用户权限信息的获取进行访问测试</p>
<p><img src="https://s2.loli.net/2022/01/02/oYldthmi6e8NPfx.png" alt="image-20220102220734118"></p>
<h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SqlSession--&gt;Executor(CachingExecutor)--&gt;Connection--&gt;PreparedStatement--&gt;ResultSet</span><br></pre></td></tr></table></figure>

<p>Mybatis-plus默认路径就是/mapper/*.xml文件</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2022/03/13/Vue/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1h7411N7bg?p=8">视频地址</a></p>
<p><a href="https://blog.csdn.net/weixin_43742708/article/details/114667391">笔记地址</a></p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h4 id="父子组件通讯原则"><a href="#父子组件通讯原则" class="headerlink" title="父子组件通讯原则"></a>父子组件通讯原则</h4><p>为了提高组件的独立性与重用性，父组件会通过 <code>props</code> 向下传数据给子组件，当子组件有事情要告诉父组件时会通过 <code>$emit</code> 事件告诉父组件。如此确保每个组件都是独立在相对隔离的环境中运行，可以大幅提高组件的维护性。</p>
<p>在《Vue组件通讯》一文中有详细介绍过这部分。但这套通讯原则对于兄弟组件之间的数据通讯就有一定的诟病。当然，在Vue中有其他的方式来处理兄弟组件之间的数据通讯，比如Vuex这样的库。但在很多情况之下，咱们的应用程序不需要类似Vuex这样的库来处理组件之间的数据通讯，而可以考虑Vue中的 事件总线 ，即 **EventBus **。<br>接下来的内容，就是来一起学习Vue中的 <code>EventBus</code> 相关的知识点。</p>
<h2 id="如何使用EventBus"><a href="#如何使用EventBus" class="headerlink" title="如何使用EventBus"></a>如何使用EventBus</h2><p>在Vue的项目中怎么使用 <code>EventBus</code> 来实现组件之间的数据通讯呢？具体可以通过下面几个步骤来完成。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>首先你需要做的是创建事件总线并将其导出，以便其它模块可以使用或者<a href="https://so.csdn.net/so/search?q=%E7%9B%91%E5%90%AC&spm=1001.2101.3001.7020">监听</a>它。我们可以通过两种方式来处理。先来看第一种，新创建一个 <code>.js</code> 文件，比如 <code>event-bus.js</code> ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// event-bus.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">export const EventBus = new Vue()</span><br></pre></td></tr></table></figure>

<p>你需要做的只是引入 Vue 并导出它的一个实例（在这种情况下，我称它为 <code>EventBus</code> ）。实质上它是一个不具备 DOM 的组件，它具有的仅仅只是它实例方法而已，因此它非常的轻便。</p>
<p>另外一种方式，可以直接在项目中的 <code>main.js</code> 初始化 <code>EventBus</code> ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// main.js</span><br><span class="line">Vue.prototype.$EventBus = new Vue()</span><br></pre></td></tr></table></figure>

<h3 id="发送事件"><a href="#发送事件" class="headerlink" title="发送事件"></a>发送事件</h3><p>假设你有两个子组件： <code>DecreaseCount</code> 和 <code>IncrementCount</code> ，分别在按钮中绑定了 <code>decrease()</code>和 <code>increment()</code> 方法。这两个方法做的事情很简单，就是数值递减（增） <code>1</code> ，以及角度值递减（增） <code>180</code> 。在这两个方法中，通过 <code>EventBus.$emit(channel: string, callback(payload1,…))</code> 监听 <code>decreased</code> （和 <code>incremented</code> ）频道。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- DecreaseCount.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click=&quot;decrease()&quot;&gt;-&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt; import &#123; EventBus &#125; from &quot;../event-bus.js&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;DecreaseCount&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                num: 1,</span><br><span class="line">                deg:180</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            decrease() &#123;</span><br><span class="line">                EventBus.$emit(&quot;decreased&quot;, &#123;</span><br><span class="line">                    num:this.num,</span><br><span class="line">                    deg:this.deg</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- IncrementCount.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click=&quot;increment()&quot;&gt;+&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt; import &#123; EventBus &#125; from &quot;../event-bus.js&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;IncrementCount&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                num: 1,</span><br><span class="line">                deg:180</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            increment() &#123;</span><br><span class="line">                EventBus.$emit(&quot;incremented&quot;, &#123;</span><br><span class="line">                    num:this.num,</span><br><span class="line">                    deg:this.deg</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的示例，在 <code>DecreaseCount</code> 和 <code>IncrementCount</code> 分别发送出了 <code>decreased</code> 和 <code>incremented</code>频道。接下来，我们需要在另一个组件中接收这两个事件，保持数据在各组件之间的通讯。</p>
<h3 id="接收事件"><a href="#接收事件" class="headerlink" title="接收事件"></a>接收事件</h3><p>现在我们可以在组件 <code>App.vue</code> 中使用 <code>EventBus.$on(channel: string, callback(payload1,…))</code>监听 <code>DecreaseCount</code> 和 <code>IncrementCount</code> 分别发送出了 <code>decreased</code> 和 <code>incremented</code> 频道。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- App.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;container&quot; :style=&quot;&#123;transform: &#x27;rotateY(&#x27; + degValue + &#x27;deg)&#x27;&#125;&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;front&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;increment&quot;&gt;</span><br><span class="line">                    &lt;IncrementCount /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;show-front&quot;&gt; &#123;&#123;fontCount&#125;&#125; &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;decrement&quot;&gt;</span><br><span class="line">                    &lt;DecreaseCount /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=&quot;back&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;increment&quot;&gt;</span><br><span class="line">                    &lt;IncrementCount /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;show-back&quot;&gt; &#123;&#123;backCount&#125;&#125; &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;decrement&quot;&gt;</span><br><span class="line">                    &lt;DecreaseCount /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt; </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import IncrementCount from &quot;./components/IncrementCount&quot;;</span><br><span class="line">    import DecreaseCount from &quot;./components/DecreaseCount&quot;;</span><br><span class="line">    import &#123; EventBus &#125; from &quot;./event-bus.js&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;App&quot;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            IncrementCount,</span><br><span class="line">            DecreaseCount</span><br><span class="line">        &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                degValue:0,</span><br><span class="line">                fontCount:0,</span><br><span class="line">                backCount:0</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            EventBus.$on(&quot;incremented&quot;, (&#123;num,deg&#125;) =&gt; &#123;</span><br><span class="line">                this.fontCount += num</span><br><span class="line">                this.$nextTick(()=&gt;&#123;</span><br><span class="line">                    this.backCount += num</span><br><span class="line">                    this.degValue += deg;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">            EventBus.$on(&quot;decreased&quot;, (&#123;num,deg&#125;) =&gt; &#123;</span><br><span class="line">                this.fontCount -= num</span><br><span class="line">                this.$nextTick(()=&gt;&#123;</span><br><span class="line">                    this.backCount -= num</span><br><span class="line">                    this.degValue -= deg;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>最终得到的效果如下：</p>
<p>最后用一张图来描述示例中用到的 <code>EventBus</code> 之间的关系：</p>
<p><img src="https://s2.loli.net/2022/03/13/Z1uevNML397z5pT.png" alt="img"></p>
<p>如果你只想监听一次事件的发生，可以使用 <code>EventBus.$once(channel: string, callback(payload1,…))</code> 。</p>
<h3 id="移除事件监听者"><a href="#移除事件监听者" class="headerlink" title="移除事件监听者"></a>移除事件监听者</h3><p>如果想移除事件的监听，可以像下面这样操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; eventBus &#125; from &#x27;./event-bus.js&#x27;</span><br><span class="line">EventBus.$off(&#x27;decreased&#x27;, &#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>你也可以使用 <code>EventBus.$off(‘decreased’)</code> 来移除应用内所有对此事件的监听。或者直接调用<code>EventBus.$off()</code> 来移除所有事件频道， <strong>注意不需要添加任何参数</strong> 。</p>
<p>上面就是 <code>EventBus</code> 的使用方式，是不是很简单。上面的示例中我们也看到了，每次使用 <code>EventBus</code> 时都需要在各组件中引入 <code>event-bus.js</code> 。事实上，我们还可以通过别的方式，让事情变得简单一些。那就是创建一个全局的 <code>EventBus</code> 。接下来的示例向大家演示如何在Vue项目中创建一个全局的 <code>EventBus</code> 。</p>
<h2 id="全局EventBus"><a href="#全局EventBus" class="headerlink" title="全局EventBus"></a>全局EventBus</h2><p>全局EventBus，虽然在某些示例中不提倡使用，但它是一种非常漂亮且简单的方法，可以跨组件之间共享数据。</p>
<p>它的工作原理是发布/订阅方法，通常称为 <code>Pub/Sub</code> 。</p>
<p>这整个方法可以看作是一种设计模式，因为如果你查看它周围的东西，你会发现它更像是一种体系结构解决方案。我们将使用普通的JavaScript，并创建两个组件，并演示EventBus的工作方式。</p>
<p>让我们看看下图，并试着了解在这种情况下究竟发生了什么。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/13341631-40d2629faddb7b76.png!web?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>我们从上图中可以得出以下几点：</p>
<ul>
<li>有一个全局EventBus</li>
<li>所有事件都订阅它</li>
<li>所有组件也发布到它，订阅组件获得更新</li>
<li>总结一下。所有组件都能够将事件发布到总线，然后总线由另一个组件订阅，然后订阅它的组件将得到更新</li>
</ul>
<p>在代码中，我们将保持它非常小巧和简洁。我们将它分为两部分，将展示两个组件以及生成事件总线的代码。</p>
<h3 id="创建全局EventBus"><a href="#创建全局EventBus" class="headerlink" title="创建全局EventBus"></a>创建全局EventBus</h3><p>全局事件总线只不过是一个简单的 <code>vue</code> 组件。代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var EventBus = new Vue();</span><br><span class="line"></span><br><span class="line">Object.defineProperties(Vue.prototype, &#123;</span><br><span class="line">    $bus: &#123;</span><br><span class="line">        get: function () &#123;</span><br><span class="line">            return EventBus</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>现在，这个特定的总线使用两个方法 <code>$on</code> 和 <code>$emit</code> 。一个用于创建发出的事件，它就是<code>$emit</code> ；另一个用于订阅 <code>$on</code> ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var EventBus = new Vue();</span><br><span class="line"></span><br><span class="line">this.$bus.$emit(&#x27;nameOfEvent&#x27;,&#123; ... pass some event data ...&#125;);</span><br><span class="line"></span><br><span class="line">this.$bus.$on(&#x27;nameOfEvent&#x27;,($event) =&gt; &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>现在，我们创建两个简单的组件，以便最终得出结论。</p>
<p>接下来的这个示例中，我们创建了一个 <code>ShowMessage</code> 的组件用来显示信息，另外创建一个 <code>UpdateMessage</code> 的组件，用来更新信息。</p>
<p>在 <code>UpdateMessage</code> 组件中触发需要的事件。在这个示例中，将触发一个 <code>updateMessage</code> 事件，这个事件发送了 <code>updateMessage</code> 的频道：</p>
<h3 id="创建全局EventBus-1"><a href="#创建全局EventBus-1" class="headerlink" title="创建全局EventBus"></a>创建全局EventBus</h3><p>全局事件总线只不过是一个简单的 <code>vue</code> 组件。代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var EventBus = new Vue();</span><br><span class="line"></span><br><span class="line">Object.defineProperties(Vue.prototype, &#123;</span><br><span class="line">    $bus: &#123;</span><br><span class="line">        get: function () &#123;</span><br><span class="line">            return EventBus</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>现在，这个特定的总线使用两个方法 <code>$on</code> 和 <code>$emit</code> 。一个用于创建发出的事件，它就是<code>$emit</code> ；另一个用于订阅 <code>$on</code> ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var EventBus = new Vue();</span><br><span class="line"></span><br><span class="line">this.$bus.$emit(&#x27;nameOfEvent&#x27;,&#123; ... pass some event data ...&#125;);</span><br><span class="line"></span><br><span class="line">this.$bus.$on(&#x27;nameOfEvent&#x27;,($event) =&gt; &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>现在，我们创建两个简单的组件，以便最终得出结论。</p>
<p>接下来的这个示例中，我们创建了一个 <code>ShowMessage</code> 的组件用来显示信息，另外创建一个 <code>UpdateMessage</code> 的组件，用来更新信息。</p>
<p>在 <code>UpdateMessage</code> 组件中触发需要的事件。在这个示例中，将触发一个 <code>updateMessage</code> 事件，这个事件发送了 <code>updateMessage</code> 的频道：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- UpdateMessage.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;form&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;form-control&quot;&gt;</span><br><span class="line">            &lt;input v-model=&quot;message&quot; &gt;</span><br><span class="line">            &lt;button @click=&quot;updateMessage()&quot;&gt;更新消息&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">        name: &quot;UpdateMessage&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                message: &quot;这是一条消息&quot;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            updateMessage() &#123;</span><br><span class="line">                this.$bus.$emit(&quot;updateMessage&quot;, this.message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy () &#123;</span><br><span class="line">            $this.$bus.$off(&#x27;updateMessage&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>同时在 <code>ShowMessage</code> 组件中监听该事件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ShowMessage.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;message&quot;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt; </span><br><span class="line">export default &#123;</span><br><span class="line">        name: &quot;ShowMessage&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                message: &quot;我是一条消息&quot;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            var self = this</span><br><span class="line">            this.$bus.$on(&#x27;updateMessage&#x27;, function(value) &#123;</span><br><span class="line">                self.updateMessage(value);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            updateMessage(value) &#123;</span><br><span class="line">                this.message = value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>最终的效果如下：</p>
<p>从上面的代码中，我们可以看到 <code>ShowMessage</code> 组件侦听一个名为 <code>updateMessage</code> 的特定事件，这个事件在组件实例化时被触发，或者你可以在创建组件时触发。另一方面，我们有另一个组件<code>UpdateMessage</code> ，它有一个按钮，当有人点击它时会发出一个事件。这导致订阅组件侦听发出的事件。这产生了 <code>Pub/Sub</code> 模型，该模型在兄弟姐妹之间持续存在并且非常容易实现。</p>
<h1 id="组件之间共享数据的方式"><a href="#组件之间共享数据的方式" class="headerlink" title="组件之间共享数据的方式"></a>组件之间共享数据的方式</h1><p><img src="https://s2.loli.net/2022/03/13/xAVO39iYqyM6Svn.png" alt="image-20220313104108288"></p>
<h1 id="Vuex是什么"><a href="#Vuex是什么" class="headerlink" title="Vuex是什么"></a>Vuex是什么</h1><p>组件之间共享数据的方案</p>
<p><img src="https://s2.loli.net/2022/03/13/xGLhDvTZ9Kj5XPi.png" alt="image-20220313104454888"></p>
<p><img src="https://s2.loli.net/2022/03/13/bjF5QJDHVz1SwXE.png" alt="image-20220313104532719"></p>
<h4 id="引入组件"><a href="#引入组件" class="headerlink" title="引入组件"></a>引入组件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import navcon from &#x27;../components/navcon.vue&#x27;</span><br><span class="line">import leftnav from &#x27;../components/leftnav.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;index&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      showclass: &#x27;asideshow&#x27;,</span><br><span class="line">      showtype: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 注册组件</span><br><span class="line">  components: &#123;</span><br><span class="line">    &quot;my-navcon&quot;:navcon,</span><br><span class="line">    leftnav</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h3 id="1-安装vuex依赖包"><a href="#1-安装vuex依赖包" class="headerlink" title="1.安装vuex依赖包"></a>1.安装vuex依赖包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure>

<h3 id="2-导入vuex包"><a href="#2-导入vuex包" class="headerlink" title="2.导入vuex包"></a>2.导入vuex包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure>

<h3 id="3-创建store对象"><a href="#3-创建store对象" class="headerlink" title="3.创建store对象"></a>3.创建store对象</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">//state存放全局共享的数据</span><br><span class="line">state:&#123;count:0&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="4-将store对象挂在到vue实例中"><a href="#4-将store对象挂在到vue实例中" class="headerlink" title="4.将store对象挂在到vue实例中"></a>4.将store对象挂在到vue实例中</h3><h5 id="main-js："><a href="#main-js：" class="headerlink" title="main.js："></a>main.js：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">import store from &#x27;./store&#x27;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#app&#x27;,</span><br><span class="line">render:h=&gt;h(app),</span><br><span class="line">//将创建的共享数据对象，挂载到Vue实例中</span><br><span class="line">//所有的组件，就可以直接从store中获取全局的数据了。	</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="store-index-js"><a href="#store-index-js" class="headerlink" title="store / index.js"></a>store / index.js</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="State-数据源"><a href="#State-数据源" class="headerlink" title="State 数据源"></a>State 数据源</h1><p>State提供唯一的公共数据源，所有共享的数据都要统一放到 Store的 State I中进行存储。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建store数据源，提供唯一公共数据</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="通过-this-store-state-全局数据名称-访问"><a href="#通过-this-store-state-全局数据名称-访问" class="headerlink" title="通过 this.$store.state.全局数据名称 访问"></a>通过 this.$store.state.全局数据名称 访问</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.$store.state.全局数据名称</span><br></pre></td></tr></table></figure>

<p>由于在模板字符串中，是不需要写this的，所以直接写this后边的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;当前最新的count值为：&#123;&#123;$store.state.count&#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure>

<h2 id="mapState-映射为计算属性"><a href="#mapState-映射为计算属性" class="headerlink" title="mapState 映射为计算属性"></a>mapState 映射为计算属性</h2><p>通过刚オ导入的 mapState 函数，将当前组件需要的全局数据，映射为当前组件的 computed计算属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 使用： --&gt;</span><br><span class="line">&lt;h3&gt;当前最新的count值为：&#123;&#123; Count &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;当前最新的count值为：&#123;&#123; xCount &#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1.导入辅助函数 mapState</span><br><span class="line">import &#123; mapState &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">  	// mapState 可以接收数组或对象形式的参数 映射为计算属性，下面分别示例</span><br><span class="line">  	</span><br><span class="line">  	//2.1 传入数组 </span><br><span class="line">    ...mapState([&#x27;count&#x27;]),</span><br><span class="line">	</span><br><span class="line">	//2.2 对象形式 可以自定义名称</span><br><span class="line">	...mapState(&#123;</span><br><span class="line">		xCount:state =&gt; state.count</span><br><span class="line">	&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Mutations-变更store中的数据"><a href="#Mutations-变更store中的数据" class="headerlink" title="Mutations 变更store中的数据"></a>Mutations 变更store中的数据</h1><blockquote>
<p>Mutations用于变更 Store中的数据。</p>
</blockquote>
<p>注意： 只有 mutations里的函数，才有权利修改 state 的数据<br>注意： <strong>mutations里不能包含异步操作</strong>。</p>
<p>①只能通过 mutations变更 Store数据，不可以直接操作 Store中的数据。<br>②通过这种方式虽然操作起来稍微繁琐一些，但是可以集中监控所有数据的变化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state:&#123;</span><br><span class="line">	count:0</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line">	add(state)&#123;</span><br><span class="line">	  //变更状态</span><br><span class="line">	  state.count++</span><br><span class="line">	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="this-store-commit-触发-mutations"><a href="#this-store-commit-触发-mutations" class="headerlink" title="this.$store.commit() 触发 mutations"></a>this.$store.commit() 触发 mutations</h2><p><code>this.$store.commit()</code> 是触发 mutations的第一种方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">Increment</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="触发-mutations-时传递值"><a href="#触发-mutations-时传递值" class="headerlink" title="触发 mutations 时传递值"></a>触发 mutations 时传递值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IncrementN()&#123;</span><br><span class="line">  this.$store.commit(&#x27;addN&#x27;,5)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mutations: &#123;</span><br><span class="line">  add(state) &#123;</span><br><span class="line">    // 变更状态</span><br><span class="line">    state.count++</span><br><span class="line">  &#125;,</span><br><span class="line">  addN(state,step)&#123;</span><br><span class="line">    // 变更状态</span><br><span class="line">    state.count += step</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="MapMutations-映射为方法"><a href="#MapMutations-映射为方法" class="headerlink" title="MapMutations 映射为方法"></a>MapMutations 映射为方法</h2><p>触发mutations的第二种方式：</p>
<p>1.从vuex中按需导入 mapMutations函数<br><code>import &#123;mapMutations&#125; from &#39;vuex&#39;</code></p>
<p>2.通过刚才按需导入的 mapMutations函数，映射为当前组件的<code>methods</code>函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// store</span><br><span class="line">mutations: &#123;</span><br><span class="line">  add(state) &#123;</span><br><span class="line">    // 变更状态</span><br><span class="line">    state.count++</span><br><span class="line">  &#125;,</span><br><span class="line">  sub(state) &#123;</span><br><span class="line">    state.count--</span><br><span class="line">  &#125;,</span><br><span class="line">  addN(state, step) &#123;</span><br><span class="line">    // 变更状态</span><br><span class="line">    state.count += step</span><br><span class="line">  &#125;,</span><br><span class="line">  subN(state, step) &#123;</span><br><span class="line">    state.count -= step</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 组件A</span><br><span class="line">import &#123; mapState,mapMutations &#125; from &#x27;vuex&#x27;</span><br><span class="line">methods:&#123;</span><br><span class="line">  ...mapMutations([&#x27;sub&#x27;,&#x27;subN&#x27;]),</span><br><span class="line">  decrement()&#123;</span><br><span class="line">    // 调用 </span><br><span class="line">    this.sub()</span><br><span class="line">  &#125;,</span><br><span class="line">  decrementN()&#123;</span><br><span class="line">    this.subN(5)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MapMutations-映射为方法-1"><a href="#MapMutations-映射为方法-1" class="headerlink" title="MapMutations 映射为方法"></a>MapMutations 映射为方法</h2><p>触发mutations的第二种方式：</p>
<p>1.从vuex中按需导入 mapMutations函数<br><code>import &#123;mapMutations&#125; from &#39;vuex&#39;</code></p>
<p>2.通过刚才按需导入的 mapMutations函数，映射为当前组件的<code>methods</code>函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// store</span><br><span class="line">mutations: &#123;</span><br><span class="line">  add(state) &#123;</span><br><span class="line">    // 变更状态</span><br><span class="line">    state.count++</span><br><span class="line">  &#125;,</span><br><span class="line">  sub(state) &#123;</span><br><span class="line">    state.count--</span><br><span class="line">  &#125;,</span><br><span class="line">  addN(state, step) &#123;</span><br><span class="line">    // 变更状态</span><br><span class="line">    state.count += step</span><br><span class="line">  &#125;,</span><br><span class="line">  subN(state, step) &#123;</span><br><span class="line">    state.count -= step</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 组件A</span><br><span class="line">import &#123; mapState,mapMutations &#125; from &#x27;vuex&#x27;</span><br><span class="line">methods:&#123;</span><br><span class="line">  ...mapMutations([&#x27;sub&#x27;,&#x27;subN&#x27;]),</span><br><span class="line">  decrement()&#123;</span><br><span class="line">    // 调用 </span><br><span class="line">    this.sub()</span><br><span class="line">  &#125;,</span><br><span class="line">  decrementN()&#123;</span><br><span class="line">    this.subN(5)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Actions-专门处理异步操作"><a href="#Actions-专门处理异步操作" class="headerlink" title="Actions 专门处理异步操作"></a>Actions 专门处理异步操作</h1><p>Actions用于处理异步任务。</p>
<p>如果通过<strong>异步</strong>操作变更数据，<strong>必须通过 Action</strong>,而不能使用Mutation,但是在 Action中还是要<strong>通过触发Mutation</strong>的方式间接<strong>变更数据</strong>。</p>
<p>注意： 在Actions 中不能直接修改 state中的数据，要通过 mutations修改。</p>
<h2 id="this-store-dispatch-触发-Actions"><a href="#this-store-dispatch-触发-Actions" class="headerlink" title="this.$store.dispatch 触发 Actions"></a>this.$store.dispatch 触发 Actions</h2><p>store.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 定义 Action</span><br><span class="line">const store = new Vuex.store(&#123;</span><br><span class="line">  // ...省略其他代码</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    // 只有 mutations中的函数才有权利修改 state。</span><br><span class="line">    // 不能在 mutations里执行异步操作。</span><br><span class="line">    add(state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    // 在Actions 中不能直接修改 state中的数据，要通过 mutations修改。</span><br><span class="line">    addAsync(context) &#123;</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        context.commit(&#x27;add&#x27;)</span><br><span class="line">      &#125;, 1000);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>组件A</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 触发 Action</span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="function"><span class="title">handle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 触发 actions 的第一种方式</span></span><br><span class="line">    <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;addAsync&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mapActions-映射为方法"><a href="#mapActions-映射为方法" class="headerlink" title="mapActions 映射为方法"></a>mapActions 映射为方法</h2><p>1.从Vuex中按需导入 <code>mapActions</code> 函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;mapActions&#125; from &#x27;vuex&#x27;</span><br></pre></td></tr></table></figure>

<p>2.将指定的 actions 函数，映射为当前组件 methods 的方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  ...mapActions([<span class="string">&#x27;subAsync&#x27;</span>]),</span><br><span class="line">  <span class="function"><span class="title">decrementAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.subAsync()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>store.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line"> // 在Actions 中不能直接修改 state中的数据，要通过 mutations修改。</span><br><span class="line">  subAsync(context)&#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      context.commit(&#x27;sub&#x27;)</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h1><p>Getter 用于对 Store中的数据进行加工处理形成新的数据。</p>
<p>Getter <strong>不会修改 Store 中的原数据</strong>，它只起到一个包装器的作用，将Store中的数据加工后输出出来。</p>
<ol>
<li>Getter可以对 Store中已有的数据加工处理之后形成新的数据，类似Vue的计算属性。</li>
<li>Store中数据发生变化， Getter 的数据也会跟着变化。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;&#123;&#123;$store.getters.showNum&#125;&#125;&gt;&gt;</span><br><span class="line">//定义 Getter</span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state:&#123;</span><br><span class="line">	count:0</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    showNum(state) &#123;</span><br><span class="line">      return &#x27;当前最新的数量是【&#x27; + state.count + &#x27;】&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="通过-this-store-getters-名称-访问"><a href="#通过-this-store-getters-名称-访问" class="headerlink" title="通过 this.$store.getters.名称 访问"></a>通过 this.$store.getters.名称 访问</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.getters.名称</span><br></pre></td></tr></table></figure>

<h2 id="mapGetters-映射为计算属性"><a href="#mapGetters-映射为计算属性" class="headerlink" title="mapGetters 映射为计算属性"></a>mapGetters 映射为计算属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">	...mapGetters([<span class="string">&#x27;showNum&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h1><p>其实，通过<code>mapState,mapMutations,mapActions,mapGetters</code>映射过来的计算属性，或者方法都可以直接调用，不用在 <code>commit</code> 或者 <code>dispatch</code></p>
<p>如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button @click=&quot;decrementAsync&quot;&gt;-1Async&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;mapActions&#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">//...省略一些代码</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapActions([&#x27;subAsync&#x27;]),</span><br><span class="line">  decrementAsync()&#123;</span><br><span class="line">    this.subAsync()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>其实可以简写成：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;subAsync&quot;</span>&gt;</span>-1Async<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;mapActions&#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">//...省略一些代码</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapActions([&#x27;subAsync&#x27;]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>有参数的时候，也可以直接把参数带上，就像这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;subAsync(5)&quot;</span>&gt;</span>+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;mapActions&#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">//...省略一些代码</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapActions([&#x27;addAsync&#x27;]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h1 id="Vuex-todoList-案例"><a href="#Vuex-todoList-案例" class="headerlink" title="Vuex todoList 案例"></a>Vuex todoList 案例</h1><p>由于代码较多就不放在 CSDN了。</p>
<p>我打包上传到了 蓝奏云，需要的去下载吧。</p>
<p>源码地址：<a href="https://wwe.lanzoui.com/iMWRImu1kad">蓝奏云素材</a></p>
<h1 id="Vue引入HTML"><a href="#Vue引入HTML" class="headerlink" title="Vue引入HTML"></a>Vue引入HTML</h1><h2 id="html使用vue组件"><a href="#html使用vue组件" class="headerlink" title="html使用vue组件"></a>html使用vue组件</h2><h4 id="1-不传递数据"><a href="#1-不传递数据" class="headerlink" title="1.不传递数据"></a>1.不传递数据</h4><h2 id="navigation-bar-html"><a href="#navigation-bar-html" class="headerlink" title="navigation_bar.html"></a>navigation_bar.html</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 引入样式 --&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;../element-ui/lib/theme-chalk/index.css&quot;&gt;</span><br><span class="line">    &lt;!-- 引入组件库 --&gt;</span><br><span class="line">    &lt;script src=&quot;../element-ui/lib/index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../components/navigation_bar.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;navigation-bar&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;navigation-bar&gt;&lt;/navigation-bar&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="navigation-bar-js-第一种方式"><a href="#navigation-bar-js-第一种方式" class="headerlink" title="navigation_bar.js (第一种方式)"></a>navigation_bar.js (第一种方式)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;navigation-bar&#x27;, &#123;</span><br><span class="line">    template:</span><br><span class="line">        `&lt;el-menu default-active=&quot;1&quot; class=&quot;el-menu-demo&quot; mode=&quot;horizontal&quot; @select=&quot;handleSelect&quot;&gt;</span><br><span class="line">                &lt;el-menu-item index=&quot;1&quot;&gt;处理中心&lt;/el-menu-item&gt;</span><br><span class="line">                &lt;el-submenu index=&quot;2&quot;&gt;</span><br><span class="line">                    &lt;template slot=&quot;title&quot;&gt;我的工作台&lt;/template&gt;</span><br><span class="line">                    &lt;el-menu-item index=&quot;2-1&quot;&gt;选项1&lt;/el-menu-item&gt;</span><br><span class="line">                    &lt;el-menu-item index=&quot;2-2&quot;&gt;选项2&lt;/el-menu-item&gt;</span><br><span class="line">                    &lt;el-menu-item index=&quot;2-3&quot;&gt;选项3&lt;/el-menu-item&gt;</span><br><span class="line">                    &lt;el-submenu index=&quot;2-4&quot;&gt;</span><br><span class="line">                        &lt;template slot=&quot;title&quot;&gt;选项4&lt;/template&gt;</span><br><span class="line">                        &lt;el-menu-item index=&quot;2-4-1&quot;&gt;选项1&lt;/el-menu-item&gt;</span><br><span class="line">                        &lt;el-menu-item index=&quot;2-4-2&quot;&gt;选项2&lt;/el-menu-item&gt;</span><br><span class="line">                        &lt;el-menu-item index=&quot;2-4-3&quot;&gt;选项3&lt;/el-menu-item&gt;</span><br><span class="line">                    &lt;/el-submenu&gt;</span><br><span class="line">                &lt;/el-submenu&gt;</span><br><span class="line">            &lt;/el-menu&gt;`,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleSelect(key, keyPath) &#123;</span><br><span class="line">            console.log(key, keyPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>不需要父传给子组件值的参数<code>直接写死</code>(default-active),且参数前不用加:</p>
</blockquote>
<h2 id="navigation-bar-js-第二种方式"><a href="#navigation-bar-js-第二种方式" class="headerlink" title="navigation_bar.js (第二种方式)"></a>navigation_bar.js (第二种方式)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;navigation-bar&#x27;, &#123;</span><br><span class="line">    template:</span><br><span class="line">        `&lt;el-menu :default-active=&quot;defaultIndex&quot; class=&quot;el-menu-demo&quot; mode=&quot;horizontal&quot; @select=&quot;handleSelect&quot;&gt;</span><br><span class="line">                &lt;el-menu-item index=&quot;1&quot;&gt;处理中心&lt;/el-menu-item&gt;</span><br><span class="line">                &lt;el-submenu index=&quot;2&quot;&gt;</span><br><span class="line">                    &lt;template slot=&quot;title&quot;&gt;我的工作台&lt;/template&gt;</span><br><span class="line">                    &lt;el-menu-item index=&quot;2-1&quot;&gt;选项1&lt;/el-menu-item&gt;</span><br><span class="line">                    &lt;el-menu-item index=&quot;2-2&quot;&gt;选项2&lt;/el-menu-item&gt;</span><br><span class="line">                    &lt;el-menu-item index=&quot;2-3&quot;&gt;选项3&lt;/el-menu-item&gt;</span><br><span class="line">                    &lt;el-submenu index=&quot;2-4&quot;&gt;</span><br><span class="line">                        &lt;template slot=&quot;title&quot;&gt;选项4&lt;/template&gt;</span><br><span class="line">                        &lt;el-menu-item index=&quot;2-4-1&quot;&gt;选项1&lt;/el-menu-item&gt;</span><br><span class="line">                        &lt;el-menu-item index=&quot;2-4-2&quot;&gt;选项2&lt;/el-menu-item&gt;</span><br><span class="line">                        &lt;el-menu-item index=&quot;2-4-3&quot;&gt;选项3&lt;/el-menu-item&gt;</span><br><span class="line">                    &lt;/el-submenu&gt;</span><br><span class="line">                &lt;/el-submenu&gt;</span><br><span class="line">            &lt;/el-menu&gt;`,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            defaultIndex:&#x27;2&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleSelect(key, keyPath) &#123;</span><br><span class="line">            console.log(key, keyPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>不需要父传给子组件值的参数<code>通过data赋值</code>(:default-active=“defaultIndex”)</p>
</blockquote>
<h4 id="2-父给子组件赋值"><a href="#2-父给子组件赋值" class="headerlink" title="2.父给子组件赋值"></a>2.父给子组件赋值</h4><h2 id="my-table-html"><a href="#my-table-html" class="headerlink" title="my_table.html"></a>my_table.html</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 引入样式 --&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;../element-ui/lib/theme-chalk/index.css&quot;&gt;</span><br><span class="line">    &lt;!-- 引入组件库 --&gt;</span><br><span class="line">    &lt;script src=&quot;../element-ui/lib/index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../components/my_table.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;my_table&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;my_table :table-data=&quot;tData&quot; :msg=&quot;message&quot; :ht=&quot;height&quot;&gt;&lt;/my_table&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                tData: [&#123;</span><br><span class="line">                    date: &#x27;2016-05-02&#x27;,</span><br><span class="line">                    name: &#x27;王小虎&#x27;,</span><br><span class="line">                    address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    date: &#x27;2016-05-04&#x27;,</span><br><span class="line">                    name: &#x27;王小虎&#x27;,</span><br><span class="line">                    address: &#x27;上海市普陀区金沙江路 1517 弄&#x27;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    date: &#x27;2016-05-01&#x27;,</span><br><span class="line">                    name: &#x27;王小虎&#x27;,</span><br><span class="line">                    address: &#x27;上海市普陀区金沙江路 1519 弄&#x27;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    date: &#x27;2016-05-03&#x27;,</span><br><span class="line">                    name: &#x27;王小虎&#x27;,</span><br><span class="line">                    address: &#x27;上海市普陀区金沙江路 1516 弄&#x27;</span><br><span class="line">                &#125;],</span><br><span class="line">                message:&quot;msgmsgmsgmsgmsg&quot;,</span><br><span class="line">                height:800,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="my-table-js"><a href="#my-table-js" class="headerlink" title="my_table.js"></a>my_table.js</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;my_table&#x27;, &#123;</span><br><span class="line">    template:</span><br><span class="line">        `&lt;div&gt;</span><br><span class="line">              &lt;el-table</span><br><span class="line">              :height=&quot;ht&quot;</span><br><span class="line">              :data=&quot;tableData&quot;</span><br><span class="line">              style=&quot;width: 100%&quot;&gt;</span><br><span class="line">              &lt;el-table-column</span><br><span class="line">                prop=&quot;date&quot;</span><br><span class="line">                label=&quot;日期&quot;</span><br><span class="line">                width=&quot;180&quot;&gt;</span><br><span class="line">              &lt;/el-table-column&gt;</span><br><span class="line">              &lt;el-table-column</span><br><span class="line">                prop=&quot;name&quot;</span><br><span class="line">                label=&quot;姓名&quot;</span><br><span class="line">                width=&quot;180&quot;&gt;</span><br><span class="line">              &lt;/el-table-column&gt;</span><br><span class="line">              &lt;el-table-column</span><br><span class="line">                prop=&quot;address&quot;</span><br><span class="line">                label=&quot;地址&quot;&gt;</span><br><span class="line">              &lt;/el-table-column&gt;</span><br><span class="line">            &lt;/el-table&gt;</span><br><span class="line">            &lt;hr&gt;</span><br><span class="line">            &#123;&#123;msg&#125;&#125;</span><br><span class="line">          &lt;/div&gt;`,</span><br><span class="line">    props: [&#x27;tableData&#x27;,&#x27;msg&#x27;,&#x27;ht&#x27;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>1.需要父传给子组件的参数,需要使用props参数,添加改参数;</p>
<p>且需要在使用处引用该参数(:data=“tableData”,:height=“ht”)</p>
<p>2.父引用子组件时,需要将传递的参数在标签中赋值:</p>
<p>如果是自定义的属性,则直接用:加上props中的名称赋值即可(:msg=“message”,:ht=“height”)</p>
<p>如果是特定的属性,则不是使用自定义的赋值方法(用:table-data=“tData”,而不是:tableData=“tData”)</p>
<p>原因是使用驼峰式命名会自动转化为table-data</p>
</blockquote>
<h4 id="3-父传给子-子改变后再传给父"><a href="#3-父传给子-子改变后再传给父" class="headerlink" title="3.父传给子,子改变后再传给父"></a>3.父传给子,子改变后再传给父</h4><h3 id="my-select-html"><a href="#my-select-html" class="headerlink" title="my_select.html"></a>my_select.html</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 引入样式 --&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;../element-ui/lib/theme-chalk/index.css&quot;&gt;</span><br><span class="line">    &lt;!-- 引入组件库 --&gt;</span><br><span class="line">    &lt;script src=&quot;../element-ui/lib/index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../components/my_select.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;my_select&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;my_select :options=&quot;options&quot; @on_submit_father_prop=&quot;onSubmitFather&quot; @on_change_father_prop=&quot;onSubmitFather&quot;&gt;&lt;/my_select&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    父组件value:&#123;&#123;value&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                options: [ &#x27;黄金糕&#x27;, &#x27;双皮奶&#x27;,&#x27;蚵仔煎&#x27;,&#x27;龙须面&#x27;],</span><br><span class="line">                value:&quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            onSubmitFather(a)&#123;</span><br><span class="line">                this.value = a</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="my-select-js"><a href="#my-select-js" class="headerlink" title="my_select.js"></a>my_select.js</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;my_select&#x27;, &#123;</span><br><span class="line">    template:</span><br><span class="line">        `&lt;div&gt;</span><br><span class="line">            &lt;el-form :inline=&quot;true&quot;  class=&quot;demo-form-inline&quot;&gt;</span><br><span class="line">              &lt;el-form-item label=&quot;活动区域&quot;&gt;</span><br><span class="line">                &lt;el-select v-model=&quot;value&quot; placeholder=&quot;请选择&quot; @change=&quot;onChange&quot;&gt;</span><br><span class="line">                    &lt;el-option</span><br><span class="line">                      v-for=&quot;item in options&quot;</span><br><span class="line">                      :key=&quot;item&quot;</span><br><span class="line">                      :label=&quot;item&quot;</span><br><span class="line">                      :value=&quot;item&quot;&gt;</span><br><span class="line">                    &lt;/el-option&gt;</span><br><span class="line">                  &lt;/el-select&gt;</span><br><span class="line">              &lt;/el-form-item&gt;</span><br><span class="line">              &lt;el-form-item&gt;</span><br><span class="line">                &lt;el-button type=&quot;primary&quot; @click=&quot;onSubmit&quot;&gt;查询&lt;/el-button&gt;</span><br><span class="line">              &lt;/el-form-item&gt;</span><br><span class="line">            &lt;/el-form&gt;</span><br><span class="line">            &lt;hr&gt;</span><br><span class="line">            子组件value:&#123;&#123;value&#125;&#125;</span><br><span class="line">        &lt;/div&gt;`,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            value:&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props:[&#x27;options&#x27;],</span><br><span class="line">    methods: &#123;</span><br><span class="line">        onSubmit()&#123;</span><br><span class="line">            this.$emit(&#x27;on_submit_father_prop&#x27;, this.value)</span><br><span class="line">        &#125;,</span><br><span class="line">        onChange()&#123;</span><br><span class="line">            this.$emit(&#x27;on_change_father_prop&#x27;, this.value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意观察<code>on_submit_father_prop</code>,<code>onSubmit</code>,<code>onSubmitFather</code>:</p>
<p>作为标签属性的<code>on_submit_father_prop</code>不要使用驼峰式命名,不然会自动转化为<code>on-submit-father-prop</code></p>
</blockquote>
<h2 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h2><h1 id="一、理解"><a href="#一、理解" class="headerlink" title="一、理解"></a>一、理解</h1><h2 id="1-1、-Vue-原型对象上包含事件处理的方法"><a href="#1-1、-Vue-原型对象上包含事件处理的方法" class="headerlink" title="1.1、 Vue 原型对象上包含事件处理的方法"></a>1.1、 Vue 原型对象上包含事件处理的方法</h2><ol>
<li>$on(eventName, listener): 绑定自定义事件监听</li>
<li>$emit(eventName, data): 分发自定义事件</li>
<li>$off(eventName): 解绑自定义事件监听</li>
<li>$once(eventName, listener): 绑定事件监听, 但只能处理一次</li>
</ol>
<h2 id="1-2、所有组件实例对象的原型对象的原型对象就是-Vue-的原型对象"><a href="#1-2、所有组件实例对象的原型对象的原型对象就是-Vue-的原型对象" class="headerlink" title="1.2、所有组件实例对象的原型对象的原型对象就是 Vue 的原型对象"></a>1.2、所有组件实例对象的原型对象的原型对象就是 Vue 的原型对象</h2><p>所有组件对象都能看到 Vue 原型对象上的属性和方法<br>Vue.prototype.b u s = n e w V u e ( ) , 所 有 的 组 件 对 象 都 能 看 到 bus = new Vue(), 所有的组件对象都能看到bus=newVue(),所有的组件对象都能看到bus 这个属性<br>对象</p>
<h2 id="1-3、全局事件总线"><a href="#1-3、全局事件总线" class="headerlink" title="1.3、全局事件总线"></a>1.3、全局事件总线</h2><ol>
<li>包含事件处理相关方法的对象(只有一个)</li>
<li>所有的组件都可以得到</li>
</ol>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="2-1、指定事件总线对象"><a href="#2-1、指定事件总线对象" class="headerlink" title="2.1、指定事件总线对象"></a>2.1、指定事件总线对象</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">beforeCreate () &#123; <span class="comment">// 尽量早的执行挂载全局事件总线对象的操作</span></span><br><span class="line">Vue.prototype.$globalEventBus = <span class="built_in">this</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#root&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="2-3、分发事件"><a href="#2-3、分发事件" class="headerlink" title="2.3、分发事件"></a>2.3、分发事件</h2><p>其中<code>this.data</code>表示要传递的数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$globalEventBus.$emit(<span class="string">&#x27;deleteTodo&#x27;</span>, <span class="built_in">this</span>.data)</span><br></pre></td></tr></table></figure>

<h2 id="2-2、绑定事件"><a href="#2-2、绑定事件" class="headerlink" title="2.2、绑定事件"></a>2.2、绑定事件</h2><p>其中<code>this.deleteTodo</code>表示一个回调函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$globalEventBus.$on(<span class="string">&#x27;deleteTodo&#x27;</span>, <span class="built_in">this</span>.deleteTodo)</span><br></pre></td></tr></table></figure>

<h2 id="2-4、解绑事件"><a href="#2-4、解绑事件" class="headerlink" title="2.4、解绑事件"></a>2.4、解绑事件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$globalEventBus.$off(<span class="string">&#x27;deleteTodo&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>假设兄弟组件有三个，分别是A、B、C组件，C组件如何获取A或者B组件的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;itany&quot;&gt;</span><br><span class="line">    &lt;my-a&gt;&lt;/my-a&gt;</span><br><span class="line">    &lt;my-b&gt;&lt;/my-b&gt;</span><br><span class="line">    &lt;my-c&gt;&lt;/my-c&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=&quot;a&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;A组件：&#123;&#123;name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;button @click=&quot;send&quot;&gt;将数据发送给C组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template id=&quot;b&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;B组件：&#123;&#123;age&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;button @click=&quot;send&quot;&gt;将数组发送给C组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template id=&quot;c&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;C组件：&#123;&#123;name&#125;&#125;，&#123;&#123;age&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var Event = new Vue();//定义一个空的Vue实例</span><br><span class="line">var A = &#123;</span><br><span class="line">    template: &#x27;#a&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;tom&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      send() &#123;</span><br><span class="line">        Event.$emit(&#x27;data-a&#x27;, this.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var B = &#123;</span><br><span class="line">    template: &#x27;#b&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        age: 20</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      send() &#123;</span><br><span class="line">        Event.$emit(&#x27;data-b&#x27;, this.age);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var C = &#123;</span><br><span class="line">    template: &#x27;#c&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;&#x27;,</span><br><span class="line">        age: &quot;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;//在模板编译完成后执行</span><br><span class="line">     Event.$on(&#x27;data-a&#x27;,name =&gt; &#123;</span><br><span class="line">         this.name = name;//箭头函数内部不会产生新的this，这边如果不用=&gt;,this指代Event</span><br><span class="line">     &#125;)</span><br><span class="line">     Event.$on(&#x27;data-b&#x27;,age =&gt; &#123;</span><br><span class="line">         this.age = age;</span><br><span class="line">     &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el: &#x27;#itany&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      &#x27;my-a&#x27;: A,</span><br><span class="line">      &#x27;my-b&#x27;: B,</span><br><span class="line">      &#x27;my-c&#x27;: C</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="vue的promise和async和await使用"><a href="#vue的promise和async和await使用" class="headerlink" title="vue的promise和async和await使用"></a>vue的promise和async和await使用</h2><p>最开始实现异步的方法：回调函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">method1(function(err, result) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        throw err;</span><br><span class="line">    &#125;</span><br><span class="line">    method2(function(err, result) &#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">            throw err;</span><br><span class="line">        &#125;</span><br><span class="line">        method3(function(err, result) &#123;</span><br><span class="line">            if (err) &#123;</span><br><span class="line">                throw err;</span><br><span class="line">            &#125;</span><br><span class="line">            method4(function(err, result) &#123;</span><br><span class="line">                if (err) &#123;</span><br><span class="line">                    throw err;</span><br><span class="line">                &#125;</span><br><span class="line">                method5(result);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>回调地狱一层一层嵌套多个回调函数，会使代码错综复杂，难以理解和调试。</p>
<p>promise</p>
<p>promise是异步编程的一种解决方案，比传统的解决方案–回调函数和事件，更合理更强大。所谓promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，promise是一个对象，可以获取异步操作的消息，提供统一的API，各种异步操作都可以用同样的方法进行处理。</p>
<p>特点：1、对象状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</p>
<p>2、一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfiled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。如果改变已经发生了，你再对promise对象添加回调函数，也会立即得到这个结果。这与事件完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>
<p>有了promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，promise对象提供统一的借口，使得控制异步操作更加容易。</p>
<p>基本用法：</p>
<p>promise对象是一个构造函数，用来生成promise实例。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const promise = new Promise(function(resolve, reject) &#123;</span><br><span class="line">  // ... some code</span><br><span class="line"></span><br><span class="line">  if (/* 异步操作成功 */)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>resolve和reject是两个函数，由javascript引擎提供，不用自己部署。</p>
<p>resolve函数作用：将promise对象的状态从未完成变为成功（即从pending变为resolved）,在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。</p>
<p>reject函数作用：将promise对象的状态从未完成变为失败（即从pending变为rejected）,在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>
<p>Promise实例生成后用then方法分别指定resolved状态和rejected状态的回调函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">promise.then(function(value)&#123;</span><br><span class="line">  // success</span><br><span class="line">&#125;, function(error)&#123;</span><br><span class="line">  // failure</span><br><span class="line">&#125;)</span><br><span class="line">// then方法的第二个参数可选，不一定要提供，</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function timeout(ms)&#123;</span><br><span class="line"> return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(resolve(&#x27;done&#x27;), ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timeout(100).then(function(value)&#123;</span><br><span class="line">   console.log(value);</span><br><span class="line">&#125;, function(error)&#123;</span><br><span class="line">   throw error;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p> 如果调用resolve函数和reject函数时带有参数，那么它们的参数会被传递给回调函数。reject函数的参数通常是Error对象的实例，表示抛出的错误；resolve函数的参数除了正常的值外，还可能是另一个Promise实例。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const p1 = new Promise(function(resolve, reject)&#123;</span><br><span class="line">  setTimeout(() =&gt; reject(new Error(&#x27;fail&#x27;)), 3000);</span><br><span class="line">&#125;);</span><br><span class="line">const p2 = new Promise(function(resolve, reject)&#123;</span><br><span class="line">  setTimeout(() =&gt; resolve(p1), 1000);</span><br><span class="line">&#125;);</span><br><span class="line">p2.then(result =&gt; console.log(result)).catch(error =&gt; console.log(error));</span><br><span class="line">// Error: fail</span><br></pre></td></tr></table></figure>

<p>p1 是一个 Promise，3 秒之后变为 rejected。p2 的状态在 1 秒之后改变，resolve 方法返回的是 p1。由于 p2 返回的是另一个 Promise，导致 p2 自己的状态无效了，由 p1 的状态决定 p2 的状态。所以，后面的 then 语句都变成针对后者 p1。又过了 2 秒，p1 变为rejected，导致触发 catch 方法指定的回调函数。</p>
<p>注：调用resolve或reject并不会终结promise的参数函数的执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">   resolve(1);</span><br><span class="line">   console.log(2);</span><br><span class="line">&#125;).then(r =&gt; &#123;</span><br><span class="line">   console.log(r);</span><br><span class="line">&#125;)</span><br><span class="line">// 2</span><br><span class="line">// 1</span><br></pre></td></tr></table></figure>

<p>调用resolve(1)以后，后面的console.log(2)继续执行，并且会先打印出来，因为立即resolved的promise是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务。一般来说，调用resolve或reject以后，promise的使命就完成了，后续操作应该放到then方法里面，而不应该直接写在resolve或reject后面，所以最好在它们前面加上return语句，这样就不会有意外。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  return resolve(1);</span><br><span class="line">  // 后面的语句不会执行</span><br><span class="line">  console.log(2);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>finally()</p>
<p>finally方法用于指定不管promise对象最后状态如何，都会执行的操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">promise</span><br><span class="line"> .then(result =&gt; &#123;...&#125;)</span><br><span class="line"> .catch(error =&gt; &#123;...&#125;)</span><br><span class="line"> .finally(() =&gt; &#123;...&#125;);</span><br></pre></td></tr></table></figure>

<p>响应多个promise</p>
<p>Promise.all()方法，接收单个可迭代对象（如数组）作为参数，并返回一个promise。这个可迭代对象的元素都是promise，只有在它们都完成后，所返回的promsie才会被完成。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let p1 = new Promise(function(resolve, reject) &#123;</span><br><span class="line">    resolve(42);</span><br><span class="line">&#125;);</span><br><span class="line">let p2 = new Promise(function(resolve, reject) &#123;</span><br><span class="line">    resolve(43);</span><br><span class="line">&#125;);</span><br><span class="line">let p3 = new Promise(function(resolve, reject) &#123;</span><br><span class="line">    resolve(44);</span><br><span class="line">&#125;);</span><br><span class="line">let p4 = Promise.all([p1, p2, p3]);</span><br><span class="line">p4.then(function(value) &#123;</span><br><span class="line">    console.log(Array.isArray(value));  // true</span><br><span class="line">    console.log(value[0]);              //  42</span><br><span class="line">    console.log(value[1]);              //  43</span><br><span class="line">    console.log(value[2]);              //  44</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Promise.race()方法：接收一个可迭代对象作为参数，并返回一个新的promise，一旦来源promise中有一个被解决，所返回的promise就会立刻被解决。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let p1 = Promise.resolve(42); //等价于p1=new Promise(resolve =&gt; resolve(42));</span><br><span class="line">let p2 = new Promise(function(resolve, reject) &#123;</span><br><span class="line">    resolve(43);</span><br><span class="line">&#125;);</span><br><span class="line">let p3 = new Promise(function(resolve, reject) &#123;</span><br><span class="line">    resolve(44);</span><br><span class="line">&#125;);</span><br><span class="line">let p4 = Promise.race([p1, p2, p3]);</span><br><span class="line">p4.then(function(value) &#123;</span><br><span class="line">    console.log(value);     // 42</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Promise缺点</p>
<p>1、无法取消Promise,一旦新建它就会立即执行，无法中途取消。</p>
<p>2、如果不设置回调函数，promise内部抛出的错误，不会反应到外部。</p>
<p>3、当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>
<p>async</p>
<p>async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。</p>
<p>async函数返回一个Promise对象，async函数内部return语句返回的值，会成为then方法回调函数的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function f()&#123;</span><br><span class="line">  return &#x27;hello world&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">f().then(v =&gt; console.log(v));</span><br><span class="line">// &quot;hello world&quot;</span><br></pre></td></tr></table></figure>

<p>async函数内部抛出的错误，会导致返回的promise对象变为reject状态。抛出的错误对象会被catch方法回调函数接收到。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function f()&#123;</span><br><span class="line">  throw new Error(&#x27;出错了&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">f().catch(e =&gt; console.log(e))</span><br><span class="line">// Error:出错了</span><br></pre></td></tr></table></figure>

<p>async 函数返回的 Promise 对象，必须等到内部所有 await 命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到 return 语句或者抛出错误。也就是说，只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function asyncTest() &#123;</span><br><span class="line">    let getUrl = await fetch();</span><br><span class="line">    console.log(getUrl);</span><br><span class="line">    let downloadUrl = await download();</span><br><span class="line">    console.log(downloadUrl);</span><br><span class="line">    return &#x27;complete&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">asyncTest().then(console.log)</span><br><span class="line"></span><br><span class="line">function fetch() &#123;</span><br><span class="line">    return new Promise(function(resolve, reject) &#123;</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            resolve(&#x27;fetchDone&#x27;);</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function download() &#123;</span><br><span class="line">    return new Promise(function(resolve, reject) &#123;</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            resolve(&#x27;downloadDone&#x27;);</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码模拟了一个抓取和一个下载，只有这两个操作全部完成，才会执行then方法里面的console.log</p>
<p>await</p>
<p>正常情况下，await命令后面是一个Promise对象，如果不是，会被转成一个立即resolve的Promise对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function f()&#123;</span><br><span class="line">   return await 123;     //await命令后面的参数是数值123，它被转成Promise对象，并立</span><br><span class="line">                                // 即resolve</span><br><span class="line">&#125;</span><br><span class="line">f().then(v =&gt; console.log(v))</span><br><span class="line">//123</span><br></pre></td></tr></table></figure>

<p>await命令后面的promise对象如果变成reject状态，则reject的参数会被catch方法的回调函数接收到。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function f()&#123;</span><br><span class="line">   await Promise.reject(&#x27;出错了&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">f().then(v =&gt; console.log(v)).catch(e =&gt; console.log(e))</span><br><span class="line">//出错了</span><br></pre></td></tr></table></figure>

<p>注意上面代码中await语句前面没有return,但是reject方法的参数依然传入了catch方法的回调函数。如果在await前面加上return,效果一样。</p>
<p>只要一个await语句后面的Promise变为reject，那么整个async函数都会中断执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function f()&#123;</span><br><span class="line">   await Promise.reject(&#x27;出错了&#x27;);</span><br><span class="line">   await Promise.resolve(&#x27;hello world&#x27;);   //不会执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们希望即使前一个异步操作失败，也不要中断后面的异步操作。这时可以将第一个await放try…catch结构里面，这样不管这个异步操作是否成功，第二个await都会执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function f()&#123;</span><br><span class="line">  try &#123;</span><br><span class="line">     await Promise.reject(&#x27;出错了&#x27;)；</span><br><span class="line">  &#125; catch(e)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  return await Promise.resolve(&#x27;hello world&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">f().then(v =&gt; console.log(v));</span><br><span class="line">// hello world</span><br></pre></td></tr></table></figure>

<p>另一种方法是await后面的Promise对象再跟一个catch方法，处理前面可能出现的错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function f()&#123;</span><br><span class="line">  await Promise.reject(&quot;出错了&quot;)</span><br><span class="line">           .catch(e =&gt; console.log(e));</span><br><span class="line">   return await Promise.resolve(&#x27;hello world&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">f().then(v =&gt; console.log(v))</span><br><span class="line">//出错了</span><br><span class="line">// hello world</span><br></pre></td></tr></table></figure>

<p>await命令后面的Promise对象，运行结果可能是rejected, 所以最好把await命令放在try…catch代码块中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function myFunction() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    await somethingThatReturnsAPromise();</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 另一种写法</span><br><span class="line"></span><br><span class="line">async function myFunction() &#123;</span><br><span class="line">  await somethingThatReturnsAPromise()</span><br><span class="line">  .catch(function (err) &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多个await命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 写法一</span><br><span class="line">async function test() &#123;</span><br><span class="line">    let [foo, bar] = await Promise.all([getFoo(), getBar()]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getFoo() &#123;</span><br><span class="line">    return new Promise(function(resolve, reject) &#123;</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            console.log(&#x27;getFoo&#x27;);</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getBar() &#123;</span><br><span class="line">    return new Promise(function(resolve, reject) &#123;</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            console.log(&#x27;getBar&#x27;);</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line">// 写法二</span><br><span class="line">async function test() &#123;</span><br><span class="line">    let fooPromise = getFoo();</span><br><span class="line">    let barPromise = getBar();</span><br><span class="line">    let foo = await fooPromise;</span><br><span class="line">    let bar = await barPromise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>await命令只能用在async函数中，如果用在普通函数，就会报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function test() &#123;</span><br><span class="line">    let promises = [function1, function2, function3]</span><br><span class="line"></span><br><span class="line">    promises.forEach(function (fun) &#123;</span><br><span class="line">        const t = await fun();</span><br><span class="line">        console.log(t)</span><br><span class="line">    &#125;);</span><br><span class="line">   //Uncaught SyntaxError: await is only valid in async function</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function function1() &#123;</span><br><span class="line">    return new Promise(function(resolve, reject) &#123;</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            resolve(&#x27;function1&#x27;)</span><br><span class="line">        &#125;, 2000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function function2() &#123;</span><br><span class="line">    return new Promise(function(resolve, reject) &#123;</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            resolve(&#x27;function2&#x27;)</span><br><span class="line">        &#125;, 2000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function function3() &#123;</span><br><span class="line">    return new Promise(function(resolve, reject) &#123;</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            resolve(&#x27;function3&#x27;)</span><br><span class="line">        &#125;, 2000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure>

<p>如果将forEach方法的参数改成async函数，也有问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">promises.forEach(async function (fun) &#123;</span><br><span class="line">    const t = await fun();</span><br><span class="line">    console.log(t)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码可能不会正常工作，原因是这时三个异步操作将是并发执行，也就是同时执行，而不是继发执行。正确的写法是采用 for 循环。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (let i of promises) &#123;</span><br><span class="line">    const t = await i()</span><br><span class="line">    console.log(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果希望多个请求并发执行，可以使用Promise.all方法，当三个请求都resolved时，下面两种写法效果相同。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function test() &#123;</span><br><span class="line">    let promises = [function1(), function2(), function3()]</span><br><span class="line">    let results = await Promise.all(promises);</span><br><span class="line">    console.log(results)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>Vue引入bootstrap,swiper,echarts</title>
    <url>/2021/12/31/Vue%E5%BC%95%E5%85%A5bootstrap%E5%92%8Cswiper/</url>
    <content><![CDATA[<h2 id="导入命令"><a href="#导入命令" class="headerlink" title="导入命令:"></a>导入命令:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install bootstrap@3.4.1 --save-dev</span><br><span class="line">cnpm install jquery@3.6.0 --save-dev</span><br><span class="line">cnpm install popper.js@1.16.1 --save-dev</span><br><span class="line">cnpm install echarts@4.9.0 --save-dev</span><br></pre></td></tr></table></figure>

<h2 id="修改文件webpack-base-conf-js"><a href="#修改文件webpack-base-conf-js" class="headerlink" title="修改文件webpack.base.conf.js:"></a>修改文件webpack.base.conf.js:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const webpack = require(&quot;webpack&quot;);</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    new webpack.ProvidePlugin(&#123;</span><br><span class="line">      jQuery: &#x27;jquery&#x27;,</span><br><span class="line">      $: &#x27;jquery&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/01/07/O4A6CZMrHQaEcxq.png" alt="image-20211231160630426"></p>
<h2 id="修改main-js文件"><a href="#修改main-js文件" class="headerlink" title="修改main.js文件:"></a>修改main.js文件:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;bootstrap/dist/css/bootstrap.min.css&#x27;</span><br><span class="line">import &#x27;bootstrap/dist/js/bootstrap.min.js&#x27;</span><br><span class="line">import $ from &#x27;jquery&#x27; ;</span><br></pre></td></tr></table></figure>

<h2 id="导入测试："><a href="#导入测试：" class="headerlink" title="导入测试："></a>导入测试：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;nav aria-label=&quot;Page navigation&quot;&gt;</span><br><span class="line">  &lt;ul class=&quot;pagination&quot;&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href=&quot;#&quot; aria-label=&quot;Previous&quot;&gt;</span><br><span class="line">        &lt;span aria-hidden=&quot;true&quot;&gt;&amp;laquo;&lt;/span&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;4&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;5&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href=&quot;#&quot; aria-label=&quot;Next&quot;&gt;</span><br><span class="line">        &lt;span aria-hidden=&quot;true&quot;&gt;&amp;raquo;&lt;/span&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/nav&gt;</span><br></pre></td></tr></table></figure>

<h2 id="导入swiper："><a href="#导入swiper：" class="headerlink" title="导入swiper："></a>导入swiper：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install swiper@3.4.2 --save-dev</span><br></pre></td></tr></table></figure>

<h2 id="在main-js中引入："><a href="#在main-js中引入：" class="headerlink" title="在main.js中引入："></a>在main.js中引入：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;swiper/dist/css/swiper.min.css&#x27;</span><br><span class="line">import &#x27;swiper/dist/js/swiper.min&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="或在引用页面导入："><a href="#或在引用页面导入：" class="headerlink" title="或在引用页面导入："></a>或在引用页面导入：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;div class=&quot;swiper-container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;swiper-wrapper&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;swiper-slide&quot;&gt;Slide 1&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;swiper-slide&quot;&gt;Slide 2&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;swiper-slide&quot;&gt;Slide 3&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 如果需要分页器 --&gt;</span><br><span class="line">        &lt;div class=&quot;swiper-pagination&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 如果需要导航按钮 --&gt;</span><br><span class="line">        &lt;div class=&quot;swiper-button-prev&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;swiper-button-next&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 如果需要滚动条 --&gt;</span><br><span class="line">    &lt;!--    &lt;div class=&quot;swiper-scrollbar&quot;&gt;&lt;/div&gt;--&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  //引入</span><br><span class="line">import &#x27;swiper/dist/css/swiper.min.css&#x27;</span><br><span class="line">import &#x27;swiper/dist/js/swiper.min&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#x27;Welcome to Your Vue.js App&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      new Swiper (&#x27;.swiper-container&#x27;, &#123;</span><br><span class="line">        freeMode : true,</span><br><span class="line">        freeModeSticky : true</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="引入echarts"><a href="#引入echarts" class="headerlink" title="引入echarts:"></a>引入echarts:</h3><h2 id="全局引入"><a href="#全局引入" class="headerlink" title="全局引入"></a>全局引入</h2><h4 id="在main-js中引入"><a href="#在main-js中引入" class="headerlink" title="在main.js中引入"></a>在main.js中引入</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import echarts from &#x27;echarts&#x27;</span><br><span class="line">Vue.prototype.$echarts = echarts</span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用:"></a>使用:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;myChart&quot; :style=&quot;&#123;width: &#x27;300px&#x27;, height: &#x27;300px&#x27;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">      drawLine()&#123;</span><br><span class="line">              // 基于准备好的dom，初始化echarts实例</span><br><span class="line">              let myChart = this.$echarts.init(document.getElementById(&#x27;myChart&#x27;))</span><br><span class="line">              // 绘制图表</span><br><span class="line">              myChart.setOption(&#123;</span><br><span class="line">                  title: &#123; text: &#x27;在Vue中使用echarts&#x27; &#125;,</span><br><span class="line">                  tooltip: &#123;&#125;,</span><br><span class="line">                  xAxis: &#123;</span><br><span class="line">                      data: [&quot;衬衫&quot;,&quot;羊毛衫&quot;,&quot;雪纺衫&quot;,&quot;裤子&quot;,&quot;高跟鞋&quot;,&quot;袜子&quot;]</span><br><span class="line">                  &#125;,</span><br><span class="line">                  yAxis: &#123;&#125;,</span><br><span class="line">                  series: [&#123;</span><br><span class="line">                      name: &#x27;销量&#x27;,</span><br><span class="line">                      type: &#x27;bar&#x27;,</span><br><span class="line">                      data: [5, 20, 36, 10, 10, 20]</span><br><span class="line">                  &#125;]</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      new Swiper (&#x27;.swiper-container&#x27;, &#123;</span><br><span class="line"></span><br><span class="line">        prevButton:&#x27;.swiper-button-prev&#x27;,</span><br><span class="line">        nextButton:&#x27;.swiper-button-next&#x27;,</span><br><span class="line">        autoplay: 1000,//可选选项，自动滑动</span><br><span class="line">        pagination : &#x27;.swiper-pagination&#x27;,</span><br><span class="line">        autoplayDisableOnInteraction:false,</span><br><span class="line">      &#125;);</span><br><span class="line">      this.drawLine();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="按需引入"><a href="#按需引入" class="headerlink" title="按需引入"></a>按需引入</h2><h3 id="在模块中引入"><a href="#在模块中引入" class="headerlink" title="在模块中引入"></a>在模块中引入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 按需引入</span><br><span class="line">// 引入 ECharts 主模块</span><br><span class="line">var echarts = require(&#x27;echarts/lib/echarts&#x27;);</span><br><span class="line">// 引入柱状图</span><br><span class="line">require(&#x27;echarts/lib/chart/bar&#x27;);</span><br><span class="line">// 引入提示框和标题组件</span><br><span class="line">require(&#x27;echarts/lib/component/tooltip&#x27;);</span><br><span class="line">require(&#x27;echarts/lib/component/title&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用:"></a>使用:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;myChart&quot; :style=&quot;&#123;width: &#x27;300px&#x27;, height: &#x27;300px&#x27;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">mounted()&#123;</span><br><span class="line">   this.drawLine();</span><br><span class="line"> &#125;,</span><br><span class="line"> methods: &#123;</span><br><span class="line">   drawLine()&#123;</span><br><span class="line">       // 基于准备好的dom，初始化echarts实例</span><br><span class="line">       let myChart = echarts.init(document.getElementById(&#x27;myChart&#x27;))</span><br><span class="line">       // 绘制图表</span><br><span class="line">       myChart.setOption(&#123;</span><br><span class="line">           title: &#123; text: &#x27;在Vue中使用echarts&#x27; &#125;,</span><br><span class="line">           tooltip: &#123;&#125;,</span><br><span class="line">           xAxis: &#123;</span><br><span class="line">               data: [&quot;衬衫&quot;,&quot;羊毛衫&quot;,&quot;雪纺衫&quot;,&quot;裤子&quot;,&quot;高跟鞋&quot;,&quot;袜子&quot;]</span><br><span class="line">           &#125;,</span><br><span class="line">           yAxis: &#123;&#125;,</span><br><span class="line">           series: [&#123;</span><br><span class="line">               name: &#x27;销量&#x27;,</span><br><span class="line">               type: &#x27;bar&#x27;,</span><br><span class="line">               data: [5, 20, 36, 10, 10, 20]</span><br><span class="line">           &#125;]</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>WebService学习记录</title>
    <url>/2022/05/08/WebService%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="日志："><a href="#日志：" class="headerlink" title="日志："></a>日志：</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">五月 08, 2022 2:52:26 下午 org.apache.cxf.services.HelloServiceImplService.HelloServiceImplPort.HelloService</span><br><span class="line">信息: Inbound Message</span><br><span class="line">----------------------------</span><br><span class="line">ID: 1</span><br><span class="line">Address: http://localhost:8000/hello</span><br><span class="line">Encoding: UTF-8</span><br><span class="line">Http-Method: POST</span><br><span class="line">Content-Type: text/xml; charset=UTF-8</span><br><span class="line">Headers: &#123;Accept=[*/*], Cache-Control=[no-cache], connection=[keep-alive], Content-Length=[194], content-type=[text/xml; charset=UTF-8], Host=[localhost:8000], Pragma=[no-cache], SOAPAction=[&quot;&quot;], User-Agent=[Apache CXF 3.0.1]&#125;</span><br><span class="line">Payload: &lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;soap:Body&gt;&lt;ns2:sayHello xmlns:ns2=&quot;http://service.example.org/&quot;&gt;&lt;arg0&gt;jet&lt;/arg0&gt;&lt;/ns2:sayHello&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</span><br><span class="line">--------------------------------------</span><br><span class="line">五月 08, 2022 2:52:26 下午 org.apache.cxf.services.HelloServiceImplService.HelloServiceImplPort.HelloService</span><br><span class="line">信息: Outbound Message</span><br><span class="line">---------------------------</span><br><span class="line">ID: 1</span><br><span class="line">Response-Code: 200</span><br><span class="line">Encoding: UTF-8</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Headers: &#123;&#125;</span><br><span class="line">Payload: &lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;soap:Body&gt;&lt;ns2:sayHelloResponse xmlns:ns2=&quot;http://service.example.org/&quot;&gt;&lt;return&gt;jet,你好&lt;/return&gt;&lt;/ns2:sayHelloResponse&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</span><br><span class="line">--------------------------------------</span><br></pre></td></tr></table></figure>

<h1 id="2-Spring-整合-ApacheCXF-实现WebService（Jax-ws）"><a href="#2-Spring-整合-ApacheCXF-实现WebService（Jax-ws）" class="headerlink" title="2.Spring 整合 ApacheCXF 实现WebService（Jax-ws）"></a>2.Spring 整合 ApacheCXF 实现WebService（Jax-ws）</h1><h3 id="1-服务端"><a href="#1-服务端" class="headerlink" title="1.服务端"></a>1.服务端</h3><h3 id="2-创建web项目"><a href="#2-创建web项目" class="headerlink" title="2.创建web项目"></a>2.创建<strong>web</strong>项目</h3><p>file—&gt;new —&gt;module… </p>
<p><img src="C:\Users\社畜\AppData\Roaming\Typora\typora-user-images\image-20220525181226778.png" alt="image-20220525181226778"></p>
<p>next</p>
<p><img src="C:\Users\社畜\AppData\Roaming\Typora\typora-user-images\image-20220525181259155.png" alt="image-20220525181259155"></p>
<p>next</p>
<p><img src="C:\Users\社畜\AppData\Roaming\Typora\typora-user-images\image-20220525181325100.png" alt="image-20220525181325100"></p>
<p>next</p>
<p><img src="C:\Users\社畜\AppData\Roaming\Typora\typora-user-images\image-20220525181403140.png" alt="image-20220525181403140"></p>
<p><img src="C:\Users\社畜\AppData\Roaming\Typora\typora-user-images\image-20220525181426602.png" alt="image-20220525181426602"></p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>pom.xml </p>
<p><strong>web.xml</strong> 配置<strong>CXFServlet</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line"> &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span><br><span class="line"> &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot; &gt;</span><br><span class="line"></span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</span><br><span class="line">  &lt;!--1. cxfsevlet配置--&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;cxfservlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.apache.cxf.transport.servlet.CXFServlet&lt;/servlet-class&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;cxfservlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br><span class="line">  &lt;!--2.spring容器配置--&gt;</span><br><span class="line">  &lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</span><br><span class="line">  &lt;/context-param&gt;</span><br><span class="line">  &lt;listener&gt;</span><br><span class="line">    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class="line">  &lt;/listener&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="服务接口、服务实现"><a href="#服务接口、服务实现" class="headerlink" title="服务接口、服务实现"></a>服务接口、服务实现</h3><p>项目目录结构：</p>
<p><img src="C:\Users\社畜\AppData\Roaming\Typora\typora-user-images\image-20220525181609333.png" alt="image-20220525181609333"></p>
<p><strong>Spring</strong> 整合 <strong>ApacheCXF</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example.service.impl;</span><br><span class="line"></span><br><span class="line">import org.example.service.HelloService;</span><br><span class="line"></span><br><span class="line">public class HelloServiceImpl implements HelloService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String sayHello(String name) &#123;</span><br><span class="line">        return name+&quot;,你好&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package org.example.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.jws.WebService;</span><br><span class="line"></span><br><span class="line">@WebService</span><br><span class="line">public interface HelloService &#123;</span><br><span class="line"></span><br><span class="line">    public String sayHello(String name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>application.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:cxf=&quot;http://cxf.apache.org/core&quot;</span><br><span class="line">       xmlns:jaxws=&quot;http://cxf.apache.org/jaxws&quot;</span><br><span class="line">       xmlns:jaxrs=&quot;http://cxf.apache.org/jaxrs&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;</span><br><span class="line">        http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://cxf.apache.org/core</span><br><span class="line">        http://cxf.apache.org/schemas/core.xsd</span><br><span class="line">        http://cxf.apache.org/jaxws</span><br><span class="line">        http://cxf.apache.org/schemas/jaxws.xsd</span><br><span class="line">        http://cxf.apache.org/jaxrs</span><br><span class="line">        http://cxf.apache.org/schemas/jaxrs.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">        Spring整合cxf发布服务，关键点：</span><br><span class="line">        1. 服务地址</span><br><span class="line">        2. 服务类</span><br><span class="line">        服务完整访问地址：</span><br><span class="line">            http://localhost:8080/ws/hello</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;!--&lt;jaxws:server address=&quot;/hello&quot;&gt;</span><br><span class="line">        &lt;jaxws:serviceBean&gt;</span><br><span class="line">            &lt;bean class=&quot;com.itheima.service.impl.HelloServiceImpl&quot;&gt;&lt;/bean&gt;</span><br><span class="line">        &lt;/jaxws:serviceBean&gt;</span><br><span class="line">    &lt;/jaxws:server&gt;--&gt;</span><br><span class="line">    &lt;jaxws:server address=&quot;/hello&quot;&gt;</span><br><span class="line">        &lt;jaxws:serviceBean&gt;</span><br><span class="line">            &lt;bean class=&quot;org.example.service.impl.HelloServiceImpl&quot;&gt;&lt;/bean&gt;</span><br><span class="line">        &lt;/jaxws:serviceBean&gt;</span><br><span class="line">    &lt;/jaxws:server&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<h3 id="启动服务，发布服务"><a href="#启动服务，发布服务" class="headerlink" title="启动服务，发布服务"></a>启动服务，发布服务</h3><p><img src="C:\Users\社畜\AppData\Roaming\Typora\typora-user-images\image-20220525181744027.png" alt="image-20220525181744027"></p>
<h4 id="访问wsdl说明书"><a href="#访问wsdl说明书" class="headerlink" title="访问wsdl说明书"></a>访问<strong>wsdl</strong>说明书</h4><h4 id="访问：http-localhost-8080-hello-wsdl"><a href="#访问：http-localhost-8080-hello-wsdl" class="headerlink" title="访问：http://localhost:8080/hello?wsdl"></a>访问：<a href="http://localhost:8080/hello?wsdl">http://localhost:8080/hello?wsdl</a></h4><p>地址：</p>
<p><img src="C:\Users\社畜\AppData\Roaming\Typora\typora-user-images\image-20220525181827941.png" alt="image-20220525181827941"></p>
<h3 id="客户端编写"><a href="#客户端编写" class="headerlink" title="客户端编写"></a>客户端编写</h3><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p><img src="C:\Users\社畜\AppData\Roaming\Typora\typora-user-images\image-20220525184111512.png" alt="image-20220525184111512"></p>
<h4 id="HellowService"><a href="#HellowService" class="headerlink" title="HellowService"></a>HellowService</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example.service;</span><br><span class="line"></span><br><span class="line">import javax.jws.WebService;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 对外发布服务的接口</span><br><span class="line"> */</span><br><span class="line">@WebService</span><br><span class="line">public interface HelloService &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 对外发布服务的接口的方法</span><br><span class="line">     */</span><br><span class="line">    public String sayHello(String name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:cxf=&quot;http://cxf.apache.org/core&quot;</span><br><span class="line">       xmlns:jaxws=&quot;http://cxf.apache.org/jaxws&quot;</span><br><span class="line">       xmlns:jaxrs=&quot;http://cxf.apache.org/jaxrs&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;</span><br><span class="line">        http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://cxf.apache.org/core</span><br><span class="line">        http://cxf.apache.org/schemas/core.xsd</span><br><span class="line">        http://cxf.apache.org/jaxws</span><br><span class="line">        http://cxf.apache.org/schemas/jaxws.xsd</span><br><span class="line">        http://cxf.apache.org/jaxrs</span><br><span class="line">        http://cxf.apache.org/schemas/jaxrs.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">        Spring整合cxf客户端配置：</span><br><span class="line">        1. 服务地址     http://localhost:8080/hello</span><br><span class="line">        2. 服务接口类型</span><br><span class="line"></span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;jaxws:client</span><br><span class="line">            id=&quot;helloService&quot;</span><br><span class="line">            serviceClass=&quot;org.example.service.HelloService&quot;</span><br><span class="line">            address=&quot;http://localhost:8080/hello&quot;&gt;&lt;/jaxws:client&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.example.service.HelloService;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span><br><span class="line">public class Client &#123;</span><br><span class="line"></span><br><span class="line">    // 注入对象</span><br><span class="line">    @Resource</span><br><span class="line">    private HelloService helloService;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void remote()&#123;</span><br><span class="line">        // 查看接口的代理对象类型</span><br><span class="line">        // class com.sun.proxy.$Proxy45</span><br><span class="line">        System.out.println(helloService.getClass());</span><br><span class="line"></span><br><span class="line">        // 远程访问服务端方法</span><br><span class="line">        System.out.println(helloService.sayHello(&quot;Jerry&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Restful-风格"><a href="#Restful-风格" class="headerlink" title="Restful 风格"></a><strong>Restful</strong> 风格</h1><h2 id="ApacheCXF-实现webservice-（Jax-rs）"><a href="#ApacheCXF-实现webservice-（Jax-rs）" class="headerlink" title="ApacheCXF 实现webservice （Jax-rs）"></a><strong>ApacheCXF</strong> 实现<strong>webservice</strong> （<strong>Jax-rs</strong>）</h2><p>基于restful风格的webservice，请求使用的是http协议，可以传递xml/json数据 </p>
<h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p><img src="C:\Users\社畜\AppData\Roaming\Typora\typora-user-images\image-20220525193136076.png" alt="image-20220525193136076"></p>
<p>next</p>
<p><img src="C:\Users\社畜\AppData\Roaming\Typora\typora-user-images\image-20220525193151075.png" alt="image-20220525193151075"></p>
<h3 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>pom.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;05_jaxrs_server&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;05_jaxrs_server&lt;/name&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;cxf-rt-frontend-jaxrs&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;cxf-rt-transports-http-jetty&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.7.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;cxf-rt-rs-client&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;cxf-rt-rs-extension-providers&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.codehaus.jettison&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jettison&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.3.7&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.10&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.2&lt;/version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">          &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">          &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">          &lt;showWarnings&gt;true&lt;/showWarnings&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="C:\Users\社畜\AppData\Roaming\Typora\typora-user-images\image-20220525223819882.png" alt="image-20220525223819882"></h2><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example.entity;</span><br><span class="line"></span><br><span class="line">import javax.xml.bind.annotation.XmlRootElement;</span><br><span class="line"></span><br><span class="line">@XmlRootElement(name = &quot;Car&quot;)</span><br><span class="line">public class Car &#123;</span><br><span class="line">	private Integer id;</span><br><span class="line">	private String carName;</span><br><span class="line">	private Double price;</span><br><span class="line"></span><br><span class="line">	public Integer getId() &#123;</span><br><span class="line">		return id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setId(Integer id) &#123;</span><br><span class="line">		this.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public String getCarName() &#123;</span><br><span class="line">		return carName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setCarName(String carName) &#123;</span><br><span class="line">		this.carName = carName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public Double getPrice() &#123;</span><br><span class="line">		return price;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setPrice(Double price) &#123;</span><br><span class="line">		this.price = price;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public String toString() &#123;</span><br><span class="line">		return &quot;Car [id=&quot; + id + &quot;, carName=&quot; + carName + &quot;, price=&quot; + price + &quot;]&quot;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package org.example.entity;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import javax.xml.bind.annotation.XmlRootElement;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  基于restful风格的webservice，客户端与服务端之间通讯可以传递xml数据、json数据</span><br><span class="line"> *  @XmlRootElement 指定对象序列化为xml或json数据时根节点的名称</span><br><span class="line"> *  xml:</span><br><span class="line"> *       &lt;User&gt;</span><br><span class="line"> *           &lt;id&gt;&lt;/id&gt;</span><br><span class="line"> *           &lt;username&gt;&lt;/username&gt;</span><br><span class="line"> *           &lt;city&gt;&lt;/city&gt;</span><br><span class="line"> *       &lt;/User&gt;</span><br><span class="line"> *   json:</span><br><span class="line"> *   &#123;&quot;User&quot;:  &#123;&quot;id&quot;:100,  &quot;username&quot;:&quot;jack&quot;,&quot;city&quot;:&quot;广州&quot; &#125;&#125;</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">@XmlRootElement(name = &quot;User&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line">	private Integer id;</span><br><span class="line">	private String username;</span><br><span class="line">	private String city;</span><br><span class="line"></span><br><span class="line">	private List&lt;Car&gt; cars = new ArrayList&lt;Car&gt;();</span><br><span class="line"></span><br><span class="line">	public Integer getId() &#123;</span><br><span class="line">		return id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setId(Integer id) &#123;</span><br><span class="line">		this.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public String getUsername() &#123;</span><br><span class="line">		return username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setUsername(String username) &#123;</span><br><span class="line">		this.username = username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public String getCity() &#123;</span><br><span class="line">		return city;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setCity(String city) &#123;</span><br><span class="line">		this.city = city;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public List&lt;Car&gt; getCars() &#123;</span><br><span class="line">		return cars;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setCars(List&lt;Car&gt; cars) &#123;</span><br><span class="line">		this.cars = cars;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public String toString() &#123;</span><br><span class="line">		return &quot;User [id=&quot; + id + &quot;, username=&quot; + username + &quot;, city=&quot; + city + &quot;, cars=&quot; + cars + &quot;]&quot;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="服务类"><a href="#服务类" class="headerlink" title="服务类"></a>服务类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.example.entity.Car;</span><br><span class="line">import org.example.entity.User;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class UserServiceImpl implements IUserService &#123;</span><br><span class="line"></span><br><span class="line">	public void saveUser(User user) &#123;</span><br><span class="line">		System.out.println(&quot;save user:&quot; + user);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void updateUser(User user) &#123;</span><br><span class="line">		System.out.println(&quot;update user:&quot; + user);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public List&lt;User&gt; findAllUsers() &#123;</span><br><span class="line">		List&lt;User&gt; users = new ArrayList&lt;User&gt;();</span><br><span class="line">		User user1 = new User();</span><br><span class="line">		user1.setId(1);</span><br><span class="line">		user1.setUsername(&quot;小明&quot;);</span><br><span class="line">		user1.setCity(&quot;北京&quot;);</span><br><span class="line"></span><br><span class="line">		List&lt;Car&gt; carList1 = new ArrayList&lt;Car&gt;();</span><br><span class="line">		Car car1 = new Car();</span><br><span class="line">		car1.setId(101);</span><br><span class="line">		car1.setCarName(&quot;保时捷&quot;);</span><br><span class="line">		car1.setPrice(1000000d);</span><br><span class="line">		carList1.add(car1);</span><br><span class="line">		Car car2 = new Car();</span><br><span class="line">		car2.setId(102);</span><br><span class="line">		car2.setCarName(&quot;宝马&quot;);</span><br><span class="line">		car2.setPrice(400000d);</span><br><span class="line">		carList1.add(car2);</span><br><span class="line">		user1.setCars(carList1);</span><br><span class="line"></span><br><span class="line">		users.add(user1);</span><br><span class="line"></span><br><span class="line">		User user2 = new User();</span><br><span class="line">		user2.setId(2);</span><br><span class="line">		user2.setUsername(&quot;小丽&quot;);</span><br><span class="line">		user2.setCity(&quot;上海&quot;);</span><br><span class="line">		users.add(user2);</span><br><span class="line"></span><br><span class="line">		return users;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public User finUserById(Integer id) &#123;</span><br><span class="line">		if (id == 1) &#123;</span><br><span class="line">			User user1 = new User();</span><br><span class="line">			user1.setId(1);</span><br><span class="line">			user1.setUsername(&quot;小明&quot;);</span><br><span class="line">			user1.setCity(&quot;北京&quot;);</span><br><span class="line">			return user1;</span><br><span class="line">		&#125;</span><br><span class="line">		return null;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void deleteUser(Integer id) &#123;</span><br><span class="line">		System.out.println(&quot;delete user id :&quot; + id);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package org.example.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.example.entity.User;</span><br><span class="line"></span><br><span class="line">import javax.ws.rs.Consumes;</span><br><span class="line">import javax.ws.rs.DELETE;</span><br><span class="line">import javax.ws.rs.GET;</span><br><span class="line">import javax.ws.rs.POST;</span><br><span class="line">import javax.ws.rs.PUT;</span><br><span class="line">import javax.ws.rs.Path;</span><br><span class="line">import javax.ws.rs.PathParam;</span><br><span class="line">import javax.ws.rs.Produces;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//  访问当前服务接口对应的路径</span><br><span class="line">@Path(&quot;/userService&quot;)</span><br><span class="line">@Produces(&quot;*/*&quot;)  // 服务器支持的返回的数据格式类型</span><br><span class="line">public interface IUserService &#123;</span><br><span class="line"></span><br><span class="line">	// 表示处理的请求的类型，post 对应的是insert新增操作</span><br><span class="line">	@POST</span><br><span class="line">	// 访问当前服务接口方法对应的路径。 【.../userService/user】</span><br><span class="line">	@Path(&quot;/user&quot;)</span><br><span class="line">	//  服务器支持的请求的数据格式类型</span><br><span class="line">	@Consumes(&#123; &quot;application/xml&quot;, &quot;application/json&quot; &#125;)</span><br><span class="line">	public void saveUser(User user);</span><br><span class="line"></span><br><span class="line">	// 表示处理的请求的类型，put 对应的是update修改操作</span><br><span class="line">	@PUT</span><br><span class="line">	@Path(&quot;/user&quot;)</span><br><span class="line">	@Consumes(&#123; &quot;application/xml&quot;, &quot;application/json&quot; &#125;)</span><br><span class="line">	public void updateUser(User user);</span><br><span class="line"></span><br><span class="line">	// 表示处理的请求的类型，get 对应的是查询修改操作</span><br><span class="line">	@GET</span><br><span class="line">	@Path(&quot;/user&quot;)</span><br><span class="line">	// 服务器支持的返回的数据格式类型</span><br><span class="line">	@Produces(&#123; &quot;application/xml&quot;, &quot;application/json&quot; &#125;)</span><br><span class="line">	public List&lt;User&gt; findAllUsers();</span><br><span class="line"></span><br><span class="line">	@GET</span><br><span class="line">	@Path(&quot;/user/&#123;id&#125;&quot;)</span><br><span class="line">	@Consumes(&quot;application/xml&quot;)</span><br><span class="line">	@Produces(&#123; &quot;application/xml&quot;, &quot;application/json&quot; &#125;)</span><br><span class="line">	public User finUserById(@PathParam(&quot;id&quot;) Integer id);</span><br><span class="line"></span><br><span class="line">	// 表示处理的请求的类型，delete 对应的是删除操作</span><br><span class="line">	@DELETE</span><br><span class="line">	@Path(&quot;/user/&#123;id&#125;&quot;)</span><br><span class="line">	@Consumes(&#123;&quot;application/xml&quot;, &quot;application/json&quot;&#125;)</span><br><span class="line">	public void deleteUser(@PathParam(&quot;id&quot;) Integer id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="log4j-propertis"><a href="#log4j-propertis" class="headerlink" title="log4j.propertis"></a>log4j.propertis</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Set root category priority to INFO and its only appender to CONSOLE.</span><br><span class="line">#log4j.rootCategory=INFO, CONSOLE            debug   info   warn error fatal</span><br><span class="line">log4j.rootCategory=info, CONSOLE, LOGFILE</span><br><span class="line"></span><br><span class="line"># Set the enterprise logger category to FATAL and its only appender to CONSOLE.</span><br><span class="line">log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE</span><br><span class="line"></span><br><span class="line"># CONSOLE is set to be a ConsoleAppender using a PatternLayout.</span><br><span class="line">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span><br><span class="line"></span><br><span class="line"># LOGFILE is set to be a File appender using a PatternLayout.</span><br><span class="line">log4j.appender.LOGFILE=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.LOGFILE.File=d:\axis.log</span><br><span class="line">log4j.appender.LOGFILE.Append=true</span><br><span class="line">log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.LOGFILE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span><br></pre></td></tr></table></figure>

<h3 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.apache.cxf.interceptor.LoggingInInterceptor;</span><br><span class="line">import org.apache.cxf.interceptor.LoggingOutInterceptor;</span><br><span class="line">import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;</span><br><span class="line">import org.example.service.UserServiceImpl;</span><br><span class="line"></span><br><span class="line">public class Server &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 创建发布服务的工厂</span><br><span class="line">        JAXRSServerFactoryBean factory = new JAXRSServerFactoryBean();</span><br><span class="line"></span><br><span class="line">        // 设置服务地址</span><br><span class="line">        factory.setAddress(&quot;http://localhost:8001/ws/&quot;);</span><br><span class="line"></span><br><span class="line">        // 设置服务类</span><br><span class="line">        factory.setServiceBean(new UserServiceImpl());</span><br><span class="line"></span><br><span class="line">        // 添加日志输入输出拦截器</span><br><span class="line">        factory.getInInterceptors().add(new LoggingInInterceptor());</span><br><span class="line">        factory.getOutInterceptors().add(new LoggingOutInterceptor());</span><br><span class="line"></span><br><span class="line">        // 发布服务</span><br><span class="line">        factory.create();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;发布服务成功，端口8001&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><h3 id="实体类-1"><a href="#实体类-1" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example.entity;</span><br><span class="line"></span><br><span class="line">import javax.xml.bind.annotation.XmlRootElement;</span><br><span class="line"></span><br><span class="line">@XmlRootElement(name = &quot;Car&quot;)</span><br><span class="line">public class Car &#123;</span><br><span class="line">	private Integer id;</span><br><span class="line">	private String carName;</span><br><span class="line">	private Double price;</span><br><span class="line"></span><br><span class="line">	public Integer getId() &#123;</span><br><span class="line">		return id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setId(Integer id) &#123;</span><br><span class="line">		this.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public String getCarName() &#123;</span><br><span class="line">		return carName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setCarName(String carName) &#123;</span><br><span class="line">		this.carName = carName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public Double getPrice() &#123;</span><br><span class="line">		return price;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setPrice(Double price) &#123;</span><br><span class="line">		this.price = price;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public String toString() &#123;</span><br><span class="line">		return &quot;Car [id=&quot; + id + &quot;, carName=&quot; + carName + &quot;, price=&quot; + price + &quot;]&quot;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package org.example.entity;</span><br><span class="line"></span><br><span class="line">import javax.xml.bind.annotation.XmlRootElement;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  基于restful风格的webservice，客户端与服务端之间通讯可以传递xml数据、json数据</span><br><span class="line"> *  @XmlRootElement 指定对象序列化为xml或json数据时根节点的名称</span><br><span class="line"> *  xml:</span><br><span class="line"> *       &lt;User&gt;</span><br><span class="line"> *           &lt;id&gt;&lt;/id&gt;</span><br><span class="line"> *           &lt;username&gt;&lt;/username&gt;</span><br><span class="line"> *           &lt;city&gt;&lt;/city&gt;</span><br><span class="line"> *       &lt;/User&gt;</span><br><span class="line"> *   json:</span><br><span class="line"> *   &#123;&quot;User&quot;:  &#123;&quot;id&quot;:100,  &quot;username&quot;:&quot;jack&quot;,&quot;city&quot;:&quot;广州&quot; &#125;&#125;</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">@XmlRootElement(name = &quot;User&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line">	private Integer id;</span><br><span class="line">	private String username;</span><br><span class="line">	private String city;</span><br><span class="line"></span><br><span class="line">	private List&lt;Car&gt; cars = new ArrayList&lt;Car&gt;();</span><br><span class="line"></span><br><span class="line">	public Integer getId() &#123;</span><br><span class="line">		return id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setId(Integer id) &#123;</span><br><span class="line">		this.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public String getUsername() &#123;</span><br><span class="line">		return username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setUsername(String username) &#123;</span><br><span class="line">		this.username = username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public String getCity() &#123;</span><br><span class="line">		return city;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setCity(String city) &#123;</span><br><span class="line">		this.city = city;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public List&lt;Car&gt; getCars() &#123;</span><br><span class="line">		return cars;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setCars(List&lt;Car&gt; cars) &#123;</span><br><span class="line">		this.cars = cars;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public String toString() &#123;</span><br><span class="line">		return &quot;User [id=&quot; + id + &quot;, username=&quot; + username + &quot;, city=&quot; + city + &quot;, cars=&quot; + cars + &quot;]&quot;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试类-2"><a href="#测试类-2" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.apache.cxf.jaxrs.client.WebClient;</span><br><span class="line">import org.example.entity.User;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import javax.ws.rs.core.MediaType;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testSave()&#123;</span><br><span class="line">        User user = new User();</span><br><span class="line">        user.setId(100);</span><br><span class="line">        user.setUsername(&quot;Jerry&quot;);</span><br><span class="line">        user.setCity(&quot;gz&quot;);</span><br><span class="line">        // 通过WebClient对象远程调用服务端</span><br><span class="line">        WebClient</span><br><span class="line">                .create(&quot;http://localhost:8001/ws/userService/user&quot;)</span><br><span class="line">                .type(MediaType.APPLICATION_JSON)  // 指定请求的数据格式为json</span><br><span class="line">                .post(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testGet()&#123;</span><br><span class="line">        // 查询一个</span><br><span class="line">        User user =</span><br><span class="line">                WebClient</span><br><span class="line">                        .create(&quot;http://localhost:8001/ws/userService/user/1&quot;)</span><br><span class="line">                        .accept(MediaType.APPLICATION_JSON)</span><br><span class="line">                        .get(User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="整合spring"><a href="#整合spring" class="headerlink" title="整合spring"></a>整合spring</h1><h3 id="服务端结构"><a href="#服务端结构" class="headerlink" title="服务端结构"></a>服务端结构</h3><p><img src="C:\Users\社畜\AppData\Roaming\Typora\typora-user-images\image-20220525224729452.png" alt="image-20220525224729452"></p>
<p>Car和User以及IUserService和UserSErviceImpl同上。</p>
<h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;07_jars_spring_server&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;07_jars_spring_server&lt;/name&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;!-- cxf 进行rs开发 必须导入  --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;cxf-rt-frontend-jaxrs&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- 日志引入  --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.7.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 客户端 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;cxf-rt-rs-client&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 扩展json提供者 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;cxf-rt-rs-extension-providers&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 转换json工具包，被extension providers 依赖 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.codehaus.jettison&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jettison&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.3.7&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- spring 核心 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- spring web集成 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- spring 整合junit  --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- junit 开发包 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.2&lt;/version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">          &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">          &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">          &lt;showWarnings&gt;true&lt;/showWarnings&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">      &lt;!-- 运行tomcat7方法：tomcat7:run --&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;!-- 指定端口 --&gt;</span><br><span class="line">          &lt;port&gt;8080&lt;/port&gt;</span><br><span class="line">          &lt;!-- 请求路径 --&gt;</span><br><span class="line">          &lt;path&gt;/&lt;/path&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="application-Context-xml"><a href="#application-Context-xml" class="headerlink" title="application.Context.xml:"></a>application.Context.xml:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:cxf=&quot;http://cxf.apache.org/core&quot;</span><br><span class="line">       xmlns:jaxws=&quot;http://cxf.apache.org/jaxws&quot;</span><br><span class="line">       xmlns:jaxrs=&quot;http://cxf.apache.org/jaxrs&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;</span><br><span class="line">        http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://cxf.apache.org/core</span><br><span class="line">        http://cxf.apache.org/schemas/core.xsd</span><br><span class="line">        http://cxf.apache.org/jaxws</span><br><span class="line">        http://cxf.apache.org/schemas/jaxws.xsd</span><br><span class="line">        http://cxf.apache.org/jaxrs</span><br><span class="line">        http://cxf.apache.org/schemas/jaxrs.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--</span><br><span class="line">            Spring整合cxf发布基于restful风格的服务，关键点：</span><br><span class="line">            1. 服务地址</span><br><span class="line">            2. 服务类</span><br><span class="line">            服务完整访问地址：</span><br><span class="line">                http://localhost:8080/ws/hello</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;jaxrs:server address=&quot;/userService&quot;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;jaxrs:serviceBeans&gt;</span><br><span class="line">                    &lt;bean class=&quot;org.example.service.UserServiceImpl&quot;&gt;&lt;/bean&gt;</span><br><span class="line">                &lt;/jaxrs:serviceBeans&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/jaxrs:server&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line">        &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span><br><span class="line">        &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot; &gt;</span><br><span class="line"></span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">    &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;cxfservlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.apache.cxf.transport.servlet.CXFServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;cxfservlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/ws/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">    &lt;!--2.spring容器配置--&gt;</span><br><span class="line">    &lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</span><br><span class="line">    &lt;/context-param&gt;</span><br><span class="line">    &lt;listener&gt;</span><br><span class="line">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class="line">    &lt;/listener&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="客户端结构"><a href="#客户端结构" class="headerlink" title="客户端结构"></a>客户端结构</h3><p><img src="C:\Users\社畜\AppData\Roaming\Typora\typora-user-images\image-20220525224656786.png" alt="image-20220525224656786"></p>
<h3 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;07_jars_spring_client&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;07_jars_spring_client&lt;/name&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;!-- cxf 进行rs开发 必须导入  --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;cxf-rt-frontend-jaxrs&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- 日志引入  --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.7.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 客户端 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;cxf-rt-rs-client&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 扩展json提供者 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;cxf-rt-rs-extension-providers&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 转换json工具包，被extension providers 依赖 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.codehaus.jettison&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jettison&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.3.7&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- spring 核心 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- spring web集成 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- spring 整合junit  --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- junit 开发包 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.2&lt;/version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">          &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">          &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">          &lt;showWarnings&gt;true&lt;/showWarnings&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">      &lt;!-- 运行tomcat7方法：tomcat7:run --&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;!-- 指定端口 --&gt;</span><br><span class="line">          &lt;port&gt;8080&lt;/port&gt;</span><br><span class="line">          &lt;!-- 请求路径 --&gt;</span><br><span class="line">          &lt;path&gt;/&lt;/path&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="测试类："><a href="#测试类：" class="headerlink" title="测试类："></a>测试类：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.apache.cxf.jaxrs.client.WebClient;</span><br><span class="line">import org.example.entity.User;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import javax.ws.rs.core.MediaType;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testSave()&#123;</span><br><span class="line">        User user = new User();</span><br><span class="line">        user.setId(100);</span><br><span class="line">        user.setUsername(&quot;Jerry&quot;);</span><br><span class="line">        user.setCity(&quot;gz&quot;);</span><br><span class="line">        // 通过WebClient对象远程调用服务端</span><br><span class="line">        WebClient</span><br><span class="line">                .create(&quot;http://localhost:8080/ws/userService/userService/user&quot;)</span><br><span class="line">                .type(MediaType.APPLICATION_JSON)  // 指定请求的数据格式为json</span><br><span class="line">                .post(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testGet()&#123;</span><br><span class="line">        // 查询一个</span><br><span class="line">        User user =</span><br><span class="line">                WebClient</span><br><span class="line">                        .create(&quot;http://localhost:8080/ws/userService/userService/user/1&quot;)</span><br><span class="line">                        .accept(MediaType.APPLICATION_JSON)</span><br><span class="line">                        .get(User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WebService</category>
      </categories>
  </entry>
  <entry>
    <title>动漫网站推荐</title>
    <url>/2021/12/25/hello-world/</url>
    <content><![CDATA[<span id="more"></span>

<p><a href="https://www.agefans.live/">AGE动漫</a></p>
<p><a href="https://www.bilibili.com/">哔哩哔哩</a></p>
<p><a href="https://www.acfun.cn/">ACFUN</a></p>
<p><a href="http://www.milimili.in/">米粒米粒</a></p>
]]></content>
      <categories>
        <category>动漫</category>
      </categories>
      <tags>
        <tag>推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch学习</title>
    <url>/2021/12/31/elasticsearch/</url>
    <content><![CDATA[<h1 id="Elasticsearch入门"><a href="#Elasticsearch入门" class="headerlink" title="Elasticsearch入门"></a>Elasticsearch入门</h1><p><a href="https://www.elastic.co/cn/">官方网址</a></p>
<p><a href="https://www.elastic.co/guide/index.html">官方文档</a></p>
<p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0">Elasticsearch 7.8.0下载页面</a></p>
<table>
<thead>
<tr>
<th>目录</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>bin</td>
<td>可执行脚本目录</td>
</tr>
<tr>
<td>config</td>
<td>配置目录</td>
</tr>
<tr>
<td>jdk</td>
<td>内置 JDK 目录</td>
</tr>
<tr>
<td>lib</td>
<td>类库</td>
</tr>
<tr>
<td>logs</td>
<td>日志目录</td>
</tr>
<tr>
<td>modules</td>
<td>模块目录</td>
</tr>
<tr>
<td>plugins</td>
<td>插件目录</td>
</tr>
</tbody></table>
<p>解压后，进入 bin 文件目录，点击 elasticsearch.bat 文件启动 ES 服务 。</p>
<p>注意： 9300 端口为 Elasticsearch 集群间组件的通信端口， 9200 端口为浏览器访问的 http协议 <a href="https://so.csdn.net/so/search?q=RESTful&spm=1001.2101.3001.7020">RESTful</a> 端口。</p>
<p>打开浏览器，输入地址： <a href="http://localhost:9200，测试返回结果，返回结果如下：">http://localhost:9200，测试返回结果，返回结果如下：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;DESKTOP-LNJQ0VF&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;nCZqBhfdT1-pw8Yas4QU9w&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.8.0&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;zip&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;757314695644ea9a1dc2fecd26d1a43856725e65&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2020-06-14T19:35:50.234439Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.5.1&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="入门-RESTful-amp-JSON"><a href="#入门-RESTful-amp-JSON" class="headerlink" title="入门-RESTful &amp; JSON"></a>入门-RESTful &amp; JSON</h2><p>REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。 Web 应用程序最重要的 REST 原则是，客户端和服务器之间的交互在请求之间是无状态的。从客户端到服务器的每个请求都必须包含理解请求所必需的信息。如果服务器在请求之间的任何时间点重启，客户端不会得到通知。此外，无状态请求可以由任何可用服务器回答，这十分适合云计算之类的环境。客户端可以缓存数据以改进性能。</p>
<p>在服务器端，应用程序状态和功能可以分为各种资源。资源是一个有趣的概念实体，它向客户端公开。资源的例子有：应用程序对象、数据库记录、算法等等。每个资源都使用 URI(Universal Resource Identifier) 得到一个唯一的地址。所有资源都共享统一的接口，以便在客户端和服务器之间传输状态。使用的是标准的 HTTP 方法，比如 GET、 PUT、 POST 和DELETE。</p>
<p>在 REST 样式的 Web 服务中，每个资源都有一个地址。资源本身都是方法调用的目<br>标，方法列表对所有资源都是一样的。这些方法都是标准方法，包括 HTTP GET、 POST、PUT、 DELETE，还可能包括 HEAD 和 OPTIONS。简单的理解就是，**如果想要访问互联网上的资源，就必须向资源所在的服务器发出请求，请求体中必须包含资源的网络路径， 以及对资源进行的操作(增删改查)**。</p>
<p>REST 样式的 Web 服务若有返回结果，大多数以JSON字符串形式返回。</p>
<h2 id="入门-Postman客户端工具"><a href="#入门-Postman客户端工具" class="headerlink" title="入门-Postman客户端工具"></a>入门-<a href="https://so.csdn.net/so/search?q=Postman&spm=1001.2101.3001.7020">Postman</a>客户端工具</h2><p>如果直接通过浏览器向 Elasticsearch 服务器发请求，那么需要在发送的请求中包含<br>HTTP 标准的方法，而 HTTP 的大部分特性且仅支持 GET 和 POST 方法。所以为了能方便地进行客户端的访问，可以使用 Postman 软件Postman 是一款强大的网页调试工具，提供功能强大的 Web API 和 HTTP 请求调试。</p>
<p>软件功能强大，界面简洁明晰、操作方便快捷，设计得很人性化。 Postman 中文版能够发送任何类型的 HTTP 请求 (GET, HEAD, POST, PUT…)，不仅能够表单提交，且可以附带任意类型请求体。<br><a href="https://www.postman.com/downloads/">Postman下载页面</a></p>
<h2 id="入门-倒排索引"><a href="#入门-倒排索引" class="headerlink" title="入门-倒排索引"></a>入门-倒排索引</h2><p>正排索引（传统）</p>
<table>
<thead>
<tr>
<th>id</th>
<th>content</th>
</tr>
</thead>
<tbody><tr>
<td>1001</td>
<td>my name is zhang san</td>
</tr>
<tr>
<td>1002</td>
<td>my name is li si</td>
</tr>
</tbody></table>
<p>倒排索引</p>
<table>
<thead>
<tr>
<th>keyword</th>
<th>id</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>1001, 1002</td>
</tr>
<tr>
<td>zhang</td>
<td>1001</td>
</tr>
</tbody></table>
<p>Elasticsearch 是<strong>面向文档型数据库</strong>，一条数据在这里就是一个文档。 为了方便大家理解，我们将 Elasticsearch 里存储文档数据和关系型数据库 MySQL 存储数据的概念进行一个类比</p>
<p><img src="https://s2.loli.net/2022/03/05/IWZOQK3CjrAvdUy.png" alt="image-20220305141753642"></p>
<p>ES 里的 Index 可以看做一个库，而 Types 相当于表， Documents 则相当于表的行。这里 Types 的概念已经被逐渐弱化， Elasticsearch 6.X 中，一个 index 下已经只能包含一个type， Elasticsearch 7.X 中, Type 的概念已经被删除了。</p>
<h2 id="入门-HTTP-索引-创建"><a href="#入门-HTTP-索引-创建" class="headerlink" title="入门-HTTP-索引-创建"></a>入门-HTTP-索引-创建</h2><p>对比关系型数据库，创建索引就等同于创建数据库。</p>
<p>在 Postman 中，向 ES 服务器发 PUT 请求 ： <a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a></p>
<p>请求后，服务器返回响应：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;acknowledged&quot;</span>: <span class="literal">true</span>,<span class="comment">//响应结果</span></span><br><span class="line">    <span class="attr">&quot;shards_acknowledged&quot;</span>: <span class="literal">true</span>,<span class="comment">//分片结果</span></span><br><span class="line">    <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;shopping&quot;</span><span class="comment">//索引名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台日志：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[2021-04-08T13:57:06,954][INFO ][o.e.c.m.MetadataCreateIndexService] [DESKTOP-LNJQ0VF] [shopping] creating index, cause [api], templates [], shards [1]/[1], mappings []</span><br></pre></td></tr></table></figure>

<p>如果重复发 PUT 请求 ： <a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a> 添加索引，会返回错误信息 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;error&quot;: &#123;</span><br><span class="line">        &quot;root_cause&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;type&quot;: &quot;resource_already_exists_exception&quot;,</span><br><span class="line">                &quot;reason&quot;: &quot;index [shopping/J0WlEhh4R7aDrfIc3AkwWQ] already exists&quot;,</span><br><span class="line">                &quot;index_uuid&quot;: &quot;J0WlEhh4R7aDrfIc3AkwWQ&quot;,</span><br><span class="line">                &quot;index&quot;: &quot;shopping&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;type&quot;: &quot;resource_already_exists_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;index [shopping/J0WlEhh4R7aDrfIc3AkwWQ] already exists&quot;,</span><br><span class="line">        &quot;index_uuid&quot;: &quot;J0WlEhh4R7aDrfIc3AkwWQ&quot;,</span><br><span class="line">        &quot;index&quot;: &quot;shopping&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;status&quot;: 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="入门-HTTP-索引-查询-amp-删除"><a href="#入门-HTTP-索引-查询-amp-删除" class="headerlink" title="入门-HTTP-索引-查询 &amp; 删除"></a>入门-HTTP-索引-查询 &amp; 删除</h2><h3 id="查看所有索引"><a href="#查看所有索引" class="headerlink" title="查看所有索引"></a>查看所有索引</h3><p>在 Postman 中，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/_cat/indices?v">http://127.0.0.1:9200/_cat/indices?v</a></p>
<p>这里请求路径中的_cat 表示查看的意思， indices 表示索引，所以整体含义就是查看当前 ES服务器中的所有索引，就好像 MySQL 中的 show tables 的感觉，服务器响应结果如下 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">health status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">yellow open   shopping J0WlEhh4R7aDrfIc3AkwWQ   1   1          0            0       208b           208b</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>表头</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>health</td>
<td>当前服务器健康状态： green(集群完整) yellow(单点正常、集群不完整) red(单点不正常)</td>
</tr>
<tr>
<td>status</td>
<td>索引打开、关闭状态</td>
</tr>
<tr>
<td>index</td>
<td>索引名</td>
</tr>
<tr>
<td>uuid</td>
<td>索引统一编号</td>
</tr>
<tr>
<td>pri</td>
<td>主分片数量</td>
</tr>
<tr>
<td>rep</td>
<td>副本数量</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>docs.count</th>
<th>可用文档数量</th>
</tr>
</thead>
<tbody><tr>
<td>docs.deleted</td>
<td>文档删除状态（逻辑删除）</td>
</tr>
<tr>
<td>store.size</td>
<td>主分片和副分片整体占空间大小</td>
</tr>
<tr>
<td>pri.store.size</td>
<td>主分片占空间大小</td>
</tr>
</tbody></table>
<h3 id="查看单个索引"><a href="#查看单个索引" class="headerlink" title="查看单个索引"></a>查看单个索引</h3><p>在 Postman 中，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a></p>
<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;shopping&quot;: &#123;//索引名</span><br><span class="line">        &quot;aliases&quot;: &#123;&#125;,//别名</span><br><span class="line">        &quot;mappings&quot;: &#123;&#125;,//映射</span><br><span class="line">        &quot;settings&quot;: &#123;//设置</span><br><span class="line">            &quot;index&quot;: &#123;//设置 - 索引</span><br><span class="line">                &quot;creation_date&quot;: &quot;1617861426847&quot;,//设置 - 索引 - 创建时间</span><br><span class="line">                &quot;number_of_shards&quot;: &quot;1&quot;,//设置 - 索引 - 主分片数量</span><br><span class="line">                &quot;number_of_replicas&quot;: &quot;1&quot;,//设置 - 索引 - 主分片数量</span><br><span class="line">                &quot;uuid&quot;: &quot;J0WlEhh4R7aDrfIc3AkwWQ&quot;,//设置 - 索引 - 主分片数量</span><br><span class="line">                &quot;version&quot;: &#123;//设置 - 索引 - 主分片数量</span><br><span class="line">                    &quot;created&quot;: &quot;7080099&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;provided_name&quot;: &quot;shopping&quot;//设置 - 索引 - 主分片数量</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>在 Postman 中，向 ES 服务器发 DELETE 请求 ： <a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a></p>
<p>返回结果如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;acknowledged&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次查看所有索引，GET <a href="http://127.0.0.1:9200/_cat/indices?v%EF%BC%8C%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/_cat/indices?v，返回结果如下：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">health status index uuid pri rep docs.count docs.deleted store.size pri.store.size</span><br></pre></td></tr></table></figure>

<p>成功删除。</p>
<h2 id="入门-HTTP-文档-创建（Put-amp-Post）"><a href="#入门-HTTP-文档-创建（Put-amp-Post）" class="headerlink" title="入门-HTTP-文档-创建（Put &amp; Post）"></a>入门-HTTP-文档-创建（Put &amp; Post）</h2><p>假设索引已经创建好了，接下来我们来创建文档，并添加数据。这里的文档可以类比为关系型数据库中的表数据，添加的数据格式为 JSON 格式</p>
<p>在 Postman 中，向 ES 服务器发 POST 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%BD%93JSON%E5%86%85%E5%AE%B9%E4%B8%BA%EF%BC%9A">http://127.0.0.1:9200/shopping/_doc，请求体JSON内容为：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;title&quot;:&quot;小米手机&quot;,</span><br><span class="line">    &quot;category&quot;:&quot;小米&quot;,</span><br><span class="line">    &quot;images&quot;:&quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">    &quot;price&quot;:3999.00</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/03/05/ZFrt2xTQMmuvK8k.png" alt="image-20220305144744857"></p>
<p>注意，此处发送请求的方式必须为 POST，不能是 PUT，否则会发生错误 。</p>
<p>返回结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;shopping&quot;,//索引</span><br><span class="line">    &quot;_type&quot;: &quot;_doc&quot;,//类型-文档</span><br><span class="line">    &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,//唯一标识，可以类比为 MySQL 中的主键，随机生成</span><br><span class="line">    &quot;_version&quot;: 1,//版本</span><br><span class="line">    &quot;result&quot;: &quot;created&quot;,//结果，这里的 create 表示创建成功</span><br><span class="line">    &quot;_shards&quot;: &#123;//</span><br><span class="line">        &quot;total&quot;: 2,//分片 - 总数</span><br><span class="line">        &quot;successful&quot;: 1,//分片 - 总数</span><br><span class="line">        &quot;failed&quot;: 0//分片 - 总数</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;_seq_no&quot;: 0,</span><br><span class="line">    &quot;_primary_term&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的数据创建后，由于没有指定数据唯一性标识（ID），默认情况下， ES 服务器会随机生成一个。</p>
<p>如果想要自定义唯一性标识，需要在创建时指定： <a href="http://127.0.0.1:9200/shopping/_doc/1%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%BD%93JSON%E5%86%85%E5%AE%B9%E4%B8%BA%EF%BC%9A">http://127.0.0.1:9200/shopping/_doc/1，请求体JSON内容为：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;title&quot;:&quot;小米手机&quot;,</span><br><span class="line">    &quot;category&quot;:&quot;小米&quot;,</span><br><span class="line">    &quot;images&quot;:&quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">    &quot;price&quot;:3999.00</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,//&lt;------------------自定义唯一性标识</span><br><span class="line">    &quot;_version&quot;: 1,</span><br><span class="line">    &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;_seq_no&quot;: 1,</span><br><span class="line">    &quot;_primary_term&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>此处需要注意：如果增加数据时明确数据主键，那么请求方式也可以为 PUT。</strong></p>
<h2 id="入门-HTTP-查询-主键查询-amp-全查询"><a href="#入门-HTTP-查询-主键查询-amp-全查询" class="headerlink" title="入门-HTTP-查询-主键查询 &amp; 全查询"></a>入门-HTTP-查询-<a href="https://so.csdn.net/so/search?q=%E4%B8%BB%E9%94%AE&spm=1001.2101.3001.7020">主键</a>查询 &amp; 全查询</h2><p>查看文档时，需要指明文档的唯一性标识，类似于 MySQL 中数据的主键查询</p>
<p>在 Postman 中，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1">http://127.0.0.1:9200/shopping/_doc/1</a> 。</p>
<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;_version&quot;: 1,</span><br><span class="line">    &quot;_seq_no&quot;: 1,</span><br><span class="line">    &quot;_primary_term&quot;: 1,</span><br><span class="line">    &quot;found&quot;: true,</span><br><span class="line">    &quot;_source&quot;: &#123;</span><br><span class="line">        &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">        &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">        &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">        &quot;price&quot;: 3999</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查找不存在的内容，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1001%E3%80%82">http://127.0.0.1:9200/shopping/_doc/1001。</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回结果如下：</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1001&quot;,</span><br><span class="line">    &quot;found&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看索引下所有数据，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/shopping/_search%E3%80%82">http://127.0.0.1:9200/shopping/_search。</a></p>
<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 133,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 2,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: 1,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 3999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 3999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="入门-HTTP-全量修改-amp-局部修改-amp-删除"><a href="#入门-HTTP-全量修改-amp-局部修改-amp-删除" class="headerlink" title="入门-HTTP-全量修改 &amp; 局部修改 &amp; 删除"></a>入门-HTTP-全量修改 &amp; 局部修改 &amp; 删除</h2><h3 id="全量修改"><a href="#全量修改" class="headerlink" title="全量修改"></a>全量修改</h3><p>和新增文档一样，输入相同的 URL 地址请求，如果请求体变化，会将原有的数据内容覆盖</p>
<p>在 Postman 中，向 ES 服务器发 POST 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1">http://127.0.0.1:9200/shopping/_doc/1</a></p>
<p>请求体JSON内容为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;title&quot;:&quot;华为手机&quot;,</span><br><span class="line">    &quot;category&quot;:&quot;华为&quot;,</span><br><span class="line">    &quot;images&quot;:&quot;http://www.gulixueyuan.com/hw.jpg&quot;,</span><br><span class="line">    &quot;price&quot;:1999.00</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改成功后，服务器响应结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;_version&quot;: 2,</span><br><span class="line">    &quot;result&quot;: &quot;updated&quot;,//&lt;-----------updated 表示数据被更新</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;_seq_no&quot;: 2,</span><br><span class="line">    &quot;_primary_term&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="局部修改"><a href="#局部修改" class="headerlink" title="局部修改"></a>局部修改</h3><p>修改数据时，也可以只修改某一给条数据的局部信息</p>
<p>在 Postman 中，向 ES 服务器发 POST 请求 ： <a href="http://127.0.0.1:9200/shopping/_update/1%E3%80%82">http://127.0.0.1:9200/shopping/_update/1。</a></p>
<p>请求体JSON内容为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;doc&quot;: &#123;</span><br><span class="line">		&quot;title&quot;:&quot;小米手机&quot;,</span><br><span class="line">		&quot;category&quot;:&quot;小米&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;shopping&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_version&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;updated&quot;</span>,<span class="comment">//&lt;-----------updated 表示数据被更新</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;successful&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1%EF%BC%8C%E6%9F%A5%E7%9C%8B%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9%EF%BC%9A">http://127.0.0.1:9200/shopping/_doc/1，查看修改内容：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;_version&quot;: 3,</span><br><span class="line">    &quot;_seq_no&quot;: 3,</span><br><span class="line">    &quot;_primary_term&quot;: 1,</span><br><span class="line">    &quot;found&quot;: true,</span><br><span class="line">    &quot;_source&quot;: &#123;</span><br><span class="line">        &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">        &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">        &quot;images&quot;: &quot;http://www.gulixueyuan.com/hw.jpg&quot;,</span><br><span class="line">        &quot;price&quot;: 1999</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除一个文档不会立即从磁盘上移除，它只是被标记成已删除（逻辑删除）。</p>
<p>在 Postman 中，向 ES 服务器发 DELETE 请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1">http://127.0.0.1:9200/shopping/_doc/1</a></p>
<p>返回结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;_version&quot;: 4,</span><br><span class="line">    &quot;result&quot;: &quot;deleted&quot;,//&lt;---删除成功</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;_seq_no&quot;: 4,</span><br><span class="line">    &quot;_primary_term&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_doc/1%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%98%AF%E5%90%A6%E5%88%A0%E9%99%A4%E6%88%90%E5%8A%9F%EF%BC%9A">http://127.0.0.1:9200/shopping/_doc/1，查看是否删除成功：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;found&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="入门-HTTP-条件查询-amp-分页查询-amp-查询排序"><a href="#入门-HTTP-条件查询-amp-分页查询-amp-查询排序" class="headerlink" title="入门-HTTP-条件查询 &amp; 分页查询 &amp; 查询排序"></a>入门-HTTP-条件查询 &amp; 分页查询 &amp; 查询排序</h2><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>假设有以下文档内容，（在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%89%EF%BC%9A">http://127.0.0.1:9200/shopping/_search）：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 5,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 6,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: 1,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 3999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="URL带参查询"><a href="#URL带参查询" class="headerlink" title="URL带参查询"></a>URL带参查询</h4><p><strong>查找category为小米的文档</strong>，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search?q=category:%E5%B0%8F%E7%B1%B3%EF%BC%8C%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search?q=category:小米，返回结果如下：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 94,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 3,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: 1.3862942,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,</span><br><span class="line">                &quot;_score&quot;: 1.3862942,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 3999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,</span><br><span class="line">                &quot;_score&quot;: 1.3862942,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,</span><br><span class="line">                &quot;_score&quot;: 1.3862942,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述为URL带参数形式查询，这很容易让不善者心怀恶意，或者参数值出现中文会出现乱码情况。为了避免这些情况，我们可用使用带JSON请求体请求进行查询。</p>
<h4 id="请求体带参查询"><a href="#请求体带参查询" class="headerlink" title="请求体带参查询"></a>请求体带参查询</h4><p>接下带JSON请求体，还是<strong>查找category为小米的文档</strong>，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;query&quot;:&#123;</span><br><span class="line">		&quot;match&quot;:&#123;</span><br><span class="line">			&quot;category&quot;:&quot;小米&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 3,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 3,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: 1.3862942,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,</span><br><span class="line">                &quot;_score&quot;: 1.3862942,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 3999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,</span><br><span class="line">                &quot;_score&quot;: 1.3862942,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,</span><br><span class="line">                &quot;_score&quot;: 1.3862942,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="带请求体方式的查找所有内容"><a href="#带请求体方式的查找所有内容" class="headerlink" title="带请求体方式的查找所有内容"></a>带请求体方式的查找所有内容</h4><p><strong>查找所有文档内容</strong>，也可以这样，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;query&quot;:&#123;</span><br><span class="line">		&quot;match_all&quot;:&#123;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>则返回所有文档内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 2,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 6,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: 1,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 3999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查询指定字段"><a href="#查询指定字段" class="headerlink" title="查询指定字段"></a>查询指定字段</h4><p><strong>如果你想查询指定字段</strong>，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;query&quot;:&#123;</span><br><span class="line">		&quot;match_all&quot;:&#123;&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	&quot;_source&quot;:[&quot;title&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 5,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 6,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: 1,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;query&quot;:&#123;</span><br><span class="line">		&quot;match_all&quot;:&#123;&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	&quot;from&quot;:0,</span><br><span class="line">	&quot;size&quot;:2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 1,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 6,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: 1,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 3999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询排序"><a href="#查询排序" class="headerlink" title="查询排序"></a>查询排序</h3><p>如果你想通过排序查出价格最高的手机，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;query&quot;:&#123;</span><br><span class="line">		&quot;match_all&quot;:&#123;&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	&quot;sort&quot;:&#123;</span><br><span class="line">		&quot;price&quot;:&#123;</span><br><span class="line">			&quot;order&quot;:&quot;desc&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 96,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 6,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: null,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,</span><br><span class="line">                &quot;_score&quot;: null,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 3999</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;sort&quot;: [</span><br><span class="line">                    3999</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,</span><br><span class="line">                &quot;_score&quot;: null,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;sort&quot;: [</span><br><span class="line">                    1999</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,</span><br><span class="line">                &quot;_score&quot;: null,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;sort&quot;: [</span><br><span class="line">                    1999</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,</span><br><span class="line">                &quot;_score&quot;: null,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;sort&quot;: [</span><br><span class="line">                    1999</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,</span><br><span class="line">                &quot;_score&quot;: null,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;sort&quot;: [</span><br><span class="line">                    1999</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,</span><br><span class="line">                &quot;_score&quot;: null,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;sort&quot;: [</span><br><span class="line">                    1999</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="入门-HTTP-多条件查询-amp-范围查询"><a href="#入门-HTTP-多条件查询-amp-范围查询" class="headerlink" title="入门-HTTP-多条件查询 &amp; 范围查询"></a>入门-HTTP-多条件查询 &amp; 范围查询</h2><h3 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h3><p>假设想找出小米牌子，价格为3999元的。（must相当于数据库的&amp;&amp;）</p>
<p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;query&quot;:&#123;</span><br><span class="line">		&quot;bool&quot;:&#123;</span><br><span class="line">			&quot;must&quot;:[&#123;</span><br><span class="line">				&quot;match&quot;:&#123;</span><br><span class="line">					&quot;category&quot;:&quot;小米&quot;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,&#123;</span><br><span class="line">				&quot;match&quot;:&#123;</span><br><span class="line">					&quot;price&quot;:3999.00</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 134,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 1,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: 2.3862944,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,</span><br><span class="line">                &quot;_score&quot;: 2.3862944,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 3999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设想找出小米和华为的牌子。（should相当于数据库的||）</p>
<p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;query&quot;:&#123;</span><br><span class="line">		&quot;bool&quot;:&#123;</span><br><span class="line">			&quot;should&quot;:[&#123;</span><br><span class="line">				&quot;match&quot;:&#123;</span><br><span class="line">					&quot;category&quot;:&quot;小米&quot;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,&#123;</span><br><span class="line">				&quot;match&quot;:&#123;</span><br><span class="line">					&quot;category&quot;:&quot;华为&quot;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;]</span><br><span class="line">		&#125;,</span><br><span class="line">        &quot;filter&quot;:&#123;</span><br><span class="line">            &quot;range&quot;:&#123;</span><br><span class="line">                &quot;price&quot;:&#123;</span><br><span class="line">                    &quot;gt&quot;:2000</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 8,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 6,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: 1.3862942,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,</span><br><span class="line">                &quot;_score&quot;: 1.3862942,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 3999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,</span><br><span class="line">                &quot;_score&quot;: 1.3862942,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,</span><br><span class="line">                &quot;_score&quot;: 1.3862942,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,</span><br><span class="line">                &quot;_score&quot;: 1.3862942,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,</span><br><span class="line">                &quot;_score&quot;: 1.3862942,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,</span><br><span class="line">                &quot;_score&quot;: 1.3862942,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><p>假设想找出小米和华为的牌子，价格大于2000元的手机。</p>
<p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;query&quot;:&#123;</span><br><span class="line">		&quot;bool&quot;:&#123;</span><br><span class="line">			&quot;should&quot;:[&#123;</span><br><span class="line">				&quot;match&quot;:&#123;</span><br><span class="line">					&quot;category&quot;:&quot;小米&quot;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,&#123;</span><br><span class="line">				&quot;match&quot;:&#123;</span><br><span class="line">					&quot;category&quot;:&quot;华为&quot;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;],</span><br><span class="line">            &quot;filter&quot;:&#123;</span><br><span class="line">            	&quot;range&quot;:&#123;</span><br><span class="line">                	&quot;price&quot;:&#123;</span><br><span class="line">                    	&quot;gt&quot;:2000</span><br><span class="line">                	&#125;</span><br><span class="line">	            &#125;</span><br><span class="line">    	    &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 72,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 1,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: 1.3862942,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,</span><br><span class="line">                &quot;_score&quot;: 1.3862942,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 3999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="入门-HTTP-全文检索-amp-完全匹配-amp-高亮查询"><a href="#入门-HTTP-全文检索-amp-完全匹配-amp-高亮查询" class="headerlink" title="入门-HTTP-全文检索 &amp; 完全匹配 &amp; 高亮查询"></a>入门-HTTP-全文检索 &amp; 完全匹配 &amp; 高亮查询</h2><h3 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h3><p>这功能像搜索引擎那样，如品牌输入“小华”，返回结果带回品牌有“小米”和华为的。</p>
<p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;query&quot;:&#123;</span><br><span class="line">		&quot;match&quot;:&#123;</span><br><span class="line">			&quot;category&quot; : &quot;小华&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 7,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 6,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: 0.6931471,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6931471,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 3999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6931471,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6931471,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6931471,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6931471,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6931471,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="完全匹配"><a href="#完全匹配" class="headerlink" title="完全匹配"></a>完全匹配</h3><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">		<span class="attr">&quot;match_phrase&quot;</span>:&#123;</span><br><span class="line">			<span class="attr">&quot;category&quot;</span> : <span class="string">&quot;为&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 2,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 3,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: 0.6931471,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6931471,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6931471,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6931471,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h3><p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;query&quot;:&#123;</span><br><span class="line">		&quot;match_phrase&quot;:&#123;</span><br><span class="line">			&quot;category&quot; : &quot;为&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">    &quot;highlight&quot;:&#123;</span><br><span class="line">        &quot;fields&quot;:&#123;</span><br><span class="line">            &quot;category&quot;:&#123;&#125;//&lt;----高亮这字段</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 100,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 3,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: 0.6931471,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6931471,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;highlight&quot;: &#123;</span><br><span class="line">                    &quot;category&quot;: [</span><br><span class="line">                        &quot;华&lt;em&gt;为&lt;/em&gt;&quot;//&lt;------高亮一个为字。</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6931471,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;highlight&quot;: &#123;</span><br><span class="line">                    &quot;category&quot;: [</span><br><span class="line">                        &quot;华&lt;em&gt;为&lt;/em&gt;&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.6931471,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;highlight&quot;: &#123;</span><br><span class="line">                    &quot;category&quot;: [</span><br><span class="line">                        &quot;华&lt;em&gt;为&lt;/em&gt;&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="入门-HTTP-聚合查询"><a href="#入门-HTTP-聚合查询" class="headerlink" title="入门-HTTP-聚合查询"></a>入门-HTTP-聚合查询</h2><p>聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group by，当然还有很多其他的聚合，例如取最大值max、平均值avg等等。</p>
<p>接下来按price字段进行分组：</p>
<p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;aggs&quot;:&#123;//聚合操作</span><br><span class="line">		&quot;price_group&quot;:&#123;//名称，随意起名</span><br><span class="line">			&quot;terms&quot;:&#123;//分组</span><br><span class="line">				&quot;field&quot;:&quot;price&quot;//分组字段</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 63,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 6,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: 1,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;ANQqsHgBaKNfVnMbhZYU&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 3999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;A9R5sHgBaKNfVnMb25Ya&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BNR5sHgBaKNfVnMb7pal&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;BtR6sHgBaKNfVnMbX5Y5&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;B9R6sHgBaKNfVnMbZpZ6&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;shopping&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;CdR7sHgBaKNfVnMbsJb9&quot;,</span><br><span class="line">                &quot;_score&quot;: 1,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;title&quot;: &quot;华为手机&quot;,</span><br><span class="line">                    &quot;category&quot;: &quot;华为&quot;,</span><br><span class="line">                    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">                    &quot;price&quot;: 1999</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;aggregations&quot;: &#123;</span><br><span class="line">        &quot;price_group&quot;: &#123;</span><br><span class="line">            &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">            &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">            &quot;buckets&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;key&quot;: 1999,</span><br><span class="line">                    &quot;doc_count&quot;: 5</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;key&quot;: 3999,</span><br><span class="line">                    &quot;doc_count&quot;: 1</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面返回结果会附带原始数据的。若不想要不附带原始数据的结果，在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;aggs&quot;:&#123;</span><br><span class="line">		&quot;price_group&quot;:&#123;</span><br><span class="line">			&quot;terms&quot;:&#123;</span><br><span class="line">				&quot;field&quot;:&quot;price&quot;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">    &quot;size&quot;:0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 60,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 6,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: null,</span><br><span class="line">        &quot;hits&quot;: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;aggregations&quot;: &#123;</span><br><span class="line">        &quot;price_group&quot;: &#123;</span><br><span class="line">            &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">            &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">            &quot;buckets&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;key&quot;: 1999,</span><br><span class="line">                    &quot;doc_count&quot;: 5</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;key&quot;: 3999,</span><br><span class="line">                    &quot;doc_count&quot;: 1</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若想对所有手机价格求<strong>平均值</strong>。</p>
<p>在 Postman 中，向 ES 服务器发 GET请求 ： <a href="http://127.0.0.1:9200/shopping/_search%EF%BC%8C%E9%99%84%E5%B8%A6JSON%E4%BD%93%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:9200/shopping/_search，附带JSON体如下：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;aggs&quot;:&#123;</span><br><span class="line">		&quot;price_avg&quot;:&#123;//名称，随意起名</span><br><span class="line">			&quot;avg&quot;:&#123;//求平均</span><br><span class="line">				&quot;field&quot;:&quot;price&quot;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">    &quot;size&quot;:0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 14,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 6,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: null,</span><br><span class="line">        &quot;hits&quot;: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;aggregations&quot;: &#123;</span><br><span class="line">        &quot;price_avg&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 2332.3333333333335</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="入门-HTTP-映射关系"><a href="#入门-HTTP-映射关系" class="headerlink" title="入门-HTTP-映射关系"></a>入门-HTTP-映射关系</h2><p>有了索引库，等于有了数据库中的 database。</p>
<p>接下来就需要建索引库(index)中的映射了，类似于数据库(database)中的表结构(table)。</p>
<p>创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射(mapping)。</p>
<p>先创建一个索引：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># PUT http://127.0.0.1:9200/user</span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;acknowledged&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;shards_acknowledged&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;user&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>创建映射</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># PUT http://127.0.0.1:9200/user/_mapping</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;name&quot;:&#123;</span><br><span class="line">        	&quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        	&quot;index&quot;: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sex&quot;:&#123;</span><br><span class="line">        	&quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        	&quot;index&quot;: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;tel&quot;:&#123;</span><br><span class="line">        	&quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        	&quot;index&quot;: false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;acknowledged&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>查询映射</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#GET http:<span class="comment">//127.0.0.1:9200/user/_mapping</span></span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;user&quot;: &#123;</span><br><span class="line">        &quot;mappings&quot;: &#123;</span><br><span class="line">            &quot;properties&quot;: &#123;</span><br><span class="line">                &quot;name&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;text&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;sex&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;tel&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                    &quot;index&quot;: false</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>增加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#PUT http://127.0.0.1:9200/user/_create/1001</span><br><span class="line">&#123;</span><br><span class="line">	&quot;name&quot;:&quot;小米&quot;,</span><br><span class="line">	&quot;sex&quot;:&quot;男的&quot;,</span><br><span class="line">	&quot;tel&quot;:&quot;1111&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;user&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1001&quot;,</span><br><span class="line">    &quot;_version&quot;: 1,</span><br><span class="line">    &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;_seq_no&quot;: 0,</span><br><span class="line">    &quot;_primary_term&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查找name含有”小“数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#GET http:<span class="comment">//127.0.0.1:9200/user/_search</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">		<span class="attr">&quot;match&quot;</span>:&#123;</span><br><span class="line">			<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;小&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 495,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 1,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: 0.2876821,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;user&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;1001&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.2876821,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;sex&quot;: &quot;男的&quot;,</span><br><span class="line">                    &quot;tel&quot;: &quot;1111&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查找sex含有”男“数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#GET http:<span class="comment">//127.0.0.1:9200/user/_search</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">		<span class="attr">&quot;match&quot;</span>:&#123;</span><br><span class="line">			<span class="attr">&quot;sex&quot;</span>:<span class="string">&quot;男&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 1,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 0,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: null,</span><br><span class="line">        &quot;hits&quot;: []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找不想要的结果，只因创建映射时”sex”的类型为”keyword”。</p>
<p>“sex”只能完全为”男的“，才能得出原数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#GET http://127.0.0.1:9200/user/_search</span><br><span class="line">&#123;</span><br><span class="line">	&quot;query&quot;:&#123;</span><br><span class="line">		&quot;match&quot;:&#123;</span><br><span class="line">			&quot;sex&quot;:&quot;男的&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;took&quot;: 2,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hits&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 1,</span><br><span class="line">            &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;max_score&quot;: 0.2876821,</span><br><span class="line">        &quot;hits&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;_index&quot;: &quot;user&quot;,</span><br><span class="line">                &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">                &quot;_id&quot;: &quot;1001&quot;,</span><br><span class="line">                &quot;_score&quot;: 0.2876821,</span><br><span class="line">                &quot;_source&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;小米&quot;,</span><br><span class="line">                    &quot;sex&quot;: &quot;男的&quot;,</span><br><span class="line">                    &quot;tel&quot;: &quot;1111&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询电话</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># GET http:<span class="comment">//127.0.0.1:9200/user/_search</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">		<span class="attr">&quot;match&quot;</span>:&#123;</span><br><span class="line">			<span class="attr">&quot;tel&quot;</span>:<span class="string">&quot;11&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;error&quot;: &#123;</span><br><span class="line">        &quot;root_cause&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;type&quot;: &quot;query_shard_exception&quot;,</span><br><span class="line">                &quot;reason&quot;: &quot;failed to create query: Cannot search on field [tel] since it is not indexed.&quot;,</span><br><span class="line">                &quot;index_uuid&quot;: &quot;ivLnMfQKROS7Skb2MTFOew&quot;,</span><br><span class="line">                &quot;index&quot;: &quot;user&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;type&quot;: &quot;search_phase_execution_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;all shards failed&quot;,</span><br><span class="line">        &quot;phase&quot;: &quot;query&quot;,</span><br><span class="line">        &quot;grouped&quot;: true,</span><br><span class="line">        &quot;failed_shards&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;shard&quot;: 0,</span><br><span class="line">                &quot;index&quot;: &quot;user&quot;,</span><br><span class="line">                &quot;node&quot;: &quot;4P7dIRfXSbezE5JTiuylew&quot;,</span><br><span class="line">                &quot;reason&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;query_shard_exception&quot;,</span><br><span class="line">                    &quot;reason&quot;: &quot;failed to create query: Cannot search on field [tel] since it is not indexed.&quot;,</span><br><span class="line">                    &quot;index_uuid&quot;: &quot;ivLnMfQKROS7Skb2MTFOew&quot;,</span><br><span class="line">                    &quot;index&quot;: &quot;user&quot;,</span><br><span class="line">                    &quot;caused_by&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;illegal_argument_exception&quot;,</span><br><span class="line">                        &quot;reason&quot;: &quot;Cannot search on field [tel] since it is not indexed.&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;status&quot;: 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>报错只因创建映射时”tel”的”index”为false。</p>
<h2 id="入门-JavaAPI-环境准备"><a href="#入门-JavaAPI-环境准备" class="headerlink" title="入门-JavaAPI-环境准备"></a>入门-JavaAPI-环境准备</h2><p>新建Maven工程。</p>
<p>添加依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;7.8.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- elasticsearch 的客户端 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;7.8.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- elasticsearch 依赖 2.x 的 log4j --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.8.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.8.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.9.9&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- junit 单元测试 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<p>HelloElasticsearch</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import org.apache.http.HttpHost;</span><br><span class="line">import org.elasticsearch.client.RestClient;</span><br><span class="line">import org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"></span><br><span class="line">public class HelloElasticsearch &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) throws IOException &#123;</span><br><span class="line">		// 创建客户端对象</span><br><span class="line">		RestHighLevelClient client = new RestHighLevelClient(</span><br><span class="line">				RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;)));</span><br><span class="line">//		...</span><br><span class="line">		System.out.println(client);</span><br><span class="line"></span><br><span class="line">		// 关闭客户端连接</span><br><span class="line">		client.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="入门-JavaAPI-索引-创建"><a href="#入门-JavaAPI-索引-创建" class="headerlink" title="入门-JavaAPI-索引-创建"></a>入门-JavaAPI-索引-创建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.apache.http.HttpHost;</span><br><span class="line">import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;</span><br><span class="line">import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line">import org.elasticsearch.client.RestClient;</span><br><span class="line">import org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class CreateIndex &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        // 创建客户端对象</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(</span><br><span class="line">                RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;)));</span><br><span class="line">        // 创建索引 - 请求对象</span><br><span class="line">        CreateIndexRequest request = new CreateIndexRequest(&quot;user2&quot;);</span><br><span class="line">        // 发送请求，获取响应</span><br><span class="line">        CreateIndexResponse response = client.indices().create(request,</span><br><span class="line">                RequestOptions.DEFAULT);</span><br><span class="line">        boolean acknowledged = response.isAcknowledged();</span><br><span class="line">        // 响应状态</span><br><span class="line">        System.out.println(&quot;操作状态 = &quot; + acknowledged);</span><br><span class="line">        // 关闭客户端连接</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">四月 09, 2021 2:12:08 下午 org.elasticsearch.client.RestClient logResponse</span><br><span class="line">警告: request [PUT http://localhost:9200/user2?master_timeout=30s&amp;include_type_name=true&amp;timeout=30s] returned 1 warnings: [299 Elasticsearch-7.8.0-757314695644ea9a1dc2fecd26d1a43856725e65 &quot;[types removal] Using include_type_name in create index requests is deprecated. The parameter will be removed in the next major version.&quot;]</span><br><span class="line">操作状态 = true</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h2 id="入门-JavaAPI-索引-查询-amp-删除"><a href="#入门-JavaAPI-索引-查询-amp-删除" class="headerlink" title="入门-JavaAPI-索引-查询 &amp; 删除"></a>入门-JavaAPI-索引-查询 &amp; 删除</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.apache.http.HttpHost;</span><br><span class="line"></span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line">import org.elasticsearch.client.RestClient;</span><br><span class="line">import org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line">import org.elasticsearch.client.indices.GetIndexRequest;</span><br><span class="line">import org.elasticsearch.client.indices.GetIndexResponse;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class SearchIndex &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        // 创建客户端对象</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(</span><br><span class="line">                RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;)));</span><br><span class="line"></span><br><span class="line">        // 查询索引 - 请求对象</span><br><span class="line">        GetIndexRequest request = new GetIndexRequest(&quot;user2&quot;);</span><br><span class="line">        // 发送请求，获取响应</span><br><span class="line">        GetIndexResponse response = client.indices().get(request,</span><br><span class="line">                RequestOptions.DEFAULT);</span><br><span class="line">        </span><br><span class="line">        System.out.println(&quot;aliases:&quot;+response.getAliases());</span><br><span class="line">        System.out.println(&quot;mappings:&quot;+response.getMappings());</span><br><span class="line">        System.out.println(&quot;settings:&quot;+response.getSettings());</span><br><span class="line"></span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aliases:&#123;user2=[]&#125;</span><br><span class="line">mappings:&#123;user2=org.elasticsearch.cluster.metadata.MappingMetadata@ad700514&#125;</span><br><span class="line">settings:&#123;user2=&#123;&quot;index.creation_date&quot;:&quot;1617948726976&quot;,&quot;index.number_of_replicas&quot;:&quot;1&quot;,&quot;index.number_of_shards&quot;:&quot;1&quot;,&quot;index.provided_name&quot;:&quot;user2&quot;,&quot;index.uuid&quot;:&quot;UGZ1ntcySnK6hWyP2qoVpQ&quot;,&quot;index.version.created&quot;:&quot;7080099&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.apache.http.HttpHost;</span><br><span class="line">import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;</span><br><span class="line">import org.elasticsearch.action.support.master.AcknowledgedResponse;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line">import org.elasticsearch.client.RestClient;</span><br><span class="line">import org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class DeleteIndex &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(</span><br><span class="line">                RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;)));</span><br><span class="line">        // 删除索引 - 请求对象</span><br><span class="line">        DeleteIndexRequest request = new DeleteIndexRequest(&quot;user2&quot;);</span><br><span class="line">        // 发送请求，获取响应</span><br><span class="line">        AcknowledgedResponse response = client.indices().delete(request,RequestOptions.DEFAULT);</span><br><span class="line">        // 操作结果</span><br><span class="line">        System.out.println(&quot;操作结果 ： &quot; + response.isAcknowledged());</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">操作结果 ： true</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h2 id="入门-JavaAPI-文档-新增-amp-修改"><a href="#入门-JavaAPI-文档-新增-amp-修改" class="headerlink" title="入门-JavaAPI-文档-新增 &amp; 修改"></a>入门-JavaAPI-文档-新增 &amp; 修改</h2><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>上文由于频繁使用以下连接Elasticsearch和关闭它的代码，于是<strong>个人</strong>对它进行重构。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class SomeClass &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(</span><br><span class="line">                RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;)));</span><br><span class="line">		</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重构后的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"></span><br><span class="line">public interface ElasticsearchTask &#123;</span><br><span class="line"></span><br><span class="line">    void doSomething(RestHighLevelClient client) throws Exception;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ConnectElasticsearch&#123;</span><br><span class="line"></span><br><span class="line">    public static void connect(ElasticsearchTask task)&#123;</span><br><span class="line">        // 创建客户端对象</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(</span><br><span class="line">                RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;)));</span><br><span class="line">        try &#123;</span><br><span class="line">            task.doSomething(client);</span><br><span class="line">            // 关闭客户端连接</span><br><span class="line">            client.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接下来，如果想让Elasticsearch完成一些操作，就编写一个lambda式即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class SomeClass &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConnectElasticsearch.connect(client -&gt; &#123;</span><br><span class="line">			//do something</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import com.lun.elasticsearch.hello.ConnectElasticsearch;</span><br><span class="line">import com.lun.elasticsearch.model.User;</span><br><span class="line">import org.elasticsearch.action.index.IndexRequest;</span><br><span class="line">import org.elasticsearch.action.index.IndexResponse;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line">import org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"></span><br><span class="line">public class InsertDoc &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConnectElasticsearch.connect(client -&gt; &#123;</span><br><span class="line">            // 新增文档 - 请求对象</span><br><span class="line">            IndexRequest request = new IndexRequest();</span><br><span class="line">            // 设置索引及唯一性标识</span><br><span class="line">            request.index(&quot;user&quot;).id(&quot;1001&quot;);</span><br><span class="line"></span><br><span class="line">            // 创建数据对象</span><br><span class="line">            User user = new User();</span><br><span class="line">            user.setName(&quot;zhangsan&quot;);</span><br><span class="line">            user.setAge(30);</span><br><span class="line">            user.setSex(&quot;男&quot;);</span><br><span class="line"></span><br><span class="line">            ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">            String productJson = objectMapper.writeValueAsString(user);</span><br><span class="line">            // 添加文档数据，数据格式为 JSON 格式</span><br><span class="line">            request.source(productJson, XContentType.JSON);</span><br><span class="line">            // 客户端发送请求，获取响应对象</span><br><span class="line">            IndexResponse response = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">            3.打印结果信息</span><br><span class="line">            System.out.println(&quot;_index:&quot; + response.getIndex());</span><br><span class="line">            System.out.println(&quot;_id:&quot; + response.getId());</span><br><span class="line">            System.out.println(&quot;_result:&quot; + response.getResult());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_index:user</span><br><span class="line">_id:1001</span><br><span class="line">_result:UPDATED</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.lun.elasticsearch.hello.ConnectElasticsearch;</span><br><span class="line">import org.elasticsearch.action.update.UpdateRequest;</span><br><span class="line">import org.elasticsearch.action.update.UpdateResponse;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line">import org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"></span><br><span class="line">public class UpdateDoc &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConnectElasticsearch.connect(client -&gt; &#123;</span><br><span class="line">            // 修改文档 - 请求对象</span><br><span class="line">            UpdateRequest request = new UpdateRequest();</span><br><span class="line">            // 配置修改参数</span><br><span class="line">            request.index(&quot;user&quot;).id(&quot;1001&quot;);</span><br><span class="line">            // 设置请求体，对数据进行修改</span><br><span class="line">            request.doc(XContentType.JSON, &quot;sex&quot;, &quot;女&quot;);</span><br><span class="line">            // 客户端发送请求，获取响应对象</span><br><span class="line">            UpdateResponse response = client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">            System.out.println(&quot;_index:&quot; + response.getIndex());</span><br><span class="line">            System.out.println(&quot;_id:&quot; + response.getId());</span><br><span class="line">            System.out.println(&quot;_result:&quot; + response.getResult());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_index:user</span><br><span class="line">_id:1001</span><br><span class="line">_result:UPDATED</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h2 id="入门-JavaAPI-文档-查询-amp-删除"><a href="#入门-JavaAPI-文档-查询-amp-删除" class="headerlink" title="入门-JavaAPI-文档-查询 &amp; 删除"></a>入门-JavaAPI-文档-查询 &amp; 删除</h2><h3 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.lun.elasticsearch.hello.ConnectElasticsearch;</span><br><span class="line">import org.elasticsearch.action.get.GetRequest;</span><br><span class="line">import org.elasticsearch.action.get.GetResponse;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line"></span><br><span class="line">public class GetDoc &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConnectElasticsearch.connect(client -&gt; &#123;</span><br><span class="line">            //1.创建请求对象</span><br><span class="line">            GetRequest request = new GetRequest().index(&quot;user&quot;).id(&quot;1001&quot;);</span><br><span class="line">            //2.客户端发送请求，获取响应对象</span><br><span class="line">            GetResponse response = client.get(request, RequestOptions.DEFAULT);</span><br><span class="line">            3.打印结果信息</span><br><span class="line">            System.out.println(&quot;_index:&quot; + response.getIndex());</span><br><span class="line">            System.out.println(&quot;_type:&quot; + response.getType());</span><br><span class="line">            System.out.println(&quot;_id:&quot; + response.getId());</span><br><span class="line">            System.out.println(&quot;source:&quot; + response.getSourceAsString());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_index:user</span><br><span class="line">_type:_doc</span><br><span class="line">_id:1001</span><br><span class="line">source:&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:30,&quot;sex&quot;:&quot;男&quot;&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.lun.elasticsearch.hello.ConnectElasticsearch;</span><br><span class="line">import org.elasticsearch.action.delete.DeleteRequest;</span><br><span class="line">import org.elasticsearch.action.delete.DeleteResponse;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line"></span><br><span class="line">public class DeleteDoc &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConnectElasticsearch.connect(client -&gt; &#123;</span><br><span class="line">            //创建请求对象</span><br><span class="line">            DeleteRequest request = new DeleteRequest().index(&quot;user&quot;).id(&quot;1001&quot;);</span><br><span class="line">            //客户端发送请求，获取响应对象</span><br><span class="line">            DeleteResponse response = client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">            //打印信息</span><br><span class="line">            System.out.println(response.toString());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DeleteResponse[index=user,type=_doc,id=1001,version=16,result=deleted,shards=ShardInfo&#123;total=2, successful=1, failures=[]&#125;]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h2 id="入门-JavaAPI-文档-批量新增-amp-批量删除"><a href="#入门-JavaAPI-文档-批量新增-amp-批量删除" class="headerlink" title="入门-JavaAPI-文档-批量新增 &amp; 批量删除"></a>入门-JavaAPI-文档-批量新增 &amp; 批量删除</h2><h3 id="批量新增"><a href="#批量新增" class="headerlink" title="批量新增"></a>批量新增</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.lun.elasticsearch.hello.ConnectElasticsearch;</span><br><span class="line">import org.elasticsearch.action.bulk.BulkRequest;</span><br><span class="line">import org.elasticsearch.action.bulk.BulkResponse;</span><br><span class="line">import org.elasticsearch.action.index.IndexRequest;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line">import org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"></span><br><span class="line">public class BatchInsertDoc &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConnectElasticsearch.connect(client -&gt; &#123;</span><br><span class="line">            //创建批量新增请求对象</span><br><span class="line">            BulkRequest request = new BulkRequest();</span><br><span class="line">            request.add(new</span><br><span class="line">                    IndexRequest().index(&quot;user&quot;).id(&quot;1001&quot;).source(XContentType.JSON, &quot;name&quot;,</span><br><span class="line">                    &quot;zhangsan&quot;));</span><br><span class="line">            request.add(new</span><br><span class="line">                    IndexRequest().index(&quot;user&quot;).id(&quot;1002&quot;).source(XContentType.JSON, &quot;name&quot;,</span><br><span class="line">                            &quot;lisi&quot;));</span><br><span class="line">            request.add(new</span><br><span class="line">                    IndexRequest().index(&quot;user&quot;).id(&quot;1003&quot;).source(XContentType.JSON, &quot;name&quot;,</span><br><span class="line">                    &quot;wangwu&quot;));</span><br><span class="line">            //客户端发送请求，获取响应对象</span><br><span class="line">            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">            //打印结果信息</span><br><span class="line">            System.out.println(&quot;took:&quot; + responses.getTook());</span><br><span class="line">            System.out.println(&quot;items:&quot; + responses.getItems());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">took:294ms</span><br><span class="line">items:[Lorg.elasticsearch.action.bulk.BulkItemResponse;@2beee7ff</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.lun.elasticsearch.hello.ConnectElasticsearch;</span><br><span class="line">import org.elasticsearch.action.bulk.BulkRequest;</span><br><span class="line">import org.elasticsearch.action.bulk.BulkResponse;</span><br><span class="line">import org.elasticsearch.action.delete.DeleteRequest;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line"></span><br><span class="line">public class BatchDeleteDoc &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConnectElasticsearch.connect(client -&gt; &#123;</span><br><span class="line">            //创建批量删除请求对象</span><br><span class="line">            BulkRequest request = new BulkRequest();</span><br><span class="line">            request.add(new DeleteRequest().index(&quot;user&quot;).id(&quot;1001&quot;));</span><br><span class="line">            request.add(new DeleteRequest().index(&quot;user&quot;).id(&quot;1002&quot;));</span><br><span class="line">            request.add(new DeleteRequest().index(&quot;user&quot;).id(&quot;1003&quot;));</span><br><span class="line">            //客户端发送请求，获取响应对象</span><br><span class="line">            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">            //打印结果信息</span><br><span class="line">            System.out.println(&quot;took:&quot; + responses.getTook());</span><br><span class="line">            System.out.println(&quot;items:&quot; + responses.getItems());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">took:108ms</span><br><span class="line">items:[Lorg.elasticsearch.action.bulk.BulkItemResponse;@7b02881e</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h2 id="入门-JavaAPI-文档-高级查询-全量查询"><a href="#入门-JavaAPI-文档-高级查询-全量查询" class="headerlink" title="入门-JavaAPI-文档-高级查询-全量查询"></a>入门-JavaAPI-文档-高级查询-全量查询</h2><p>先批量增加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class BatchInsertDoc &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConnectElasticsearch.connect(client -&gt; &#123;</span><br><span class="line">            //创建批量新增请求对象</span><br><span class="line">            BulkRequest request = new BulkRequest();</span><br><span class="line">            request.add(new IndexRequest().index(&quot;user&quot;).id(&quot;1001&quot;).source(XContentType.JSON, &quot;name&quot;, &quot;zhangsan&quot;, &quot;age&quot;, &quot;10&quot;, &quot;sex&quot;,&quot;女&quot;));</span><br><span class="line">            request.add(new IndexRequest().index(&quot;user&quot;).id(&quot;1002&quot;).source(XContentType.JSON, &quot;name&quot;, &quot;lisi&quot;, &quot;age&quot;, &quot;30&quot;, &quot;sex&quot;,&quot;女&quot;));</span><br><span class="line">            request.add(new IndexRequest().index(&quot;user&quot;).id(&quot;1003&quot;).source(XContentType.JSON, &quot;name&quot;, &quot;wangwu1&quot;, &quot;age&quot;, &quot;40&quot;, &quot;sex&quot;,&quot;男&quot;));</span><br><span class="line">            request.add(new IndexRequest().index(&quot;user&quot;).id(&quot;1004&quot;).source(XContentType.JSON, &quot;name&quot;, &quot;wangwu2&quot;, &quot;age&quot;, &quot;20&quot;, &quot;sex&quot;,&quot;女&quot;));</span><br><span class="line">            request.add(new IndexRequest().index(&quot;user&quot;).id(&quot;1005&quot;).source(XContentType.JSON, &quot;name&quot;, &quot;wangwu3&quot;, &quot;age&quot;, &quot;50&quot;, &quot;sex&quot;,&quot;男&quot;));</span><br><span class="line">            request.add(new IndexRequest().index(&quot;user&quot;).id(&quot;1006&quot;).source(XContentType.JSON, &quot;name&quot;, &quot;wangwu4&quot;, &quot;age&quot;, &quot;20&quot;, &quot;sex&quot;,&quot;男&quot;));</span><br><span class="line">            //客户端发送请求，获取响应对象</span><br><span class="line">            BulkResponse responses = client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">            //打印结果信息</span><br><span class="line">            System.out.println(&quot;took:&quot; + responses.getTook());</span><br><span class="line">            System.out.println(&quot;items:&quot; + responses.getItems());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">took:168ms</span><br><span class="line">items:[Lorg.elasticsearch.action.bulk.BulkItemResponse;@2beee7ff</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<p><strong>查询所有索引数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.lun.elasticsearch.hello.ConnectElasticsearch;</span><br><span class="line">import org.elasticsearch.action.search.SearchRequest;</span><br><span class="line">import org.elasticsearch.action.search.SearchResponse;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line">import org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line">import org.elasticsearch.search.SearchHit;</span><br><span class="line">import org.elasticsearch.search.SearchHits;</span><br><span class="line">import org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line"></span><br><span class="line">public class QueryDoc &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConnectElasticsearch.connect(client -&gt; &#123;</span><br><span class="line">            // 创建搜索请求对象</span><br><span class="line">            SearchRequest request = new SearchRequest();</span><br><span class="line">            request.indices(&quot;user&quot;);</span><br><span class="line">            // 构建查询的请求体</span><br><span class="line">            SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">            // 查询所有数据</span><br><span class="line">            sourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">            request.source(sourceBuilder);</span><br><span class="line">            SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">            // 查询匹配</span><br><span class="line">            SearchHits hits = response.getHits();</span><br><span class="line">            System.out.println(&quot;took:&quot; + response.getTook());</span><br><span class="line">            System.out.println(&quot;timeout:&quot; + response.isTimedOut());</span><br><span class="line">            System.out.println(&quot;total:&quot; + hits.getTotalHits());</span><br><span class="line">            System.out.println(&quot;MaxScore:&quot; + hits.getMaxScore());</span><br><span class="line">            System.out.println(&quot;hits========&gt;&gt;&quot;);</span><br><span class="line">            for (SearchHit hit : hits) &#123;</span><br><span class="line">            //输出每条查询的结果信息</span><br><span class="line">                System.out.println(hit.getSourceAsString());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;&lt;&lt;========&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">took:2ms</span><br><span class="line">timeout:false</span><br><span class="line">total:6 hits</span><br><span class="line">MaxScore:1.0</span><br><span class="line">hits========&gt;&gt;</span><br><span class="line">&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;</span><br><span class="line">&lt;&lt;========</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h2 id="入门-JavaAPI-文档-高级查询-分页查询-amp-条件查询-amp-查询排序"><a href="#入门-JavaAPI-文档-高级查询-分页查询-amp-条件查询-amp-查询排序" class="headerlink" title="入门-JavaAPI-文档-高级查询-分页查询 &amp; 条件查询 &amp; 查询排序"></a>入门-JavaAPI-文档-高级查询-分页查询 &amp; 条件查询 &amp; 查询排序</h2><h3 id="条件查询-1"><a href="#条件查询-1" class="headerlink" title="条件查询"></a>条件查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.lun.elasticsearch.hello.ConnectElasticsearch;</span><br><span class="line">import com.lun.elasticsearch.hello.ElasticsearchTask;</span><br><span class="line">import org.elasticsearch.action.search.SearchRequest;</span><br><span class="line">import org.elasticsearch.action.search.SearchResponse;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line">import org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line">import org.elasticsearch.search.SearchHit;</span><br><span class="line">import org.elasticsearch.search.SearchHits;</span><br><span class="line">import org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line">import org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"></span><br><span class="line">public class QueryDoc &#123;</span><br><span class="line">    </span><br><span class="line">	public static final ElasticsearchTask SEARCH_BY_CONDITION = client -&gt; &#123;</span><br><span class="line">        // 创建搜索请求对象</span><br><span class="line">        SearchRequest request = new SearchRequest();</span><br><span class="line">        request.indices(&quot;user&quot;);</span><br><span class="line">        // 构建查询的请求体</span><br><span class="line">        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">        sourceBuilder.query(QueryBuilders.termQuery(&quot;age&quot;, &quot;30&quot;));</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        // 查询匹配</span><br><span class="line">        SearchHits hits = response.getHits();</span><br><span class="line">        System.out.println(&quot;took:&quot; + response.getTook());</span><br><span class="line">        System.out.println(&quot;timeout:&quot; + response.isTimedOut());</span><br><span class="line">        System.out.println(&quot;total:&quot; + hits.getTotalHits());</span><br><span class="line">        System.out.println(&quot;MaxScore:&quot; + hits.getMaxScore());</span><br><span class="line">        System.out.println(&quot;hits========&gt;&gt;&quot;);</span><br><span class="line">        for (SearchHit hit : hits) &#123;</span><br><span class="line">            //输出每条查询的结果信息</span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;&lt;&lt;========&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">took:1ms</span><br><span class="line">timeout:false</span><br><span class="line">total:1 hits</span><br><span class="line">MaxScore:1.0</span><br><span class="line">hits========&gt;&gt;</span><br><span class="line">&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;</span><br><span class="line">&lt;&lt;========</span><br></pre></td></tr></table></figure>

<h3 id="分页查询-1"><a href="#分页查询-1" class="headerlink" title="分页查询"></a>分页查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.lun.elasticsearch.hello.ConnectElasticsearch;</span><br><span class="line">import com.lun.elasticsearch.hello.ElasticsearchTask;</span><br><span class="line">import org.elasticsearch.action.search.SearchRequest;</span><br><span class="line">import org.elasticsearch.action.search.SearchResponse;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line">import org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line">import org.elasticsearch.search.SearchHit;</span><br><span class="line">import org.elasticsearch.search.SearchHits;</span><br><span class="line">import org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line">import org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"></span><br><span class="line">public class QueryDoc &#123;</span><br><span class="line">    </span><br><span class="line">	public static final ElasticsearchTask SEARCH_BY_PAGING = client -&gt; &#123;</span><br><span class="line">        // 创建搜索请求对象</span><br><span class="line">        SearchRequest request = new SearchRequest();</span><br><span class="line">        request.indices(&quot;user&quot;);</span><br><span class="line">        // 构建查询的请求体</span><br><span class="line">        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">        sourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">        // 分页查询</span><br><span class="line">        // 当前页其实索引(第一条数据的顺序号)， from</span><br><span class="line">        sourceBuilder.from(0);</span><br><span class="line"></span><br><span class="line">        // 每页显示多少条 size</span><br><span class="line">        sourceBuilder.size(2);</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        // 查询匹配</span><br><span class="line">        SearchHits hits = response.getHits();</span><br><span class="line">        System.out.println(&quot;took:&quot; + response.getTook());</span><br><span class="line">        System.out.println(&quot;timeout:&quot; + response.isTimedOut());</span><br><span class="line">        System.out.println(&quot;total:&quot; + hits.getTotalHits());</span><br><span class="line">        System.out.println(&quot;MaxScore:&quot; + hits.getMaxScore());</span><br><span class="line">        System.out.println(&quot;hits========&gt;&gt;&quot;);</span><br><span class="line">        for (SearchHit hit : hits) &#123;</span><br><span class="line">            //输出每条查询的结果信息</span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;&lt;&lt;========&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">took:1ms</span><br><span class="line">timeout:false</span><br><span class="line">total:6 hits</span><br><span class="line">MaxScore:1.0</span><br><span class="line">hits========&gt;&gt;</span><br><span class="line">&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;</span><br><span class="line">&lt;&lt;========</span><br></pre></td></tr></table></figure>

<h3 id="查询排序-1"><a href="#查询排序-1" class="headerlink" title="查询排序"></a>查询排序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.lun.elasticsearch.hello.ConnectElasticsearch;</span><br><span class="line">import com.lun.elasticsearch.hello.ElasticsearchTask;</span><br><span class="line">import org.elasticsearch.action.search.SearchRequest;</span><br><span class="line">import org.elasticsearch.action.search.SearchResponse;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line">import org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line">import org.elasticsearch.search.SearchHit;</span><br><span class="line">import org.elasticsearch.search.SearchHits;</span><br><span class="line">import org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line">import org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"></span><br><span class="line">public class QueryDoc &#123;</span><br><span class="line">    </span><br><span class="line">	public static final ElasticsearchTask SEARCH_WITH_ORDER = client -&gt; &#123;</span><br><span class="line">        // 创建搜索请求对象</span><br><span class="line">        SearchRequest request = new SearchRequest();</span><br><span class="line">        request.indices(&quot;user&quot;);</span><br><span class="line"></span><br><span class="line">        // 构建查询的请求体</span><br><span class="line">        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">        sourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">        // 排序</span><br><span class="line">        sourceBuilder.sort(&quot;age&quot;, SortOrder.ASC);</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        // 查询匹配</span><br><span class="line">        SearchHits hits = response.getHits();</span><br><span class="line">        System.out.println(&quot;took:&quot; + response.getTook());</span><br><span class="line">        System.out.println(&quot;timeout:&quot; + response.isTimedOut());</span><br><span class="line">        System.out.println(&quot;total:&quot; + hits.getTotalHits());</span><br><span class="line">        System.out.println(&quot;MaxScore:&quot; + hits.getMaxScore());</span><br><span class="line">        System.out.println(&quot;hits========&gt;&gt;&quot;);</span><br><span class="line">        for (SearchHit hit : hits) &#123;</span><br><span class="line">        //输出每条查询的结果信息</span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;&lt;&lt;========&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConnectElasticsearch.connect(SEARCH_WITH_ORDER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">took:1ms</span><br><span class="line">timeout:false</span><br><span class="line">total:6 hits</span><br><span class="line">MaxScore:NaN</span><br><span class="line">hits========&gt;&gt;</span><br><span class="line">&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;</span><br><span class="line">&lt;&lt;========</span><br></pre></td></tr></table></figure>

<h2 id="入门-JavaAPI-文档-高级查询-组合查询-amp-范围查询"><a href="#入门-JavaAPI-文档-高级查询-组合查询-amp-范围查询" class="headerlink" title="入门-JavaAPI-文档-高级查询-组合查询 &amp; 范围查询"></a>入门-JavaAPI-文档-高级查询-组合查询 &amp; 范围查询</h2><h3 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.lun.elasticsearch.hello.ConnectElasticsearch;</span><br><span class="line">import com.lun.elasticsearch.hello.ElasticsearchTask;</span><br><span class="line">import org.elasticsearch.action.search.SearchRequest;</span><br><span class="line">import org.elasticsearch.action.search.SearchResponse;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line">import org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line">import org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line">import org.elasticsearch.search.SearchHit;</span><br><span class="line">import org.elasticsearch.search.SearchHits;</span><br><span class="line">import org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line">import org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"></span><br><span class="line">public class QueryDoc &#123;</span><br><span class="line">    </span><br><span class="line">	public static final ElasticsearchTask SEARCH_BY_BOOL_CONDITION = client -&gt; &#123;</span><br><span class="line">        // 创建搜索请求对象</span><br><span class="line">        SearchRequest request = new SearchRequest();</span><br><span class="line">        request.indices(&quot;user&quot;);</span><br><span class="line">        // 构建查询的请求体</span><br><span class="line">        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">        // 必须包含</span><br><span class="line">        boolQueryBuilder.must(QueryBuilders.matchQuery(&quot;age&quot;, &quot;30&quot;));</span><br><span class="line">        // 一定不含</span><br><span class="line">        boolQueryBuilder.mustNot(QueryBuilders.matchQuery(&quot;name&quot;, &quot;zhangsan&quot;));</span><br><span class="line">        // 可能包含</span><br><span class="line">        boolQueryBuilder.should(QueryBuilders.matchQuery(&quot;sex&quot;, &quot;男&quot;));</span><br><span class="line">        sourceBuilder.query(boolQueryBuilder);</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        // 查询匹配</span><br><span class="line">        SearchHits hits = response.getHits();</span><br><span class="line">        System.out.println(&quot;took:&quot; + response.getTook());</span><br><span class="line">        System.out.println(&quot;timeout:&quot; + response.isTimedOut());</span><br><span class="line">        System.out.println(&quot;total:&quot; + hits.getTotalHits());</span><br><span class="line">        System.out.println(&quot;MaxScore:&quot; + hits.getMaxScore());</span><br><span class="line">        System.out.println(&quot;hits========&gt;&gt;&quot;);</span><br><span class="line">        for (SearchHit hit : hits) &#123;</span><br><span class="line">            //输出每条查询的结果信息</span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;&lt;&lt;========&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConnectElasticsearch.connect(SEARCH_BY_BOOL_CONDITION);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">took:28ms</span><br><span class="line">timeout:false</span><br><span class="line">total:1 hits</span><br><span class="line">MaxScore:1.0</span><br><span class="line">hits========&gt;&gt;</span><br><span class="line">&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;</span><br><span class="line">&lt;&lt;========</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h3 id="范围查询-1"><a href="#范围查询-1" class="headerlink" title="范围查询"></a>范围查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.lun.elasticsearch.hello.ConnectElasticsearch;</span><br><span class="line">import com.lun.elasticsearch.hello.ElasticsearchTask;</span><br><span class="line">import org.elasticsearch.action.search.SearchRequest;</span><br><span class="line">import org.elasticsearch.action.search.SearchResponse;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line">import org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line">import org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line">import org.elasticsearch.index.query.RangeQueryBuilder;</span><br><span class="line">import org.elasticsearch.search.SearchHit;</span><br><span class="line">import org.elasticsearch.search.SearchHits;</span><br><span class="line">import org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line">import org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"></span><br><span class="line">public class QueryDoc &#123;</span><br><span class="line">    </span><br><span class="line">	public static final ElasticsearchTask SEARCH_BY_RANGE = client -&gt; &#123;</span><br><span class="line">        // 创建搜索请求对象</span><br><span class="line">        SearchRequest request = new SearchRequest();</span><br><span class="line">        request.indices(&quot;user&quot;);</span><br><span class="line">        // 构建查询的请求体</span><br><span class="line">        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">        RangeQueryBuilder rangeQuery = QueryBuilders.rangeQuery(&quot;age&quot;);</span><br><span class="line">        // 大于等于</span><br><span class="line">        //rangeQuery.gte(&quot;30&quot;);</span><br><span class="line">        // 小于等于</span><br><span class="line">        rangeQuery.lte(&quot;40&quot;);</span><br><span class="line">        sourceBuilder.query(rangeQuery);</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        // 查询匹配</span><br><span class="line">        SearchHits hits = response.getHits();</span><br><span class="line">        System.out.println(&quot;took:&quot; + response.getTook());</span><br><span class="line">        System.out.println(&quot;timeout:&quot; + response.isTimedOut());</span><br><span class="line">        System.out.println(&quot;total:&quot; + hits.getTotalHits());</span><br><span class="line">        System.out.println(&quot;MaxScore:&quot; + hits.getMaxScore());</span><br><span class="line">        System.out.println(&quot;hits========&gt;&gt;&quot;);</span><br><span class="line">        for (SearchHit hit : hits) &#123;</span><br><span class="line">        //输出每条查询的结果信息</span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;&lt;&lt;========&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConnectElasticsearch.connect(SEARCH_BY_RANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">took:1ms</span><br><span class="line">timeout:false</span><br><span class="line">total:5 hits</span><br><span class="line">MaxScore:1.0</span><br><span class="line">hits========&gt;&gt;</span><br><span class="line">&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;</span><br><span class="line">&lt;&lt;========</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h2 id="入门-JavaAPI-文档-高级查询-模糊查询-amp-高亮查询"><a href="#入门-JavaAPI-文档-高级查询-模糊查询-amp-高亮查询" class="headerlink" title="入门-JavaAPI-文档-高级查询-模糊查询 &amp; 高亮查询"></a>入门-JavaAPI-文档-高级查询-模糊查询 &amp; 高亮查询</h2><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.lun.elasticsearch.hello.ConnectElasticsearch;</span><br><span class="line">import com.lun.elasticsearch.hello.ElasticsearchTask;</span><br><span class="line">import org.elasticsearch.action.search.SearchRequest;</span><br><span class="line">import org.elasticsearch.action.search.SearchResponse;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line">import org.elasticsearch.common.unit.Fuzziness;</span><br><span class="line">import org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line">import org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line">import org.elasticsearch.index.query.RangeQueryBuilder;</span><br><span class="line">import org.elasticsearch.search.SearchHit;</span><br><span class="line">import org.elasticsearch.search.SearchHits;</span><br><span class="line">import org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line">import org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"></span><br><span class="line">public class QueryDoc &#123;</span><br><span class="line">    </span><br><span class="line">    public static final ElasticsearchTask SEARCH_BY_FUZZY_CONDITION = client -&gt; &#123;</span><br><span class="line">        // 创建搜索请求对象</span><br><span class="line">        SearchRequest request = new SearchRequest();</span><br><span class="line">        request.indices(&quot;user&quot;);</span><br><span class="line">        // 构建查询的请求体</span><br><span class="line">        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">        sourceBuilder.query(QueryBuilders.fuzzyQuery(&quot;name&quot;,&quot;wangwu&quot;).fuzziness(Fuzziness.ONE));</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        // 查询匹配</span><br><span class="line">        SearchHits hits = response.getHits();</span><br><span class="line">        System.out.println(&quot;took:&quot; + response.getTook());</span><br><span class="line">        System.out.println(&quot;timeout:&quot; + response.isTimedOut());</span><br><span class="line">        System.out.println(&quot;total:&quot; + hits.getTotalHits());</span><br><span class="line">        System.out.println(&quot;MaxScore:&quot; + hits.getMaxScore());</span><br><span class="line">        System.out.println(&quot;hits========&gt;&gt;&quot;);</span><br><span class="line">        for (SearchHit hit : hits) &#123;</span><br><span class="line">            //输出每条查询的结果信息</span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;&lt;&lt;========&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">//        ConnectElasticsearch.connect(SEARCH_ALL);</span><br><span class="line">//        ConnectElasticsearch.connect(SEARCH_BY_CONDITION);</span><br><span class="line">//        ConnectElasticsearch.connect(SEARCH_BY_PAGING);</span><br><span class="line">//        ConnectElasticsearch.connect(SEARCH_WITH_ORDER);</span><br><span class="line">//        ConnectElasticsearch.connect(SEARCH_BY_BOOL_CONDITION);</span><br><span class="line">//        ConnectElasticsearch.connect(SEARCH_BY_RANGE);</span><br><span class="line">        ConnectElasticsearch.connect(SEARCH_BY_FUZZY_CONDITION);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">took:152ms</span><br><span class="line">timeout:false</span><br><span class="line">total:4 hits</span><br><span class="line">MaxScore:1.2837042</span><br><span class="line">hits========&gt;&gt;</span><br><span class="line">&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;</span><br><span class="line">&lt;&lt;========</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h3 id="高亮查询-1"><a href="#高亮查询-1" class="headerlink" title="高亮查询"></a>高亮查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.lun.elasticsearch.hello.ConnectElasticsearch;</span><br><span class="line">import com.lun.elasticsearch.hello.ElasticsearchTask;</span><br><span class="line">import org.elasticsearch.action.search.SearchRequest;</span><br><span class="line">import org.elasticsearch.action.search.SearchResponse;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line">import org.elasticsearch.common.unit.Fuzziness;</span><br><span class="line">import org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line">import org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line">import org.elasticsearch.index.query.RangeQueryBuilder;</span><br><span class="line">import org.elasticsearch.index.query.TermsQueryBuilder;</span><br><span class="line">import org.elasticsearch.search.SearchHit;</span><br><span class="line">import org.elasticsearch.search.SearchHits;</span><br><span class="line">import org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line">import org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;</span><br><span class="line">import org.elasticsearch.search.fetch.subphase.highlight.HighlightField;</span><br><span class="line">import org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class QueryDoc &#123;</span><br><span class="line">    </span><br><span class="line">    public static final ElasticsearchTask SEARCH_WITH_HIGHLIGHT = client -&gt; &#123;</span><br><span class="line">        // 高亮查询</span><br><span class="line">        SearchRequest request = new SearchRequest().indices(&quot;user&quot;);</span><br><span class="line">        //2.创建查询请求体构建器</span><br><span class="line">        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">        //构建查询方式：高亮查询</span><br><span class="line">        TermsQueryBuilder termsQueryBuilder =</span><br><span class="line">                QueryBuilders.termsQuery(&quot;name&quot;,&quot;zhangsan&quot;);</span><br><span class="line">        //设置查询方式</span><br><span class="line">        sourceBuilder.query(termsQueryBuilder);</span><br><span class="line">        //构建高亮字段</span><br><span class="line">        HighlightBuilder highlightBuilder = new HighlightBuilder();</span><br><span class="line">        highlightBuilder.preTags(&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;);//设置标签前缀</span><br><span class="line">        highlightBuilder.postTags(&quot;&lt;/font&gt;&quot;);//设置标签后缀</span><br><span class="line">        highlightBuilder.field(&quot;name&quot;);//设置高亮字段</span><br><span class="line">        //设置高亮构建对象</span><br><span class="line">        sourceBuilder.highlighter(highlightBuilder);</span><br><span class="line">        //设置请求体</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line">        //3.客户端发送请求，获取响应对象</span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        //4.打印响应结果</span><br><span class="line">        SearchHits hits = response.getHits();</span><br><span class="line">        System.out.println(&quot;took::&quot;+response.getTook());</span><br><span class="line">        System.out.println(&quot;time_out::&quot;+response.isTimedOut());</span><br><span class="line">        System.out.println(&quot;total::&quot;+hits.getTotalHits());</span><br><span class="line">        System.out.println(&quot;max_score::&quot;+hits.getMaxScore());</span><br><span class="line">        System.out.println(&quot;hits::::&gt;&gt;&quot;);</span><br><span class="line">        for (SearchHit hit : hits) &#123;</span><br><span class="line">            String sourceAsString = hit.getSourceAsString();</span><br><span class="line">            System.out.println(sourceAsString);</span><br><span class="line">            //打印高亮结果</span><br><span class="line">            Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">            System.out.println(highlightFields);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;&lt;&lt;::::&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConnectElasticsearch.connect(SEARCH_WITH_HIGHLIGHT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">took::672ms</span><br><span class="line">time_out::false</span><br><span class="line">total::1 hits</span><br><span class="line">max_score::1.0</span><br><span class="line">hits::::&gt;&gt;</span><br><span class="line">&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;</span><br><span class="line">&#123;name=[name], fragments[[&lt;font color=&#x27;red&#x27;&gt;zhangsan&lt;/font&gt;]]&#125;</span><br><span class="line">&lt;&lt;::::</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h2 id="入门-JavaAPI-文档-高级查询-最大值查询-amp-分组查询"><a href="#入门-JavaAPI-文档-高级查询-最大值查询-amp-分组查询" class="headerlink" title="入门-JavaAPI-文档-高级查询-最大值查询 &amp; 分组查询"></a>入门-JavaAPI-文档-高级查询-最大值查询 &amp; 分组查询</h2><h3 id="最大值查询"><a href="#最大值查询" class="headerlink" title="最大值查询"></a>最大值查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.lun.elasticsearch.hello.ConnectElasticsearch;</span><br><span class="line">import com.lun.elasticsearch.hello.ElasticsearchTask;</span><br><span class="line">import org.elasticsearch.action.search.SearchRequest;</span><br><span class="line">import org.elasticsearch.action.search.SearchResponse;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line">import org.elasticsearch.common.unit.Fuzziness;</span><br><span class="line">import org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line">import org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line">import org.elasticsearch.index.query.RangeQueryBuilder;</span><br><span class="line">import org.elasticsearch.index.query.TermsQueryBuilder;</span><br><span class="line">import org.elasticsearch.search.SearchHit;</span><br><span class="line">import org.elasticsearch.search.SearchHits;</span><br><span class="line">import org.elasticsearch.search.aggregations.AggregationBuilders;</span><br><span class="line">import org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line">import org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;</span><br><span class="line">import org.elasticsearch.search.fetch.subphase.highlight.HighlightField;</span><br><span class="line">import org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class QueryDoc &#123;</span><br><span class="line">    </span><br><span class="line">    public static final ElasticsearchTask SEARCH_WITH_MAX = client -&gt; &#123;</span><br><span class="line">        // 高亮查询</span><br><span class="line">        SearchRequest request = new SearchRequest().indices(&quot;user&quot;);</span><br><span class="line">        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">        sourceBuilder.aggregation(AggregationBuilders.max(&quot;maxAge&quot;).field(&quot;age&quot;));</span><br><span class="line">        //设置请求体</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line">        //3.客户端发送请求，获取响应对象</span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        //4.打印响应结果</span><br><span class="line">        SearchHits hits = response.getHits();</span><br><span class="line">        System.out.println(response);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConnectElasticsearch.connect(SEARCH_WITH_MAX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;took&quot;:16,&quot;timed_out&quot;:false,&quot;_shards&quot;:&#123;&quot;total&quot;:1,&quot;successful&quot;:1,&quot;skipped&quot;:0,&quot;failed&quot;:0&#125;,&quot;hits&quot;:&#123;&quot;total&quot;:&#123;&quot;value&quot;:6,&quot;relation&quot;:&quot;eq&quot;&#125;,&quot;max_score&quot;:1.0,&quot;hits&quot;:[&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1001&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1002&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1003&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1004&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1005&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1006&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;]&#125;,&quot;aggregations&quot;:&#123;&quot;max#maxAge&quot;:&#123;&quot;value&quot;:50.0&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.lun.elasticsearch.hello.ConnectElasticsearch;</span><br><span class="line">import com.lun.elasticsearch.hello.ElasticsearchTask;</span><br><span class="line">import org.elasticsearch.action.search.SearchRequest;</span><br><span class="line">import org.elasticsearch.action.search.SearchResponse;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line">import org.elasticsearch.common.unit.Fuzziness;</span><br><span class="line">import org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line">import org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line">import org.elasticsearch.index.query.RangeQueryBuilder;</span><br><span class="line">import org.elasticsearch.index.query.TermsQueryBuilder;</span><br><span class="line">import org.elasticsearch.search.SearchHit;</span><br><span class="line">import org.elasticsearch.search.SearchHits;</span><br><span class="line">import org.elasticsearch.search.aggregations.AggregationBuilders;</span><br><span class="line">import org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line">import org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;</span><br><span class="line">import org.elasticsearch.search.fetch.subphase.highlight.HighlightField;</span><br><span class="line">import org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class QueryDoc &#123;</span><br><span class="line"></span><br><span class="line">	public static final ElasticsearchTask SEARCH_WITH_GROUP = client -&gt; &#123;</span><br><span class="line">        SearchRequest request = new SearchRequest().indices(&quot;user&quot;);</span><br><span class="line">        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class="line">        sourceBuilder.aggregation(AggregationBuilders.terms(&quot;age_groupby&quot;).field(&quot;age&quot;));</span><br><span class="line">        //设置请求体</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line">        //3.客户端发送请求，获取响应对象</span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        //4.打印响应结果</span><br><span class="line">        SearchHits hits = response.getHits();</span><br><span class="line">        System.out.println(response);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConnectElasticsearch.connect(SEARCH_WITH_GROUP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;took&quot;:10,&quot;timed_out&quot;:false,&quot;_shards&quot;:&#123;&quot;total&quot;:1,&quot;successful&quot;:1,&quot;skipped&quot;:0,&quot;failed&quot;:0&#125;,&quot;hits&quot;:&#123;&quot;total&quot;:&#123;&quot;value&quot;:6,&quot;relation&quot;:&quot;eq&quot;&#125;,&quot;max_score&quot;:1.0,&quot;hits&quot;:[&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1001&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:&quot;10&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1002&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:&quot;30&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1003&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu1&quot;,&quot;age&quot;:&quot;40&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1004&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu2&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;女&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1005&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu3&quot;,&quot;age&quot;:&quot;50&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;,&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1006&quot;,&quot;_score&quot;:1.0,&quot;_source&quot;:&#123;&quot;name&quot;:&quot;wangwu4&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sex&quot;:&quot;男&quot;&#125;&#125;]&#125;,&quot;aggregations&quot;:&#123;&quot;lterms#age_groupby&quot;:&#123;&quot;doc_count_error_upper_bound&quot;:0,&quot;sum_other_doc_count&quot;:0,&quot;buckets&quot;:[&#123;&quot;key&quot;:20,&quot;doc_count&quot;:2&#125;,&#123;&quot;key&quot;:10,&quot;doc_count&quot;:1&#125;,&#123;&quot;key&quot;:30,&quot;doc_count&quot;:1&#125;,&#123;&quot;key&quot;:40,&quot;doc_count&quot;:1&#125;,&#123;&quot;key&quot;:50,&quot;doc_count&quot;:1&#125;]&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h1 id="Elasticsearch环境"><a href="#Elasticsearch环境" class="headerlink" title="Elasticsearch环境"></a>Elasticsearch环境</h1><h2 id="29-环境-简介"><a href="#29-环境-简介" class="headerlink" title="29-环境-简介"></a>29-环境-简介</h2><h3 id="单机-amp-集群"><a href="#单机-amp-集群" class="headerlink" title="单机 &amp; 集群"></a>单机 &amp; 集群</h3><p>单台 Elasticsearch 服务器提供服务，往往都有最大的负载能力，超过这个阈值，服务器<br>性能就会大大降低甚至不可用，所以生产环境中，一般都是运行在指定服务器集群中。<br>除了负载能力，单点服务器也存在其他问题：</p>
<ul>
<li>单台机器存储容量有限</li>
<li>单服务器容易出现单点故障，无法实现高可用</li>
<li>单服务的并发处理能力有限</li>
</ul>
<p>配置服务器集群时，集群中节点数量没有限制，大于等于 2 个节点就可以看做是集群了。一<br>般出于高性能及高可用方面来考虑集群中节点数量都是 3 个以上</p>
<p>总之，集群能提高性能，增加容错。</p>
<p>集群 Cluster<br><strong>一个集群就是由一个或多个服务器节点组织在一起，共同持有整个的数据，并一起提供索引和搜索功能。</strong>一个 Elasticsearch 集群有一个唯一的名字标识，这个名字默认就是”elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群。</p>
<h3 id="节点-Node"><a href="#节点-Node" class="headerlink" title="节点 Node"></a>节点 Node</h3><p>集群中包含很多服务器， 一个节点就是其中的一个服务器。 作为集群的一部分，它存储数据，参与集群的索引和搜索功能。</p>
<p>一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于 Elasticsearch 集群中的哪些节点。</p>
<p>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。</p>
<p>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何 Elasticsearch 节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。</p>
<h2 id="环境-Windows集群部署"><a href="#环境-Windows集群部署" class="headerlink" title="环境-Windows集群部署"></a>环境-Windows集群部署</h2><h3 id="部署集群"><a href="#部署集群" class="headerlink" title="部署集群"></a>部署集群</h3><p>一、创建 elasticsearch-cluster 文件夹</p>
<p>创建 elasticsearch-7.8.0-cluster 文件夹，在内部复制三个 elasticsearch 服务。</p>
<p><img src="https://s2.loli.net/2022/03/05/r5jZ7ubJxvLSKiI.png" alt="image-20220305172606622"></p>
<p>修改集群文件目录中每个节点的 config/elasticsearch.yml 配置文件</p>
<p><strong>node-1001 节点</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#节点 1 的配置信息：</span><br><span class="line">#集群名称，节点之间要保持一致</span><br><span class="line">cluster.name: my-elasticsearch</span><br><span class="line">#节点名称，集群内要唯一</span><br><span class="line">node.name: node-1001</span><br><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br><span class="line">#ip 地址</span><br><span class="line">network.host: localhost</span><br><span class="line">#http 端口</span><br><span class="line">http.port: 1001</span><br><span class="line">#tcp 监听端口</span><br><span class="line">transport.tcp.port: 9301</span><br><span class="line">#discovery.seed_hosts: [&quot;localhost:9301&quot;, &quot;localhost:9302&quot;,&quot;localhost:9303&quot;]</span><br><span class="line">#discovery.zen.fd.ping_timeout: 1m</span><br><span class="line">#discovery.zen.fd.ping_retries: 5</span><br><span class="line">#集群内的可以被选为主节点的节点列表</span><br><span class="line">#cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;,&quot;node-3&quot;]</span><br><span class="line">#跨域配置</span><br><span class="line">#action.destructive_requires_name: true</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure>

<p><strong>node-1002 节点</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#节点 2 的配置信息：</span><br><span class="line">#集群名称，节点之间要保持一致</span><br><span class="line">cluster.name: my-elasticsearch</span><br><span class="line">#节点名称，集群内要唯一</span><br><span class="line">node.name: node-1002</span><br><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br><span class="line">#ip 地址</span><br><span class="line">network.host: localhost</span><br><span class="line">#http 端口</span><br><span class="line">http.port: 1002</span><br><span class="line">#tcp 监听端口</span><br><span class="line">transport.tcp.port: 9302</span><br><span class="line">discovery.seed_hosts: [&quot;localhost:9301&quot;]</span><br><span class="line">discovery.zen.fd.ping_timeout: 1m</span><br><span class="line">discovery.zen.fd.ping_retries: 5</span><br><span class="line">#集群内的可以被选为主节点的节点列表</span><br><span class="line">#cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;,&quot;node-3&quot;]</span><br><span class="line">#跨域配置</span><br><span class="line">#action.destructive_requires_name: true</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure>

<p><strong>node-1003 节点</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#节点 3 的配置信息：</span><br><span class="line">#集群名称，节点之间要保持一致</span><br><span class="line">cluster.name: my-elasticsearch</span><br><span class="line">#节点名称，集群内要唯一</span><br><span class="line">node.name: node-1003</span><br><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br><span class="line">#ip 地址</span><br><span class="line">network.host: localhost</span><br><span class="line">#http 端口</span><br><span class="line">http.port: 1003</span><br><span class="line">#tcp 监听端口</span><br><span class="line">transport.tcp.port: 9303</span><br><span class="line">#候选主节点的地址，在开启服务后可以被选为主节点</span><br><span class="line">discovery.seed_hosts: [&quot;localhost:9301&quot;, &quot;localhost:9302&quot;]</span><br><span class="line">discovery.zen.fd.ping_timeout: 1m</span><br><span class="line">discovery.zen.fd.ping_retries: 5</span><br><span class="line">#集群内的可以被选为主节点的节点列表</span><br><span class="line">#cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;,&quot;node-3&quot;]</span><br><span class="line">#跨域配置</span><br><span class="line">#action.destructive_requires_name: true</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure>

<p>如果有必要，删除每个节点中的 data 目录中所有内容 。</p>
<h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><p>分别依次双击执行节点的bin/elasticsearch.bat, 启动节点服务器（可以编写一个脚本启动），启动后，会自动加入指定名称的集群。</p>
<h3 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h3><p>一、用Postman，查看集群状态</p>
<ol>
<li><code>GET http://127.0.0.1:1001/_cluster/health</code></li>
<li><code>GET http://127.0.0.1:1002/_cluster/health</code></li>
<li><code>GET http://127.0.0.1:1003/_cluster/health</code></li>
</ol>
<p>返回结果皆为如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;cluster_name&quot;: &quot;my-application&quot;,</span><br><span class="line">    &quot;status&quot;: &quot;green&quot;,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;number_of_nodes&quot;: 3,</span><br><span class="line">    &quot;number_of_data_nodes&quot;: 3,</span><br><span class="line">    &quot;active_primary_shards&quot;: 0,</span><br><span class="line">    &quot;active_shards&quot;: 0,</span><br><span class="line">    &quot;relocating_shards&quot;: 0,</span><br><span class="line">    &quot;initializing_shards&quot;: 0,</span><br><span class="line">    &quot;unassigned_shards&quot;: 0,</span><br><span class="line">    &quot;delayed_unassigned_shards&quot;: 0,</span><br><span class="line">    &quot;number_of_pending_tasks&quot;: 0,</span><br><span class="line">    &quot;number_of_in_flight_fetch&quot;: 0,</span><br><span class="line">    &quot;task_max_waiting_in_queue_millis&quot;: 0,</span><br><span class="line">    &quot;active_shards_percent_as_number&quot;: 100.0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>status字段</strong>指示着当前集群在总体上是否工作正常。它的三种颜色含义如下：</p>
<ol>
<li>green：所有的主分片和副本分片都正常运行。</li>
<li>yellow：所有的主分片都正常运行，但不是所有的副本分片都正常运行。</li>
<li>red：有主分片没能正常运行。</li>
</ol>
<p>用Postman，在一节点增加索引，另一节点获取索引</p>
<p>向集群中的node-1001节点增加索引：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#PUT http:<span class="comment">//127.0.0.1:1001/user</span></span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;acknowledged&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;shards_acknowledged&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;user&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>向集群中的node-1003节点获取索引：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#GET http:<span class="comment">//127.0.0.1:1003/user</span></span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;user&quot;: &#123;</span><br><span class="line">        &quot;aliases&quot;: &#123;&#125;,</span><br><span class="line">        &quot;mappings&quot;: &#123;&#125;,</span><br><span class="line">        &quot;settings&quot;: &#123;</span><br><span class="line">            &quot;index&quot;: &#123;</span><br><span class="line">                &quot;creation_date&quot;: &quot;1617993035885&quot;,</span><br><span class="line">                &quot;number_of_shards&quot;: &quot;1&quot;,</span><br><span class="line">                &quot;number_of_replicas&quot;: &quot;1&quot;,</span><br><span class="line">                &quot;uuid&quot;: &quot;XJKERwQlSJ6aUxZEN2EV0w&quot;,</span><br><span class="line">                &quot;version&quot;: &#123;</span><br><span class="line">                    &quot;created&quot;: &quot;7080099&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;provided_name&quot;: &quot;user&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果在1003创建索引，同样在1001也能获取索引信息，这就是集群能力。</p>
<h2 id="环境-Linux单节点部署"><a href="#环境-Linux单节点部署" class="headerlink" title="环境-Linux单节点部署"></a>环境-Linux单节点部署</h2><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><p>一、下载软件</p>
<p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0">下载Linux版的Elasticsearch</a></p>
<p>二、解压软件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 解压缩</span><br><span class="line">tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz -C /opt/module</span><br><span class="line"># 改名</span><br><span class="line">mv elasticsearch-7.8.0 es</span><br></pre></td></tr></table></figure>

<p>三、创建用户</p>
<p>因为安全问题， Elasticsearch 不允许 root 用户直接运行，所以要创建新用户，在 root 用户中创建新用户。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd es #新增 es 用户</span><br><span class="line">passwd es #为 es 用户设置密码</span><br><span class="line">userdel -r es #如果错了，可以删除再加</span><br><span class="line">chown -R es:es /opt/module/es #文件夹所有者</span><br></pre></td></tr></table></figure>

<p>四、修改配置文件</p>
<p>修改/opt/module/es/config/elasticsearch.yml文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 加入如下配置</span><br><span class="line">cluster.name: elasticsearch</span><br><span class="line">node.name: node-1</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;]</span><br></pre></td></tr></table></figure>

<p>修改/etc/security/limits.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在文件末尾中增加下面内容</span><br><span class="line"># 每个进程可以打开的文件数的限制</span><br><span class="line">es soft nofile 65536</span><br><span class="line">es hard nofile 65536</span><br></pre></td></tr></table></figure>

<p>修改/etc/security/limits.d/20-nproc.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在文件末尾中增加下面内容</span><br><span class="line"># 每个进程可以打开的文件数的限制</span><br><span class="line">es soft nofile 65536</span><br><span class="line">es hard nofile 65536</span><br><span class="line"># 操作系统级别对每个用户创建的进程数的限制</span><br><span class="line">* hard nproc 4096</span><br><span class="line"># 注： * 带表 Linux 所有用户名称</span><br></pre></td></tr></table></figure>

<p>修改/etc/sysctl.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在文件中增加下面内容</span><br><span class="line"># 一个进程可以拥有的 VMA(虚拟内存区域)的数量,默认值为 65536</span><br><span class="line">vm.max_map_count=655360</span><br></pre></td></tr></table></figure>

<p>重新加载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<h3 id="启动软件"><a href="#启动软件" class="headerlink" title="启动软件"></a>启动软件</h3><p>使用 ES 用户启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt/module/es/</span><br><span class="line">#启动</span><br><span class="line">bin/elasticsearch</span><br><span class="line">#后台启动</span><br><span class="line">bin/elasticsearch -d  </span><br></pre></td></tr></table></figure>

<p>启动时，会动态生成文件，如果文件所属用户不匹配，会发生错误，需要重新进行修改用户和用户组</p>
<p><img src="https://s2.loli.net/2022/03/05/ybLOQrqWwHzPCS4.png" alt="image-20220305174824379"></p>
<p>关闭防火墙</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#暂时关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">#永久关闭防火墙</span><br><span class="line">systemctl enable firewalld.service #打开防火墙永久性生效，重启后不会复原</span><br><span class="line">systemctl disable firewalld.service #关闭防火墙，永久性生效，重启后不会复原</span><br></pre></td></tr></table></figure>

<h3 id="测试软件"><a href="#测试软件" class="headerlink" title="测试软件"></a>测试软件</h3><p>浏览器中输入地址： <a href="http://linux1:9200/">http://linux1:9200/</a></p>
<p><img src="https://s2.loli.net/2022/03/05/OYLXu4xWNc7gRHp.png" alt="image-20220305174856148"></p>
<h2 id="32-环境-Linux集群部署"><a href="#32-环境-Linux集群部署" class="headerlink" title="32-环境-Linux集群部署"></a>32-环境-Linux集群部署</h2><h3 id="软件安装-1"><a href="#软件安装-1" class="headerlink" title="软件安装"></a>软件安装</h3><p>一、下载软件</p>
<p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0">下载Linux版的Elasticsearch</a></p>
<p>二、解压软件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压缩</span></span><br><span class="line">tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz -C /opt/module</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改名</span></span><br><span class="line">mv elasticsearch-7.8.0 es-cluster</span><br></pre></td></tr></table></figure>

<p>将软件分发到其他节点： linux2, linux3</p>
<p>三、创建用户</p>
<p>因为安全问题， Elasticsearch 不允许 root 用户直接运行，所以要创建新用户，在 root 用户中创建新用户。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd es #新增 es 用户</span><br><span class="line">passwd es #为 es 用户设置密码</span><br><span class="line">userdel -r es #如果错了，可以删除再加</span><br><span class="line">chown -R es:es /opt/module/es #文件夹所有者</span><br></pre></td></tr></table></figure>

<p>四、修改配置文件</p>
<p>修改/opt/module/es/config/elasticsearch.yml 文件，分发文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 加入如下配置</span><br><span class="line">#集群名称</span><br><span class="line">cluster.name: cluster-es</span><br><span class="line">#节点名称， 每个节点的名称不能重复</span><br><span class="line">node.name: node-1</span><br><span class="line">#ip 地址， 每个节点的地址不能重复</span><br><span class="line">network.host: linux1</span><br><span class="line">#是不是有资格主节点</span><br><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br><span class="line">http.port: 9200</span><br><span class="line"># head 插件需要这打开这两个配置</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.max_content_length: 200mb</span><br><span class="line">#es7.x 之后新增的配置，初始化一个新的集群时需要此配置来选举 master</span><br><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;]</span><br><span class="line">#es7.x 之后新增的配置，节点发现</span><br><span class="line">discovery.seed_hosts: [&quot;linux1:9300&quot;,&quot;linux2:9300&quot;,&quot;linux3:9300&quot;]</span><br><span class="line">gateway.recover_after_nodes: 2</span><br><span class="line">network.tcp.keep_alive: true</span><br><span class="line">network.tcp.no_delay: true</span><br><span class="line">transport.tcp.compress: true</span><br><span class="line">#集群内同时启动的数据任务个数，默认是 2 个</span><br><span class="line">cluster.routing.allocation.cluster_concurrent_rebalance: 16</span><br><span class="line">#添加或删除节点及负载均衡时并发恢复的线程个数，默认 4 个</span><br><span class="line">cluster.routing.allocation.node_concurrent_recoveries: 16</span><br><span class="line">#初始化数据恢复时，并发恢复线程的个数，默认 4 个</span><br><span class="line">cluster.routing.allocation.node_initial_primaries_recoveries: 16</span><br></pre></td></tr></table></figure>

<p>修改/etc/security/limits.conf ，分发文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在文件末尾中增加下面内容</span><br><span class="line">es soft nofile 65536</span><br><span class="line">es hard nofile 65536</span><br></pre></td></tr></table></figure>

<p>修改/etc/security/limits.d/20-nproc.conf，分发文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在文件末尾中增加下面内容</span><br><span class="line">es soft nofile 65536</span><br><span class="line">es hard nofile 65536</span><br><span class="line">\* hard nproc 4096</span><br><span class="line">\# 注： * 带表 Linux 所有用户名称</span><br></pre></td></tr></table></figure>

<p>修改/etc/sysctl.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在文件中增加下面内容</span><br><span class="line">vm.max_map_count=655360</span><br></pre></td></tr></table></figure>

<p>重新加载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<h3 id="启动软件-1"><a href="#启动软件-1" class="headerlink" title="启动软件"></a>启动软件</h3><p>分别在不同节点上启动 ES 软件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt/module/es-cluster</span><br><span class="line">#启动</span><br><span class="line">bin/elasticsearch</span><br><span class="line">#后台启动</span><br><span class="line">bin/elasticsearch -d</span><br></pre></td></tr></table></figure>

<h3 id="测试集群-1"><a href="#测试集群-1" class="headerlink" title="测试集群"></a>测试集群</h3><p><img src="https://s2.loli.net/2022/03/05/Crf4jRTlUJaXEik.png" alt="image-20220305175104984"></p>
<h3 id="索引Index"><a href="#索引Index" class="headerlink" title="索引Index"></a>索引Index</h3><p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母），并且当我们要对这个索引中的文档进行索引、搜索、更新和删除（CRUD）的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索引。</p>
<p>能搜索的数据必须索引，这样的好处是可以提高查询速度，比如：新华字典前面的目录就是索引的意思，目录可以提高查询速度。</p>
<p><strong>Elasticsearch 索引的精髓：一切设计都是为了提高搜索的性能。</strong></p>
<h3 id="类型Type"><a href="#类型Type" class="headerlink" title="类型Type"></a>类型Type</h3><p>在一个索引中，你可以定义一种或多种类型。</p>
<p>一个类型是你的索引的一个逻辑上的分类/分区，其语义完全由你来定。通常，会为具<br>有一组共同字段的文档定义一个类型。不同的版本，类型发生了不同的变化。</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>Type</th>
</tr>
</thead>
<tbody><tr>
<td>5.x</td>
<td>支持多种 type</td>
</tr>
<tr>
<td>6.x</td>
<td>只能有一种 type</td>
</tr>
<tr>
<td>7.x</td>
<td>默认不再支持自定义索引类型（默认类型为： _doc）</td>
</tr>
</tbody></table>
<h1 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h1><h3 id="京东搜索项目实战："><a href="#京东搜索项目实战：" class="headerlink" title="京东搜索项目实战："></a>京东搜索项目实战：</h3><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><h4 id="数据问题-数据库，消息队列中获取，都可以成为数据源"><a href="#数据问题-数据库，消息队列中获取，都可以成为数据源" class="headerlink" title="数据问题?数据库，消息队列中获取，都可以成为数据源"></a>数据问题?数据库，消息队列中获取，都可以成为数据源</h4><h5 id="爬取数据：（获取请求返回页面信息，筛选处我们想要的数据就可以了"><a href="#爬取数据：（获取请求返回页面信息，筛选处我们想要的数据就可以了" class="headerlink" title="爬取数据：（获取请求返回页面信息，筛选处我们想要的数据就可以了)"></a>爬取数据：（获取请求返回页面信息，筛选处我们想要的数据就可以了)</h5><p>jsoup包！</p>
<p>1.导入依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jsoup解析网页</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.jsoup&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jsoup&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.10.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><h3 id="搜索高亮"><a href="#搜索高亮" class="headerlink" title="搜索高亮"></a>搜索高亮</h3>]]></content>
      <categories>
        <category>JAVA</category>
        <category>Elasticsearch</category>
      </categories>
  </entry>
  <entry>
    <title>hexo框架搭建博客</title>
    <url>/2016/10/12/index/</url>
    <content><![CDATA[<h1 id="Hexo-theme-diaspora"><a href="#Hexo-theme-diaspora" class="headerlink" title="Hexo-theme-diaspora"></a>Hexo-theme-diaspora</h1><p><strong><a href="http://fech.in/">在线预览 | PREVIEW </a></strong></p>
<p>一款基于WP移植的Hexo主题，适合喜欢摄影，影评，乐评和玩弄文字的你，干净，清新； 响应式，Ajax，更多好玩的等你来发现。 </p>
<blockquote>
<p>再次感谢原作者创作出这么精美的主题 <a href="https://github.com/LoeiFy/Diaspora">@Loeify</a> 。如果你喜欢，请捐助原作者。</p>
</blockquote>
<p><img src="https://fech.in/static/images/Diaspora.jpg" alt="cover"></p>
<h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/Fechin/hexo-theme-diaspora.git themes/diaspora</span><br></pre></td></tr></table></figure>


<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>修改Hexo配置文件 <code>_config.yml</code> 主题项设置为diaspora</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">diaspora</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>

<h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><p>注意：请在更时主题时备份<code>_config.yml</code>配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/diaspora</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>


<h3 id="新建文章模板"><a href="#新建文章模板" class="headerlink" title="新建文章模板"></a>新建文章模板</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: My awesome title</span><br><span class="line">date: 2016-10-12 18:38:45</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">    -</span> 分类1</span><br><span class="line"><span class="bullet">    -</span> 分类2</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">    -</span> 标签1</span><br><span class="line"><span class="bullet">    -</span> 标签2</span><br><span class="line">mp3: http://domain.com/awesome.mp3</span><br><span class="line"><span class="section">cover: http://domain.com/awesome.jpg</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<h3 id="创建分类页"><a href="#创建分类页" class="headerlink" title="创建分类页"></a>创建分类页</h3><p>1 新建一个页面，命名为 categories 。命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>2 编辑刚新建的页面，将页面的类型设置为 categories</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>主题将自动为这个页面显示所有分类。</p>
<h3 id="创建标签页"><a href="#创建标签页" class="headerlink" title="创建标签页"></a>创建标签页</h3><p>1 新建一个页面，命名为 tags 。命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<p>2 编辑刚新建的页面，将页面的类型设置为 tags</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>主题将自动为这个页面显示所有标签。</p>
<h3 id="创建搜索页"><a href="#创建搜索页" class="headerlink" title="创建搜索页"></a>创建搜索页</h3><p>1 需要安装hexo的搜索插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>2 配置hexo全局配置文件（请将生成的索引文件放在网站根目录或修改主题js文件的path值）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>3 新建一个页面，命名为 search 。命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page search</span><br></pre></td></tr></table></figure>

<p>4 编辑刚新建的页面，将页面的类型设置为 search</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: search</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;search&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>5 在主题配置文件启用本地搜索</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#本地搜索,请将索引文件放在网站根目录</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">    <span class="comment">#是否启用</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>主题将自动为这个页面显示搜索功能。</p>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 头部菜单，title: link</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives</span>  </span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示目录</span></span><br><span class="line"><span class="attr">TOC:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否自动播放音乐</span></span><br><span class="line"><span class="attr">autoplay:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认音乐（随机播放）</span></span><br><span class="line"><span class="attr">mp3:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">http://link.hhtjim.com/163/425570952.mp3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">http://link.hhtjim.com/163/425570952.mp3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页封面图, 为空时取文章的cover作为封面(注意跨域问题,建议使用同源图片)</span></span><br><span class="line"><span class="attr">welcome_cover:</span> <span class="string">/img/welcome-cover.jpg</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认文章封面图（随机调用,支持外链）</span></span><br><span class="line"><span class="attr">cover:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">/img/cover.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/img/welcome-cover.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示Twitter分享卡片图像(图像尺寸要求：1200*600，creatorid不需要带@符号。注意：链接必须是完整url，否则Twitter将无法读取图片信息）</span></span><br><span class="line"><span class="attr">twitterpic:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">src:</span> <span class="string">https://bangdream.moe/img/ident.png</span></span><br><span class="line">  <span class="attr">creatorid:</span> <span class="string">yourtwitteridhere</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否关闭默认滚动条</span></span><br><span class="line"><span class="attr">scrollbar:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地搜索,请将索引文件放在网站根目录,或修改主题js文件的path值</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">    <span class="comment"># 是否启用</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示 一言(hitokoto)</span></span><br><span class="line"><span class="attr">hitokoto:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接(可选:facebook,twitter,github,wechat,email)</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">    <span class="attr">facebook:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">twitter:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">wechat:</span> <span class="string">/img/logo.png</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">mailto:xxxx@gmail.com</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 备案</span></span><br><span class="line"><span class="attr">beian:</span> </span><br><span class="line">    <span class="comment"># 是否显示备案信息</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否在主页面最底下显示备案信息(虽然丑，但是完全满足规定要求)</span></span><br><span class="line">    <span class="attr">enableFooter:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 备案号</span></span><br><span class="line">    <span class="attr">beianInfo:</span> <span class="string">冀ICP备xxxxxxx号</span></span><br><span class="line">    <span class="comment"># 链接地址</span></span><br><span class="line">    <span class="attr">link:</span> <span class="string">http://www.beian.miit.gov.cn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否使用mathjax</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Gitalk 评论插件（https://github.com/gitalk/gitalk）</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">    <span class="comment"># 是否启用评论功能</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 是否自动展开评论框</span></span><br><span class="line">    <span class="attr">autoExpand:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 应用编号</span></span><br><span class="line">    <span class="attr">clientID:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 应用秘钥</span></span><br><span class="line">    <span class="attr">clientSecret:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># issue仓库名</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># Github名</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># Github名</span></span><br><span class="line">    <span class="attr">admin:</span> [<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">    <span class="comment"># Ensure uniqueness and length less than 50</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">location.pathname</span></span><br><span class="line">    <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">    <span class="attr">distractionFreeMode:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站关键字</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">Fechin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要使用google_analytics进行统计的话，这里需要配置ID</span></span><br><span class="line"><span class="attr">google_analytics:</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站ico</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rss文件</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">atom.xml</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>mybatis-plus</title>
    <url>/2022/03/12/mybatis-plus/</url>
    <content><![CDATA[<h1 id="Mapper层中配置："><a href="#Mapper层中配置：" class="headerlink" title="Mapper层中配置："></a>Mapper层中配置：</h1><h4 id="RightsMapper类"><a href="#RightsMapper类" class="headerlink" title="RightsMapper类:"></a>RightsMapper类:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.jt.pojo.Rights;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">@Mapper</span><br><span class="line">public interface RightsMapper &#123;</span><br><span class="line">    public List&lt;Rights&gt; getRightsList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="resources-mappers下面配置写"><a href="#resources-mappers下面配置写" class="headerlink" title="resources/mappers下面配置写:"></a>resources/mappers下面配置写:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.jt.mapper.RightsMapper&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;getRightsList&quot; resultMap=&quot;rightRM&quot;&gt;</span><br><span class="line">        SELECT * FROM</span><br><span class="line">            (SELECT * FROM rights WHERE parent_id = 0)p</span><br><span class="line">	    LEFT JOIN</span><br><span class="line">            (SELECT id c_id,NAME c_name,parent_id c_parent_id,</span><br><span class="line">        path c_path,LEVEL c_level,created c_created,</span><br><span class="line">        updated c_updated FROM rights) c</span><br><span class="line">            ON p.id = c.c_parent_id</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=&quot;rightRM&quot; type=&quot;Rights&quot; autoMapping=&quot;true&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/id&gt;</span><br><span class="line"></span><br><span class="line">        &lt;collection property=&quot;children&quot; ofType=&quot;Rights&quot;&gt;</span><br><span class="line">            &lt;id column=&quot;c_id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;</span><br><span class="line">            &lt;result column=&quot;c_name&quot; property=&quot;name&quot;&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result column=&quot;c_parent_id&quot; property=&quot;parentId&quot;&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result column=&quot;c_path&quot; property=&quot;path&quot;&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result column=&quot;c_level&quot; property=&quot;level&quot;&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result column=&quot;c_created&quot; property=&quot;created&quot;&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result column=&quot;c_updated&quot; property=&quot;updated&quot;&gt;&lt;/result&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<h4 id="application-yml文件中配置"><a href="#application-yml文件中配置" class="headerlink" title="application.yml文件中配置"></a>application.yml文件中配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#SpringBoot整合Mybatis</span><br><span class="line">mybatis-plus:</span><br><span class="line">  #指定别名包</span><br><span class="line">  type-aliases-package: com.jt.pojo</span><br><span class="line">  #扫描指定路径下的映射文件</span><br><span class="line">  mapper-locations: classpath:/mappers/*.xml</span><br><span class="line">  #开启驼峰映射</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">    cache-enabled: true</span><br><span class="line">  # 一二级缓存默认开始 所以可以简化</span><br></pre></td></tr></table></figure>

















]]></content>
      <categories>
        <category>mybatis</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>mysql基础总结</title>
    <url>/2021/12/23/mysql%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="01、什么是数据库，为什么要学习数据库"><a href="#01、什么是数据库，为什么要学习数据库" class="headerlink" title="01、什么是数据库，为什么要学习数据库"></a>01、什么是数据库，为什么要学习数据库</h1><p>javaEE：企业级java开发  Web</p>
<p>前端（页面：展示，数据！）</p>
<p>后台（连接点：连接数据库JDBC，连接前端（控制，控制视图跳转，和给前端传递数据））</p>
<p>数据库（存数据）</p>
<h2 id="1-为什么学习数据库"><a href="#1-为什么学习数据库" class="headerlink" title="1.为什么学习数据库"></a>1.为什么学习数据库</h2><ol>
<li>岗位需求</li>
<li>现在的世界，大数据时代，得数据者得天下</li>
<li>被迫需求：存数据</li>
<li> <strong>数据库是所有软件体系中最核心的存在</strong></li>
</ol>
<h2 id="2-什么是数据库"><a href="#2-什么是数据库" class="headerlink" title="2.什么是数据库"></a>2.什么是数据库</h2><p>数据库（DB,database）</p>
<p>概念：数据仓库，软件，安装在操作系统(window,linux,mac…)之上。SQL，可以存储大量的数据，500w！</p>
<p>作用：存储数据，管理数据</p>
<h1 id="02、初始MySQL，关系型和非关系型数据库区别"><a href="#02、初始MySQL，关系型和非关系型数据库区别" class="headerlink" title="02、初始MySQL，关系型和非关系型数据库区别"></a>02、初始MySQL，关系型和非关系型数据库区别</h1><h2 id="1-数据库分类"><a href="#1-数据库分类" class="headerlink" title="1.数据库分类"></a>1.数据库分类</h2><p><strong>关系型数据库：(SQL)</strong></p>
<ul>
<li>MySQL、oracle、SqlServer、DB2、SQLLITE</li>
<li>通过表和表之间，行和列之间的关系进行数据的存储。</li>
</ul>
<p><strong>非关系型数据库：(NoSQL) not only</strong></p>
<ul>
<li>Redis、mongdb</li>
<li>非关系型数据库，对象存储，通过对象的自身的属性来决定。</li>
</ul>
<p><strong>DBMS(数据库管理系统)</strong></p>
<ul>
<li>数据库的管理软件，科学有效的管理我们的数据，维护和获取数据</li>
<li>MySQL，数据库管理系统</li>
</ul>
<h3 id="MySQL数据存放在哪里？"><a href="#MySQL数据存放在哪里？" class="headerlink" title="MySQL数据存放在哪里？"></a>MySQL数据存放在哪里？</h3><p>在MySQL的配置文件my.ini中会进行默认配置</p>
<p><img src="https://s2.loli.net/2022/03/12/FLweZO8JAjIh2nK.png" alt="image-20220312143737332"></p>
<h2 id="2-MySQL简介"><a href="#2-MySQL简介" class="headerlink" title="2.MySQL简介"></a>2.MySQL简介</h2><p>MySQL是一个**<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/696511">关系型数据库管理系统</a>**</p>
<p>前世：瑞典MySQL AB 公司开发</p>
<p>今生：属于 <a href="https://baike.baidu.com/item/Oracle">Oracle</a> 旗下产品</p>
<p>MySQL是最好的 <a href="https://baike.baidu.com/item/RDBMS/1048260">RDBMS</a> (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p>
<p>开源的数据库软件</p>
<p>体积小、速度快、总体拥有成本低，招人成本比较低，所以人必须会用~</p>
<p>中小型网站，或者大型网站，集群！</p>
<p>官网：<a href="https://www.mysql.com/">MySQL</a></p>
<p>安装建议：</p>
<ol>
<li>尽量不要使用exe，注册表</li>
<li>尽可能使用压缩包安装~</li>
</ol>
<h1 id="03、安装MySQL详细说明"><a href="#03、安装MySQL详细说明" class="headerlink" title="03、安装MySQL详细说明"></a>03、安装MySQL详细说明</h1><h2 id="1-1安装MariaDB-选择安装一个-建议玛利亚"><a href="#1-1安装MariaDB-选择安装一个-建议玛利亚" class="headerlink" title="1.1安装MariaDB(选择安装一个,建议玛利亚)"></a>1.1安装MariaDB(选择安装一个,建议玛利亚)</h2><p>一直下一步就行,如果电脑上安装了mysql,那么把端口号改成3307,账号密码都设置为root</p>
<h2 id="1-2安装mysql-选一个安装-不要装两个"><a href="#1-2安装mysql-选一个安装-不要装两个" class="headerlink" title="1.2安装mysql(选一个安装,不要装两个)"></a>1.2安装mysql(选一个安装,不要装两个)</h2><p>建议安装mysql8,一直下一步就行了,安装mysql5步骤有点复杂,就不去搞了</p>
<p>如果你想cmd直接启动mysql就去加一个系统变量Path即可</p>
<ol>
<li><p>如果你没有配置环境变量,那么就去你mysql的安装路径下面的bin目录上面的搜索框输入cmd后按回车(-p后面不要加空格)</p>
<p>如果要进入mariaDB,就进入MariaDB的bin目录,在搜索框输入cmd后按回车</p>
</li>
</ol>
<h2 id="2-安装遇到的问题"><a href="#2-安装遇到的问题" class="headerlink" title="2.安装遇到的问题"></a>2.安装遇到的问题</h2><ol>
<li>执行mysqld -install报错如下的话</li>
</ol>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210610221326629.png" alt="image-20210610221326629"></p>
<p>可以先安装下面这个即可</p>
<p><a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=40784">Download Visual C++ Redistributable Packages for Visual Studio 2013 from Official Microsoft Download Center</a></p>
<h1 id="04、sqlyog软件安装和使用"><a href="#04、sqlyog软件安装和使用" class="headerlink" title="04、sqlyog软件安装和使用"></a>04、sqlyog软件安装和使用</h1><ol>
<li>无脑安装</li>
<li>注册</li>
<li>打开连接数据库</li>
</ol>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210614090411318.png" alt="image-20210614090411318"></p>
<p>界面</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210614090317586.png" alt="image-20210614090317586"></p>
<p>这里与之前data文件夹对应</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210614090352253.png" alt="image-20210614090352253"></p>
<ol start="4">
<li><p>新建一个数据库 school</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210614090908854.png" alt="image-20210614090908854"></p>
<p>查看历史记录可以查到对应如下语句：</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210614091135625.png" alt="image-20210614091135625"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `school`<span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci; </span><br></pre></td></tr></table></figure>

<p>==每一个sqlyog的执行操作，本质就是对应了一个sql,可以在软件的历史记录中查看==</p>
</li>
<li><p>新建一张表student（id，姓名，年龄）</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210614091827019.png" alt="image-20210614091827019"></p>
</li>
<li><p>查看表</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210614092224514.png" alt="image-20210614092224514"></p>
</li>
<li><p>自己尝试添加多条记录</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210614092313191.png" alt="image-20210614092313191"></p>
</li>
</ol>
<h1 id="05、基本的命令行操作"><a href="#05、基本的命令行操作" class="headerlink" title="05、基本的命令行操作"></a>05、基本的命令行操作</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p  <span class="comment">-- 连接数据库(p后面不要加空格)</span></span><br><span class="line"></span><br><span class="line">update mysql.user <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;123456&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> host<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span>; <span class="comment">-- 修改用户密码 不要去乱改密码!!!!,教你不是让你去改密码,是让你知道遇到了可以怎么做</span></span><br><span class="line"></span><br><span class="line">flush privileges; <span class="comment">-- 刷新权限</span></span><br><span class="line"><span class="comment">----------------------------</span></span><br><span class="line"><span class="comment">-- 所有的语句都使用;结尾</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> databases; <span class="comment">-- 查看所有的数据库</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> use school; <span class="comment">-- 切换数据库  use 数据库名</span></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables; <span class="comment">-- 显示数据库中所有表的信息</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">describe</span> student; <span class="comment">-- 显示表的详细信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database bs;  <span class="comment">-- 创建一个数据库（这里过于简洁，后面详细介绍）</span></span><br><span class="line"></span><br><span class="line">exit <span class="comment">-- 退出连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单行注释</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>DDL 数据库<strong>定义</strong>语言</p>
<p>DML 数据库<strong>操作</strong>语言</p>
<p>DQL 数据库<strong>查询</strong>语言</p>
<p>DCL 数据库<strong>控制</strong>语言</p>
<h1 id="06、操作数据库语句"><a href="#06、操作数据库语句" class="headerlink" title="06、操作数据库语句"></a>06、操作数据库语句</h1><p>操作数据库 -&gt; 操作数据库中表 -&gt;操作数据库中表的数据</p>
<p>==mysql关键字不区分大小写==</p>
<h2 id="1-操作数据库（了解）"><a href="#1-操作数据库（了解）" class="headerlink" title="1.操作数据库（了解）"></a>1.操作数据库（了解）</h2><ol>
<li><p>创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] student;</span><br></pre></td></tr></table></figure></li>
<li><p>删除数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] zyy;</span><br></pre></td></tr></table></figure></li>
<li><p>使用数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 如果你的表名或者字段名是一个特殊字符，就需要带上``</span></span><br><span class="line"><span class="keyword">USER</span> `student`;</span><br></pre></td></tr></table></figure></li>
<li><p>查看数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES; <span class="comment">-- 查看所有的数据库</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>学习思路</strong></p>
<ol>
<li>==对比sqlyog的可视化操作==</li>
<li>固定的语法或者关键字必须强行记住！</li>
</ol>
<h1 id="07、列的数据类型讲解"><a href="#07、列的数据类型讲解" class="headerlink" title="07、列的数据类型讲解"></a>07、列的数据类型讲解</h1><blockquote>
<p>数值</p>
</blockquote>
<ul>
<li>tinyint         十分小的数据        1个字节</li>
<li>smallint       较小的数据           2个字节</li>
<li>mediumint  中等大小的数据   3个字节</li>
<li><strong>int                 标准的整数           4个字节</strong></li>
<li>bigint            较大的数据           8个字节</li>
<li>float              浮点数                   4个字节</li>
<li>double         浮点数                   8个字节</li>
<li><strong>decimal       字符串形式的浮点数 （金融计算的时候，一般是使用decimal）</strong></li>
</ul>
<blockquote>
<p>字符串</p>
</blockquote>
<ul>
<li>char         字符串固定大小的  0~255</li>
<li><strong>varchar   可变字符串  0~65535</strong>  （常量的变量  String）</li>
<li>tinytext    微型文本  2^8 -1</li>
<li><strong>text          文件串  2^16 -1</strong>  (保存大文本)</li>
</ul>
<blockquote>
<p>时间日期</p>
</blockquote>
<ul>
<li>date YYYY-MM-DD  日期格式</li>
<li>time HH:mm:ss    时间格式</li>
<li><strong>datetime  YYYY-MM-DD HH:mm:ss 最常用的时间格式</strong></li>
<li><strong>timestamp  时间戳，1970.1.1到现在的毫秒数！较为常用！</strong></li>
<li>year 年份表示</li>
</ul>
<blockquote>
<p>null</p>
</blockquote>
<ul>
<li>没有值，未知</li>
<li>==注意：不要使用NULL进行运算，结果为NULL==</li>
</ul>
<h1 id="08、数据库的字段属性-重点"><a href="#08、数据库的字段属性-重点" class="headerlink" title="08、数据库的字段属性(重点)"></a>08、数据库的字段属性(重点)</h1><p><strong>Unsigned:</strong></p>
<ul>
<li>无符号的整数</li>
<li>声明了该列不能声明为负数</li>
</ul>
<p><strong>Zerofill:</strong></p>
<ul>
<li>0填充的</li>
<li>不足的位数，使用0来填充   int(3)  5 — 005</li>
</ul>
<p><strong>自增：</strong></p>
<ul>
<li>通用理解为自增，自动在上一条记录的基础上+1（默认）</li>
<li>通常用来设计唯一的主键，index，必须是整数类型</li>
<li>可以自定义设计主键自增的起始值和步长</li>
</ul>
<p><strong>非空</strong> null/not null：</p>
<ul>
<li>not null，如果不给他赋值，就会报错</li>
<li>null，如果不给他赋值，默认就是null</li>
</ul>
<p><strong>默认：</strong></p>
<ul>
<li>设置默认的值</li>
<li>如果不赋值，就会存默认值</li>
</ul>
<p>拓展：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">每个表，都必须存在以下五个字段  未来做项目用的，表示一个记录存在的意义</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">id          主键</span></span><br><span class="line"><span class="comment">version     乐观锁</span></span><br><span class="line"><span class="comment">is_delete   伪删除</span></span><br><span class="line"><span class="comment">gmt_create  创建时间</span></span><br><span class="line"><span class="comment">gmt_update  修改时间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h1 id="09、创建数据库表"><a href="#09、创建数据库表" class="headerlink" title="09、创建数据库表"></a>09、创建数据库表</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建student学生表，使用sql创建</span></span><br><span class="line"><span class="comment">-- 学号 姓名 性别 出生日期 家庭地址  email</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意点：使用英文()  表的名称和字段尽量使用``括起来</span></span><br><span class="line"><span class="comment">-- AUTO_INCREMENT 自增</span></span><br><span class="line"><span class="comment">-- 字符串使用单引号括起来</span></span><br><span class="line"><span class="comment">-- 所有的语句后面加上英文逗号，最后一个不加</span></span><br><span class="line"><span class="comment">-- PRIMARY KEY主键，一个表一般只有一个唯一的主键</span></span><br><span class="line"><span class="comment">-- COMMIT后面加注释</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  `birthday` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">  `address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭地址&#x27;</span>,</span><br><span class="line">  `email` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>

<p>格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] `表名` (</span><br><span class="line">    `字段名` 列类型[属性]  [索引]  [注释],</span><br><span class="line">    `字段名` 列类型[属性]  [索引]  [注释],</span><br><span class="line">    `字段名` 列类型[属性]  [索引]  [注释],</span><br><span class="line">    ...</span><br><span class="line">)[表类型][字符集设置][注释]</span><br></pre></td></tr></table></figure>



<p>常用命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE `cgb2109` ; <span class="comment">-- 查看创建数据库的语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student`; <span class="comment">-- 查看student数据表的定义语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> `student`; <span class="comment">-- 查看表的结构</span></span><br></pre></td></tr></table></figure>



<h1 id="10、MyIASM和InnoDB区别"><a href="#10、MyIASM和InnoDB区别" class="headerlink" title="10、MyIASM和InnoDB区别"></a>10、MyIASM和InnoDB区别</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关于数据库引擎</span></span><br><span class="line"><span class="comment">INNODB 默认使用</span></span><br><span class="line"><span class="comment">MYISAM 早些年使用的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th></th>
<th>MYISAM</th>
<th>INNODB</th>
</tr>
</thead>
<tbody><tr>
<td>事务支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>数据行锁定</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>外键约束</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>全文索引</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>表空间的大小</td>
<td>较小</td>
<td>较大，约为MYISAM的2倍</td>
</tr>
</tbody></table>
<p>常规使用操作：</p>
<ul>
<li>MYISAM 节约空间，速度较快</li>
<li>INNODB 安全性高，事务的处理，多表多用户操作</li>
</ul>
<blockquote>
<p>在物理空间存在的位置</p>
</blockquote>
<p>所有的数据库文件都存在data目录下，一个文件夹就对应一个数据库</p>
<p>本质还是文件的存储！</p>
<p>mysql引擎在物理文件上的区别</p>
<ul>
<li>INNODB 在数据库表中只有一个*.frm文件，以及上级目录下的ibdata1文件</li>
<li>MYISAM 对应的文件<ul>
<li>*.frm  表结构的定义文件</li>
<li>*.MYD 数据文件(data)</li>
<li>*.MYI 索引文件 (index)</li>
</ul>
</li>
</ul>
<blockquote>
<p>设置数据库表的字符集编码</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>

<p>不设置的话，会是mysql默认的字符集编码（不支持中文）</p>
<p>mysql的默认编码是Latin1,不支持中文</p>
<p>在my.ini中配置默认的编码</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">character-set-server</span>=utf8</span><br></pre></td></tr></table></figure>



<h1 id="11、修改和删除数据表字段"><a href="#11、修改和删除数据表字段" class="headerlink" title="11、修改和删除数据表字段"></a>11、修改和删除数据表字段</h1><blockquote>
<p>修改</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表名 ALTER TABLE `原表名` RENAME AS `新表名`;</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `teacher` RENAME <span class="keyword">AS</span> `teacher1`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 新增表的字段  ALTER TABLE `表名` ADD 字段名 列属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `teacher1` <span class="keyword">ADD</span> age <span class="type">INT</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的字段（重命名，修改约束！）</span></span><br><span class="line"><span class="comment">-- ALTER TABLE `表名` MODIFY 字段名 列属性; </span></span><br><span class="line"><span class="comment">-- ALTER TABLE `表名` CHANGE 原字段名 现字段名 列属性;</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `teacher1` MODIFY age <span class="type">VARCHAR</span>(<span class="number">3</span>); <span class="comment">-- 修改约束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `teacher1` CHANGE age age1 <span class="type">INT</span>(<span class="number">3</span>);<span class="comment">-- 字段重命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表的字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `teacher1` <span class="keyword">DROP</span> age1;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>删除</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除表（如果存在再删除）</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> teacher1;</span><br></pre></td></tr></table></figure>

<p>==所有的创建和删除操作尽量加上判断，以免报错~==</p>
<p>注意点：</p>
<ul>
<li>``字段，使用这个包裹</li>
<li>注释 – /**/</li>
<li>sql关键字大小写不敏感，建议大写写小写</li>
<li>所有的符号全部用英文</li>
</ul>
<h1 id="12、数据库级别的外键（了解）"><a href="#12、数据库级别的外键（了解）" class="headerlink" title="12、数据库级别的外键（了解）"></a>12、数据库级别的外键（了解）</h1><blockquote>
<p>方式一：创建表的时候，增加约束（麻烦，比较复杂）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 年级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `grade` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 先删除之前的学生表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生表 id_grade 字段 需要引用年级表的 id字段</span></span><br><span class="line"><span class="comment">-- 定义外键key</span></span><br><span class="line"><span class="comment">-- 给这个外键添加约束（执行引用） references 引用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  `birthday` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">  `address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭地址&#x27;</span>,</span><br><span class="line">  `email` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  `id_grade` <span class="type">INT</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(`id`),</span><br><span class="line">  KEY `fk_id_grade`(`id_grade`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fk_id_grade` <span class="keyword">FOREIGN</span> KEY (`id_grade`) <span class="keyword">REFERENCES</span> `grade` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210620095301587.png" alt="image-20210620095301587"></p>
<p>删除有外键关系的表的时候，必须要先删除引用别人的表（从表），再删除被引用的表（主表）</p>
<blockquote>
<p>方式二：创建表成功后，添加外键约束</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 年级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `grade` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  `birthday` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">  `address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭地址&#x27;</span>,</span><br><span class="line">  `email` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  `id_grade` <span class="type">INT</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- DROP TABLE `grade`;</span></span><br><span class="line"><span class="comment">-- DROP TABLE `student`;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表的时候没有外键关系</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` </span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> `fk_id_grade` <span class="keyword">FOREIGN</span> KEY (`id_grade`) <span class="keyword">REFERENCES</span> `grade` (`id`);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALTER TABLE 表 ADD CONSTRAINT 约束名 FOREIGN KEY (作为外键的列) REFERENCES 哪个表 (哪个字段)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上的操作都是物理外键，数据库级别的外键，我们不建议使用（避免数据库过多造成困扰！）</p>
<p><strong>最佳实践</strong></p>
<ul>
<li>数据库就是单纯的表，只用来存数据，只有行(数据)和列（字段）</li>
<li>我们想使用多张表的数据，想使用外键<strong>（程序去实现）</strong></li>
</ul>
<h1 id="13、insert语句详解"><a href="#13、insert语句详解" class="headerlink" title="13、insert语句详解"></a>13、insert语句详解</h1><p><strong>数据库意义</strong>：数据存储，数据管理</p>
<p>DML语言：数据库操作语言</p>
<ul>
<li>增</li>
<li>删</li>
<li>改</li>
</ul>
<blockquote>
<p>insert</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入语言</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- INSERT INTO `表名`(`字段1`,`字段2`,`字段3`...) VALUES(&#x27;值1&#x27;,&#x27;值2&#x27;,&#x27;值3&#x27;...);</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade`(`name`) <span class="keyword">VALUES</span>(<span class="string">&#x27;大四&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`,`birthday`,`id_grade`) <span class="keyword">VALUES</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;1995-11-20&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="comment">-- 一般写插入语句，我们一定要数据和字段一一对应。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多条</span></span><br><span class="line"><span class="comment">-- INSERT INTO `表名`(`字段1`,`字段2`...) VALUES(&#x27;值1&#x27;,&#x27;值2&#x27;...),(&#x27;值1&#x27;,&#x27;值2&#x27;...)...;</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade`(`name`) <span class="keyword">VALUES</span>(<span class="string">&#x27;大一&#x27;</span>),(<span class="string">&#x27;大二&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`,`birthday`,`id_grade`) <span class="keyword">VALUES</span>(<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;1994-11-20&#x27;</span>,<span class="string">&#x27;2&#x27;</span>),(<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;1995-11-20&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ul>
<li>字段和字段之间使用逗号隔开</li>
<li>字段是可以省略，但是后面的值必须要一一对应，不能少</li>
<li>可以同时插入多条数据，VALUES后面的值，需要使用逗号分开<code>VALUES(),()...</code></li>
</ul>
<h1 id="14、update语句详解"><a href="#14、update语句详解" class="headerlink" title="14、update语句详解"></a>14、update语句详解</h1><blockquote>
<p>update</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改学员名字</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;zyy&#x27;</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="comment">-- 通过多个条件定位数据</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;hehe&#x27;</span> <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;zyy&#x27;</span> <span class="keyword">AND</span> id_grade<span class="operator">=</span><span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"><span class="comment">-- 不指定条件的情况，会改动所有的表</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;all&#x27;</span>;</span><br><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="comment">-- UPDATE 表名 SET 列名=值[,列名=值,列名=值,列名=值...] [WHERE 条件]</span></span><br></pre></td></tr></table></figure>

<p>条件：where 字句 运算符 id等于某个值，大于某个值，在某个区间内修改</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
<th>范围</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>等于</td>
<td>5=6</td>
<td>false</td>
</tr>
<tr>
<td>&lt;&gt; 或者 !=</td>
<td>不等于</td>
<td>5!=6</td>
<td>true</td>
</tr>
<tr>
<td>&gt;</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&gt;=</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;=</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BETWEEN … AND …</td>
<td>某个范围内</td>
<td>BETWEEN 1 AND 3</td>
<td>[1,3]</td>
</tr>
<tr>
<td>AND</td>
<td>和 &amp;&amp;</td>
<td>5&gt;1 and 1&gt;2</td>
<td>false</td>
</tr>
<tr>
<td>OR</td>
<td>或 ||</td>
<td>5&gt;1 or 1&gt;2</td>
<td>true</td>
</tr>
</tbody></table>
<p>注意事项：</p>
<ul>
<li><p>列尽量带上``</p>
</li>
<li><p>条件，筛选的条件，如果没有指定，则会修改所有的列</p>
</li>
<li><p>value，可以是一个具体的值，也可以是一个变量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE `student` <span class="keyword">SET</span> birthday<span class="operator">=</span><span class="built_in">CURRENT_TIME</span> <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;hehe&#x27;</span> <span class="keyword">AND</span> id_grade<span class="operator">=</span><span class="string">&#x27;2&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>多个设置的属性之间，使用英文逗号隔开（后面trim,可以干掉多余的逗号）</p>
</li>
</ul>
<h1 id="15、delete和truncate详解"><a href="#15、delete和truncate详解" class="headerlink" title="15、delete和truncate详解"></a>15、delete和truncate详解</h1><blockquote>
<p>delete</p>
</blockquote>
<p>语法： <code>delete from 表名 [where 条件]</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除数据（避免这样写，会全部删除）</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"><span class="comment">-- 删除指定数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>truncate</p>
</blockquote>
<p>作用：完全清空一个数据库表，标的结构和索引约束不会变！</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 清空表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> `student`;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>delete 和 truncate 区别</p>
</blockquote>
<ul>
<li>相同点：都能删除数据，都不会删除表结构</li>
<li>不同：<ul>
<li>truncate 重新设置自增列，计数器会归零</li>
<li>truncate 不会影响事务</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 测试 delete 和 truncate 区别</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test`(</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `coll` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不会影响自增</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `test`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 自增归零</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> `test`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` (`coll`) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>),(<span class="string">&#x27;2&#x27;</span>),(<span class="string">&#x27;3&#x27;</span>),(<span class="string">&#x27;4&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>了解即可<code>delete 删除的问题</code>,重启数据库,现象</p>
<ul>
<li>innoDB  自增列会从1开始（存在内存当中的，断电即失）</li>
<li>MyISAM  继续上一个自增量开始（存在文件中，不会丢失）</li>
</ul>
<h1 id="16、基本的select语句和别名使用（重点）"><a href="#16、基本的select语句和别名使用（重点）" class="headerlink" title="16、基本的select语句和别名使用（重点）"></a>16、基本的select语句和别名使用（重点）</h1><p>DQL（data query language:数据查询语言）</p>
<ul>
<li>所有的查询操作都用它 select</li>
<li>简单的查询，复杂的查询它都能做</li>
<li><strong>数据库中最核心的语言，最重要的语句</strong></li>
<li>使用频率最高的语句</li>
</ul>
<p>select 语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>]</span><br><span class="line">&#123;<span class="operator">*</span> <span class="operator">|</span> table.<span class="operator">*</span> <span class="operator">|</span> [table.field1[<span class="keyword">as</span> alias1][,table.field2[<span class="keyword">as</span> alias2]][,...]]&#125;</span><br><span class="line"><span class="keyword">FROM</span> table_name [<span class="keyword">as</span> table_alias]</span><br><span class="line">    [<span class="keyword">left</span> <span class="operator">|</span> <span class="keyword">right</span> <span class="operator">|</span> <span class="keyword">inner</span> <span class="keyword">join</span> table_name2]  <span class="comment">-- 联合查询</span></span><br><span class="line">    [<span class="keyword">WHERE</span> ...]  <span class="comment">-- 指定结果需满足的条件</span></span><br><span class="line">    [<span class="keyword">GROUP</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定结果按照哪几个字段来分组</span></span><br><span class="line">    [<span class="keyword">HAVING</span>]  <span class="comment">-- 过滤分组的记录必须满足的次要条件</span></span><br><span class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定查询记录按一个或多个条件排序</span></span><br><span class="line">    [LIMIT &#123;[<span class="keyword">offset</span>,]row_count <span class="operator">|</span> row_countOFFSET <span class="keyword">offset</span>&#125;];</span><br><span class="line">    <span class="comment">--  指定查询的记录从哪条至哪条</span></span><br></pre></td></tr></table></figure>

<p>注意：[]括号代表可选的，{}括号代表必选的</p>
<h2 id="指定查询字段"><a href="#指定查询字段" class="headerlink" title="指定查询字段"></a>指定查询字段</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> `school`;</span><br><span class="line"><span class="comment">-- 创建一个school数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `school`;</span><br><span class="line"><span class="comment">-- 使用school数据库</span></span><br><span class="line">USE `school`;</span><br><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `student`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student`(</span><br><span class="line">    `student_no` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    `login_pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `student_name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生姓名&#x27;</span>,</span><br><span class="line">    `sex` TINYINT(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别，0或1&#x27;</span>,</span><br><span class="line">    `grade_id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级编号&#x27;</span>,</span><br><span class="line">    `phone` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系电话&#x27;</span>,</span><br><span class="line">    `address` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">    `born_date` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生时间&#x27;</span>,</span><br><span class="line">    `email` <span class="type">VARCHAR</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱账号&#x27;</span>,</span><br><span class="line">    `identity_card` <span class="type">VARCHAR</span>(<span class="number">18</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;身份证号&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`student_no`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建年级表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `grade`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `grade`(</span><br><span class="line">  `grade_id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级编号&#x27;</span>,</span><br><span class="line">  `grade_name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY (`grade_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建科目表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `subject`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `subject`(</span><br><span class="line">  `subject_no`<span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;课程编号&#x27;</span>,</span><br><span class="line">  `subject_name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;课程名称&#x27;</span>,</span><br><span class="line">  `class_hour` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学时&#x27;</span>,</span><br><span class="line">  `grade_id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级编号&#x27;</span>,</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY (`subject_no`)</span><br><span class="line">)ENGINE <span class="operator">=</span> INNODB  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建成绩表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">result</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">result</span>`(</span><br><span class="line">  `student_no` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">  `subject_no` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;课程编号&#x27;</span>,</span><br><span class="line">  `exam_date` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;考试日期&#x27;</span>,</span><br><span class="line">  `student_result` <span class="type">INT</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;考试成绩&#x27;</span></span><br><span class="line">  )ENGINE <span class="operator">=</span> INNODB <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line">  </span><br><span class="line"><span class="comment">-- 插入学生数据 其余自行添加 这里只添加了2行</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`student_no`,`login_pwd`,`student_name`,`sex`,`grade_id`,`phone`,`address`,`born_date`,`email`,`identity_card`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1000</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;张伟&#x27;</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="string">&#x27;13800001234&#x27;</span>,<span class="string">&#x27;北京朝阳&#x27;</span>,<span class="string">&#x27;1980-1-1&#x27;</span>,<span class="string">&#x27;text123@qq.com&#x27;</span>,<span class="string">&#x27;123456198001011234&#x27;</span>),</span><br><span class="line">(<span class="number">1001</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;赵强&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="string">&#x27;13800002222&#x27;</span>,<span class="string">&#x27;广东深圳&#x27;</span>,<span class="string">&#x27;1990-1-1&#x27;</span>,<span class="string">&#x27;text111@qq.com&#x27;</span>,<span class="string">&#x27;123456199001011233&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入年级数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade` (`grade_id`,`grade_name`) <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;大一&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;大二&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;大三&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;大四&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;预科班&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入科目数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `subject`(`subject_no`,`subject_name`,`class_hour`,`grade_id`)<span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;高等数学-1&#x27;</span>,<span class="number">110</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;高等数学-2&#x27;</span>,<span class="number">110</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;高等数学-3&#x27;</span>,<span class="number">100</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;高等数学-4&#x27;</span>,<span class="number">130</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;C语言-1&#x27;</span>,<span class="number">110</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">&#x27;C语言-2&#x27;</span>,<span class="number">110</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">7</span>,<span class="string">&#x27;C语言-3&#x27;</span>,<span class="number">100</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">8</span>,<span class="string">&#x27;C语言-4&#x27;</span>,<span class="number">130</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">9</span>,<span class="string">&#x27;Java程序设计-1&#x27;</span>,<span class="number">110</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">10</span>,<span class="string">&#x27;Java程序设计-2&#x27;</span>,<span class="number">110</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">11</span>,<span class="string">&#x27;Java程序设计-3&#x27;</span>,<span class="number">100</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">12</span>,<span class="string">&#x27;Java程序设计-4&#x27;</span>,<span class="number">130</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">13</span>,<span class="string">&#x27;数据库结构-1&#x27;</span>,<span class="number">110</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">14</span>,<span class="string">&#x27;数据库结构-2&#x27;</span>,<span class="number">110</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">15</span>,<span class="string">&#x27;数据库结构-3&#x27;</span>,<span class="number">100</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">16</span>,<span class="string">&#x27;数据库结构-4&#x27;</span>,<span class="number">130</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">17</span>,<span class="string">&#x27;C#基础&#x27;</span>,<span class="number">130</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入成绩数据  这里仅插入了一组，其余自行添加</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">result</span>`(`student_no`,`subject_no`,`exam_date`,`student_result`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1000</span>,<span class="number">1</span>,<span class="string">&#x27;2013-11-11 16:00:00&#x27;</span>,<span class="number">85</span>),</span><br><span class="line">(<span class="number">1000</span>,<span class="number">2</span>,<span class="string">&#x27;2013-11-12 16:00:00&#x27;</span>,<span class="number">70</span>),</span><br><span class="line">(<span class="number">1000</span>,<span class="number">3</span>,<span class="string">&#x27;2013-11-11 09:00:00&#x27;</span>,<span class="number">68</span>),</span><br><span class="line">(<span class="number">1000</span>,<span class="number">4</span>,<span class="string">&#x27;2013-11-13 16:00:00&#x27;</span>,<span class="number">98</span>),</span><br><span class="line">(<span class="number">1000</span>,<span class="number">5</span>,<span class="string">&#x27;2013-11-14 16:00:00&#x27;</span>,<span class="number">58</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询全部的学生   SELECT 字段 FROM 表名;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定字段</span></span><br><span class="line"><span class="keyword">SELECT</span> student_name, student_no <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 别名，给结果起一个名字 AS  可以给字段起别名，也可以给表起别名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> student_name <span class="keyword">AS</span> <span class="string">&#x27;学号&#x27;</span>, student_no <span class="keyword">AS</span> <span class="string">&#x27;姓名&#x27;</span> <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数 concat(a,b)</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;姓名：&#x27;</span>, student_no)  <span class="keyword">AS</span> <span class="string">&#x27;新姓名&#x27;</span> <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>有的时候，列表名不是那么见名知意，我们可以起别名</p>
</blockquote>
<h1 id="17、去重及数据库的表达式"><a href="#17、去重及数据库的表达式" class="headerlink" title="17、去重及数据库的表达式"></a>17、去重及数据库的表达式</h1><blockquote>
<p>去重 distinct</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询全部的考试成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="comment">-- 查询有哪些同学参加了考试</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no` <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="comment">-- 发现重复数据，去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `student_no` <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>数据库的列（表达式）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询系统版本（函数）</span></span><br><span class="line"> <span class="keyword">SELECT</span> VERSION();</span><br><span class="line"> <span class="comment">-- 用来计算（表达式）</span></span><br><span class="line"> <span class="keyword">SELECT</span> <span class="number">100</span><span class="operator">*</span><span class="number">3</span> <span class="number">-1</span> ;</span><br><span class="line"> <span class="comment">-- 查询自增的步长（变量）</span></span><br><span class="line"> <span class="keyword">SELECT</span> @<span class="variable">@auto</span>_increment_increment;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">-- 学员考试成绩 +1 查看</span></span><br><span class="line"> <span class="keyword">SELECT</span> `student_no`,`student_result` <span class="operator">+</span> <span class="number">1</span> <span class="keyword">AS</span> <span class="string">&#x27;提分后&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></figure>

<p>数据库中的表达式： 文本值，列，Null，函数，计算表达式，系统变量</p>
<p>select <code>表达式</code> from 表名</p>
<h1 id="18、where子句之逻辑运算符"><a href="#18、where子句之逻辑运算符" class="headerlink" title="18、where子句之逻辑运算符"></a>18、where子句之逻辑运算符</h1><p>作用：检索数据中<code>符合条件</code>的值</p>
<p>搜索的条件由一个或者多个表达式组成，结果布尔值</p>
<blockquote>
<p>逻辑运算符</p>
</blockquote>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>and    &amp;&amp;</td>
<td>a and b     a&amp;&amp;b</td>
<td>逻辑与</td>
</tr>
<tr>
<td>or     ||</td>
<td>a orb     a||b</td>
<td>逻辑或</td>
</tr>
<tr>
<td>not   !</td>
<td>not a     !a</td>
<td>逻辑非</td>
</tr>
</tbody></table>
<p>==尽量适应英文字母==</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询考试成绩在 95 ~ 100分之间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> student_no,student_result <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- and</span></span><br><span class="line"><span class="keyword">SELECT</span> student_no,student_result <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> student_result<span class="operator">&gt;</span><span class="number">95</span> <span class="keyword">AND</span> student_result<span class="operator">&lt;=</span><span class="number">100</span>;</span><br><span class="line"><span class="comment">-- &amp;&amp; </span></span><br><span class="line"><span class="keyword">SELECT</span> student_no,student_result <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> student_result<span class="operator">&gt;</span><span class="number">95</span> <span class="operator">&amp;&amp;</span> student_result<span class="operator">&lt;=</span><span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模糊查询（区间）</span></span><br><span class="line"><span class="keyword">SELECT</span> student_no,student_result <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> student_result <span class="keyword">BETWEEN</span> <span class="number">95</span> <span class="keyword">AND</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 除了1000号学生之外的学生的成绩</span></span><br><span class="line"><span class="comment">-- !=</span></span><br><span class="line"><span class="keyword">SELECT</span> student_no,student_result <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> student_no <span class="operator">!=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="comment">-- not</span></span><br><span class="line"><span class="keyword">SELECT</span> student_no,student_result <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> student_no <span class="operator">=</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></figure>



<h1 id="19、模糊查询操作符详解"><a href="#19、模糊查询操作符详解" class="headerlink" title="19、模糊查询操作符详解"></a>19、模糊查询操作符详解</h1><blockquote>
<p>模糊查询：比较运算符</p>
</blockquote>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>IS NULL</td>
<td>a is null</td>
<td>如果操作符为null，结果为真</td>
</tr>
<tr>
<td>IS NOT NULL</td>
<td>a is not null</td>
<td>如果操作符不为null，结果为真</td>
</tr>
<tr>
<td>BWTWEEN…AND…</td>
<td>a between b and c</td>
<td>若a在b和c之间，则结果为真</td>
</tr>
<tr>
<td>LIKE</td>
<td>a like b</td>
<td>SQL匹配，如果a匹配b,则结果为真</td>
</tr>
<tr>
<td>IN</td>
<td>a in (a1,a2,a3,…)</td>
<td>假设a在a1或者a2或者a3,…其中的某一个，则结果为真</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- like 结合 </span></span><br><span class="line"><span class="comment">--   %（代表0到任意个字符）</span></span><br><span class="line"><span class="comment">--   _（代表1）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学，名字后面只有一个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> <span class="string">&#x27;刘_&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学，名字后面有两个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> <span class="string">&#x27;刘__&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询名字中间有嘉字的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> <span class="string">&#x27;%%嘉%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- in (具体的一个或者多个值)</span></span><br><span class="line"><span class="comment">-- 查询学号1001,1002,1003号学号</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> student_no <span class="keyword">IN</span> (<span class="string">&#x27;1001&#x27;</span>,<span class="string">&#x27;1002&#x27;</span>,<span class="string">&#x27;1003&#x27;</span>);</span><br><span class="line"><span class="comment">-- 查询在北京的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> address <span class="keyword">IN</span> (<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- null</span></span><br><span class="line"><span class="comment">-- 查询地址为空的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> address <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> address <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- not null</span></span><br><span class="line"><span class="comment">-- 查询有出生日期的同学 不为空</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> born_date <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询没有出生日期的同学 为空</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> born_date <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>



<h1 id="20、联表查询join-on详解"><a href="#20、联表查询join-on详解" class="headerlink" title="20、联表查询join on详解"></a>20、联表查询join on详解</h1><blockquote>
<p>join 对比</p>
</blockquote>
<p>七种join理论</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/20181103160140252.png" alt="在这里插入图片描述"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--   =========连表查询==================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询参加了考试的同学（学号，姓名，科目编号，分数）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- join on 连接查询</span></span><br><span class="line"><span class="comment">-- where 等值查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- inner join</span></span><br><span class="line"><span class="keyword">SELECT</span> st.`student_no`,st.`student_name`,re.`subject_no`,re.`student_result` </span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> st</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> re <span class="keyword">ON</span> </span><br><span class="line">st.`student_no`<span class="operator">=</span>re.`student_no`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- right join</span></span><br><span class="line"><span class="keyword">SELECT</span> st.`student_no`,st.`student_name`,re.`subject_no`,re.`student_result` </span><br><span class="line"><span class="keyword">FROM</span> student st</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> re <span class="keyword">ON</span> </span><br><span class="line">st.`student_no`<span class="operator">=</span>re.`student_no`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- left join</span></span><br><span class="line"><span class="keyword">SELECT</span> st.`student_no`,st.`student_name`,re.`subject_no`,re.`student_result` </span><br><span class="line"><span class="keyword">FROM</span> student st</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> re <span class="keyword">ON</span> </span><br><span class="line">st.`student_no`<span class="operator">=</span>re.`student_no`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询缺考的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> st.`student_no`,st.`student_name`,re.`subject_no`,re.`student_result` </span><br><span class="line"><span class="keyword">FROM</span> student st</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> re <span class="keyword">ON</span> </span><br><span class="line">st.`student_no`<span class="operator">=</span>re.`student_no`</span><br><span class="line"><span class="keyword">WHERE</span> re.`student_result` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询了参加考试的同学信息（学号，学生姓名，科目名称，分数）</span></span><br><span class="line"><span class="keyword">SELECT</span> stu.`student_no`,stu.`student_name`,sub.`subject_name`,res.`student_result`</span><br><span class="line"><span class="keyword">FROM</span> `student` stu</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` res </span><br><span class="line"><span class="keyword">ON</span> res.`student_no`<span class="operator">=</span>stu.`student_no`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> res.`subject_no`<span class="operator">=</span>sub.`subject_no`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学员所属的年级（学号，学生的姓名，年级名称）</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name`,`grade_name`</span><br><span class="line"><span class="keyword">FROM</span> student stu</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `grade` gra</span><br><span class="line"><span class="keyword">ON</span> stu.`grade_id`<span class="operator">=</span>gra.`grade_id`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询了参加数据结构-1考试的同学信息（学号，学生姓名，科目名称，分数）</span></span><br><span class="line"><span class="keyword">SELECT</span> stu.`student_no`,stu.`student_name`,sub.`subject_name`,res.`student_result`</span><br><span class="line"><span class="keyword">FROM</span> student stu</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` res</span><br><span class="line"><span class="keyword">ON</span> stu.`student_no` <span class="operator">=</span> res.`student_no`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> res.`subject_no`<span class="operator">=</span>sub.`subject_no`</span><br><span class="line"><span class="keyword">WHERE</span> sub.`subject_name`<span class="operator">=</span><span class="string">&#x27;数据结构-1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 我要查询哪些数据 select ...</span></span><br><span class="line"><span class="comment">-- 从哪几个表中查 from 表 XXX join 连接的表 on 交叉条件</span></span><br><span class="line"><span class="comment">-- 假设存在一种多张表查询，慢慢来，先查询两张表然后再慢慢增加</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>操作</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>inner join</td>
<td>如果表中至少有一个匹配，就返回行</td>
</tr>
<tr>
<td>left join</td>
<td>会从左边中返回所有的值，即使右表中没有匹配</td>
</tr>
<tr>
<td>right join</td>
<td>会从右边中返回所有的值，即使左表中没有匹配</td>
</tr>
</tbody></table>
<h1 id="21、自连接及联表查询"><a href="#21、自连接及联表查询" class="headerlink" title="21、自连接及联表查询"></a>21、自连接及联表查询</h1><blockquote>
<p>自连接</p>
</blockquote>
<p>自己的表和自己的表连接，核心：==一张表拆为两张一样的表即可==</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="comment">-- unsigned 无符号</span></span><br><span class="line"><span class="comment">-- auto_increment=9 自增的起始值</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `category` ;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `category` (</span><br><span class="line">  `category_id` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主题id&#x27;</span>,</span><br><span class="line">  `pid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;父id&#x27;</span>,</span><br><span class="line">  `category_name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主题名字&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`category_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">9</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入值</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `category`(`category_id`,`pid`,`category_name`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;信息技术&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;软件开发&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;数据库&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;美术设计&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;web开发&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;ps技术&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;办公信息&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `category`;</span><br></pre></td></tr></table></figure>

<p>父类</p>
<table>
<thead>
<tr>
<th>pid</th>
<th>category_id</th>
<th>category_name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2</td>
<td>信息技术</td>
</tr>
<tr>
<td>1</td>
<td>3</td>
<td>软件开发</td>
</tr>
<tr>
<td>1</td>
<td>5</td>
<td>美术设计</td>
</tr>
</tbody></table>
<p>子类</p>
<table>
<thead>
<tr>
<th>pid</th>
<th>category_id</th>
<th>category_name</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td>4</td>
<td>数据库</td>
</tr>
<tr>
<td>2</td>
<td>8</td>
<td>办公信息</td>
</tr>
<tr>
<td>3</td>
<td>6</td>
<td>web开发</td>
</tr>
<tr>
<td>5</td>
<td>7</td>
<td>ps技术</td>
</tr>
</tbody></table>
<p>操作：查询父类对应的子类关系</p>
<table>
<thead>
<tr>
<th>父类</th>
<th>子类</th>
</tr>
</thead>
<tbody><tr>
<td>信息技术</td>
<td>办公信息</td>
</tr>
<tr>
<td>软件开发</td>
<td>数据库</td>
</tr>
<tr>
<td>软件开发</td>
<td>web开发</td>
</tr>
<tr>
<td>美术设计</td>
<td>ps技术</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询父子信息，把一张表看为两个一模一样的表</span></span><br><span class="line"><span class="keyword">SELECT</span> a.`category_name` <span class="keyword">AS</span> <span class="string">&#x27;父栏目&#x27;</span>,b.`category_name` <span class="keyword">AS</span> <span class="string">&#x27;子栏目&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> `category` <span class="keyword">AS</span> a, `category` <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.`category_id`<span class="operator">=</span>b.`pid`;</span><br></pre></td></tr></table></figure>



<h1 id="22、分页和排序"><a href="#22、分页和排序" class="headerlink" title="22、分页和排序"></a>22、分页和排序</h1><blockquote>
<p>排序</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 排序： 升序 ASC  降序 DESC</span></span><br><span class="line"><span class="comment">-- ORDER BY 通过那个字段排序，怎么排</span></span><br><span class="line"><span class="comment">-- 查询的结果根据成绩降序 排序</span></span><br><span class="line"><span class="keyword">SELECT</span> stu.`student_no`,stu.`student_name`,sub.`subject_name`,res.`student_result`</span><br><span class="line"><span class="keyword">FROM</span> student stu</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` res</span><br><span class="line"><span class="keyword">ON</span> stu.`student_no` <span class="operator">=</span> res.`student_no`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> res.`subject_no`<span class="operator">=</span>sub.`subject_no`</span><br><span class="line"><span class="keyword">WHERE</span> sub.`subject_name`<span class="operator">=</span><span class="string">&#x27;数据结构-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `student_result` <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 100w</span></span><br><span class="line"><span class="comment">-- 为什么要分页</span></span><br><span class="line"><span class="comment">-- 缓解数据库压力，给人更好的体验   瀑布流</span></span><br><span class="line"><span class="comment">-- 分页，每页只显示五条数据</span></span><br><span class="line"><span class="comment">-- 语法 ： limit 起始值，页面的大小</span></span><br><span class="line"><span class="comment">-- 网页应用：当前，总的页数，每页大小</span></span><br><span class="line"><span class="comment">-- LIMIT 0,5    1~5</span></span><br><span class="line"><span class="comment">-- LIMIT 1,5    2~6</span></span><br><span class="line"><span class="comment">-- LIMIT 6,5</span></span><br><span class="line"><span class="keyword">SELECT</span> stu.`student_no`,stu.`student_name`,sub.`subject_name`,res.`student_result`</span><br><span class="line"><span class="keyword">FROM</span> student stu</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` res</span><br><span class="line"><span class="keyword">ON</span> stu.`student_no` <span class="operator">=</span> res.`student_no`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> res.`subject_no`<span class="operator">=</span>sub.`subject_no`</span><br><span class="line"><span class="keyword">WHERE</span> sub.`subject_name`<span class="operator">=</span><span class="string">&#x27;数据结构-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `student_result` <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">1</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 第一页 limit 0,5    (1-1)*5</span></span><br><span class="line"><span class="comment">-- 第二页 limit 5,5    (2-1)*5</span></span><br><span class="line"><span class="comment">-- 第三页 limit 10,5   (3-1)*5</span></span><br><span class="line"><span class="comment">-- 第N页 limit 10,5    (n-1)*pageSize,pageSize</span></span><br><span class="line"><span class="comment">-- pageSize,页面大小</span></span><br><span class="line"><span class="comment">-- (n-1)*pageSize，起始值</span></span><br><span class="line"><span class="comment">-- n，当前页</span></span><br><span class="line"><span class="comment">-- 总页数 = (数据总数%页面大小==0)? (数据总数/页面大小) : (数据总数/页面大小 + 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询科目高等数学-2，课程成绩排名前十的学生，并且分数要大于60的学生信息（学号，姓名，课程名称，分数）</span></span><br><span class="line"><span class="keyword">SELECT</span> stu.`student_no`,stu.`student_name`,sub.`subject_name`,res.`student_result`</span><br><span class="line"><span class="keyword">FROM</span> student stu</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> stu.`grade_id`<span class="operator">=</span>sub.`grade_id`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` res</span><br><span class="line"><span class="keyword">ON</span> sub.`subject_no`<span class="operator">=</span>res.`subject_no`</span><br><span class="line"><span class="keyword">WHERE</span> sub.`subject_name`<span class="operator">=</span><span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> res.`student_result`<span class="operator">&gt;</span><span class="number">60</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> res.`student_result`</span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>语法： <code>limit (查询起始下标,页面大小)</code></p>
<h1 id="23、子查询和嵌套查询"><a href="#23、子查询和嵌套查询" class="headerlink" title="23、子查询和嵌套查询"></a>23、子查询和嵌套查询</h1><p>where（这个值是计算出来的）</p>
<p>本质：<code>在where语句中嵌套一个子查询语句</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 1.查询数据库结构-1的所有考试结果（学号，科目名，成绩），降序排列</span></span><br><span class="line"><span class="comment">-- 方式1：使用连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> res.`student_no`,res.`subject_no`,res.`student_result`</span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">result</span>` res</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> res.`subject_no`<span class="operator">=</span>sub.`subject_no`</span><br><span class="line"><span class="keyword">WHERE</span> sub.`subject_name`<span class="operator">=</span><span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> res.`student_result` <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用子查询(由里及外)</span></span><br><span class="line"><span class="keyword">SELECT</span> res.`student_no`,res.`subject_no`,res.`student_result`</span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">result</span>` res</span><br><span class="line"><span class="keyword">WHERE</span> res.`subject_no` <span class="operator">=</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> sub.`subject_no`</span><br><span class="line">  <span class="keyword">FROM</span> `subject` sub</span><br><span class="line">  <span class="keyword">WHERE</span> sub.`subject_name`<span class="operator">=</span><span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> res.`student_result` <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分数不小于80分的学生的学号和姓名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> stu.`student_no`,stu.`student_name`</span><br><span class="line"><span class="keyword">FROM</span> student stu</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> res</span><br><span class="line"><span class="keyword">ON</span> stu.`student_no`<span class="operator">=</span>res.`student_no`</span><br><span class="line"><span class="keyword">WHERE</span> res.`student_result` <span class="operator">&gt;</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在这个基础上增加一个科目，查询课程为高等数学-2，且分数不小于80分的学生的学号和姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> stu.`student_no`,stu.`student_name`</span><br><span class="line"><span class="keyword">FROM</span> student stu</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> res</span><br><span class="line"><span class="keyword">ON</span> stu.`student_no`<span class="operator">=</span>res.`student_no`</span><br><span class="line"><span class="keyword">WHERE</span> res.`student_result` <span class="operator">&gt;</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">AND</span> res.`subject_no`<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">SELECT</span> sub.`subject_no` <span class="keyword">FROM</span> `subject` sub</span><br><span class="line"><span class="keyword">WHERE</span> sub.`subject_name`<span class="operator">=</span><span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> stu.`student_no`,stu.`student_name`</span><br><span class="line"><span class="keyword">FROM</span> student stu</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> res</span><br><span class="line"><span class="keyword">ON</span> stu.`student_no`<span class="operator">=</span>res.`student_no`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> res.`subject_no`<span class="operator">=</span>sub.`subject_no`</span><br><span class="line"><span class="keyword">WHERE</span> sub.`subject_name`<span class="operator">=</span><span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> res.`student_result` <span class="operator">&gt;</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--  再次改造（由里及外）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `student_no`,`student_name` <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> student_no <span class="keyword">IN</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> student_no <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="keyword">WHERE</span> `student_result` <span class="operator">&gt;</span> <span class="number">80</span> <span class="keyword">AND</span> subject_no <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> subject_no <span class="keyword">FROM</span> `subject` <span class="keyword">WHERE</span> `subject_name`<span class="operator">=</span><span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h1 id="24、MySQL常用函数"><a href="#24、MySQL常用函数" class="headerlink" title="24、MySQL常用函数"></a>24、MySQL常用函数</h1><p>官网：<a href="https://dev.mysql.com/doc/refman/5.7/en/">参考手册</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-8</span>); <span class="comment">-- 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">9.4</span>) ;<span class="comment">-- 向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">9.4</span>);<span class="comment">-- 向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> RAND(); <span class="comment">-- 返回一个0~1之间的随机数</span></span><br><span class="line"><span class="keyword">SELECT</span> SIGN(<span class="number">-10</span>); <span class="comment">-- 判断一个数的符号，0 返回0 负数返回-1 正数返回1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;哈哈&#x27;</span>); <span class="comment">-- 字符串长度</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;爱&#x27;</span>,<span class="string">&#x27;你&#x27;</span>); <span class="comment">-- 拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;我爱编程helloworld&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;超级热爱&#x27;</span>); <span class="comment">-- 插入，替换</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;ZYY&#x27;</span>); <span class="comment">-- 小写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;zyy&#x27;</span>); <span class="comment">-- 大写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;zyy&#x27;</span>,<span class="string">&#x27;y&#x27;</span>); <span class="comment">-- 返回第一次出现的子串的索引</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;坚持就能成功&#x27;</span>,<span class="string">&#x27;坚持&#x27;</span>,<span class="string">&#x27;努力&#x27;</span>); <span class="comment">-- 替换出现的指定字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;坚持就能成功&#x27;</span>, <span class="number">5</span>, <span class="number">2</span>); <span class="comment">-- 返回指定的子字符串（源字符串，截取的位置，截取的长度）</span></span><br><span class="line"><span class="keyword">SELECT</span> REVERSE(<span class="string">&#x27;清晨我上马&#x27;</span>); <span class="comment">-- 反转</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间和日期函数（记住！）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>(); <span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE(); <span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW(); <span class="comment">-- 获取当前的时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIME</span>(); <span class="comment">-- 获取本地时间</span></span><br><span class="line"><span class="keyword">SELECT</span> SYSDATE(); <span class="comment">-- 获取系统时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW()); <span class="comment">-- 年</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(NOW()); <span class="comment">-- 月</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(NOW()); <span class="comment">-- 日</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(NOW()); <span class="comment">-- 时</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(NOW()); <span class="comment">-- 分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(NOW()); <span class="comment">-- 秒</span></span><br><span class="line"><span class="keyword">SELECT</span> WEEKDAY(<span class="string">&#x27;2022-3-12&#x27;</span>);<span class="comment">--星期</span></span><br><span class="line"><span class="keyword">SELECT</span> WEEK(NOW());<span class="comment">--今年第几周</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 系统</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SYSTEM_USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> VERSION();</span><br></pre></td></tr></table></figure>





<h1 id="25、聚合函数及分组过滤"><a href="#25、聚合函数及分组过滤" class="headerlink" title="25、聚合函数及分组过滤"></a>25、聚合函数及分组过滤</h1><table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>count()</td>
<td>计数</td>
</tr>
<tr>
<td>sum()</td>
<td>求和</td>
</tr>
<tr>
<td>avg()</td>
<td>平均值</td>
</tr>
<tr>
<td>max()</td>
<td>最大值</td>
</tr>
<tr>
<td>min()</td>
<td>最小值</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 聚合函数</span></span><br><span class="line"><span class="comment">-- 都能统计 表中数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- count(字段) 会忽略所有的null值(想查询一个表中有多少个记录，就使用这个count())</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(student_name) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- COUNT(*) 不会忽略所有的null值 本质计算行数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- COUNT(1) 不会忽略所有的null值 本质计算行数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(student_result) <span class="keyword">AS</span> <span class="string">&#x27;总和&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(student_result) <span class="keyword">AS</span> <span class="string">&#x27;平均分&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(student_result) <span class="keyword">AS</span> <span class="string">&#x27;最高分&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(student_result) <span class="keyword">AS</span> <span class="string">&#x27;最低分&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询不同课程的平均分，最高分，最低分</span></span><br><span class="line"><span class="keyword">SELECT</span> sub.subject_name <span class="keyword">AS</span> <span class="string">&#x27;课程&#x27;</span>,</span><br><span class="line"><span class="built_in">AVG</span>(res.student_result) <span class="keyword">AS</span> <span class="string">&#x27;平均分&#x27;</span>,</span><br><span class="line"><span class="built_in">MAX</span>(res.student_result) <span class="keyword">AS</span> <span class="string">&#x27;最高分&#x27;</span>,</span><br><span class="line"><span class="built_in">MIN</span>(res.student_result) <span class="keyword">AS</span> <span class="string">&#x27;最低分&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> res</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> res.`subject_no`<span class="operator">=</span>sub.`subject_no`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> res.`subject_no`</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(res.student_result) <span class="operator">&gt;</span><span class="number">80</span>;</span><br></pre></td></tr></table></figure>



<h1 id="26、拓展之数据库级别的md5加密"><a href="#26、拓展之数据库级别的md5加密" class="headerlink" title="26、拓展之数据库级别的md5加密"></a>26、拓展之数据库级别的md5加密</h1><p>什么是MD5?</p>
<p>主要增加算法复杂度和不可逆性。</p>
<p>MD5不可逆，具体的值的md5是一样的</p>
<p>MD5破解网站的原理，背后有一个字典，MD5加密后的值，加密前的值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `testmd5`(</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `pwd` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 明文密码</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `testmd5`(`id`,`name`,`pwd`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `testmd5`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 加密</span></span><br><span class="line">UPDATE testmd5 <span class="keyword">SET</span> pwd<span class="operator">=</span>MD5(pwd) <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入的时候加密</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `testmd5`(`id`,`name`,`pwd`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;小明&#x27;</span>,MD5(<span class="string">&#x27;123456&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何校验，将用户传递进来的密码，进行MD5加密，然后比对加密后的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `testmd5` <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;小明&#x27;</span> <span class="keyword">AND</span> pwd <span class="operator">=</span> MD5(<span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h1 id="27、总结"><a href="#27、总结" class="headerlink" title="27、总结"></a>27、总结</h1><p>去看另外一个word文档,上面分类介绍</p>
<p><img src="C:\Users\86940\AppData\Roaming\Typora\typora-user-images\image-20211109141500749.png" alt="image-20211109141500749"></p>
<h1 id="28、事务ACID原则、脏读、不可重复读、幻读"><a href="#28、事务ACID原则、脏读、不可重复读、幻读" class="headerlink" title="28、事务ACID原则、脏读、不可重复读、幻读"></a>28、事务ACID原则、脏读、不可重复读、幻读</h1><h2 id="1-什么是事务"><a href="#1-什么是事务" class="headerlink" title="1.什么是事务"></a>1.什么是事务</h2><p>==要么都成功，要么都失败==</p>
<p>将一组sql放到一个批次中取执行</p>
<blockquote>
<p>事务原则：ACID原则 原子性 、一致性、隔离性、持久性     （脏读，幻读。。。）</p>
</blockquote>
<p>参考博客链接：<a href="https://blog.csdn.net/dengjili/article/details/82468576">事务ACID理解</a></p>
<p><strong>原子性（Atomicity）</strong></p>
<p>要么都成功，要么都失败</p>
<p><strong>一致性（Consistency）</strong></p>
<p>事务前后的数据完整性要保持一致</p>
<p>下图操作前和操作后的总和都是1000</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/20180906211811672" alt="这里写图片描述"></p>
<p><strong>隔离性（Isolation）</strong></p>
<p>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</p>
<p><strong>持久性（Durability）</strong></p>
<p>事务一旦移交不可逆，被持久化到数据库中</p>
<blockquote>
<p>隔离所导致的一些问题</p>
</blockquote>
<h3 id="脏读："><a href="#脏读：" class="headerlink" title="脏读："></a>脏读：</h3><p>1、在事务A执行过程中，事务A对数据资源进行了修改，事务B读取了事务A修改后的数据。</p>
<p>2、由于某些原因，事务A并没有完成提交，发生了RollBack操作，则事务B读取的数据就是脏数据。</p>
<p>这种<strong>读取到另一个事务未提交的数据的现象就是脏读(Dirty Read)。</strong></p>
<p><img src="https://pic1.zhimg.com/80/v2-a1664b7cde8c890093f4198afead9bff_720w.jpg?source=1940ef5c" alt="img"></p>
<h3 id="不可重复读："><a href="#不可重复读：" class="headerlink" title="不可重复读："></a>不可重复读：</h3><p>事务B读取了两次数据资源，在这两次读取的过程中事务A修改了数据，导致事务B在这两次读取出来的数据不一致。</p>
<p>这种**==在同一个事务中==，前后两次读取的数据不一致的现象就是不可重复读(Nonrepeatable Read)。**</p>
<p><img src="https://pic1.zhimg.com/50/v2-dbdf320962deee0f4e39e11ade7983d3_720w.jpg?source=1940ef5c" alt="img"></p>
<h3 id="虚读-幻读"><a href="#虚读-幻读" class="headerlink" title="虚读(幻读)"></a>虚读(幻读)</h3><p>事务B前后两次读取同一个范围的数据，在事务B两次读取的过程中事务A新增了数据，导致事务B后一次读取到前一次查询没有看到的行。</p>
<p>幻读和不可重复读有些类似，但是<strong>幻读强调的是集合的增减，而不是单条数据的更新。</strong></p>
<p><img src="https://pic2.zhimg.com/80/v2-554873c313a8f6ae06b1a536bb289265_720w.jpg?source=1940ef5c" alt="img"></p>
<h3 id="第一类更新丢失"><a href="#第一类更新丢失" class="headerlink" title="第一类更新丢失"></a>第一类更新丢失</h3><p>事务A和事务B都对数据进行更新，但是事务A由于某种原因事务回滚了，把已经提交的事务B的更新数据给覆盖了。这种现象就是第一类更新丢失。</p>
<p><img src="https://pic1.zhimg.com/80/v2-df373501c48e4bba633c859944394e53_720w.jpg?source=1940ef5c" alt="img"></p>
<h3 id="第二类更新丢失"><a href="#第二类更新丢失" class="headerlink" title="第二类更新丢失"></a>第二类更新丢失</h3><p>其实跟第一类更新丢失有点类似，也是两个事务同时对数据进行更新，但是事务A的更新把已提交的事务B的更新数据给覆盖了。这种现象就是第二类更新丢失。</p>
<p><img src="https://pic2.zhimg.com/80/v2-b865701afea8e74b2370187c4837da49_720w.jpg?source=1940ef5c" alt="img"></p>
<h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p>为了解决以上的问题，主流的关系型数据库都会提供四种事务的隔离级别。事务隔离级别从低到高分别是：读未提交，读已提交，可重复读，串行化。事务隔离级别越高，越能保证数据的一致性和完整性，但是执行效率也越低，所以在设置数据库的事务隔离级别时需要做一下权衡，mysql默认是可重复读</p>
<h4 id="读未提交"><a href="#读未提交" class="headerlink" title="读未提交"></a>读未提交</h4><p>读未提交(Read Uncommitted)，是最低的隔离级别，<strong>所有的事务都可以看到其他未提交的事务的执行结果。</strong>只能防止第一类更新丢失，不能解决脏读，可重复读，幻读，所以很少应用于实际项目。</p>
<h4 id="读已提交"><a href="#读已提交" class="headerlink" title="读已提交"></a>读已提交</h4><p>读已提交(Read Committed)，在该隔离级别下，<strong>一个事务的更新操作只有在该事务提交之后，另外一个事务才可能读取到同一笔数据更新后的结果。</strong>可以防止脏读和第一类更新丢失，但是不能解决可重复和幻读的问题。</p>
<h4 id="可重复读（重要）"><a href="#可重复读（重要）" class="headerlink" title="可重复读（重要）"></a>可重复读（重要）</h4><p>可重复读(Repeatable Read)，mysql默认的隔离级别。在该隔离级别下，<strong>一个事务多次读同一个数据，在这个事务还没有结束时，其他事务不能访问该数据（包括了读写）</strong>，这样就可以在同一个事务内两次读到的数据是一样的。可以防止脏读、不可重复读、第一类更新丢失，第二类更新丢失的问题，不过还是会出现幻读。</p>
<h4 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h4><p>串行化(Serializable)，这是最高的隔离级别。它要求事务序列化执行，事务只能一个接着一个的执行，不能并发执行。在这个级别，可以解决上面提到的所有并发问题，但是可能导致大量的超时现象和锁竞争，通常不会用这个隔离级别。</p>
<p><img src="https://pica.zhimg.com/80/v2-25ed812ff748a38bd3e4127db1ed7a48_720w.jpg?source=1940ef5c" alt="img"></p>
<h2 id="扩展：回滚机制"><a href="#扩展：回滚机制" class="headerlink" title="扩展：回滚机制"></a>扩展：回滚机制</h2><p>在mysql中，恢复机制是通过回滚日志（undo log）实现的，所有的事务进行的修改都会先记录到这个回滚日志中，然后在堆数据库中的对应进行写入。</p>
<p>mysql的事务是由redo和undo的，redo操作的所有信息都是记录到重做日志（redo_log）中，也就是说当一个事务做commit操作时，需要先把这个事务的操作写到redo_log中，然后在把这些操作flush到磁盘上，当出现故障时，只需要读取redo_log，然后在重新flush到磁盘就行了。</p>
<p>而对于undo就比较麻烦，mysql在处理事务时，会在数据共享表空间里申请一个段就做segment段，用保存undo信息，当在处理rollback，不是完完全全的物理undo，而是逻辑undo，也就是说会之前的操作进行反操作（对于每个insert，回滚时会执行delete；对于每个delete，回滚时会执行insert；对于每个update，回滚时会执行一个相反的update，把数据改回去。），但是这些共享表空间是不进行回收的。这些表空间的回收需要由mysql的master thread进程进行回收。</p>
<h1 id="29、测试事务实现转账"><a href="#29、测试事务实现转账" class="headerlink" title="29、测试事务实现转账"></a>29、测试事务实现转账</h1><blockquote>
<p>执行事务</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 事务</span></span><br><span class="line"><span class="comment">-- mysql 是默认开启事务自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关闭</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line"><span class="comment">-- 开启（默认的）</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动处理事务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">-- 关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;  <span class="comment">-- 标记一个事务的开始，从这个之后的sql都在同一个事务内</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> XX</span><br><span class="line"><span class="keyword">INSERT</span> XX</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交 ： 持久化</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 回滚 ： 回到的原来的样子（失败）</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="comment">-- 事务结束</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 开启自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 了解</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">-- 设置一个事务的保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">-- 回滚到保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">-- 撤销保存点</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>模拟场景</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 转账</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE shop <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用shop数据库</span></span><br><span class="line"><span class="keyword">USER</span> `shop`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account`(</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `money` <span class="type">DECIMAL</span>(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 初始化数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(`name`,`money`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;A&#x27;</span>,<span class="number">2000.00</span>),</span><br><span class="line">(<span class="string">&#x27;B&#x27;</span>,<span class="number">10000.00</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模拟转账</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>; <span class="comment">-- 关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">START</span> TRANSACTION; <span class="comment">-- 开启事务 （一组事务）</span></span><br><span class="line"></span><br><span class="line">UPDATE account <span class="keyword">SET</span> `money`<span class="operator">=</span>`money`<span class="number">-500</span> <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;A&#x27;</span>; <span class="comment">-- A减500</span></span><br><span class="line">UPDATE account <span class="keyword">SET</span> `money`<span class="operator">=</span>`money`<span class="operator">+</span><span class="number">500</span> <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;B&#x27;</span>; <span class="comment">-- B加500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>; <span class="comment">-- 提交事务，就会被持久化了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span>; <span class="comment">-- 回滚</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 恢复自动提交</span></span><br></pre></td></tr></table></figure>



<h1 id="30、索引介绍及索引的分类"><a href="#30、索引介绍及索引的分类" class="headerlink" title="30、索引介绍及索引的分类"></a>30、索引介绍及索引的分类</h1><blockquote>
<p>Msql官方对索引的定义为：<strong>索引（index）是帮助MySQL高效获取数据的数据结构</strong>。</p>
<p>提取句子主干，就可以得到索引的本质：索引是数据结构。</p>
</blockquote>
<h2 id="1-索引的分类"><a href="#1-索引的分类" class="headerlink" title="1.索引的分类"></a>1.索引的分类</h2><blockquote>
<p>在一个表中，主键索引只能有一个，唯一索引可以有多个</p>
</blockquote>
<ul>
<li>主键索引（primary key）<ul>
<li>唯一的标识，主键不可重复，只能有一个列作为主键</li>
</ul>
</li>
<li>唯一索引 （unique key）<ul>
<li>避免重复的列出现，可以重复，多个列都可以标示为唯一索引</li>
</ul>
</li>
<li>常规索引（key/index）<ul>
<li>默认的 index 或者key关键字来设置</li>
</ul>
</li>
<li>全文索引（FullText）<ul>
<li>在特定的数据库引擎下才有，myisam</li>
<li>快速定位数据</li>
</ul>
</li>
</ul>
<p>基础语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 索引的使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1.在创建表的时候给字段增加索引</span></span><br><span class="line"><span class="comment">-- 2.创建完毕后，增加索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示所有的索引信息</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 新增一个索引 (索引名) 列名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> KEY `UK_IDENTITY_CARD` (`identity_card`);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> KEY `K_STUDENT_NAME`(`student_name`);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student`  <span class="keyword">ADD</span> FULLTEXT INDEX `FI_PHONE` (`phone`);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- explain 分析sql执行的状况</span></span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student; <span class="comment">-- 非全文索引</span></span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(`phone`) AGAINST(<span class="string">&#x27;138&#x27;</span>); <span class="comment">-- 全文索引</span></span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/jiadajing267/article/details/81269067">【MySQL优化】——看懂explain_漫漫长途，终有回转；余味苦涩，终有回甘-CSDN博客_explain</a></p>
<h1 id="31、SQL编程创建100万条数据测试索引"><a href="#31、SQL编程创建100万条数据测试索引" class="headerlink" title="31、SQL编程创建100万条数据测试索引"></a>31、SQL编程创建100万条数据测试索引</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> app_user (</span><br><span class="line">  `id` <span class="type">BIGINT</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">50</span>)  <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;用户昵称&#x27;</span>,</span><br><span class="line">  `email` <span class="type">VARCHAR</span>(<span class="number">50</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户邮箱&#x27;</span>,</span><br><span class="line">  `phone` <span class="type">VARCHAR</span>(<span class="number">20</span>)  <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">  `gender` TINYINT(<span class="number">4</span>)  UNSIGNED <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;性别（0：男  1：女）&#x27;</span>,</span><br><span class="line">  `password` <span class="type">VARCHAR</span>(<span class="number">100</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `age` TINYINT(<span class="number">4</span>)  <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `create_time` DATETIME  <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">TIMESTAMP</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;app用户表&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入100万数据b (函数)</span></span><br><span class="line"></span><br><span class="line">DELIMITER $$ <span class="comment">-- 写函数之前必须要写，标志</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000000</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">  WHILE i<span class="operator">&lt;</span>num DO</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> app_user(`name`,`email`,`phone`,`gender`,`password`,`age`)</span><br><span class="line">    <span class="keyword">VALUES</span>(CONCAT(<span class="string">&#x27;用户&#x27;</span>,i),<span class="string">&#x27;123345@qq.com&#x27;</span>,CONCAT(<span class="string">&#x27;18&#x27;</span>,<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span>((<span class="number">999999999</span><span class="number">-100000000</span>)<span class="operator">+</span><span class="number">100000000</span>))),<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">2</span>),UUID(),<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">100</span>));</span><br><span class="line">    <span class="keyword">SET</span> i <span class="operator">=</span> i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">  <span class="keyword">END</span> WHILE;</span><br><span class="line">  <span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行函数</span></span><br><span class="line"><span class="keyword">SELECT</span> mock_data();</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数中间的插入脚本</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> app_user(`name`,</span><br><span class="line">`email`,</span><br><span class="line">`phone`,</span><br><span class="line">`gender`,</span><br><span class="line">`password`,</span><br><span class="line">`age`)</span><br><span class="line"><span class="keyword">VALUES</span>(CONCAT(<span class="string">&#x27;用户X&#x27;</span>),</span><br><span class="line"><span class="string">&#x27;123345@qq.com&#x27;</span>,</span><br><span class="line">CONCAT(<span class="string">&#x27;18&#x27;</span>,<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span>((<span class="number">999999999</span><span class="number">-100000000</span>)<span class="operator">+</span><span class="number">100000000</span>))),</span><br><span class="line"><span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">2</span>),</span><br><span class="line">UUID(),</span><br><span class="line"><span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">100</span>));</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 加索引前</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>; <span class="comment">-- 0.440 sec</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建索引</span></span><br><span class="line"><span class="comment">-- id_表名_字段名  索引名</span></span><br><span class="line"><span class="comment">-- CREATE INDEX 索引名 ON 表名(`字段名`);</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX id_app_user_name <span class="keyword">ON</span> app_user(`name`);</span><br><span class="line"> <span class="comment">-- 加索引后</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>; <span class="comment">-- 0.002 sec</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>加索引前</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704114603590.png" alt="image-20210704114603590"></p>
<p>加索引后</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704114402938.png" alt="image-20210704114402938"></p>
<p><strong>索引在小数据量的时候，用处不大，但是再大数据的时候，区分十分明显</strong></p>
<h1 id="32、索引原则"><a href="#32、索引原则" class="headerlink" title="32、索引原则"></a>32、索引原则</h1><ul>
<li>索引不是越多越好</li>
<li>不要对经常变动的数据加索引</li>
<li>小数据量的表不需要加索引</li>
<li>索引一般加载常用来查询的字段上</li>
</ul>
<blockquote>
<p>索引的数据结构</p>
</blockquote>
<p>Hash类型的索引</p>
<p>bree ：innodb的默认数据结构</p>
<p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">CodingLabs - MySQL索引背后的数据结构及算法原理</a></p>
<h1 id="33、数据库用户管理"><a href="#33、数据库用户管理" class="headerlink" title="33、数据库用户管理"></a>33、数据库用户管理</h1><blockquote>
<p>sql yog 可视化管理</p>
</blockquote>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704145840971.png" alt="image-20210704145840971"></p>
<blockquote>
<p>sql 命令操作</p>
</blockquote>
<p>用户表：mysql.user</p>
<p>本质:读这张表进行增删改查</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> zyy IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码(修改当前用户密码)</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码(修改指定用户密码)</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> zyy <span class="operator">=</span> PASSWORD(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重命名  RENAME 原名子 zyy TO 新名字;</span></span><br><span class="line">RENAME <span class="keyword">USER</span> zyy <span class="keyword">TO</span> newzyy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户授权  ALL PRIVILEGES 全部的权限，库，表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALL PRIVILEGES 除了给别人授权不行，其他都能干</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> newzyy;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> newzyy; <span class="comment">-- 查看指定用户的权限</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> root<span class="variable">@localhost</span>; <span class="comment">-- 查看root用户的权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销权限   REVOKE哪些权限，在哪个库，给谁撤销</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">FROM</span> newzyy;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> newzyy;</span><br></pre></td></tr></table></figure>

<h1 id="34、MySQL备份"><a href="#34、MySQL备份" class="headerlink" title="34、MySQL备份"></a>34、MySQL备份</h1><p>为什么要备份？</p>
<ul>
<li>保证重要的数据不丢失</li>
<li>数据转移</li>
</ul>
<p>mysql数据库备份的方式</p>
<ul>
<li><p>直接拷贝物理文件</p>
</li>
<li><p>在sqlyog这种可视化工具中手动导出</p>
<ul>
<li><p>在想要导出的表或者库中，右键，</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704155338509.png" alt="image-20210704155338509"></p>
</li>
</ul>
</li>
<li><p>使用命令行导出 mysqldump 命令行使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一张表 mysqldump -h主机 -u用户名 -p密码 数据库 表名 &gt;物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -p123456 school student &gt;D:/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多张表 mysqldump -h主机 -u用户名 -p密码 数据库 表名1 表名2 &gt;物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -p123456 school student result &gt;D:/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库 mysqldump -h主机 -u用户名 -p密码 数据库 &gt;物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -p123456 school &gt;D:/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入</span></span><br><span class="line"><span class="comment"># 登录的情况下，切换到指定的数据库</span></span><br><span class="line"><span class="comment"># source 备份文件</span></span><br><span class="line"><span class="comment"># 也可以这样</span></span><br><span class="line">mysql -u用户名 -p密码 库名&lt;备份文件</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704161230594.png" alt="image-20210704161230594"></p>
</li>
</ul>
<p>假设你要备份数据库，防止数据丢失。</p>
<p>把数据库给别人，直接给sql即可。</p>
<h1 id="35、如何设计一个项目的数据库"><a href="#35、如何设计一个项目的数据库" class="headerlink" title="35、如何设计一个项目的数据库"></a>35、如何设计一个项目的数据库</h1><h2 id="1-为什么需要设计"><a href="#1-为什么需要设计" class="headerlink" title="1.为什么需要设计"></a>1.为什么需要设计</h2><p>==当数据库比较复杂的时候，我们就需要设计了==</p>
<p><strong>糟糕的数据库设计</strong></p>
<ul>
<li>数据冗余，浪费空间</li>
<li>数据库插入和删除都会麻烦、异常（屏蔽使用物理外键）</li>
<li>程序的性能差</li>
<li>看不懂数据库里面的内容是干嘛的(不遵循命名规则)</li>
</ul>
<p><strong>良好的数据库设计</strong></p>
<ul>
<li>节省内存空间</li>
<li>保证数据库的完整性</li>
<li>方便我们开发系统</li>
<li>见名知意,方便数据库整理</li>
</ul>
<p><strong>软件开发中，关于数据库的设计</strong></p>
<ul>
<li>分析需求，分析业务和需要处理的数据库的需求</li>
<li>概要设计：设计关系图E-R图</li>
</ul>
<p><strong>设计数据库的步骤（个人博客）</strong></p>
<ul>
<li><p>收集信息，分析需求</p>
<ul>
<li><p>用户表（用户登录注销，用户的个人信息，写博客，创建分类）</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704162821445.png" alt="image-20210704162821445"></p>
</li>
<li><p>分类表（文章分类，谁创建的）</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704163120753.png" alt="image-20210704163120753"></p>
</li>
<li><p>文章表（文章信息）</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704164131400.png" alt="image-20210704164131400"></p>
</li>
<li><p>评论表</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704164555263.png" alt="image-20210704164555263"></p>
</li>
<li><p>友链表（友情链接信息）</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704164938625.png" alt="image-20210704164938625"></p>
</li>
<li><p>自定义表（系统信息，某个关键的字，或者一些主字段） <code>key:value</code></p>
</li>
<li><p>关注表(粉丝数)</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704165556127.png" alt="image-20210704165556127"></p>
</li>
<li><p>说说表（发表心情， id…content…create_time）</p>
</li>
</ul>
</li>
<li><p>标识实体（把需求落到每个字段）</p>
</li>
<li><p>标识实体之间的关系</p>
<ul>
<li>写博客：user –&gt; blog</li>
<li>创建分类：user –&gt; category</li>
<li>关注：user –&gt; user</li>
<li>友链：links</li>
<li>评论：user –&gt; user –&gt; blog</li>
</ul>
</li>
</ul>
<p>(bbs / crm)</p>
<h1 id="36、数据库三大范式（了解）"><a href="#36、数据库三大范式（了解）" class="headerlink" title="36、数据库三大范式（了解）"></a>36、数据库三大范式（了解）</h1><p><strong>为什么需要数据规范化？</strong></p>
<ul>
<li>信息重复</li>
<li>更新异常</li>
<li>插入异常<ul>
<li>无法正常显示信息</li>
</ul>
</li>
<li>删除异常<ul>
<li>丢失有效的信息</li>
</ul>
</li>
</ul>
<blockquote>
<p>三大范式</p>
</blockquote>
<p><strong>第一范式（1NF）</strong></p>
<p>原子性：保证每一列不可再分</p>
<p><strong>第二范式（2NF）</strong></p>
<p>前提：满足第一范式</p>
<p>第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。</p>
<p>每张表只描述一件事情</p>
<p><strong>第三范式（3NF）</strong></p>
<p>前提：满足第一范式和第二范式</p>
<p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p>
<p>规范数据库的设计</p>
<p><strong>规范性和性能的问题</strong></p>
<p>关联查询的表不得超过三张表</p>
<ul>
<li>考虑商业化的需求和目标（成本，用户体验）数据库的性能更加重要</li>
<li>在规范性能的问题的时候，需要适当的考虑一下规范性</li>
<li>故意给某些表增加一些冗余的字段。（从多表查询中变为单表查询）</li>
<li>故意增加一些计算列（从大数据库降低为小数据量的查询：索引）</li>
</ul>
<h1 id="37、数据库驱动和JDBC"><a href="#37、数据库驱动和JDBC" class="headerlink" title="37、数据库驱动和JDBC"></a>37、数据库驱动和JDBC</h1><h2 id="1-数据库驱动"><a href="#1-数据库驱动" class="headerlink" title="1.数据库驱动"></a>1.数据库驱动</h2><p>驱动：声卡，显卡，数据库</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210713212553844.png" alt="image-20210713212553844"></p>
<p>数据库驱动程序由<strong>数据库厂商</strong>或者<strong>其他一些专门开发数据库驱动程序的厂商</strong>提供,它们用来提供给<strong>外部应用程序</strong>一个访问这个数据库的接口</p>
<h2 id="2-JDBC"><a href="#2-JDBC" class="headerlink" title="2.JDBC"></a>2.JDBC</h2><p>JDBC(Java Database Connectivity， Java 数 据 库 连 接)是 一 种可用于执行 SQL 语句的 Java API(Application Programming Interface， 应用程序设计接口)。它由一些 Java 语言编写的类和接口组成。JDBC 为数据库应用开发人员、数据库前台开发人员提供了一种标准的应用程序设计接口， 使开发人员可以用纯 Java 语言编写完整的数据库应用程序。</p>
<p>JDBC 通过调用其接口提供的方法， 提供了 Java 应用程序与各种数据库服务器之间的连接服务</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210713213250382.png" alt="image-20210713213250382"></p>
<p><strong>java.sql:是jdbc2.0之前的东西</strong></p>
<p>包含的接口和类采用传统的C/S体系结构设计思想.主要功能针对基本数据库编程服务,如生成连接,执行语句以及准备语句和运行批处理语句.也有一些高级功能如批处理更新,可滚动结果集,事务隔离以及SQL数据类型</p>
<p><strong>javax.sql:包含jdbc3.0的新特性</strong></p>
<p>引入了JDBC编程方面一些主要的体系结构改变,并且为连接管理,分布式事务处理和老式连接提供了更好的抽象.这个包也引入了容器管理的连接缓冲池,分布式事务以及行集(rowset)</p>
<p><em><strong>*javax.sql.*提供了很多新特性,是对java.sql的补充,具体提供了一下方面的功能<br> (1)Datasource接口提供了一种可选择性的方式去建立连接<br> (2)提供了连接池的支持<br> (3)增加了分布式的事务处理机制<br> (4)增加了rowset*</strong></em></p>
<p><em><strong>*(注意javax.sql.*并不是包含java.sql.*，它俩一起组成了访问数据的类)*</strong></em></p>
<p>还需要导入一个数据库驱动包 例如: mysql-connector-java-5.1.47.jar</p>
<h1 id="38、第一个JDBC程序"><a href="#38、第一个JDBC程序" class="headerlink" title="38、第一个JDBC程序"></a>38、第一个JDBC程序</h1><blockquote>
<p>创建测试数据库</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE jdbcstudy <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> jdbcstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users(</span><br><span class="line">  `id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">  `password` <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">  `email` <span class="type">VARCHAR</span>(<span class="number">60</span>),</span><br><span class="line">  `birthday` <span class="type">DATE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(`id`,`name`,`password`,`email`,`birthday`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;小胖&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;xp@qq.com&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;小屠&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;xt@qq.com&#x27;</span>,<span class="string">&#x27;2000-02-02&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;小徐&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;xx@qq.com&#x27;</span>,<span class="string">&#x27;2000-03-03&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li><p>创建一个普通项目</p>
</li>
<li><p>导入数据库驱动（jar包）</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210713215804024.png" alt="image-20210713215804024"></p>
</li>
<li><p>编写测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCStudy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line"><span class="comment">//        DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span></span><br><span class="line">        <span class="comment">//推荐这种写法加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.用户信息和URL</span></span><br><span class="line">        <span class="comment">// useSSL=true可能会报错</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false&quot;</span>;</span><br><span class="line">        String userName = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String passWord = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="comment">//3.连接成功，数据库对象 Connection代表数据库</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, userName, passWord);</span><br><span class="line">        <span class="comment">//4.执行SQl的对象 Statement 执行的sql对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        <span class="comment">//5.执行SQL的对象 去 执行SQL ，可能存在结果，查看返回的结果</span></span><br><span class="line">        String sql = <span class="string">&quot;SELECT * FROM users&quot;</span>;</span><br><span class="line">        <span class="comment">//返回的结果集 结果集中封装了我们全部的查询的结果</span></span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line">        <span class="comment">//System.out.println(resultSet);</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id=&quot;</span>+resultSet.getString(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span>+resultSet.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;password=&quot;</span>+resultSet.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;email=&quot;</span>+resultSet.getString(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;birthday=&quot;</span>+resultSet.getString(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*while (resultSet.next()) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;id=&quot;+resultSet.getObject(&quot;id&quot;));</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;name=&quot;+resultSet.getObject(&quot;name&quot;));</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;password=&quot;+resultSet.getObject(&quot;password&quot;));</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;email=&quot;+resultSet.getObject(&quot;email&quot;));</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;birthday=&quot;+resultSet.getObject(&quot;birthday&quot;));</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;===============================&quot;);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改操作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Connection connection = DriverManager.getConnection(url, userName, passWord);</span></span><br><span class="line">        <span class="comment">//Statement statement = connection.createStatement();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//String sql1 = &quot;insert into users(插入的表字段给我对应好,不然出错了不要问我为什么) values(写你想插入的内容呗)&quot;;</span></span><br><span class="line">        String sql1 = <span class="string">&quot;INSERT INTO users(`id`,`name`,`password`,`email`,`birthday`)\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;VALUES (4,&#x27;小虎&#x27;,&#x27;123456&#x27;,&#x27;xh@qq.com&#x27;,&#x27;2000-04-04&#x27;)&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> num = statement.executeUpdate(sql1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;插入成功~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.释放连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>步骤总结：</p>
<ol>
<li>加载驱动</li>
<li>连接数据库DriverManager</li>
<li>获取执行SQL的对象 Statement</li>
<li>获得返回的结果集</li>
<li>释放连接</li>
</ol>
<h1 id="39、JDBC中对象1解释"><a href="#39、JDBC中对象1解释" class="headerlink" title="39、JDBC中对象1解释"></a>39、JDBC中对象1解释</h1><blockquote>
<p>DriverManager</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.加载驱动</span></span><br><span class="line"><span class="comment">//DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span></span><br><span class="line"><span class="comment">//推荐这种写法加载驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">Connection connection = DriverManager.getConnection(url, userName, passWord);</span><br><span class="line"><span class="comment">// connection代表数据库</span></span><br><span class="line"><span class="comment">// 数据库设置自动提交</span></span><br><span class="line"><span class="comment">// 事务提交</span></span><br><span class="line"><span class="comment">// 事务回滚</span></span><br><span class="line">connection.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">connection.commit();</span><br><span class="line">connection.rollback();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>URL</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String url = <span class="string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mysql默认端口3306 你们改成了3307</span></span><br><span class="line"><span class="comment">// 协议://主机地址:端口号/数据库名?参数1&amp;参数2&amp;参数3</span></span><br><span class="line"><span class="comment">// oracle默认端口1521</span></span><br><span class="line"><span class="comment">// jdbc:oracle:thin:@localhost:1521:sid</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Statement 执行sql对象  、  PreparedStatement 执行sql对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">&quot;SELECT * FROM users&quot;</span>;<span class="comment">//编写SQL</span></span><br><span class="line"></span><br><span class="line">statement.executeQuery();<span class="comment">//执行查询 返回ResultSet</span></span><br><span class="line">statement.executeUpdate();<span class="comment">//新增，删除，修改，都用这个，返回受影响的行数</span></span><br><span class="line">statement.execute();<span class="comment">//执行任何SQL</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ResultSet 查询的结果集，封装了所有的查询结果</p>
</blockquote>
<p>获得指定的数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在不知道列类型的情况下使用</span></span><br><span class="line">resultSet.getObject();</span><br><span class="line"><span class="comment">//如果知道列类型，就使用指定的类型</span></span><br><span class="line">resultSet.getString();</span><br><span class="line">resultSet.getInt();</span><br><span class="line">resultSet.getDouble();</span><br><span class="line">resultSet.getBigDecimal();</span><br><span class="line">resultSet.getFloat();</span><br><span class="line">resultSet.getDate();</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>

<p>遍历，指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.beforeFirst();<span class="comment">//移动到最前面</span></span><br><span class="line">resultSet.afterLast();<span class="comment">//移动到最后面</span></span><br><span class="line">resultSet.next();<span class="comment">//移动到下一个数据</span></span><br><span class="line">resultSet.previous();<span class="comment">//移动到前一行</span></span><br><span class="line">resultSet.absolute(row);<span class="comment">//移动到指定行</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>释放资源</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();<span class="comment">//消耗资源</span></span><br></pre></td></tr></table></figure>



<h1 id="40、statement对象详解"><a href="#40、statement对象详解" class="headerlink" title="40、statement对象详解"></a>40、statement对象详解</h1><p>==jdbc中的statement对象用于向数据库发送SQL语句，想完成对数据库的增删改查，只需要通过这个对象向数据库发送增删改查语句即可。==</p>
<p>Statement对象的executeUpdate方法，用于向数据库发送增、删、改的SQL语句，executeUpdate执行完后，将会返回一个整数（即增删改语句导致了数据库几行数据发送了变化）。</p>
<p>Statement.executeQuery方法用于向数据库发送查询语句，executeQuery方法返回代表查询结果的ResultSet对象。</p>
<blockquote>
<p>CRUD操作-create</p>
</blockquote>
<p>使用executeUpdate(String sql)方法完成数据添加操作，示例操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement statement = connection.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;insert into user(...) values(...)&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = statement.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;插入成功~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>CRUD操作-delete</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement statement = connection.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;delete from user where id=1&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = statement.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;删除成功~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>CRUD操作-update</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement statement = connection.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;update user set name=&#x27;&#x27; where name =&#x27;&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = statement.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;修改成功~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>CRUD操作-read</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement statement = connection.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;SELECT * FROM users&quot;</span>;</span><br><span class="line">ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">    <span class="comment">//根据获取列的数据类型，分别调用resultSet的相应方法映射到java对象中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>代码实现</p>
</blockquote>
<ol>
<li><p>提取工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//输入流  你要输入什么?                               我要输入db.properties配置文件所以我要拿到它</span></span><br><span class="line">            <span class="comment">//拿到配置文件过后你要往哪里塞?   我要往JdbcUtils这个类里面塞,所以要通过类加载器拿到它</span></span><br><span class="line">            InputStream in = JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">            <span class="comment">//你有了properties文件过后,要通过Properties来让java认识</span></span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//Properties调用它的加载方法即load()方法来把你的流对象解析出来让java使用</span></span><br><span class="line">            properties.load(in);</span><br><span class="line"></span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            username = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//驱动只用加载一次</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection con, Statement st, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>配置文件db.properties</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210714221731402.png" alt="image-20210714221731402"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/jdbcstudy?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写增删改的方法，<code>executeUpdate</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="comment">//测试插入</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            st = con.createStatement();</span><br><span class="line">            String sql = <span class="string">&quot;INSERT INTO users(`id`,`name`,`password`,`email`,`birthday`)\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VALUES (5,&#x27;小杨&#x27;,&#x27;123456&#x27;,&#x27;xy@qq.com&#x27;,&#x27;2000-05-05&#x27;)&quot;</span>;</span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="comment">//测试删除</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDelete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            st = con.createStatement();</span><br><span class="line">            String sql = <span class="string">&quot;DELETE FROM users WHERE `id`=5&quot;</span>;</span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试更新</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUpdate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            st = con.createStatement();</span><br><span class="line">            String sql = <span class="string">&quot;UPDATE users SET birthday=&#x27;2001-01-01&#x27; WHERE id=1&quot;</span>;</span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;更新成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zyy.lesson02.utils.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestSelect</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSelect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            st = con.createStatement();</span><br><span class="line">            String sql = <span class="string">&quot;SELECT * FROM users WHERE id=1&quot;</span>;</span><br><span class="line">            rs = st.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id=&quot;</span>+rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;name=&quot;</span>+rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="41、sql注入问题"><a href="#41、sql注入问题" class="headerlink" title="41、sql注入问题"></a>41、sql注入问题</h1><p>sql存在漏洞，会被攻击导致数据泄露 ==SQL会被拼接==</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">package cn.bs.sqlAttack;</span><br><span class="line">import cn.bs.jdbcS.JDBCUtils;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">public class SqlInjection &#123;</span><br><span class="line">    public <span class="keyword">static</span> void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span>正常登录</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>        login(&quot;小胖&quot;,&quot;1234567&quot;);</span><br><span class="line"></span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="keyword">sql</span>注入</span><br><span class="line">        login(&quot;&#x27; or &#x27;1=1&quot;,&quot;123456&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录业务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">static</span> void login(String userName, String password) &#123;</span><br><span class="line">        Connection con <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line">        Statement st <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line">        try &#123;</span><br><span class="line">            con <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line">            st <span class="operator">=</span> con.createStatement();</span><br><span class="line">            String <span class="keyword">sql</span> <span class="operator">=</span> &quot;SELECT * FROM users WHERE `name`=&#x27;&quot;<span class="operator">+</span>userName<span class="operator">+</span>&quot;&#x27; AND `password`=&#x27;&quot;<span class="operator">+</span>password<span class="operator">+</span>&quot;&#x27;&quot;;</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;1=1&#x27;</span> <span class="keyword">AND</span> `password`<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span></span><br><span class="line">            System.out.println(<span class="keyword">sql</span>);</span><br><span class="line">            rs <span class="operator">=</span> st.executeQuery(<span class="keyword">sql</span>);</span><br><span class="line">            while (rs.next()) &#123;</span><br><span class="line">                System.out.println(&quot;id=&quot;<span class="operator">+</span>rs.getInt(&quot;id&quot;));</span><br><span class="line">                System.out.println(&quot;name=&quot;<span class="operator">+</span>rs.getString(&quot;name&quot;));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (<span class="keyword">SQLException</span> e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>导致结果：错误的用户名或者密码可以获取到全部的用户信息</p>
<p><img src="C:\Users\86940\AppData\Roaming\Typora\typora-user-images\image-20211109173710081.png" alt="image-20211109173710081"></p>
<h1 id="42、PreparedStatement对象"><a href="#42、PreparedStatement对象" class="headerlink" title="42、PreparedStatement对象"></a>42、PreparedStatement对象</h1><p>PreparedStatement可以防止SQL注入，效率更好</p>
<ol>
<li><p>新增</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs.sqlAttack;</span><br><span class="line"><span class="keyword">import</span> cn.bs.jdbcS.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//使用?占位符代替参数</span></span><br><span class="line">            String sql = <span class="string">&quot;INSERT INTO users(`id`,`name`,`password`,`email`,`birthday`) VALUES (?,?,?,?,?)&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译SQL，先写SQL，然后不执行</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>, <span class="string">&quot;小枪&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>, <span class="string">&quot;xq@qq.com&quot;</span>);</span><br><span class="line">            st.setDate(<span class="number">5</span>, <span class="keyword">new</span> java.sql.Date(<span class="keyword">new</span> java.util.Date().getTime()));</span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs.sqlAttack;</span><br><span class="line"><span class="keyword">import</span> cn.bs.jdbcS.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDelete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//使用?占位符代替参数</span></span><br><span class="line">            String sql = <span class="string">&quot;DELETE FROM users WHERE `id`=?&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译SQL，先写SQL，然后不执行</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>更新</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zyy.lesson02.utils.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestUpdate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUpdate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//使用?占位符代替参数</span></span><br><span class="line">            String sql = <span class="string">&quot;UPDATE users SET birthday=? WHERE id=?&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译SQL，先写SQL，然后不执行</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setDate(<span class="number">1</span>, <span class="keyword">new</span> java.sql.Date(<span class="keyword">new</span> java.util.Date().getTime()));</span><br><span class="line">            st.setInt(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;修改成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs.sqlAttack;</span><br><span class="line"><span class="keyword">import</span> cn.bs.jdbcS.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSelect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//使用?占位符代替参数</span></span><br><span class="line">            String sql = <span class="string">&quot;SELECT * FROM users WHERE id=?&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译SQL，先写SQL，然后不执行</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            rs = st.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id=&quot;</span>+rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;name=&quot;</span>+rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>防止sql注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs.sqlAttack;</span><br><span class="line"><span class="keyword">import</span> cn.bs.jdbcS.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlDefense</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//正常登录</span></span><br><span class="line"><span class="comment">//        login(&quot;小胖&quot;,&quot;123456&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//sql注入</span></span><br><span class="line">        login(<span class="string">&quot;&#x27; or &#x27;1=1&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录业务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String userName, String password)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">// PreparedStatement 防止SQL注入的本质，把传递进来的参数当做字符</span></span><br><span class="line">            <span class="comment">// 假设其中存在转义字符，比如说&#x27;会被直接转义</span></span><br><span class="line">            String sql = <span class="string">&quot;SELECT * FROM users WHERE `name`=? AND `password`=?&quot;</span>;</span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            st.setString(<span class="number">1</span>, userName);</span><br><span class="line">            st.setString(<span class="number">2</span>, password);</span><br><span class="line">            rs = st.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id=&quot;</span> + rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;name=&quot;</span> + rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行结果：查不到任何结果</p>
</li>
</ol>
<h1 id="43、使用idea连接数据库"><a href="#43、使用idea连接数据库" class="headerlink" title="43、使用idea连接数据库"></a>43、使用idea连接数据库</h1><p><img src="C:\Users\86940\AppData\Roaming\Typora\typora-user-images\image-20211109183511865.png" alt="image-20211109183511865"></p>
<p>连接成功后，就可以选择数据库</p>
<p><img src="C:\Users\86940\AppData\Roaming\Typora\typora-user-images\image-20211109183808415.png" alt="image-20211109183808415"></p>
<p>双击数据库</p>
<p><img src="C:\Users\86940\AppData\Roaming\Typora\typora-user-images\image-20211109185132457.png" alt="image-20211109185132457"></p>
<p><img src="C:\Users\86940\AppData\Roaming\Typora\typora-user-images\image-20211109185148013.png" alt="image-20211109185148013"></p>
<p>idea编写sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> account</span><br><span class="line">(</span><br><span class="line">    id    <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name  <span class="type">varchar</span>(<span class="number">40</span>),</span><br><span class="line">    money <span class="type">float</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account(name, money)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;A&#x27;</span>, <span class="number">1000</span>),</span><br><span class="line">       (<span class="string">&#x27;B&#x27;</span>, <span class="number">1000</span>),</span><br><span class="line">       (<span class="string">&#x27;C&#x27;</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>



<h1 id="44、JDBC操作事务"><a href="#44、JDBC操作事务" class="headerlink" title="44、JDBC操作事务"></a>44、JDBC操作事务</h1><p>==要么都成功，要么都失败==</p>
<blockquote>
<p>ACID原则</p>
</blockquote>
<p>原子性：要么全部成功，要么全部失败</p>
<p>一致性：总数不变</p>
<p>隔离性：多个进程互不干扰</p>
<p>持久性：一旦提交不可逆，持久化到数据库了</p>
<p>隔离性的问题：</p>
<p>脏读：一个事务读取了另外一个没有提交的事务</p>
<p>不可重复读：在同一个事务内，重复读取表中数据，表数据发生了改变</p>
<p>幻读：在一个事务内，读取到了别人插入的数据，导致前后读出来的结果不一致</p>
<blockquote>
<p>代码实现</p>
</blockquote>
<ol>
<li>开启事务<code>con.setAutoCommit(false);</code></li>
<li>一组业务执行完毕，提交事务</li>
<li>可以在catch语句中显示的定义回滚语句，但是默认失败就会回滚</li>
</ol>
<p>正常情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zyy.lesson02.utils.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestTransaction1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/07/15 21:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransaction1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//关闭自动提交 自动会开启事务</span></span><br><span class="line">            con.setAutoCommit(<span class="keyword">false</span>);<span class="comment">//开启事务</span></span><br><span class="line">            <span class="comment">// A 转 B 100元</span></span><br><span class="line">            String sql1 = <span class="string">&quot;update account set money=money-100 where name=&#x27;A&#x27;&quot;</span>;</span><br><span class="line">            ps = con.prepareStatement(sql1);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">            String sql2 = <span class="string">&quot;update account set money=money+100 where name=&#x27;B&#x27;&quot;</span>;</span><br><span class="line">            ps = con.prepareStatement(sql2);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">            <span class="comment">//业务完毕，提交事务</span></span><br><span class="line">            con.commit();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;A 转 B 100元 成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>异常情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zyy.lesson02.utils.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestTransaction1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/07/15 21:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransaction2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//关闭自动提交 自动会开启事务</span></span><br><span class="line">            con.setAutoCommit(<span class="keyword">false</span>);<span class="comment">//开启事务</span></span><br><span class="line">            <span class="comment">// A 转 B 100元</span></span><br><span class="line">            String sql1 = <span class="string">&quot;update account set money=money-100 where name=&#x27;A&#x27;&quot;</span>;</span><br><span class="line">            ps = con.prepareStatement(sql1);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//默认失败</span></span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">1</span>/<span class="number">0</span>; <span class="comment">//一定会异常</span></span><br><span class="line"></span><br><span class="line">            String sql2 = <span class="string">&quot;update account set money=money+100 where name=&#x27;B&#x27;&quot;</span>;</span><br><span class="line">            ps = con.prepareStatement(sql2);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">            <span class="comment">//业务完毕，提交事务</span></span><br><span class="line">            con.commit();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;A 转 B 100元 成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//如果异常，默认也会回滚，下面不写也可以</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                con.rollback();</span></span><br><span class="line"><span class="comment">//            &#125; catch (SQLException ex) &#123;</span></span><br><span class="line"><span class="comment">//                ex.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="45、DBCP-C3P0连接池"><a href="#45、DBCP-C3P0连接池" class="headerlink" title="45、DBCP-C3P0连接池"></a>45、DBCP-C3P0连接池</h1><p>数据库连接 – 执行完毕 – 释放</p>
<p>连接– 释放  是十分浪费系统资源的</p>
<p>池化技术：准备一些预先的资源，过来就连接预先准备好的</p>
<p>最小连接数：10(常用连接)</p>
<p>最大连接数：100 （业务最高承载上线）</p>
<p>等待超时：100ms</p>
<p>编写连接池，实现一个接口DataSource</p>
<blockquote>
<p>开源数据源实现</p>
</blockquote>
<p>DBCP</p>
<p>C3p0</p>
<p>Druid:阿里巴巴</p>
<p>使用了这些数据库连接池之后，我们在项目开发中就不需要编写连接数据库的代码了</p>
<blockquote>
<p>DBCP</p>
</blockquote>
<p>需要用到的jar包</p>
<p>commons-dbcp-1.4</p>
<p>commons-pool-1.6</p>
<p>配置文件dbcp.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#连接设置</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#初始化连接</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#最大连接数量</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">50</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#最大空闲连接</span></span><br><span class="line"><span class="attr">maxIdle</span>=<span class="string">20</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#最小空闲连接</span></span><br><span class="line"><span class="attr">minIdle</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#超时等待时间以毫秒为单位 6000毫秒/1000等于60秒</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">60000</span></span><br><span class="line"><span class="comment">#JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：【属性名=property;】</span></span><br><span class="line"><span class="comment">#注意：user 与 password 两个属性会被明确地传递，因此这里不需要包含他们。</span></span><br><span class="line"><span class="attr">connectionProperties</span>=<span class="string">useUnicode=true;characterEncoding=UTF8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#指定由连接池所创建的连接的自动提交（auto-commit）状态。</span></span><br><span class="line"><span class="attr">defaultAutoCommit</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#driver default 指定由连接池所创建的连接的只读（read-only）状态。</span></span><br><span class="line"><span class="comment">#如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：Informix）</span></span><br><span class="line"><span class="attr">defaultReadOnly</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。</span></span><br><span class="line"><span class="comment">#可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE</span></span><br><span class="line"><span class="attr">defaultTransactionIsolation</span>=<span class="string">READ_COMMITTED</span></span><br></pre></td></tr></table></figure>

<p>工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp.BasicDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: JDBCDBCPUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/07/14 17:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDBCPUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream in = JDBCDBCPUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;dbcp.properties&quot;</span>);</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(in);</span><br><span class="line">            <span class="comment">//创建数据源 工厂模式</span></span><br><span class="line">            dataSource = BasicDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//从数据源中获取连接</span></span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection con, Statement st, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zyy.lesson02.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> com.zyy.lesson05.utils.JDBCDBCPUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestDBCP</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/07/15 22:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDBCP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCDBCPUtils.getConnection();</span><br><span class="line">            <span class="comment">//使用?占位符代替参数</span></span><br><span class="line">            String sql = <span class="string">&quot;INSERT INTO users(`id`,`name`,`password`,`email`,`birthday`) VALUES (?,?,?,?,?)&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译SQL，先写SQL，然后不执行</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>, <span class="string">&quot;钱七&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>, <span class="string">&quot;qianqi@sina.com&quot;</span>);</span><br><span class="line">            st.setDate(<span class="number">5</span>, <span class="keyword">new</span> java.sql.Date(<span class="keyword">new</span> java.util.Date().getTime()));</span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCDBCPUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>C3P0</p>
</blockquote>
<p>需要用到的jar包</p>
<p>c3p0-0.9.5.5.jar</p>
<p>mchange-commons-java-0.2.19.jar</p>
<p>配置文件c3p0-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    c3p0的缺省（默认）配置</span></span><br><span class="line"><span class="comment">    如果在代码中ComboPooledDataSource ds=new ComboPooledDataSource();这样写就表示使用的是c3p0的缺省（默认）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquiredIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    c3p0的命名配置</span></span><br><span class="line"><span class="comment">    如果在代码中ComboPooledDataSource ds=new ComboPooledDataSource(&quot;MySQL&quot;);这样写就表示使用的是name是MySQL</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name-config</span> <span class="attr">name</span>=<span class="string">&quot;MySQL&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquiredIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">name-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: JDBCC3P0Utils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/07/14 17:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCC3P0Utils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//private static ComboPooledDataSource dataSource = null;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//代码的方式配置</span></span><br><span class="line"><span class="comment">//            dataSource = new ComboPooledDataSource();</span></span><br><span class="line"><span class="comment">//            dataSource.setDriverClass();</span></span><br><span class="line"><span class="comment">//            dataSource.setJdbcUrl();</span></span><br><span class="line"><span class="comment">//            dataSource.setUser();</span></span><br><span class="line"><span class="comment">//            dataSource.setPassword();</span></span><br><span class="line"><span class="comment">//            dataSource.setMaxPoolSize();</span></span><br><span class="line"><span class="comment">//            dataSource.setMinPoolSize();</span></span><br><span class="line">            <span class="comment">//配置文件写法</span></span><br><span class="line">            dataSource = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;MySQL&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//从数据源中获取连接</span></span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection con, Statement st, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zyy.lesson05.utils.JDBCC3P0Utils;</span><br><span class="line"><span class="keyword">import</span> com.zyy.lesson05.utils.JDBCDBCPUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestC3P0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/07/15 22:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestC3P0</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCC3P0Utils.getConnection();</span><br><span class="line">            <span class="comment">//使用?占位符代替参数</span></span><br><span class="line">            String sql = <span class="string">&quot;INSERT INTO users(`id`,`name`,`password`,`email`,`birthday`) VALUES (?,?,?,?,?)&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译SQL，先写SQL，然后不执行</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>, <span class="string">&quot;刘八&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>, <span class="string">&quot;liuba@sina.com&quot;</span>);</span><br><span class="line">            st.setDate(<span class="number">5</span>, <span class="keyword">new</span> java.sql.Date(<span class="keyword">new</span> java.util.Date().getTime()));</span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCC3P0Utils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结</p>
</blockquote>
<p>无论用什么数据源，本质还是一样的，DataSource接口不会变，方法就不会变</p>
<p><a href="https://www.apache.org/index.html#projects-list">Welcome to The Apache Software Foundation!</a></p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210719174041225.png" alt="image-20210719174041225"></p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>nacos入门</title>
    <url>/2021/12/23/nacos%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><a href="https://gitee.com/the-world-is-new/three-part">测试文件地址</a></p>
<h1 id="注册中心简介"><a href="#注册中心简介" class="headerlink" title="注册中心简介"></a>注册中心简介</h1><p>背景分析<br>在微服务中，首先需要面对的问题就是如何查找服务(软件即服务)，其次,就是如何在不同的服务之间进行通信？如何更好更方便的管理应用中的每一个服务，如何建立各个服务之间联系的纽带，由此注册中心诞生（例如淘宝网卖家提供服务，买家调用服务）。<br>市面上常用注册中心有Zookeeper(雅虎Apache),Eureka(Netfix),Nacos(Alibaba),Consul(Google),那他们分别都有什么特点，我们如何进行选型呢？我们主要从社区活跃度,稳定性,功能,性能等方面进行考虑即可.本次微服务的学习,我们选择Nacos,它很好的支持了阿里的双11活动,不仅可以做注册中心，还可以作为配置中心，稳定性和性能都很好。</p>
<h1 id="构建Nacos服务"><a href="#构建Nacos服务" class="headerlink" title="构建Nacos服务"></a>构建Nacos服务</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>第一：确保你电脑已配置JAVA_HOME环境变量(Nacos启动时需要)</p>
<p>第二：确保你的MySQL版本为5.7以上（MariaDB10.5以上)</p>
<h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><p>第一步：Nacos下载,可在浏览器直接输入如下地址：</p>
<p><a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p>
<p><img src="https://img-blog.csdnimg.cn/5c366dd1cf2442568e182a2ae13dd2a2.png" alt="在这里插入图片描述"></p>
<p>第三步：解压Nacos（最好不要解压到中文目录下），其目录结构如下：</p>
<p><img src="https://img-blog.csdnimg.cn/8d139f02efdf46f48a97179bde2d0f20.png" alt="在这里插入图片描述"></p>
<h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><p>第一步：打开操作系统命令行，登陆mysql，执行课前资料中的sql脚本，不是nacos/conf目录下自带的。<br>例如,我们可以使用mysql自带客户端,在命令行首先登录mysql,然后执行如下指令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> d:/nacos-mysql.sql </span><br></pre></td></tr></table></figure>

<p>会有一个表nacos_config</p>
<p>第二步：打开/nacos/conf/application.properties里打开默认配置，并基于你当前环境配置要连接的数据库，连接数据库时使用的用户名和密码(假如前面有”#”要将其去掉)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">###If use MySQL as datasource:</span><br><span class="line"></span><br><span class="line">spring.datasource.platform=mysql</span><br><span class="line"></span><br><span class="line">###Count of DB:</span><br><span class="line"></span><br><span class="line">db.num=1</span><br><span class="line"></span><br><span class="line">###Connect URL of DB:</span><br><span class="line"></span><br><span class="line">db.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span><br><span class="line">db.user.0=root</span><br><span class="line">db.password.0=root</span><br></pre></td></tr></table></figure>

<p>服务启动与访问<br>第一步:启动Nacos服务（nacos的bin目录去通过指令启动）。</p>
<p>​        Linux/Unix/Mac启动命令(standalone代表着单机模式运行，非集群模式):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./startup.sh -m standalone</span><br></pre></td></tr></table></figure>

<p>​        Windows启动命令(standalone代表着单机模式运行，非集群模式):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure>

<p>第二步:访问Nacos服务。</p>
<p>打开浏览器，输入<a href="http://localhost:8848/nacos%E5%9C%B0%E5%9D%80">http://localhost:8848/nacos地址</a></p>
<p>其中，默认账号密码为nacos/nacos.</p>
<h1 id="服务注册与调用入门（重点）"><a href="#服务注册与调用入门（重点）" class="headerlink" title="服务注册与调用入门（重点）"></a>服务注册与调用入门（重点）</h1><h2 id="业务描述"><a href="#业务描述" class="headerlink" title="业务描述"></a>业务描述</h2><p>创建两个项目Module分别为服务提供者和服务消费者（假如已有则无需创建），两者都要注册到NacosServer中(这个server本质上就是一个web服务，端口默认为8848)，然后服务提供者可以为服务消费者提供远端调用服务(例如支付服务为服务提供方，订单服务为服务消费方)，如图所示：<br><img src="https://img-blog.csdnimg.cn/4421daf970c54d658be898ace0b09c73.png" alt="在这里插入图片描述"></p>
<h2 id="生产者服务创建及注册"><a href="#生产者服务创建及注册" class="headerlink" title="生产者服务创建及注册"></a>生产者服务创建及注册</h2><p>父工程maven的pom.xml配置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;module&gt;sca-consumer&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;sca-gateway&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;sca-provider&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;sca-common&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--统一依赖版本(spring boot,spring cloud,spring cloud alibaba)</span><br><span class="line">注意，这里只做版本管理--&gt;</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--Spring Boot--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.3.2.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;&lt;!--允许scope的值为import时，type的值必须pom--&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt; &lt;!--这里的import类似java中的import--&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--Spring Cloud (Spring Cloud 工程依赖于spring boot)，</span><br><span class="line">        spring cloud中定义的是一些微服务规范。--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;Hoxton.SR9&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--Spring Cloud Alibaba (这套依赖是基于Spring Cloud规范，做了具体的落地实现)--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2.6.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line">&lt;!--定义公共依赖(lombok,test)--&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">            &lt;!--springboot 2.2以后版本默认单元测试使用的是junit5，</span><br><span class="line">            所以junit4以前的测试引擎不在需要--&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">            &lt;/exclusion&gt;</span><br><span class="line">        &lt;/exclusions&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;!--定义统一编译运行环境(jdk)--&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;!--定义maven的编译插件--&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;source&gt;8&lt;/source&gt;</span><br><span class="line">                &lt;target&gt;8&lt;/target&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure>

<p>添加依赖:</p>
<pre><code>&lt;dependencies&gt;
    &lt;!--Web服务--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;!--服务的注册和发现(我们要讲服务注册到nacos)--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>第二步：创建并修改配置文件application.yml(或者application.properties)，实现服务注册，关键代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">   port: 8081</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: sca-provider #进行服务注册必须配置服务名</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: localhost:8848</span><br></pre></td></tr></table></figure>

<p>第三步：创建启动类(假如已有则无需定义)，关键代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt;</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class ProviderApplication &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    SpringApplication.run(ProviderApplication.class, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第四步：启动启动类，然后刷先nacos服务，检测是否服务注册成功，如图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/1ba763e2644440efbc5f46f3762f6533.png" alt="在这里插入图片描述"></p>
<p>第五步:停掉sca-provider服务，然后不断刷新nacos服务列表，检查服务的健康状态。</p>
<h2 id="消费者服务发现及调用"><a href="#消费者服务发现及调用" class="headerlink" title="消费者服务发现及调用"></a>消费者服务发现及调用</h2><p>第一步: 在sca-provider项目中创建服务提供方对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.provider.controller;</span><br><span class="line">   /**定义Controller对象(这个对象在spring mvc中给他的定义是handler),</span><br><span class="line">    * 基于此对象处理客户端的请求*/</span><br><span class="line">   @RestController</span><br><span class="line">   public class ProviderController&#123;</span><br><span class="line">       //@Value默认读取项目配置文件中配置的内容</span><br><span class="line">       //8080为没有读到server.port的值时,给定的默认值</span><br><span class="line">       @Value(&quot;$&#123;server.port:8080&#125;&quot;)</span><br><span class="line">       private String server;</span><br><span class="line">       //http://localhost:8081/provider/echo/tedu</span><br><span class="line">       @GetMapping(&quot;/provider/echo/&#123;msg&#125;&quot;)</span><br><span class="line">       public String doRestEcho1(@PathVariable String msg)&#123;</span><br><span class="line">           return server+&quot; say hello &quot;+msg;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>第二步：创建服务消费者工程（module名为sca-consumer，假如已有则无需创建），继承parent工程（01-sca），其pom.xml文件内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;artifactId&gt;sca-consumer&lt;/artifactId&gt;</span><br><span class="line">    </span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">    &lt;!--Web服务--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--服务的注册和发现(我们要讲服务注册到nacos)--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<p>第三步：创建sca-consumer服务中的配置文件application.yml，关键代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8090</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: sca-consumer #服务注册时，服务名必须配置</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: localhost:8848 #从哪里去查找服务</span><br></pre></td></tr></table></figure>

<p>第四步：创建消费端启动类并实现服务消费，关键代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt;</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class ConsumerApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第五步:在sca-consumer启动类中添加如下方法,用于创建RestTemplate对象.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean public RestTemplate restTemplate()&#123;*//基于此对象实现远端服务调用*    return new RestTemplate(); &#125;</span><br></pre></td></tr></table></figure>

<p>第六步:定义sca-consumer服务的消费端Controller,在此对象方法内部实现远端服务调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.consumer.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line"> * 定义服务消费端Controller,在这个Controller对象</span><br><span class="line"> * 的方法中实现对远端服务sca-provider的调用</span><br><span class="line">   */</span><br><span class="line">   @RestController</span><br><span class="line">   public class ConsumerController &#123;</span><br><span class="line">   /**</span><br><span class="line">    * 从spring容器获取一个RestTemplate对象,</span><br><span class="line">    * 基于此对象实现远端服务调用</span><br><span class="line">      */</span><br><span class="line">      @Autowired</span><br><span class="line">      private RestTemplate restTemplate;</span><br><span class="line">      /**</span><br><span class="line">    * 在此方法中通过一个RestTemplate对象调用远端sca-provider中的服务</span><br><span class="line">    * @return</span><br><span class="line">    * 访问此方法的url: http://localhost:8090/consumer/doRestEcho1</span><br><span class="line">      */</span><br><span class="line">      @GetMapping(&quot;/consumer/doRestEcho1&quot;)</span><br><span class="line">      public String doRestEcho01()&#123;</span><br><span class="line">      //1.定义要调用的远端服务的url</span><br><span class="line">      String url=&quot;http://localhost:8081/provider/echo/8090&quot;;</span><br><span class="line">      //2.基于restTemplate对象中的相关方法进行服务调用</span><br><span class="line">      return restTemplate.getForObject(url, String.class);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第七步：启动消费者服务，并在浏览器输入<a href="http://localhost:8090/consumer/doRestEcho1%E5%9C%B0%E5%9D%80%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8090/consumer/doRestEcho1地址进行访问测试。</a></p>
<h1 id="服务负载均衡设计及实现（重点）"><a href="#服务负载均衡设计及实现（重点）" class="headerlink" title="服务负载均衡设计及实现（重点）"></a>服务负载均衡设计及实现（重点）</h1><p>业务描述<br>一个服务实例可以处理请求是有限的,假如服务实例的并发访问比较大,我们会启动多个服务实例,让这些服务实例采用一定策略均衡(轮询,权重,随机,hash等)的处理并发请求,在Nacos中服务的负载均衡(Nacos客户端负载均衡)是如何应用的?</p>
<p>LoadBalancerClient应用<br>LoadBalancerClient对象可以从nacos中基于服务名获取服务实例，然后在工程中基于特点算法实现负载均衡方式的调用，案例实现如下：</p>
<p>第一步:修改ConsumerController类,注入LoadBalancerClient对象,并添加doRestEcho2方法,然后进行服务访问.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">  private LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line">  @Value(&quot;$&#123;spring.application.name:8090&#125;&quot;)</span><br><span class="line">  private String appName;</span><br><span class="line"></span><br><span class="line">  @GetMapping(&quot;/consumer/doRestEcho02&quot;)</span><br><span class="line"> public String doRestEcho02()&#123;</span><br><span class="line">     ServiceInstance serviceInstance = loadBalancerClient.choose(&quot;sca-provider&quot;);</span><br><span class="line">     String url = String.format(&quot;http://%s:%s/provider/echo/%s&quot;,serviceInstance.getHost(),serviceInstance.getPort(),appName);</span><br><span class="line">     System.out.println(&quot;request url:&quot;+url);</span><br><span class="line">     return restTemplate.getForObject(url, String.class);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>第二步：打开Idea服务启动配置，如图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/fd5b4ccc3ed64e3f9db36562548fd02e.png" alt="在这里插入图片描述"></p>
<p>第四步：修改sca-provider的配置文件端口，分别以8081，8082端口方式进行启动。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8082</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: sca-provider</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: localhost:8848</span><br></pre></td></tr></table></figure>

<p>第五步：启动成功以后，访问nacos的服务列表，检测服务是否成功注册，如图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/61f5fe11dbe74d0088bad185a8b25b37.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/50a56d6d947e4b18a0adec0ba867f4a7.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/efb6499e92904cbea7653f61082e639b.png" alt="在这里插入图片描述"></p>
<p>第六步：启动sca-consumer项目模块，打开浏览器对consumer服务进行访问，访问时不断刷新，检测页面数据变化。</p>
<p>说明，这里多个实例并发提供服务的方式为负载均衡，这里的负载均衡实现默认是因为Nacos集成了Ribbon来实现的，Ribbon配合RestTemplate，可以非常容易的实现服务之间的访问。Ribbon是Spring Cloud核心组件之一，它提供的最重要的功能就是客户端的负载均衡(客户端可以采用一定算法,例如轮询访问，访问服务端实例信息)，这个功能可以让我们轻松地将面向服务的REST模版请求自动转换成客户端负载均衡方式的服务调用。</p>
<h2 id="LoadBalanced"><a href="#LoadBalanced" class="headerlink" title="@LoadBalanced"></a>@LoadBalanced</h2><p>当使用RestTemplate进行远程服务调用时，假如需要负载均衡,还可以在RestTemplate对象构建时，使用@LoadBalanced对构建RestTemplate的方法进行修饰，例如在ConsumerApplication中构建名字为loadBalancedRestTemplate的RestTemplate对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">@LoadBalanced</span><br><span class="line">public RestTemplate loadBalancedRestTemplate()&#123;</span><br><span class="line">    return new RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在需要RestTemplate实现负载均衡调用的地方进行依赖注入.例如在ConsumerController类中添加loadBalancedRestTemplate属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private RestTemplate loadBalancedRestTemplate;</span><br></pre></td></tr></table></figure>

<p>接下来，可以在对应的服务端调用方的方法内，基于RestTemplate借助服务名进行服务调用， 例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;/consumer/doRestEcho3&quot;)</span><br><span class="line">public String doRestEcho03()&#123;</span><br><span class="line">    String url=String.format(&quot;http://%s/provider/echo/%s&quot;,&quot;sca-provider&quot;,appName);</span><br><span class="line">    //向服务提供方发起http请求,获取响应数据</span><br><span class="line">    return loadBalancedRestTemplate.getForObject(</span><br><span class="line">            url,//要请求的服务的地址</span><br><span class="line">            String.class);//String.class为请求服务的响应结果类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RestTemplate在发送请求的时候会被LoadBalancerInterceptor拦截，它的作用就是用于RestTemplate的负载均衡，LoadBalancerInterceptor将负载均衡的核心逻辑交给了loadBalancer，核心代码如下所示(了解):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public ClientHttpResponse intercept(final HttpRequest request, </span><br><span class="line">    final byte[] body, final ClientHttpRequestExecution execution) throws IOException &#123;</span><br><span class="line">	final URI originalUri = request.getURI();</span><br><span class="line">	String serviceName = originalUri.getHost();</span><br><span class="line">	return this.loadBalancer.execute(serviceName, </span><br><span class="line">    requestFactory.createRequest(request, body, execution));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@LoadBalanced注解是属于Spring，而不是Ribbon的，Spring在初始化容器的时候，如果检测到Bean被@LoadBalanced注解，Spring会为其设置LoadBalancerInterceptor的拦截器。</p>
<h2 id="Ribbon负载均衡策略-了解"><a href="#Ribbon负载均衡策略-了解" class="headerlink" title="Ribbon负载均衡策略(了解)"></a>Ribbon负载均衡策略(了解)</h2><p>基于Ribbon方式的负载均衡，Netflix默认提供了七种负载均衡策略，对于SpringCloud Alibaba解决方案中又提供了NacosRule策略，默认的负载均衡策略是轮训策略。如图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/fb4e370978ad467b90ea81ca176f179e.png" alt="在这里插入图片描述"></p>
<p>当系统提供的负载均衡策略不能满足我们需求时，我们还可以基于IRule接口自己定义策略.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public IRule rule()&#123;</span><br><span class="line">return new RandomRule();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">底层默认逻辑实现，@ConditionalOnMissingBean注解配合@Bean注解一起使用时，</span><br><span class="line">会在没有指定Bean时，才去创建这个Bean对象。</span><br><span class="line">@Bean</span><br><span class="line">@ConditionalOnMissingBean(IRule.class)</span><br><span class="line">public IRule rule()&#123;</span><br><span class="line">return new BestAvailableRule();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">小节面试分析</span><br><span class="line">@Bean注解的作用?(一般用于配置类内部,描述相关方法,用于告诉spring此方法的返回值要交给spring管理,bean的名字默认为方法名,假如需要指定名字可以@Bean(“bean的名字”),最多的应用场景是整合第三方的资源-对象)</span><br><span class="line">@Autowired注解的作用?(此注解用于描述属性,构造方法,set方法等,用于告诉spring框架,按找一定的规则为属性进行DI操作,默认按属性,方法参数类型查找对应的对象,假如只找到一个,则直接注入,类型多个时还会按照属性名或方法参数名进行值的注入,假如名字也不同,就出报错.)</span><br><span class="line">Nacos中的负责均衡底层是如何实现的?(通过Ribbon实现,Ribbon中定义了一些负载均衡算法,然后基于这些算法从服务实例中获取一个实例为消费方法提供服务)</span><br><span class="line">Ribbon 是什么？(Netflix公司提供的负载均衡客户端,一般应用于服务的消费方法)</span><br><span class="line">Ribbon 可以解决什么问题? (基于负载均衡策略进行服务调用, 所有策略都会实现IRule接口)</span><br><span class="line">Ribbon 内置的负载策略都有哪些?(8种,可以通过查看IRule接口的实现类进行分析)</span><br><span class="line">@LoadBalanced的作用是什么？(描述RestTemplate对象,用于告诉Spring框架，在使用RestTempalte进行服务调用时，这个调用过程会被一个拦截器进行拦截,然后在拦截器内部,启动负载均衡策略。)</span><br><span class="line">我们可以自己定义负载均衡策略吗？(可以，基于IRule接口进行策略定义,也可以参考NacosRule进行实现)</span><br></pre></td></tr></table></figure>

<p>拓展:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#sca-provider服务的负载均衡配置</span><br><span class="line">sca-provider:</span><br><span class="line">  ribbon: #ribbon是一个负载均衡组件，是Ribbon组件中提供了IRule接口及相关实现</span><br><span class="line">    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule</span><br></pre></td></tr></table></figure>



<h1 id="基于Feign的远程服务调用（重点）"><a href="#基于Feign的远程服务调用（重点）" class="headerlink" title="基于Feign的远程服务调用（重点）"></a>基于Feign的远程服务调用（重点）</h1><h2 id="背景分析"><a href="#背景分析" class="headerlink" title="背景分析"></a>背景分析</h2><p>服务消费方基于rest方式请求服务提供方的服务时，一种直接的方式就是自己拼接url，拼接参数然后实现服务调用，但每次服务调用都需要这样拼接，代码量复杂且不易维护，此时Feign诞生。</p>
<h2 id="Feign是什么"><a href="#Feign是什么" class="headerlink" title="Feign是什么"></a>Feign是什么</h2><p>Feign 是一种声明式Web服务客户端，底层封装了对Rest技术的应用,通过Feign可以简化服务消费方对远程服务提供方法的调用实现。如图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/163741e4cff44e7aa714bb003c9b2672.png" alt="在这里插入图片描述"></p>
<p>Feign 最早是由 Netflix 公司进行维护的，后来 Netflix 不再对其进行维护，最终 Feign 由一些社区进行维护，更名为 OpenFeign。</p>
<h2 id="Feign应用实践（掌握）"><a href="#Feign应用实践（掌握）" class="headerlink" title="Feign应用实践（掌握）"></a>Feign应用实践（掌握）</h2><p>第一步：在服务消费方，添加项目依赖(SpringCloud团队基于OpenFeign研发了starter)，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>第二步：在启动类上添加@EnableFeignClients注解，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@EnableFeignClients</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class ConsumerApplication &#123;…&#125;</span><br></pre></td></tr></table></figure>

<p>第三步：定义Http请求API，基于此API借助OpenFeign访问远端服务，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.consumer.service;</span><br><span class="line">@FeignClient(name=&quot;sca-provider&quot;)//sca-provider为服务提供者名称</span><br><span class="line">public interface RemoteProviderService&#123;</span><br><span class="line">    @GetMapping(&quot;/provider/echo/&#123;string&#125;&quot;)//前提是远端需要有这个服务</span><br><span class="line">    public String echoMessage(@PathVariable(&quot;string&quot;) String string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，@FeignClient描述的接口底层会为其创建实现类。</p>
<p>第四步：创建FeignConsumerController中并添加feign访问，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.consumer.controller;</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/consumer/ &quot;)</span><br><span class="line">public class FeignConsumerController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RemoteProviderService remoteProviderService;</span><br><span class="line">    /**基于feign方式的服务调用*/</span><br><span class="line">    @GetMapping(&quot;/echo/&#123;msg&#125;&quot;)</span><br><span class="line">    public String doFeignEcho(@PathVariable  String msg)&#123;</span><br><span class="line">        //基于feign方式进行远端服务调用(前提是服务必须存在)</span><br><span class="line">        return remoteProviderService.echoMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第五步：启动消费者服务，在浏览器中直接通过feign客户端进行访问，如图所示（反复刷新检测其响应结果）：</p>
<p><img src="https://img-blog.csdnimg.cn/d89e1e76746141a6bab78830a82af589.png" alt="在这里插入图片描述"></p>
<p>其启动异常如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The bean &#x27;optimization-user.FeignClientSpecification&#x27;, defined in null, could not be registered. A bean with that name has already been defined in null and overriding is disabled.</span><br></pre></td></tr></table></figure>

<p>此时我们需要为远程调用服务接口指定一个contextId,作为远程调用服务的唯一标识（这个标识是Bean对象的名字）即可,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@FeignClient(name=&quot;sca-provider&quot;,contextId=&quot;remoteProviderService&quot;)//sca-provider为服务提供者名称</span><br><span class="line">interface RemoteProviderService&#123;</span><br><span class="line">    @GetMapping(&quot;/provider/echo/&#123;string&#125;&quot;)//前提是远端需要有这个服务</span><br><span class="line">    public String echoMessage(@PathVariable(&quot;string&quot;) String string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有,当我们在进行远程服务调用时,假如调用的服务突然不可用了或者调用过程超时了,怎么办呢?一般服务消费端会给出具体的容错方案,例如，在Feign应用中通过FallbackFactory接口的实现类进行默认的相关处理，例如:</p>
<p>第一步:定义FallbackFactory接口的实现,代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.cy.service.factory;</span><br><span class="line">/**</span><br><span class="line"> * 基于此对象处理RemoteProviderService接口调用时出现的服务中断,超时等问题</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class ProviderFallbackFactory implements FallbackFactory&lt;RemoteProviderService&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 此方法会在RemoteProviderService接口服务调用时,出现了异常后执行.</span><br><span class="line">     * @param throwable 用于接收异常</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public RemoteProviderService create(Throwable throwable) &#123;</span><br><span class="line">        return (msg)-&gt;&#123;</span><br><span class="line">                return &quot;服务维护中,稍等片刻再访问&quot;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步:在Feign访问接口中应用FallbackFactory对象,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@FeignClient(name = &quot;sca-provider&quot;, contextId = &quot;remoteProviderService&quot;,</span><br><span class="line">             fallbackFactory = ProviderFallbackFactory.class)//sca-provider为nacos中的服务名</span><br><span class="line">public interface RemoteProviderService &#123;</span><br><span class="line">    @GetMapping(&quot;/provider/echo/&#123;msg&#125;&quot;)</span><br><span class="line">    public String echoMsg(@PathVariable String msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步:在配置文件application.yml中添加如下配置,启动feign方式调用时的服务中断处理机制.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">feign:  </span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: true #默认值为false</span><br></pre></td></tr></table></figure>

<p>第四步:在服务提供方对应的调用方法中添加Thread.sleep(5000)模拟耗时操作,然后启动服务进行访问测试.</p>
<h2 id="Feign-调用过程分析（了解）"><a href="#Feign-调用过程分析（了解）" class="headerlink" title="Feign 调用过程分析（了解）"></a>Feign 调用过程分析（了解）</h2><h3 id="Feign应用过程分析（底层逻辑先了解）："><a href="#Feign应用过程分析（底层逻辑先了解）：" class="headerlink" title="Feign应用过程分析（底层逻辑先了解）："></a>Feign应用过程分析（底层逻辑先了解）：</h3><p>1)通过 @EnableFeignCleints 注解告诉springcloud,启动 Feign Starter 组件。</p>
<ol start="2">
<li>Feign Starter 会在项目启动过程中注册全局配置，扫描包下所由@FeignClient注解描述的接口，然后由系统底层创建接口实现类(JDK代理类)，并构建类的对象，然后交给spring管理(注册 IOC 容器)。</li>
<li>Feign接口被调用时，底层代理对象会将接口中的请求信息通过编码器创建 Request对象，基于此对象进行远程过程调用。</li>
<li>Feign客户端请求对象会经Ribbon进行负载均衡，挑选出一个健康的 Server 实例（instance）。</li>
<li>Feign客户端会携带 Request 调用远端服务并返回一个响应。</li>
<li>Feign客户端对象对Response信息进行解析然后返回客户端。</li>
</ol>
<h2 id="小节面试分析"><a href="#小节面试分析" class="headerlink" title="小节面试分析"></a>小节面试分析</h2><p>为什么使用feign?(基于Feign可以更加友好的实现服务调用，简化服务消费方对服务提供方方法的调用)。<br>@FeignClient注解的作用是什么？(告诉Feign Starter，在项目启动时，为此注解描述的接口创建实现类-代理类)<br>Feign方式的调用，底层负载均衡是如何实现的？(Ribbon)<br>@EnableFeignCleints 注解的作用是什么？（描述配置类，例如启动类）</p>
<h2 id="总结-Summary"><a href="#总结-Summary" class="headerlink" title="总结(Summary)"></a>总结(Summary)</h2><h3 id="重难点分析"><a href="#重难点分析" class="headerlink" title="重难点分析"></a>重难点分析</h3><p>何为注册中心？(用于记录服务信息的一个web服务，例如淘宝平台，滴滴平台，美团外卖平台，……)<br>注册中心的核心对象？(服务提供方，服务消费方，注册中心-Registry)<br>市面上常用注册中心？(Google-Consul,Alibaba-Nacos,…)<br>Nacos安装、启动、服务的注册、发现机制以及实现过程<br>服务调用时RestTemplate对象的应用。<br>基于Feign方式的服务调用及基本原理？</p>
<h2 id="FAQ分析"><a href="#FAQ分析" class="headerlink" title="FAQ分析"></a>FAQ分析</h2><p>Nacos是什么，提供了什么特性(服务的注册、发现、配置)？<br>你为什么会选择Nacos?（活跃度、稳定、性能、学习成本）<br>Nacos的官网？(nacos.io)<br>Nacos在github的源码？(github.com/alibaba/nacos)<br>Nacos在windows环境下安装?(解压即可使用)<br>Nacos在windows中的的初步配置？(application.properties访问数据库的数据源)<br>Nacos服务注册的基本过程？（服务启动时发送web请求）<br>Nacos服务消费的基本过程？（服务启动时获取服务实例，然后调用服务）<br>Nacos服务负载均衡逻辑及设计实现？(Ribbon)<br>注册中心的核心数据是什么？（服务的名字和它对应的网络地址）<br>注册中心中心核心数据的存取为什么会采用读写锁?(底层安全和性能)<br>Nacos健康检查的方式？(基于心跳包机制进行实现)<br>Nacos是如何保证高可用的?(重试，本地缓存、集群)<br>RestTemplate的基本作用是什么？<br>Feign是什么，它的应用是怎样的，feign应用过程中的代理对象是如何创建的（JDK）？<br>Feign方式的调用过程，其负载均衡是如何实现？(Ribbon)<br>Bug分析<br>404  //找不到页面<br>400    //请求出错 由于语法格式有误,服务器无法理解此请求。<br>405    //Request method ‘GET’ not supported(405-用来访问本页面的HTTP方法不被允许)这是因为浏览器访问网站是GET请求，后端服务器本地址只接受POST请求。<br>500    //服务器错误</p>
<p>414    //服务器接收数据处理错误。一般controller层</p>
]]></content>
      <categories>
        <category>nacos</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>nginx简单使用</title>
    <url>/2022/03/12/nginx%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="Nginx介绍"><a href="#Nginx介绍" class="headerlink" title="Nginx介绍"></a>Nginx介绍</h3><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。<br>其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、简单的配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。<br><strong>Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器</strong>，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p>
<p>特点:<br>\1. 占用内存少 不超过2M tomcat服务器启动 内存占用200M<br>\2. 并发能力强 3-5万次/秒 tomcat并发能力 150/秒 调优之后 1000/秒</p>
<h3 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h3><p>路径说明: 路径中不能出现中文/空格/特殊字符 C语言开发<br>说明: 双击运行 启动nginx服务器.</p>
<p><img src="https://s2.loli.net/2022/03/12/g8KUfn1NEHaDcGS.png" alt="image-20220312155549046"></p>
<h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果:"></a>运行效果:</h3><p><img src="https://s2.loli.net/2022/03/12/YMzcoeNADJE3hUv.png" alt="image-20220312155607510"></p>
<h3 id="nginx命令"><a href="#nginx命令" class="headerlink" title="nginx命令"></a>nginx命令</h3><p>指令说明: 要求在nginx.exe所在的目录中执行.<br>指令集:<br>\1. start nginx 启动nginx<br>\2. nginx -s reload 重启nginx<br>\3. nginx -s stop 停止nginx</p>
<h2 id="Nginx-反向代理配置"><a href="#Nginx-反向代理配置" class="headerlink" title="Nginx-反向代理配置"></a>Nginx-反向代理配置</h2><h3 id="反向代理入门案例"><a href="#反向代理入门案例" class="headerlink" title="反向代理入门案例"></a>反向代理入门案例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">	**#每一个反向代理服务,都是一个server</span><br><span class="line">    server &#123;</span><br><span class="line">    	# 监听端口号 80</span><br><span class="line">        listen       80;</span><br><span class="line">        # 服务的域名</span><br><span class="line">        server_name  localhost;</span><br><span class="line">		#进行反向代理服务  / 拦截所有的请求</span><br><span class="line">        location / &#123;</span><br><span class="line">        	#root关键字  反向代理的是一个目录</span><br><span class="line">            root   html;</span><br><span class="line">            #index关键字 代表默认的页面</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现图片的代理"><a href="#实现图片的代理" class="headerlink" title="实现图片的代理"></a>实现图片的代理</h3><p>网络地址: <a href="http://image.jt.com/2022/01/11/1643b71d27514cf3b93c3e537de20260.jpg">http://image.jt.com:80/2022/01/11/1643b71d27514cf3b93c3e537de20260.jpg</a><br>磁盘地址: D:/JT-SOFT/image/2022/01/11/1643b71d27514cf3b93c3e537de20260.jpg<br>代理规则: image.jt.com代理为D:/JT-SOFT/image</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.配置图片服务器</span><br><span class="line">	server &#123;</span><br><span class="line">		listen 80;</span><br><span class="line">		server_name  image.jt.com;</span><br><span class="line">		location / &#123;</span><br><span class="line">			root D:/JT-SOFT/image;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="hosts文件的原理说明"><a href="#hosts文件的原理说明" class="headerlink" title="hosts文件的原理说明"></a>hosts文件的原理说明</h3><p><img src="https://s2.loli.net/2022/03/12/suy6hd9vw5SZzo7.png" alt="image-20220312155823706"></p>
<h3 id="编辑Hosts文件"><a href="#编辑Hosts文件" class="headerlink" title="编辑Hosts文件"></a>编辑Hosts文件</h3><p>文件位置: C:\Windows\System32\drivers\etc<br>修改内容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#IP   			域名</span><br><span class="line">127.0.0.1	image.jt.com</span><br><span class="line">127.0.0.1   manage.jt.com</span><br><span class="line">127.0.0.1   web.jt.com</span><br></pre></td></tr></table></figure>

<h2 id="实现tomcat集群部署"><a href="#实现tomcat集群部署" class="headerlink" title="实现tomcat集群部署"></a>实现tomcat集群部署</h2><h3 id="编辑nginx-conf配置文件"><a href="#编辑nginx-conf配置文件" class="headerlink" title="编辑nginx.conf配置文件"></a>编辑nginx.conf配置文件</h3><p>修改nginx之后,重启服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#2.配置tomcat集群  默认规则: 1.轮询策略</span><br><span class="line">	upstream tomcats &#123;</span><br><span class="line">		server 127.0.0.1:8091;</span><br><span class="line">		server 127.0.0.1:8092;</span><br><span class="line">		server 127.0.0.1:8093;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	#2.配置后台服务器代理</span><br><span class="line">	server &#123;</span><br><span class="line">		listen 80;</span><br><span class="line">		server_name manage.jt.com;</span><br><span class="line">		location / &#123;</span><br><span class="line">			#代理网址</span><br><span class="line">			#proxy_pass http://127.0.0.1:8091;</span><br><span class="line">			proxy_pass http://tomcats;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="负载均衡策略-权重策略"><a href="#负载均衡策略-权重策略" class="headerlink" title="负载均衡策略-权重策略"></a>负载均衡策略-权重策略</h2><p>说明: 根据配置文件的数值.人为控制访问服务器的数量</p>
<pre><code>#2.配置tomcat集群  默认规则: 1.轮询策略 2.权重策略
upstream tomcats &#123;
    server 127.0.0.1:8091 weight=6;
    server 127.0.0.1:8092 weight=3;
    server 127.0.0.1:8093 weight=1;
&#125;
</code></pre>
<h3 id="负载均衡策略-IP-HASH"><a href="#负载均衡策略-IP-HASH" class="headerlink" title="负载均衡策略-IP_HASH"></a>负载均衡策略-IP_HASH</h3><p>需求: 如果<strong>需要服务器与用户绑定</strong>.则使用IP_HASH,用户第一次访问该服务器,那么以后也访问该服务器.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#2.配置tomcat集群  默认规则: 1.轮询策略 2.权重策略 3.ip_hash</span><br><span class="line">	upstream tomcats &#123;</span><br><span class="line">		ip_hash;</span><br><span class="line">		server 127.0.0.1:8091 weight=6;</span><br><span class="line">		server 127.0.0.1:8092 weight=3;</span><br><span class="line">		server 127.0.0.1:8093 weight=1;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>ip_hash原理:</p>
<p><img src="https://s2.loli.net/2022/03/12/wVayPYXGzKo9t4l.png" alt="image-20220312160022488"></p>
<h3 id="nginx常见属性"><a href="#nginx常见属性" class="headerlink" title="nginx常见属性"></a>nginx常见属性</h3><ol>
<li>down 属性 被标识的服务器,nginx不会访问</li>
<li>backup属性 标识备用机. 正常情况下该服务器不参与工作.当主机遇忙时/down机时.才会被访问.</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#2.配置tomcat集群  默认规则: 1.轮询策略 2.权重策略 3.ip_hash</span><br><span class="line">	upstream tomcats &#123;</span><br><span class="line">		#ip_hash;</span><br><span class="line">		server 127.0.0.1:8091 down;</span><br><span class="line">		server 127.0.0.1:8092;</span><br><span class="line">		server 127.0.0.1:8093 backup;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="前端项目发布"><a href="#前端项目发布" class="headerlink" title="前端项目发布"></a>前端项目发布</h2><h3 id="业务说明"><a href="#业务说明" class="headerlink" title="业务说明"></a>业务说明</h3><p>将编译之后的dist目录 复制到nginx的根目录中。</p>
<p><img src="https://s2.loli.net/2022/03/12/UPc8KMAfbpz19OX.png" alt="image-20220312160305799"></p>
<h3 id="前端项目发布-1"><a href="#前端项目发布-1" class="headerlink" title="前端项目发布"></a>前端项目发布</h3><p>需求： 用户通过<a href="http://web.jt.com/">http://web.jt.com</a> 访问 dist/index.html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置前端代理</span><br><span class="line">	server &#123;</span><br><span class="line">		listen 80;</span><br><span class="line">		server_name  web.jt.com;</span><br><span class="line"></span><br><span class="line">		location / &#123;</span><br><span class="line">			root dist;</span><br><span class="line">			index index.html;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后端项目发布"><a href="#后端项目发布" class="headerlink" title="后端项目发布"></a>后端项目发布</h2><h3 id="项目发布"><a href="#项目发布" class="headerlink" title="项目发布"></a>项目发布</h3><p>命令: java -jar 8091.jar<br>nginx完成后端发布</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置后端代理</span><br><span class="line">	server &#123;</span><br><span class="line">		listen 80;</span><br><span class="line">		server_name  manage.jt.com;</span><br><span class="line"></span><br><span class="line">		location / &#123;</span><br><span class="line">			#proxy_pass 映射的是请求的地址</span><br><span class="line">			proxy_pass http://localhost:8091;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="部署集群"><a href="#部署集群" class="headerlink" title="部署集群"></a>部署集群</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置后端代理</span><br><span class="line">	server &#123;</span><br><span class="line">		listen 80;</span><br><span class="line">		server_name  manage.jt.com;</span><br><span class="line"></span><br><span class="line">		location / &#123;</span><br><span class="line">			#proxy_pass 映射的是请求的地址</span><br><span class="line">			#proxy_pass http://localhost:8091;</span><br><span class="line">			#访问集群</span><br><span class="line">			proxy_pass http://tomcats;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	#配置tomcat服务器集群 1.轮询策略</span><br><span class="line">	upstream tomcats &#123;</span><br><span class="line">		server  127.0.0.1:8091;</span><br><span class="line">		server  127.0.0.1:8092;</span><br><span class="line">		server  127.0.0.1:8093;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="nginx负载均衡策略"><a href="#nginx负载均衡策略" class="headerlink" title="nginx负载均衡策略"></a>nginx负载均衡策略</h2><h3 id="轮询策略"><a href="#轮询策略" class="headerlink" title="轮询策略"></a>轮询策略</h3><p>说明： 按照配置文件的顺序 依次访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置tomcat服务器集群 1.轮询策略</span><br><span class="line">	upstream tomcats &#123;</span><br><span class="line">		server  127.0.0.1:8091;</span><br><span class="line">		server  127.0.0.1:8092;</span><br><span class="line">		server  127.0.0.1:8093;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="权重策略"><a href="#权重策略" class="headerlink" title="权重策略"></a>权重策略</h3><p>说明: 可以根据服务器性能,灵活的设置配比</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置tomcat服务器集群 1.轮询策略  2.权重策略</span><br><span class="line">	upstream tomcats &#123;</span><br><span class="line">		server  127.0.0.1:8091 weight=6;</span><br><span class="line">		server  127.0.0.1:8092 weight=3;</span><br><span class="line">		server  127.0.0.1:8093 weight=1;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="IP-HASH策略"><a href="#IP-HASH策略" class="headerlink" title="IP_HASH策略"></a>IP_HASH策略</h3><p>说明: 如果需要让<strong>用户与服务器进行绑定</strong>. 则使用IPHASH</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置tomcat服务器集群 1.轮询策略  2.权重策略 3.iphash策略</span><br><span class="line">	upstream tomcats &#123;</span><br><span class="line">		ip_hash;</span><br><span class="line">		server  127.0.0.1:8091 weight=6;</span><br><span class="line">		server  127.0.0.1:8092 weight=3;</span><br><span class="line">		server  127.0.0.1:8093 weight=1;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="nginx常见属性-1"><a href="#nginx常见属性-1" class="headerlink" title="nginx常见属性"></a>nginx常见属性</h3><p>1.down属性 如果down属性标识了服务器,则nginx不会再次访问该服务器<br>2.backup属性 设置备用机, 正常情况下,备用机不会被访问,但是当主机遇忙时/或者宕机时,备用机才会被访问.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置tomcat服务器集群 1.轮询策略  2.权重策略 3.iphash策略</span><br><span class="line">	upstream tomcats &#123;</span><br><span class="line">		#ip_hash;</span><br><span class="line">		server  127.0.0.1:8091 weight=6 down;</span><br><span class="line">		server  127.0.0.1:8092 weight=3 down;</span><br><span class="line">		server  127.0.0.1:8093 weight=1 backup;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="项目如何实现在线部署"><a href="#项目如何实现在线部署" class="headerlink" title="项目如何实现在线部署"></a>项目如何实现在线部署</h3><p>说明:<br>1.首先需要制定上线计划 分批次上线部署.<br>2.首先可以先将一部分服务器down掉,之后替换新的jar包,重启服务器,测试通过之后,nginx正式接通.<br>3.重复执行多次,直至项目部署完成为止.<br>nginx启动的速度很快,所以几乎对用户没有影响.</p>
]]></content>
      <categories>
        <category>nginx</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>nacos配置中心</title>
    <url>/2021/12/23/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<h1 id="nacos配置中心"><a href="#nacos配置中心" class="headerlink" title="nacos配置中心"></a>nacos配置中心</h1>]]></content>
      <categories>
        <category>nacos</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>pyautogui和键盘监听使用</title>
    <url>/2022/06/05/pyautogui%E5%92%8C%E9%94%AE%E7%9B%98%E7%9B%91%E5%90%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Python基础之pyautogui模块（详细总结鼠标键盘操作）"><a href="#Python基础之pyautogui模块（详细总结鼠标键盘操作）" class="headerlink" title="Python基础之pyautogui模块（详细总结鼠标键盘操作）"></a>Python基础之pyautogui模块（详细总结鼠标键盘操作）</h1><h2 id="1-GUI-控制功能"><a href="#1-GUI-控制功能" class="headerlink" title="1. GUI 控制功能"></a>1. <a href="https://so.csdn.net/so/search?q=GUI&spm=1001.2101.3001.7020">GUI</a> 控制功能</h2><p>控制鼠标键盘使用的模块为：<code>pyautogui</code>，这个模块操作起鼠标键盘的时候，非常的迅速，而且如果该模块控制了鼠标后，程序比较难关闭，这时我们有两个方法专门针对以上的情况：</p>
<h3 id="1-1-自动-防故障功能"><a href="#1-1-自动-防故障功能" class="headerlink" title="1.1 自动 防故障功能"></a>1.1 自动 防故障功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.FAILSAFE =<span class="literal">False</span>  </span><br></pre></td></tr></table></figure>

<p>默认这项功能为True, 这项功能意味着：当鼠标的指针在屏幕的最坐上方，程序会报错；目的是为了防止程序无法停止；</p>
<h3 id="1-2-停顿功能"><a href="#1-2-停顿功能" class="headerlink" title="1.2 停顿功能"></a>1.2 停顿功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.PAUSE = <span class="number">1</span>    </span><br></pre></td></tr></table></figure>

<p>意味着所有pyautogui的指令都要暂停一秒；其他指令不会停顿；这样做，可以防止键盘鼠标操作太快；</p>
<h2 id="2-鼠标操作"><a href="#2-鼠标操作" class="headerlink" title="2.鼠标操作"></a>2.鼠标操作</h2><h3 id="2-1-控制鼠标移动"><a href="#2-1-控制鼠标移动" class="headerlink" title="2.1 控制鼠标移动"></a>2.1 控制鼠标移动</h3><h3 id="3-获得屏幕分辨率"><a href="#3-获得屏幕分辨率" class="headerlink" title="3.获得屏幕分辨率"></a>3.获得屏幕分辨率</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(pyautogui.size())   # 返回所用显示器的分辨率； 输出：Size(width=1920, height=1080)</span><br><span class="line">width,height = pyautogui.size()</span><br><span class="line">print(width,height)  # 1920 1080</span><br></pre></td></tr></table></figure>

<p><strong>2. 移动鼠标</strong></p>
<ul>
<li>移动到指定位置</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.moveTo(<span class="number">100</span>,<span class="number">300</span>,duration=<span class="number">1</span>)   </span><br></pre></td></tr></table></figure>

<p>将鼠标移动到指定的坐标；duration 的作用是设置移动时间，所有的gui函数都有这个参数，而且都是可选参数；</p>
<ul>
<li>按方向移动</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.moveRel(<span class="number">100</span>,<span class="number">500</span>,duration=<span class="number">4</span>)   <span class="comment"># 第一个参数是左右移动像素值，第二个是上下，</span></span><br></pre></td></tr></table></figure>

<p>向右移动100px，向下移动500px, 这个过程持续 1 秒钟；</p>
<p><strong>3. 获取鼠标位置</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(pyautogui.position())   <span class="comment"># 得到当前鼠标位置；输出：Point(x=200, y=800)</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2控制鼠标点击"><a href="#2-2控制鼠标点击" class="headerlink" title="2.2控制鼠标点击"></a>2.2控制鼠标点击</h3><p>单击鼠标</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyautogui.click(10,10)   # 鼠标点击指定位置，默认左键</span><br><span class="line">pyautogui.click(10,10,button=&#x27;left&#x27;)  # 单击左键</span><br><span class="line">pyautogui.click(1000,300,button=&#x27;right&#x27;)  # 单击右键</span><br><span class="line">pyautogui.click(1000,300,button=&#x27;middle&#x27;)  # 单击中间</span><br></pre></td></tr></table></figure>

<ul>
<li>双击鼠标</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.doubleClick(<span class="number">10</span>,<span class="number">10</span>)  <span class="comment"># 指定位置，双击左键</span></span><br><span class="line">pyautogui.rightClick(<span class="number">10</span>,<span class="number">10</span>)   <span class="comment"># 指定位置，双击右键</span></span><br><span class="line">pyautogui.middleClick(<span class="number">10</span>,<span class="number">10</span>)  <span class="comment"># 指定位置，双击中键</span></span><br></pre></td></tr></table></figure>

<ul>
<li>点击 &amp; 释放</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.mouseDown()   <span class="comment"># 鼠标按下</span></span><br><span class="line">pyautogui.mouseUp()    <span class="comment"># 鼠标释放</span></span><br><span class="line">pyautogui.mouseUp(button=<span class="string">&#x27;right&#x27;</span>, x=<span class="number">100</span>, y=<span class="number">200</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-控制鼠标拖动"><a href="#2-3-控制鼠标拖动" class="headerlink" title="2.3 控制鼠标拖动"></a>2.3 控制鼠标拖动</h3><ul>
<li>拖动到指定位置</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.dragTo(<span class="number">100</span>,<span class="number">300</span>,duration=<span class="number">1</span>)   </span><br></pre></td></tr></table></figure>

<p>将鼠标拖动到指定的坐标；duration 的作用是设置移动时间，所有的gui函数都有这个参数，而且都是可选参数；</p>
<ul>
<li>按方向拖动</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.dragRel(<span class="number">100</span>,<span class="number">500</span>,duration=<span class="number">4</span>)   <span class="comment"># 第一个参数是左右移动像素值，第二个是上下，</span></span><br></pre></td></tr></table></figure>

<p>向右拖动100px，向下拖动500px, 这个过程持续 1 秒钟；</p>
<h3 id="2-4-控制鼠标滚动"><a href="#2-4-控制鼠标滚动" class="headerlink" title="2.4 控制鼠标滚动"></a>2.4 控制鼠标滚动</h3><p>控制鼠标滚动的函数是scroll()， 传入一个整数的参数，说明向上或向下滚动多少个单位；单位根据操作系统不同而不同；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.scroll(<span class="number">300</span>)  <span class="comment"># 向上滚动300个单位；</span></span><br></pre></td></tr></table></figure>

<h2 id="3-屏幕处理"><a href="#3-屏幕处理" class="headerlink" title="3. 屏幕处理"></a>3. 屏幕处理</h2><h3 id="3-1-获取屏幕截图"><a href="#3-1-获取屏幕截图" class="headerlink" title="3.1 获取屏幕截图"></a>3.1 获取屏幕截图</h3><p>我们控制鼠标的操作，不能盲目的进行，所以我们需要监控屏幕上的内容，从而决定要不要进行对应的操作， pyautogui 提供了一个方法screenshot()，可以返回一个Pillow的image对象；</p>
<p>这里有三个常用函数：</p>
<p><code>im = pyautogui.screenshot()</code>：返回屏幕的截图，是一个Pillow的image对象<br><code>im.getpixel((500, 500))</code>：返回im对象上，（500，500）这一点像素的颜色，是一个RGB元组</p>
<p><code>pyautogui.pixelMatchesColor(500,500,(12,120,400))</code> ：是一个对比函数，对比的是屏幕上（500，500）这一点像素的颜色，与所给的元素是否相同；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">im = pyautogui.screenshot()</span><br><span class="line">im.save(&#x27;屏幕截图.png&#x27;)</span><br></pre></td></tr></table></figure>

<p>保存屏幕截图；</p>
<h3 id="3-2-识别图像"><a href="#3-2-识别图像" class="headerlink" title="3.2 识别图像"></a>3.2 识别图像</h3><p>首先，我们需要先获得一个屏幕快照，例如我们想要点赞，我们就先把大拇指的图片保存下来；然后使用函数：</p>
<p>locateOnScreen(‘zan.png’) ，如果可以找到图片，则返回图片的位置，如：Box(left=25, top=703, width=22, height=22)；如果找不到图片，则返回None;<br>如果，屏幕上有多处图片可以匹配，则需要使用locateAllOnScreen(‘zan.png’) ，如果匹配到多个值，则返回一个list，参考如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pyautogui</span><br><span class="line">pyautogui.PAUSE = 1</span><br><span class="line"></span><br><span class="line"># 图像识别（一个）</span><br><span class="line">btm = pyautogui.locateOnScreen(&#x27;zan.png&#x27;)</span><br><span class="line">print(btm)  # Box(left=1280, top=344, width=22, height=22)</span><br><span class="line"></span><br><span class="line"># 图像识别（多个）</span><br><span class="line">btm = pyautogui.locateAllOnScreen(&#x27;zan.png&#x27;)</span><br><span class="line">print(list(btm))  # [Box(left=1280, top=344, width=22, height=22), Box(left=25, top=594, width=22, height=22)]</span><br></pre></td></tr></table></figure>

<p><code>pyautogui.center((left, top, width, height))</code> 返回指定位置的中心点；这样，我们就可以再配合鼠标操作点击找到图片的中心.</p>
<h2 id="4-键盘输入"><a href="#4-键盘输入" class="headerlink" title="4. 键盘输入"></a>4. 键盘输入</h2><h3 id="4-1-键盘输入函数"><a href="#4-1-键盘输入函数" class="headerlink" title="4.1 键盘输入函数"></a>4.1 键盘输入函数</h3><p><code>pyautogui.keyDown()</code> ： 模拟按键按下；<br><code>pyautogui.keyUp()</code> ： 模拟按键释放；<br><code>pyautogui.press()</code> ： # 就是调用keyDown() &amp; keyUp(),模拟一次按键；</p>
<p><code>pyautogui.typewrite(&#39;this&#39;,0.5)</code> ： 第一参数是输入内容，第二个参数是每个字符间的间隔时间；<br><code>pyautogui.typewrite([&#39;T&#39;,&#39;h&#39;,&#39;i&#39;,&#39;s&#39;])</code>：typewrite 还可以传入单字母的列表；</p>
<p>举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyautogui.keyDown(&#x27;shift&#x27;)    # 按下shift</span><br><span class="line">pyautogui.press(&#x27;4&#x27;)    # 按下 4</span><br><span class="line">pyautogui.keyUp(&#x27;shift&#x27;)   # 释放 shift</span><br></pre></td></tr></table></figure>

<p>输出： $ ；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.typewrite(<span class="string">&#x27;$$$$&#x27;</span>, <span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>

<p>缓慢的输出：</p>
<h3 id="4-2-键盘特殊按键"><a href="#4-2-键盘特殊按键" class="headerlink" title="4.2 键盘特殊按键"></a>4.2 键盘特殊按键</h3><p>有时我们需要输入一些特殊的按键，比如向左的箭头，这些有相对应的键盘字符串表示，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.typewrite([<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;left&#x27;</span>,<span class="string">&#x27;left&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,])   <span class="comment"># 输出：This</span></span><br></pre></td></tr></table></figure>

<p>解释：这里的left就是向左的箭头；诸如此类的键盘字符串，还有很多，参考下表：</p>
<p>键盘字符串    说明<br>enter(或return 或 \n)    回车<br>esc    ESC键<br>shiftleft, shiftright    左右SHIFT键<br>altleft, altright    左右ALT键<br>ctrlleft, ctrlright    左右CTRL键<br>tab (\t)    TAB键<br>backspace, delete    BACKSPACE 、DELETE键<br>pageup, pagedown    PAGE UP 和 PAGE DOWN键<br>home, end    HOME 和 END键<br>up, down, left,right    箭头键<br>f1, f2, f3…. f12    F1…….F12键<br>volumemute, volumedown,volumeup    声音变大变小静音（有些键盘没有）<br>pause    PAUSE键，暂停键<br>capslock    CAPS LOCK 键<br>numlock    NUM LOCK 键<br>scrolllock    SCROLLLOCK 键<br>insert    INSERT键<br>printscreen    PRINT SCREEN键<br>winleft, winright    Win键（windows ）<br>command    command键（Mac OS X ）<br>option    option（Mac OS X）</p>
<h3 id="4-3-快捷键"><a href="#4-3-快捷键" class="headerlink" title="4.3 快捷键"></a>4.3 快捷键</h3><p>如果我们需要模拟复制的快捷键 ctrl + c ，如果用前面的方法，则代码为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyautogui.keyDown(&#x27;ctrl&#x27;)</span><br><span class="line">pyautogui.keyDown(&#x27;c&#x27;)</span><br><span class="line">pyautogui.keyUp(&#x27;c&#x27;)</span><br><span class="line">pyautogui.keyUp(&#x27;ctrl&#x27;)</span><br></pre></td></tr></table></figure>

<p>快捷键的按键与释放顺序非常关键，这时我们可以使用 pyautogui.hotkey()，这个函数可以接受多个参数，按传入顺序按下，再按照相反顺序释放。上述快捷键 ctrl + c ，可以将代码变为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.hotkey(<span class="string">&#x27;ctrl&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="5-提示信息框"><a href="#5-提示信息框" class="headerlink" title="5. 提示信息框"></a>5. 提示信息框</h2><h3 id="5-1-提示框-警告框"><a href="#5-1-提示框-警告框" class="headerlink" title="5.1 提示框/警告框"></a>5.1 提示框/警告框</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line">a = pyautogui.alert(text=<span class="string">&#x27;This is an alert box.&#x27;</span>, title=<span class="string">&#x27;Test&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<p>输出如下图：点击确定，返回值为‘OK’<br><img src="https://s2.loli.net/2022/06/05/nmGlIfEurCdL4ZJ.png" alt="在这里插入图片描述"></p>
<h3 id="5-2-选择框"><a href="#5-2-选择框" class="headerlink" title="5.2 选择框"></a>5.2 选择框</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line">a = pyautogui.confirm(<span class="string">&#x27;选择一项&#x27;</span>, buttons=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/06/05/Fi8q6yduhvTfK4m.png" alt="在这里插入图片描述"><br>输出如下图：点击B选项，返回值为‘B’</p>
<h3 id="5-3-密码输入"><a href="#5-3-密码输入" class="headerlink" title="5.3 密码输入"></a>5.3 密码输入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line">a = pyautogui.password(<span class="string">&#x27;Enter password (text will be hidden)&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<p>输出如下图：输入密码，显示为密文，点击OK，返回值为刚刚输入的值；<br><img src="https://s2.loli.net/2022/06/05/NmAWt5kurljJo79.png" alt="在这里插入图片描述"></p>
<h3 id="5-4-普通输入"><a href="#5-4-普通输入" class="headerlink" title="5.4 普通输入"></a>5.4 普通输入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line">a = pyautogui.prompt(<span class="string">&#x27;请输入一个数字：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/06/05/PvgiDBfH6Oex7mz.png" alt="在这里插入图片描述"><br>输出如下图：显示为明文，点击OK，返回值为刚刚输入的值；</p>
<h2 id="6-实例"><a href="#6-实例" class="headerlink" title="6.实例"></a>6.实例</h2><h3 id="6-1-鼠标控制-鼠标画一个正方形"><a href="#6-1-鼠标控制-鼠标画一个正方形" class="headerlink" title="6.1 鼠标控制 鼠标画一个正方形"></a>6.1 鼠标控制 鼠标画一个正方形</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in range(2):   # 画正方形</span><br><span class="line"> pyautogui.moveTo(200,200,duration=1)</span><br><span class="line"> pyautogui.moveTo(200,400,duration=1)</span><br><span class="line"> pyautogui.moveTo(400,400,duration=0.5)</span><br><span class="line"> pyautogui.moveTo(400,200,duration=2)</span><br></pre></td></tr></table></figure>

<h2 id="6-2-获取鼠标的实时位置"><a href="#6-2-获取鼠标的实时位置" class="headerlink" title="6.2 获取鼠标的实时位置"></a>6.2 获取鼠标的实时位置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pyautogui</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    while True:</span><br><span class="line">        x,y = pyautogui.position()</span><br><span class="line">        posi = &#x27;x:&#x27; + str(x).rjust(4) + &#x27; y:&#x27; + str(y).rjust(4)</span><br><span class="line">        print(&#x27;\r&#x27;,posi,end=&#x27;&#x27;)</span><br><span class="line">        time.sleep(0.5)</span><br><span class="line"></span><br><span class="line">except KeyboardInterrupt:</span><br><span class="line">    print(&#x27;已退出！&#x27;)</span><br></pre></td></tr></table></figure>

<p>显示效果：<br><img src="https://s2.loli.net/2022/06/05/Y6kevqR2nscJGhu.png" alt="在这里插入图片描述"></p>
<h3 id="6-3-获取鼠标位置-与-所在位置的颜色"><a href="#6-3-获取鼠标位置-与-所在位置的颜色" class="headerlink" title="6.3 获取鼠标位置 与 所在位置的颜色"></a>6.3 获取鼠标位置 与 所在位置的颜色</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pyautogui</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    while True:</span><br><span class="line">        x,y = pyautogui.position()</span><br><span class="line">        rgb = pyautogui.screenshot().getpixel((x,y))</span><br><span class="line">        posi = &#x27;x:&#x27; + str(x).rjust(4) + &#x27; y:&#x27; + str(y).rjust(4) + &#x27;  RGB:&#x27; + str(rgb)</span><br><span class="line">        print(&#x27;\r&#x27;,posi,end=&#x27;&#x27;)</span><br><span class="line">        time.sleep(0.5)</span><br><span class="line"></span><br><span class="line">except KeyboardInterrupt:</span><br><span class="line">    print(&#x27;已退出！&#x27;)</span><br></pre></td></tr></table></figure>

<p>显示效果：<br><img src="https://s2.loli.net/2022/06/05/bjNOvfyEqd53epV.png" alt="在这里插入图片描述"></p>
<h3 id="6-4-自动点赞程序"><a href="#6-4-自动点赞程序" class="headerlink" title="6.4 自动点赞程序"></a>6.4 自动点赞程序</h3><p><img src="https://s2.loli.net/2022/06/05/lvr2ZWgpUcXfyFK.png" alt="在这里插入图片描述"></p>
<p>我们需要将所有的文章点赞，本页上的点赞完成后，就滚动鼠标，把新加载的文章也全部点赞；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># author：Zhang Kai </span><br><span class="line"></span><br><span class="line">import pyautogui</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def zan():</span><br><span class="line">    time.sleep(0.5)    # 等待 0.5 秒</span><br><span class="line">    left, top, width, height = pyautogui.locateOnScreen(&#x27;zan.png&#x27;)   # 寻找 点赞图片；</span><br><span class="line">    center = pyautogui.center((left, top, width, height))    # 寻找 图片的中心</span><br><span class="line">    pyautogui.click(center)    # 点击</span><br><span class="line">    print(&#x27;点赞成功！&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    if pyautogui.locateOnScreen(&#x27;zan.png&#x27;):</span><br><span class="line">        zan()   # 调用点赞函数</span><br><span class="line">    else:</span><br><span class="line">        pyautogui.scroll(-500)    # 本页没有图片后，滚动鼠标；</span><br><span class="line">        print(&#x27;没有找到目标，屏幕下滚~&#x27;)</span><br></pre></td></tr></table></figure>

<h1 id="pynput的使用"><a href="#pynput的使用" class="headerlink" title="pynput的使用"></a>pynput的使用</h1><p>侦听按键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from enum import Flag</span><br><span class="line">from time import sleep</span><br><span class="line">import pynput.keyboard as pk</span><br><span class="line">import sys</span><br><span class="line">import threading</span><br><span class="line">Flag = True</span><br><span class="line">def main():</span><br><span class="line">    while(Flag):</span><br><span class="line">        sleep(1)</span><br><span class="line">        print(1)</span><br><span class="line"># 连接事件以及释放</span><br><span class="line">def on_press(key):</span><br><span class="line">    # 监听按键</span><br><span class="line">    print(&quot;按键为&quot;,key)</span><br><span class="line">    if(key==pk.Key.esc):</span><br><span class="line">        globals()[&#x27;Flag&#x27;]=False</span><br><span class="line">        sys.exit(0)</span><br><span class="line">t2 = threading.Thread(target=main) # 创建线程2</span><br><span class="line">    # s.send(key.encode())</span><br><span class="line">t2.start() # 启动线程1</span><br><span class="line">with pk.Listener(on_press=on_press) as pklistener:</span><br><span class="line">    pklistener.join()</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">global add</span><br></pre></td></tr></table></figure>

<p>侦听鼠标</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pynput.keyboard as pk</span><br><span class="line">import pynput.mouse as pm</span><br><span class="line">import threading</span><br><span class="line"># def on_press(key):</span><br><span class="line">#     # 监听按键</span><br><span class="line">#     key=str(key)[1]</span><br><span class="line">#     print(&quot;按键为&quot;,key)</span><br><span class="line">#     # s.send(key.encode())</span><br><span class="line"># # 连接事件以及释放</span><br><span class="line"># with pk.Listener(on_press=on_press) as pklistener:</span><br><span class="line">#     pklistener.join()</span><br><span class="line">def on_click(x, y, button, pressed):</span><br><span class="line">    # 监听鼠标点击</span><br><span class="line">    if pressed:</span><br><span class="line">        print(&quot;按下坐标&quot;)</span><br><span class="line">        mxy=&quot;&#123;&#125;,&#123;&#125;&quot;.format(x, y)</span><br><span class="line">        print(mxy)</span><br><span class="line">        # s.send(mxy.encode())</span><br><span class="line">        # print(&#x27;Pressed&#x27;,(x, y))</span><br><span class="line">    if not pressed:</span><br><span class="line">        # Stop listener</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">def ls_k_thread():</span><br><span class="line">    while(1):</span><br><span class="line">        with pm.Listener(on_click=on_click) as pmlistener:</span><br><span class="line">            pmlistener.join()</span><br><span class="line">def analyse_pic_thread():</span><br><span class="line">    r = threading.Thread(target=ls_k_thread)</span><br><span class="line">    r.start()</span><br><span class="line">analyse_pic_thread()</span><br><span class="line"></span><br><span class="line">while(1):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>redis学习记录</title>
    <url>/2022/01/10/redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们现在的项目架构中，基本上是Web服务器(Tomcat)和数据库独立部署，独占服务器资源，随着用户数的增长，并发读写数据库，会加大数据库访问压力，导致性能的下降，严重时直接导致系统宕机，例如：</p>
<p><img src="https://s2.loli.net/2022/01/10/PE8UyVFnTjkDYbH.png" alt="image-20220110085503156"></p>
<p>此时，我们可以在Tomcat同服务器上中增加本地缓存，并在外部增加分布式缓存，缓存热门数据。也就是通过缓存能把绝大多数请求在读写数据库前拦截掉，大大降低数据库压力。例如：</p>
<p><img src="https://s2.loli.net/2022/01/10/URqzTxgJiol79Od.png" alt="image-20220110085531848"></p>
<p>基于这样的一种架构设计，于是类似redis的一些分布式数据库就诞生了。</p>
<p>版本及参考说明<br>Redis的次版本号（第一个小数点后的数字）为偶数的版本是稳定版本（2.4、2.6等），奇数为非稳定版本（2.5、2.7），一般推荐在生产环境使用稳定版本。最新版本6.2.2，新增了stream的处理方式，性能更高。Redis官方是不支持windows平台的，windows版本是由微软自己建立的分支，基于官方的Redis源码上进行编译、发布、维护的，所以windows平台的Redis版本要略低于官方版本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Redis 相关参考网址如下所示：</span><br><span class="line">Bootnb 相关：https://www.runoob.com/redis/redis-tutorial.html</span><br><span class="line">Redis 官网：https://redis.io/</span><br><span class="line">源码地址：https://github.com/redis/redis</span><br><span class="line">Redis 在线测试：http://try.redis.io/</span><br><span class="line">Redis 命令参考：http://doc.redisfans.com/</span><br></pre></td></tr></table></figure>

<p>在JAVA中连接redis:</p>
<p>首先安装在docker中安装redis:</p>
<p>导入redis依赖:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.5.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.8.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<p>编写测试类:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testGetConnection()&#123;</span><br><span class="line">        //假如不能连通,要注释掉redis.conf中 bind 127.0.0.1,</span><br><span class="line">        //并将protected-mode的值修改为no,然后重启redis再试</span><br><span class="line">        Jedis jedis=new Jedis(&quot;192.168.199.130&quot;,6379);</span><br><span class="line">        //jedis.auth(&quot;123456&quot;);//假如在redis.conf中设置了密码</span><br><span class="line">        String ping = jedis.ping();</span><br><span class="line">        System.out.println(ping);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>常用方法总和:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单点登录：</span><br><span class="line">public String doLogin(String username,String password)&#123;</span><br><span class="line">        Jedis jedis = new Jedis(&quot;192.168.199.130&quot;,6379);</span><br><span class="line">        if(!username.equals(&quot;admin&quot;))&#123;</span><br><span class="line">            System.out.println(&quot;账号不存在&quot;);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!password.equals(&quot;123456&quot;))&#123;</span><br><span class="line">            System.out.println(&quot;密码错误&quot;);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        String token = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        jedis.hset(token,&quot;username&quot;,username);//把值存在token中，以key:value的形式</span><br><span class="line">        jedis.hset(token,&quot;permission&quot;,&quot;sys:resource:create&quot;);</span><br><span class="line">        jedis.expire(token,10);//设置值的有效期</span><br><span class="line">        jedis.close();</span><br><span class="line">        return token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String doGetResource(String token)&#123;</span><br><span class="line">        if(token==null)&#123;</span><br><span class="line">            System.out.println(&quot;token为空&quot;);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        Jedis jedis = new Jedis(&quot;192.168.199.130&quot;,6379);</span><br><span class="line">        String username = jedis.hget(token, &quot;username&quot;);//获取值</span><br><span class="line">        String permission = jedis.hget(token, &quot;permission&quot;);//获取许可</span><br><span class="line"></span><br><span class="line">        jedis.close();</span><br><span class="line">        return permission;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void doit()&#123;</span><br><span class="line">        String token = doLogin(&quot;admin&quot;, &quot;123456&quot;);</span><br><span class="line">        System.out.println(token);</span><br><span class="line">        String resource = doGetResource(token);</span><br><span class="line">        System.out.println(resource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">投票系统:</span><br><span class="line">//获取成员</span><br><span class="line">    public Set&lt;String&gt; doGetMembers(String activityId)&#123;</span><br><span class="line">        Jedis jedis = new Jedis(&quot;192.168.199.130&quot;,6379);</span><br><span class="line">        Set&lt;String&gt; smembers = jedis.smembers(activityId);//判断是否有相关活动id的成员</span><br><span class="line">        jedis.close();</span><br><span class="line">        return smembers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //获取票的总数总数</span><br><span class="line">    public Long doCount(String activityId)&#123;</span><br><span class="line">        Jedis jedis=new Jedis(&quot;192.168.199.130&quot;, 6379);</span><br><span class="line">        //2.获取当前活动的总票数</span><br><span class="line">        Long count=jedis.scard(activityId);</span><br><span class="line">        //3.释放资源</span><br><span class="line">        jedis.close();</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br><span class="line">    //投票</span><br><span class="line">    public String doVote(String activityId,String userId)&#123;</span><br><span class="line"></span><br><span class="line">        //1.建立连接</span><br><span class="line">        Jedis jedis=new Jedis(&quot;192.168.199.130&quot;, 6379);</span><br><span class="line">        //2.执行投票</span><br><span class="line">        //2.1检查是否投过票</span><br><span class="line">        Boolean flag = jedis.sismember(activityId, userId);</span><br><span class="line"></span><br><span class="line">        //2.2执行投票或取消投票</span><br><span class="line">        if(flag)&#123;</span><br><span class="line">            //假如已经投过票,再投票就取消投票</span><br><span class="line">//            jedis.srem(activityId, userId);//以列表的形式移除数据</span><br><span class="line">            System.out.println(&quot;已经投过票了&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //没有投过票则执行投票</span><br><span class="line">            jedis.sadd(activityId, userId);//以列表的形式存储数据</span><br><span class="line">        &#125;</span><br><span class="line">        //3.释放资源</span><br><span class="line">        jedis.close();</span><br><span class="line">        return &quot;投票成功&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void main() &#123;</span><br><span class="line">        String activityId=&quot;101&quot;;</span><br><span class="line">        String userId1=&quot;1&quot;;</span><br><span class="line">        String userId2=&quot;2&quot;;</span><br><span class="line">        String userId3=&quot;3&quot;;</span><br><span class="line">        //执行投票动作</span><br><span class="line">        doVote(activityId, userId1);</span><br><span class="line">        doVote(activityId, userId2);</span><br><span class="line">        doVote(activityId, userId3);</span><br><span class="line">        //获取投票的总票数</span><br><span class="line">        Long aLong = doCount(activityId);</span><br><span class="line">        System.out.println(aLong);</span><br><span class="line">        //获取参与投票的成员</span><br><span class="line">        Set&lt;String&gt; members= doGetMembers(activityId);</span><br><span class="line">        System.out.println(members);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">消息队列:</span><br><span class="line">public String enque(String msg)&#123;</span><br><span class="line">        Jedis jedis = new Jedis(&quot;192.168.199.130&quot;,6379);</span><br><span class="line">        jedis.lpush(&quot;queue&quot;,msg);//队列尾部存储</span><br><span class="line">        jedis.close();</span><br><span class="line">        return &quot;添加成功:&quot;+msg;</span><br><span class="line">    &#125;</span><br><span class="line">    public String deque()&#123;</span><br><span class="line">        Jedis jedis = new Jedis(&quot;192.168.199.130&quot;,6379);</span><br><span class="line">        String queue = jedis.lpop(&quot;queue&quot;);//队列移除队头</span><br><span class="line">        jedis.close();</span><br><span class="line">        return queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void main() throws InterruptedException &#123;</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            for(int i=0;i&lt;=10;i++)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(1000);</span><br><span class="line">                    String enque = enque(&quot;消息:&quot; + String.valueOf(i));</span><br><span class="line">                    System.out.println(enque);</span><br><span class="line"></span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            for (;;)&#123;</span><br><span class="line"></span><br><span class="line">                String msg = deque();</span><br><span class="line">                if(msg==null)&#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(500);</span><br><span class="line"></span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                    System.out.println(&quot;取出消息:&quot; + msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(20000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">购物车:</span><br><span class="line">public static void addCart(Long userId,Long productId,int num)&#123;</span><br><span class="line">        //1.建立redis链接</span><br><span class="line">        Jedis jedis=new Jedis(&quot;192.168.199.130&quot;,6379);</span><br><span class="line">//        jedis.auth(&quot;123456&quot;);</span><br><span class="line">        //2.向购物车添加商品</span><br><span class="line">        //hincrBy这个函数在key不存在时会自动创建key</span><br><span class="line">        jedis.hincrBy(&quot;cart:&quot; + userId, String.valueOf(productId),num);//每次加上这个数，key:value形式</span><br><span class="line">        //3.释放redis链接</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">    //查看我的购物车</span><br><span class="line">    public static Map&lt;String, String&gt; listCart(Long userId)&#123;</span><br><span class="line">        //1.建立redis链接</span><br><span class="line">        Jedis jedis=new Jedis(&quot;192.168.199.130&quot;,6379);</span><br><span class="line">//        jedis.auth(&quot;123456&quot;);</span><br><span class="line">        //2.查看购物车商品</span><br><span class="line">        Map&lt;String, String&gt; map = jedis.hgetAll(&quot;cart:&quot; + userId);//查询购物车商品</span><br><span class="line">        //3.释放redis链接</span><br><span class="line">        jedis.close();</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void main() &#123;</span><br><span class="line">        //1.向购物车添加商品</span><br><span class="line">        addCart(101L,201L,1);</span><br><span class="line">        addCart(101L,202L,1);</span><br><span class="line">        addCart(101L,203L,2);</span><br><span class="line">        //2.查看购物车商品</span><br><span class="line">        Map&lt;String, String&gt; map = listCart(101L);</span><br><span class="line">            System.out.println(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>Redis 相关参考网址如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Bootnb 相关：https://www.runoob.com/redis/redis-tutorial.html</span><br><span class="line">Redis 官网：https://redis.io/</span><br><span class="line">源码地址：https://github.com/redis/redis</span><br><span class="line">Redis 在线测试：http://try.redis.io/</span><br><span class="line">Redis 命令参考：http://doc.redisfans.com/</span><br></pre></td></tr></table></figure>

<h2 id="Redis-是单线程的！"><a href="#Redis-是单线程的！" class="headerlink" title="Redis 是单线程的！"></a>Redis 是单线程的！</h2><p>明白Redis是很快的，官方表示，Redis是基于内存操作，CPU不是Redis性能瓶颈，Redis的瓶颈是根据</p>
<p>机器的内存和网络带宽，既然可以使用单线程来实现，就使用单线程了！所有就使用了单线程了！</p>
<p>Redis 是C 语言写的，官方提供的数据为 100000+ 的QPS，完全不比同样是使用 key-vale的</p>
<p>Memecache差！</p>
<p><strong>Redis</strong> <strong>为什么单线程还这么快？</strong></p>
<p>1、误区1：高性能的服务器一定是多线程的？</p>
<p>2、误区2：多线程（CPU上下文会切换！）一定比单线程效率高！</p>
<p>先去CPU&gt;内存&gt;硬盘的速度要有所了解！</p>
<p>核心：redis 是将所有的数据全部放在内存中的，所以说使用单线程去操作效率就是最高的，多线程</p>
<p>（CPU上下文会切换：耗时的操作！！！），对于内存系统来说，如果没有上下文切换效率就是最高</p>
<p>的！多次读写都是在一个CPU上的，在内存情况下，这个就是最佳的方案！</p>
<h1 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h1><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间</p>
<p>件MQ。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p>
<h1 id="Redis初始操作"><a href="#Redis初始操作" class="headerlink" title="Redis初始操作"></a>Redis初始操作</h1><h3 id="启动redis服务"><a href="#启动redis服务" class="headerlink" title="启动redis服务"></a>启动redis服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start redis01 #底层也是通过redis-server启动，start单词后的redis01为容器名</span><br></pre></td></tr></table></figure>

<p>docker 中查看redis 服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p>查看启动的redis进程信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef|grep redis</span><br><span class="line">root      3511     1  0 16:29 ?   00:00:01 redis-server *:6379</span><br><span class="line">root      3515     1  0 16:29 ?   00:00:01 redis-server 127.0.0.1:6380</span><br></pre></td></tr></table></figure>

<h2 id="进入redis容器"><a href="#进入redis容器" class="headerlink" title="进入redis容器"></a>进入redis容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it redis01 bash #redis01 为容器名</span><br></pre></td></tr></table></figure>

<h3 id="登陆redis服务"><a href="#登陆redis服务" class="headerlink" title="登陆redis服务"></a>登陆redis服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br><span class="line">或者</span><br><span class="line">redis-cli -p 6379</span><br><span class="line">或者</span><br><span class="line">redis-cli -p 6379 -a  password #-a后面为password,此操作需要开启redis.conf文件中的 requirepass选项</span><br></pre></td></tr></table></figure>

<p>登陆远程redis</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli  -h ip  -p 6379  -a  password</span><br></pre></td></tr></table></figure>

<h3 id="查看redis信息"><a href="#查看redis信息" class="headerlink" title="查看redis信息"></a>查看redis信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info		#查看当前redis节点的详细配置信息</span><br></pre></td></tr></table></figure>

<h3 id="清空redis屏幕"><a href="#清空redis屏幕" class="headerlink" title="清空redis屏幕"></a>清空redis屏幕</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; clear</span><br></pre></td></tr></table></figure>

<h3 id="退出redis服务"><a href="#退出redis服务" class="headerlink" title="退出redis服务"></a>退出redis服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exit</span><br></pre></td></tr></table></figure>

<h3 id="关闭redis服务"><a href="#关闭redis服务" class="headerlink" title="关闭redis服务"></a>关闭redis服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; shutdown</span><br></pre></td></tr></table></figure>

<h3 id="系统帮助"><a href="#系统帮助" class="headerlink" title="系统帮助"></a>系统帮助</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; help</span><br><span class="line">redis-cli 2.8.19</span><br><span class="line">Type: &quot;help @&lt;group&gt;&quot; to get a list of commands in &lt;group&gt;</span><br><span class="line">      &quot;help &lt;command&gt;&quot; for help on &lt;command&gt;</span><br><span class="line">      &quot;help &lt;tab&gt;&quot; to get a list of possible help topics</span><br><span class="line">      &quot;quit&quot; to exit</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; help type</span><br><span class="line">  TYPE key</span><br><span class="line">  summary: Determine the type stored at key</span><br><span class="line">  since: 1.0.0</span><br><span class="line">  group: generic</span><br></pre></td></tr></table></figure>

<h2 id="Redis数据存储操作"><a href="#Redis数据存储操作" class="headerlink" title="Redis数据存储操作"></a>Redis数据存储操作</h2><h3 id="简易数据存取"><a href="#简易数据存取" class="headerlink" title="简易数据存取"></a>简易数据存取</h3><p>基于查看redis中的key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br></pre></td></tr></table></figure>

<p>基于key/value形式存储数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set test1 123</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set test2 ab</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;test1&quot;</span><br><span class="line">2) &quot;test2&quot;</span><br></pre></td></tr></table></figure>

<p>基于key获取redis中存储的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get test1</span><br><span class="line">&quot;123&quot;</span><br></pre></td></tr></table></figure>

<p>清除redis中的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h3 id="Key有效时间设计"><a href="#Key有效时间设计" class="headerlink" title="Key有效时间设计"></a>Key有效时间设计</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Expire (设置生效时长-单位秒)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; set bomb tnt</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; expire bomb 10</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(integer) 5</span><br><span class="line">其中,TTL查看key的剩余时间，当返回值为-2时，表示键被删除。</span><br><span class="line">当 key 不存在时，返回 -2 。 当 key 存在但没有设置剩余生存时间时，返回 -1 。</span><br><span class="line">Persist (取消时长设置)</span><br></pre></td></tr></table></figure>

<p>Persist (取消时长设置)</p>
<p>语法：PERSIST key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set bomb tnt</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; expire bomb 60</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(integer) 49</span><br><span class="line">127.0.0.1:6379&gt; persist bomb</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(integer) -1</span><br></pre></td></tr></table></figure>

<p>其中,设置新的数据时需要重新设置该key的生存时间，重新设置值也会清除生存时间。</p>
<p>pexpire （单位毫秒）</p>
<p>语法：PEXPIRE key milliseconds</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set bomb tnt</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; pexpire bomb 10000</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl bomb</span><br><span class="line">(integer) -2</span><br></pre></td></tr></table></figure>

<h2 id="Redis数据类型操作"><a href="#Redis数据类型操作" class="headerlink" title="Redis数据类型操作"></a>Redis数据类型操作</h2><h3 id="String类型操作实践"><a href="#String类型操作实践" class="headerlink" title="String类型操作实践"></a>String类型操作实践</h3><h4 id="incr-incrby"><a href="#incr-incrby" class="headerlink" title="incr/incrby"></a>incr/incrby</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set num 1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;num&quot;	</span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">指定增长系数</span><br><span class="line">127.0.0.1:6379&gt; incrby num 2</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; incrby num 2</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; incrby num 2</span><br><span class="line">(integer) 9</span><br></pre></td></tr></table></figure>

<p>说明，如果num不存在，则自动会创建，如果存在自动+1。</p>
<h3 id="decr-decrby"><a href="#decr-decrby" class="headerlink" title="decr/decrby"></a>decr/decrby</h3><p>减少指定的整数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; decr num</span><br><span class="line">(integer) 9</span><br><span class="line">127.0.0.1:6379&gt; decrby num 3</span><br></pre></td></tr></table></figure>

<h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><p>向尾部追加值。如果键不存在则创建该键，其值为写的value，即相当于SET key value。返回值是追加后字符串的总长度。<br>语法：APPEND key value</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;num&quot;</span><br><span class="line">2) &quot;test1&quot;</span><br><span class="line">3) &quot;test&quot;</span><br><span class="line">127.0.0.1:6379&gt; get test</span><br><span class="line">&quot;123&quot;</span><br><span class="line">127.0.0.1:6379&gt; append test &quot;abc&quot;</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; get test</span><br><span class="line">&quot;123abc&quot;</span><br></pre></td></tr></table></figure>

<h3 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h3><p>字符串长度，返回数据的长度，如果键不存在则返回0。注意，如果键值为空串，返回也是0。<br>语法：STRLEN key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get test</span><br><span class="line">&quot;123abc&quot;</span><br><span class="line">127.0.0.1:6379&gt; strlen test</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; strlen tnt</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; set tnt &quot;&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; strlen tnt</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; exists tnt</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>

<h3 id="mset-mget"><a href="#mset-mget" class="headerlink" title="mset/mget"></a>mset/mget</h3><p>同时设置/获取多个键值<br>语法：MSET key value [key value …]<br>MGET key [key …]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line">127.0.0.1:6379&gt; mset a 1 b 2 c 3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget a b c</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Hash类型应用实践"><a href="#Hash类型应用实践" class="headerlink" title="Hash类型应用实践"></a>Hash类型应用实践</h3><p>Redis散列类型相当于Java中的HashMap，实现原理跟HashMap一致,一般用于存储对象信息，存储了字段（field）和字段值的映射，一个散列类型可以包含最多232-1个字段。</p>
<h3 id="hset-hget"><a href="#hset-hget" class="headerlink" title="hset/hget"></a>hset/hget</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HSET key field value</span><br><span class="line">HGET key field</span><br><span class="line">HMSET key field value [field value…]</span><br><span class="line">HMGET key field [field]</span><br><span class="line">HGETALL key</span><br></pre></td></tr></table></figure>

<p>HSET和HGET赋值和取值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset user username chenchen</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hget user username</span><br><span class="line">&quot;chenchen&quot;</span><br><span class="line">127.0.0.1:6379&gt; hset user username chen</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; keys user</span><br><span class="line">1) &quot;user&quot;</span><br><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line">1) &quot;username&quot;</span><br><span class="line">2) &quot;chen&quot;</span><br><span class="line">127.0.0.1:6379&gt; hset user age 18</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset user address &quot;xi&#x27;an&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line">1) &quot;username&quot;</span><br><span class="line">2) &quot;chen&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;18&quot;</span><br><span class="line">3) &quot;address&quot;</span><br><span class="line">4) &quot;xi&#x27;an&quot;</span><br></pre></td></tr></table></figure>

<p>HSET命令不区分插入和更新操作，当执行插入操作时HSET命令返回1，当执行更新操作时返回0。</p>
<h3 id="hincrby"><a href="#hincrby" class="headerlink" title="hincrby"></a>hincrby</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hdecrby article total 1		#执行会出错</span><br><span class="line">127.0.0.1:6379&gt; hincrby article total -1		#没有hdecrby自减命令</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hget article total			#获取值</span><br></pre></td></tr></table></figure>

<h3 id="hmset-hmget"><a href="#hmset-hmget" class="headerlink" title="hmset/hmget"></a>hmset/hmget</h3><p>HMSET和HMGET设置和获取对象属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset person username tony age 18</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget person age username</span><br><span class="line">1) &quot;18&quot;</span><br><span class="line">2) &quot;tony&quot;</span><br><span class="line">127.0.0.1:6379&gt; hgetall person</span><br><span class="line">1) &quot;username&quot;</span><br><span class="line">2) &quot;tony&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;18&quot;</span><br></pre></td></tr></table></figure>

<p>注意：上面HMGET字段顺序可以自行定义</p>
<h3 id="hexists"><a href="#hexists" class="headerlink" title="hexists"></a>hexists</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">属性是否存在</span><br><span class="line">127.0.0.1:6379&gt; hexists killer</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;hexists&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; hexists killer a</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; hexists user username</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hexists person age</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>

<h3 id="hdel"><a href="#hdel" class="headerlink" title="hdel"></a>hdel</h3><p>删除属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hdel user age</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line">1) &quot;username&quot;</span><br><span class="line">2) &quot;chen&quot;</span><br><span class="line">127.0.0.1:6379&gt; hgetall person</span><br><span class="line">1) &quot;username&quot;</span><br><span class="line">2) &quot;tony&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;18&quot;</span><br></pre></td></tr></table></figure>

<h3 id="hkeys-hvals"><a href="#hkeys-hvals" class="headerlink" title="hkeys/hvals"></a>hkeys/hvals</h3><p>只获取字段名HKEYS或字段值HVALS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hkeys person</span><br><span class="line">1) &quot;username&quot;</span><br><span class="line">2) &quot;age&quot;</span><br><span class="line">127.0.0.1:6379&gt; hvals person</span><br><span class="line">1) &quot;tony&quot;</span><br><span class="line">2) &quot;18&quot;</span><br><span class="line">2.3.8	hlen</span><br><span class="line">元素个数</span><br><span class="line">127.0.0.1:6379&gt; hlen user</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hlen person</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure>

<h2 id="List类型应用实践"><a href="#List类型应用实践" class="headerlink" title="List类型应用实践"></a>List类型应用实践</h2><h3 id="lpush"><a href="#lpush" class="headerlink" title="lpush"></a>lpush</h3><p>在key对应list的头部添加字符串元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; lpush mylist &quot;world&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush mylist &quot;hello&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br></pre></td></tr></table></figure>

<p>其中，Redis Lrange 返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。 其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推</p>
<h2 id="rpush"><a href="#rpush" class="headerlink" title="rpush"></a>rpush</h2><p>在key对应list的尾部添加字符串元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; rpush mylist2 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist2 &quot;world&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist2 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br></pre></td></tr></table></figure>

<h2 id="del"><a href="#del" class="headerlink" title="del"></a>del</h2><p>清空集合元素，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; del mylist</span><br></pre></td></tr></table></figure>

<h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h2><p>在key对应list的特定位置之前或之后添加字符串元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; rpush mylist3 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist3 &quot;world&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; linsert mylist3 before &quot;world&quot; &quot;there&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist3 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;there&quot;</span><br><span class="line">3) &quot;world&quot;</span><br></pre></td></tr></table></figure>

<h2 id="lset"><a href="#lset" class="headerlink" title="lset"></a>lset</h2><p>设置list中指定下标的元素值(一般用于修改操作)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; rpush mylist4 &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist4 &quot;two&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist4 &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; lset mylist4 0 &quot;four&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; lset mylist4 -2 &quot;five&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist4 0 -1</span><br><span class="line">1) &quot;four&quot;</span><br><span class="line">2) &quot;five&quot;</span><br><span class="line">3) &quot;three&quot;</span><br></pre></td></tr></table></figure>

<h2 id="lrem"><a href="#lrem" class="headerlink" title="lrem"></a>lrem</h2><p>从key对应list中删除count个和value相同的元素，count&gt;0时，按从头到尾的顺序删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; rpush mylist5 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist5 &quot;hello&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist5 &quot;foo&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist5 &quot;hello&quot;</span><br><span class="line">(integer) 4</span><br><span class="line">redis 127.0.0.1:6379&gt; lrem mylist5 2 &quot;hello&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist5 0 -1</span><br><span class="line">1) &quot;foo&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br><span class="line">count&lt;0时，按从尾到头的顺序删除</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist6 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist6 &quot;hello&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist6 &quot;foo&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist6 &quot;hello&quot;</span><br><span class="line">(integer) 4</span><br><span class="line">redis 127.0.0.1:6379&gt; lrem mylist6 -2 &quot;hello&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist6 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;foo&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br><span class="line">count=0时，删除全部</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist7 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist7 &quot;hello&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist7 &quot;foo&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist7 &quot;hello&quot;</span><br><span class="line">(integer) 4</span><br><span class="line">redis 127.0.0.1:6379&gt; lrem mylist7 0 &quot;hello&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist7 0 -1</span><br><span class="line">1) &quot;foo&quot;</span><br></pre></td></tr></table></figure>

<h2 id="ltrim"><a href="#ltrim" class="headerlink" title="ltrim"></a>ltrim</h2><p>保留指定key 的值范围内的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; rpush mylist8 &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist8 &quot;two&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist8 &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush mylist8 &quot;four&quot;</span><br><span class="line">(integer) 4</span><br><span class="line">redis 127.0.0.1:6379&gt; ltrim mylist8 1 -1</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist8 0 -1</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;three&quot;</span><br><span class="line">3) &quot;four&quot;</span><br></pre></td></tr></table></figure>

<h2 id="lpop"><a href="#lpop" class="headerlink" title="lpop"></a>lpop</h2><p>从list的尾部删除元素，并返回删除元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; lrange mylist2 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; rpop mylist2</span><br><span class="line">&quot;world&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist2 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br></pre></td></tr></table></figure>

<h2 id="rpop"><a href="#rpop" class="headerlink" title="rpop"></a>rpop</h2><p>从list的尾部删除元素，并返回删除元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; lrange mylist2 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; rpop mylist2</span><br><span class="line">&quot;world&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange mylist2 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br></pre></td></tr></table></figure>

<h2 id="llen"><a href="#llen" class="headerlink" title="llen"></a>llen</h2><p>返回key对应list的长度：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; llen mylist5</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure>

<h2 id="lindex"><a href="#lindex" class="headerlink" title="lindex"></a>lindex</h2><p>返回名称为key的list中index位置的元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; lrange mylist5 0 -1</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;foo&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; lindex mylist5 0</span><br><span class="line">&quot;three&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; lindex mylist5 1</span><br><span class="line">&quot;foo&quot;</span><br></pre></td></tr></table></figure>

<h2 id="rpoplpush"><a href="#rpoplpush" class="headerlink" title="rpoplpush"></a>rpoplpush</h2><p>从第一个list的尾部移除元素并添加到第二个list的头部,最后返回被移除的元素值，整个操作是原子的.如果第一个list是空或者不存在返回nil：<br>rpoplpush lst1 lst1<br>rpoplpush lst1 lst2</p>
<h2 id="Set类型应用实践"><a href="#Set类型应用实践" class="headerlink" title="Set类型应用实践"></a>Set类型应用实践</h2><p>Redis的Set类似Java中的HashSet，是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。Redis中Set集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p>
<h2 id="sadd"><a href="#sadd" class="headerlink" title="sadd"></a>sadd</h2><p>添加元素，重复元素添加失败，返回0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd name tony</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd name hellen</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd name rose</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd name rose</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure>

<h2 id="smembers"><a href="#smembers" class="headerlink" title="smembers"></a>smembers</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获取集合中成员，例如</span><br><span class="line">127.0.0.1:6379&gt; smembers name</span><br></pre></td></tr></table></figure>

<h2 id="spop"><a href="#spop" class="headerlink" title="spop"></a>spop</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers internet</span><br><span class="line">1) &quot;amoeba&quot;</span><br><span class="line">2) &quot;redis&quot;</span><br><span class="line">3) &quot;rabbitmq&quot;</span><br><span class="line">4) &quot;nginx&quot;</span><br><span class="line">127.0.0.1:6379&gt; spop internet</span><br><span class="line">&quot;rabbitmq&quot;</span><br><span class="line">127.0.0.1:6379&gt; spop internet</span><br><span class="line">&quot;nginx&quot;</span><br><span class="line">127.0.0.1:6379&gt; smembers internet</span><br><span class="line">1) &quot;amoeba&quot;</span><br><span class="line">2) &quot;redis&quot;</span><br></pre></td></tr></table></figure>

<h2 id="scard"><a href="#scard" class="headerlink" title="scard"></a>scard</h2><p>获取集合中的成员个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scard name</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure>

<h2 id="smove"><a href="#smove" class="headerlink" title="smove"></a>smove</h2><p>移动一个元素到另外一个集合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd internet amoeba nginx redis</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; sadd bigdata hadopp spark rabbitmq</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; smembers internet</span><br><span class="line">1) &quot;amoeba&quot;</span><br><span class="line">2) &quot;redis&quot;</span><br><span class="line">3) &quot;nginx&quot;</span><br><span class="line">127.0.0.1:6379&gt; smembers bigdata</span><br><span class="line">1) &quot;hadopp&quot;</span><br><span class="line">2) &quot;spark&quot;</span><br><span class="line">3) &quot;rabbitmq&quot;</span><br><span class="line">127.0.0.1:6379&gt; smove bigdata internet rabbitmq</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers internet</span><br><span class="line">1) &quot;amoeba&quot;</span><br><span class="line">2) &quot;redis&quot;</span><br><span class="line">3) &quot;rabbitmq&quot;</span><br><span class="line">4) &quot;nginx&quot;</span><br><span class="line">127.0.0.1:6379&gt; smembers bigdata</span><br><span class="line">1) &quot;hadopp&quot;</span><br><span class="line">2) &quot;spark&quot;</span><br></pre></td></tr></table></figure>

<h2 id="sunion"><a href="#sunion" class="headerlink" title="sunion"></a>sunion</h2><p>实现集合的并集操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sunion internet bigdata</span><br><span class="line">1) &quot;redis&quot;</span><br><span class="line">2) &quot;nginx&quot;</span><br><span class="line">3) &quot;rabbitmq&quot;</span><br><span class="line">4) &quot;amoeba&quot;</span><br><span class="line">5) &quot;hadopp&quot;</span><br><span class="line">6) &quot;spark&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myset 1 one # 添加一个值</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 2 two 3 three # 添加多个值</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf # 显示全部的用户 从小到大！</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE salary 0 -1 # 从大到进行排序！</span><br></pre></td></tr></table></figure>



<h2 id="SpringBoot工程中Redis与Aop技术的整合"><a href="#SpringBoot工程中Redis与Aop技术的整合" class="headerlink" title="SpringBoot工程中Redis与Aop技术的整合"></a>SpringBoot工程中Redis与Aop技术的整合</h2><p>基于AOP与Redis技术实现mysql,redis数据库中数据操作.</p>
<h3 id="项目准备工作"><a href="#项目准备工作" class="headerlink" title="项目准备工作"></a>项目准备工作</h3><p>第一步:打开sca-template工程,添加访问MySql数据库的依赖(两个)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--mysql依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--mybatis plus (简化mybatis操作)--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.4.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>第二步:修改配置文件,添加连接mysql数据库的配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:///jt-sso?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br></pre></td></tr></table></figure>

<h3 id="Pojo逻辑对象定义"><a href="#Pojo逻辑对象定义" class="headerlink" title="Pojo逻辑对象定义"></a>Pojo逻辑对象定义</h3><p>定义一个Menu对象,用户封装tb_menus表中的数据,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.pojo;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line">import org.springframework.data.annotation.Id;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">@TableName(value = &quot;tb_menus&quot;)</span><br><span class="line">public class Menu implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = -577747732166248365L;</span><br><span class="line">    @TableId(type = IdType.AUTO)</span><br><span class="line">    private Long id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String permission;</span><br><span class="line"></span><br><span class="line">    public Long getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Long id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPermission() &#123;</span><br><span class="line">        return permission;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPermission(String permission) &#123;</span><br><span class="line">        this.permission = permission;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Menu&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, permission=&#x27;&quot; + permission + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Dao逻辑对象设计及实现"><a href="#Dao逻辑对象设计及实现" class="headerlink" title="Dao逻辑对象设计及实现"></a>Dao逻辑对象设计及实现</h3><p>创建用于操作数据库中tb_menus表中数据的Mapper对象,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.dao;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line">import com.jt.pojo.Menu;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line">@Mapper</span><br><span class="line">public interface MenuMapper extends BaseMapper&lt;Menu&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Service逻辑对象设计及实现"><a href="#Service逻辑对象设计及实现" class="headerlink" title="Service逻辑对象设计及实现"></a>Service逻辑对象设计及实现</h3><p>第一步:定义用于处理菜单业务的业务接口,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.service;</span><br><span class="line">import com.jt.pojo.Menu;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">public interface MenuService &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 基于id查找菜单对象,先查redis,redis没有再查数据库</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    Menu selectById(Long id);</span><br><span class="line">    /**</span><br><span class="line">     * 向表中写入一条菜单信息,与此同时也要向redis写入一样的数据</span><br><span class="line">     * @param menu</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    Menu insertMenu(Menu menu);</span><br><span class="line">    /**</span><br><span class="line">     * 更新表中数据,与此同时也要更新redis中的数据</span><br><span class="line">     * @param menu</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    Menu updateMenu(Menu menu);</span><br><span class="line">    //.....</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二步:定义用于处理菜单业务的业务接口实现类,<br>在这个实现类中自己基于RedisTemplate对象操作Redis缓存,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.service;</span><br><span class="line">import com.jt.dao.MenuMapper;</span><br><span class="line">import com.jt.pojo.Menu;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.data.redis.core.ValueOperations;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.time.Duration;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class MenuServiceImpl implements MenuService&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private MenuMapper menuMapper;</span><br><span class="line"></span><br><span class="line">   // @Autowired</span><br><span class="line">   // private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    @Resource(name=&quot;redisTemplate&quot;)</span><br><span class="line">    private ValueOperations valueOperations;//从spring.io官方的data项目中去查这种注入方式</span><br><span class="line">    /**</span><br><span class="line">     * 基于id查询菜单信息,要求:</span><br><span class="line">     * 1)先查redis,redis没有去查mysql</span><br><span class="line">     * 2)将从mysql查询到的数据存储到redis</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public Menu selectById(Long id) &#123;</span><br><span class="line">        //ValueOperations valueOperations = redisTemplate.opsForValue();</span><br><span class="line">        Object obj=valueOperations.get(String.valueOf(id));</span><br><span class="line">        if(obj!=null)&#123;</span><br><span class="line">            System.out.println(&quot;Get Data from redis&quot;);</span><br><span class="line">            return (Menu)obj;</span><br><span class="line">        &#125;</span><br><span class="line">        Menu menu=menuMapper.selectById(id);</span><br><span class="line">        valueOperations.set(String.valueOf(id), menu, Duration.ofSeconds(120));</span><br><span class="line">        return menu;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public Menu insertMenu(Menu menu) &#123;</span><br><span class="line">        menuMapper.insert(menu);</span><br><span class="line">       // ValueOperations valueOperations = redisTemplate.opsForValue();</span><br><span class="line">        valueOperations.set(String.valueOf(menu.getId()), menu, Duration.ofSeconds(120));</span><br><span class="line">        return menu;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public Menu updateMenu(Menu menu) &#123;</span><br><span class="line">        menuMapper.updateById(menu);</span><br><span class="line">       // ValueOperations valueOperations = redisTemplate.opsForValue();</span><br><span class="line">        valueOperations.set(String.valueOf(menu.getId()), menu, Duration.ofSeconds(120));</span><br><span class="line">        return menu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步:定义用于处理菜单业务的业务接口实现类,基于AOP方式操作redis缓存,比较<br>与第二步写的Redis操作方式的不同,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.service;</span><br><span class="line"></span><br><span class="line">import com.jt.dao.MenuMapper;</span><br><span class="line">import com.jt.pojo.Menu;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.cache.annotation.CachePut;</span><br><span class="line">import org.springframework.cache.annotation.Cacheable;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class DefaultMenuService implements MenuService&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private MenuMapper menuMapper;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 由此注解描述的方法为切入点方法,此方法执行时,底层会通过AOP机制</span><br><span class="line">     * 先从缓存取数据,缓存有则直接返回,缓存没有则查数据,最后将查询的数据</span><br><span class="line">     * 还会向redis存储一份</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Cacheable(value = &quot;menuCache&quot;,key=&quot;#id&quot;)//打开redis，在springboot启动类加注解@EnableCaching</span><br><span class="line">    @Override</span><br><span class="line">    public Menu selectById(Long id) &#123;</span><br><span class="line">        return menuMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * CachePut注解的意思是更新缓存</span><br><span class="line">     * @param menu</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @CachePut(value = &quot;menuCache&quot;,key=&quot;#menu.id&quot;)</span><br><span class="line">    @Override</span><br><span class="line">    public Menu insertMenu(Menu menu) &#123;</span><br><span class="line">         menuMapper.insert(menu);</span><br><span class="line">         return menu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @CachePut(value = &quot;menuCache&quot;,key=&quot;#menu.id&quot;)</span><br><span class="line">    @Override</span><br><span class="line">    public Menu updateMenu(Menu menu) &#123;</span><br><span class="line">        menuMapper.updateById(menu);</span><br><span class="line">        return menu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明,启动AOP方式的缓存应用,需要在启动类上添加@EnableCaching注解:</p>
<p>第四步:定义单元测试类,基于单元测试类测试缓存应用.例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt;</span><br><span class="line"></span><br><span class="line">import com.jt.pojo.Menu;</span><br><span class="line">import com.jt.service.MenuService;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">public class MenuServiceTests &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    @Qualifier(&quot;defaultMenuService&quot;)</span><br><span class="line">    //@Resource(name=&quot;defaultMenuService&quot;)</span><br><span class="line">    private MenuService menuService;</span><br><span class="line">    @Test</span><br><span class="line">    void testSelectById()&#123;</span><br><span class="line">        Menu menu = menuService.selectById(1L);</span><br><span class="line">        System.out.println(menu);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    void testUpdateMenu()&#123;</span><br><span class="line">        Menu menu = menuService.selectById(1L);</span><br><span class="line">        menu.setName(&quot;select res&quot;);</span><br><span class="line">        menuService.updateMenu(menu);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    void testInertMenu()&#123;</span><br><span class="line">        Menu menu = new Menu();</span><br><span class="line">        menu.setName(&quot;insert res&quot;);</span><br><span class="line">        menu.setPermission(&quot;sys:res:insert&quot;);</span><br><span class="line">        menuService.insertMenu(menu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第五步:改变AOP方式中redis数据存储时的序列化方式(假如业务上需要).其实现上要借助<br>CacheManager对象,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.cache.CacheManager;</span><br><span class="line">import org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.Primary;</span><br><span class="line">import org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line">import org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line">import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line">import org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line">import org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 重构CacheManager对象,其目的是改变AOP方式应用redis的序列化和反序列化的方式.</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class CacheManagerConfig &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 重构CacheManager对象</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) &#123;</span><br><span class="line">        //定义RedisCache配置</span><br><span class="line">        RedisCacheConfiguration cacheConfig=</span><br><span class="line">                RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">        //定义key的序列化方式</span><br><span class="line">        .serializeKeysWith(</span><br><span class="line">                RedisSerializationContext.</span><br><span class="line">                   SerializationPair.fromSerializer(RedisSerializer.string()))</span><br><span class="line">        //定义value的序列化方式</span><br><span class="line">        .serializeValuesWith(</span><br><span class="line">                RedisSerializationContext.SerializationPair</span><br><span class="line">                .fromSerializer(RedisSerializer.json()));</span><br><span class="line"></span><br><span class="line">        return  RedisCacheManager.builder(redisConnectionFactory)</span><br><span class="line">               .cacheDefaults(cacheConfig)</span><br><span class="line">               .build();//建造者模式(复杂对象的创建,建议使用这种方式,封装了对象的创建细节)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写好这个对象后,可以再次基于MenuService中的方法进行单元测试,检测redis数据的存储.</p>
<h3 id="Controller逻辑对象设计及实现"><a href="#Controller逻辑对象设计及实现" class="headerlink" title="Controller逻辑对象设计及实现"></a>Controller逻辑对象设计及实现</h3><p>第一步:定义Controller处理,处理客户端对菜单数据的请求操作,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.controller;</span><br><span class="line">import com.jt.pojo.Menu;</span><br><span class="line">import com.jt.service.MenuService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/menu&quot;)</span><br><span class="line">public class MenuController&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    @Qualifier(&quot;defaultMenuService&quot;)</span><br><span class="line">    private MenuService menuService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="line">    public Menu doSelectById(@PathVariable(&quot;id&quot;) Long id)&#123;</span><br><span class="line">        return menuService.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    @PutMapping</span><br><span class="line">    public String doUpdate(@RequestBody Menu menu)&#123;</span><br><span class="line">         menuService.updateMenu(menu);</span><br><span class="line">         return &quot;update ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    @PostMapping</span><br><span class="line">    public String doInsert(@RequestBody Menu menu)&#123;</span><br><span class="line">        menuService.insertMenu(menu);</span><br><span class="line">        return &quot;insert ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h1><h3 id="Redis-提供了2个不同形式的持久化方式。"><a href="#Redis-提供了2个不同形式的持久化方式。" class="headerlink" title="Redis 提供了2个不同形式的持久化方式。"></a>Redis 提供了2个不同形式的持久化方式。</h3><p>l RDB（Redis DataBase）</p>
<p>l AOF（Append Of File）</p>
<p>redis.conf文件配置:</p>
<p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。 整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。<em><strong>*RDB的缺点是*</strong></em>****最后一次持久化后的数据可能丢失****。</p>
<h1 id="RDB持久化流程"><a href="#RDB持久化流程" class="headerlink" title="RDB持久化流程"></a>RDB持久化流程</h1><p><img src="https://s2.loli.net/2022/03/24/MVUgDk7i4KQFjHA.png" alt="image-20220324164743407"></p>
<h1 id="dump-rdb文件"><a href="#dump-rdb文件" class="headerlink" title="dump.rdb文件"></a>dump.rdb文件</h1><p>在redis.conf中配置文件名称，默认为dump.rdb</p>
<p><img src="https://s2.loli.net/2022/03/24/RZYnehbpftL84NB.png" alt="image-20220324165006989"></p>
<p><em><strong>*配置位置*</strong></em></p>
<p>rdb文件的保存路径，也可以修改。默认为Redis启动时命令行所在的目录下</p>
<p>dir “/myredis/“</p>
<p><img src="https://s2.loli.net/2022/03/24/cdDwmlnpqH7oXR9.png" alt="image-20220324165043012"></p>
<p>*<strong>如何触发RDB快照；保持策略*</strong></p>
<h1 id="配置文件中默认的快照配置"><a href="#配置文件中默认的快照配置" class="headerlink" title="配置文件中默认的快照配置"></a>配置文件中默认的快照配置</h1><p><img src="https://s2.loli.net/2022/03/24/Ol9jwmvD8dKGtb5.png" alt="image-20220324165130243"></p>
<h2 id="RDB方式配置"><a href="#RDB方式配置" class="headerlink" title="RDB方式配置"></a>RDB方式配置</h2><p>Snapshotting</p>
<p><em><strong>*命令*</strong></em><em><strong>*save VS bgsave*</strong></em></p>
<p>save ：save时只管保存，其它不管，全部阻塞。手动保存。不建议。</p>
<p><em><strong>*bgsave：*</strong></em><em><strong>*Redis*</strong></em><em><strong>*会在后台异步进行快照操作， 快照同时还可以响应客户端请求。*</strong></em></p>
<p>可以通过lastsave 命令获取最后一次成功执行快照的时间</p>
<p><em><strong>*flushall*</strong></em><em><strong>*命令*</strong></em></p>
<p>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义</p>
<p><em><strong>*###SNAPSHOTTING*</strong></em><em><strong>*快照*</strong></em><em><strong>*###*</strong></em></p>
<p><em><strong>*Save*</strong></em></p>
<p>格式：save 秒钟 写操作次数</p>
<p>RDB是整个内存的压缩过的Snapshot，RDB的数据结构，可以配置复合的快照触发条件，</p>
<p><em><strong>*默认是1分钟内改了*</strong></em><em><strong>*1*</strong></em><em><strong>*万次，或*</strong></em><em><strong>*5*</strong></em><em><strong>*分钟内改了*</strong></em><em><strong>*10*</strong></em><em><strong>*次，或*</strong></em><em><strong>*15*</strong></em><em><strong>*分钟内改了*</strong></em><em><strong>*1*</strong></em><em><strong>*次。*</strong></em></p>
<p>禁用</p>
<p>不设置save指令，或者给save传入空字符串</p>
<p><em><strong>*stop-writes-on-bgsave-error*</strong></em></p>
<p><img src="https://s2.loli.net/2022/03/24/VUL7dr3GzuH8W6M.jpg" alt="img"> </p>
<p>当Redis无法写入磁盘的话，直接关掉Redis的写操作。推荐yes.</p>
<p><em><strong>*rdbcompression*</strong></em> <em><strong>*压缩文件*</strong></em></p>
<p><img src="https://s2.loli.net/2022/03/24/cQLCXPVN14Mtlpk.jpg" alt="img"> </p>
<p>对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。</p>
<p>如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能。推荐yes.</p>
<p><em><strong>*rdbchecksum*</strong></em> <em><strong>*检查完整性*</strong></em></p>
<p><img src="https://s2.loli.net/2022/03/24/iAljqv6h3JXcwY4.jpg" alt="img"> </p>
<p>在存储快照后，还可以让redis使用CRC64算法来进行数据校验，</p>
<p>但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</p>
<p>推荐yes.</p>
<p><em><strong>*rdb*</strong></em><em><strong>*的备份*</strong></em></p>
<p>先通过config get dir  查询rdb文件的目录 </p>
<p>将*.rdb的文件拷贝到别的地方</p>
<p>rdb的恢复</p>
<ol>
<li> 关闭Redis</li>
<li> 先把备份的文件拷贝到工作目录下 cp dump2.rdb dump.rdb</li>
<li> 启动Redis, 备份数据会直接加载</li>
</ol>
<p><em><strong>*优势*</strong></em></p>
<p>l 适合大规模的数据恢复</p>
<p>l 对数据完整性和一致性要求不高更适合使用</p>
<p>l 节省磁盘空间</p>
<p>l 恢复速度快</p>
<h3 id="AOF方式"><a href="#AOF方式" class="headerlink" title="AOF方式"></a>AOF方式</h3><p><em><strong>*AOF持久化流程*</strong></em></p>
<p>（1）客户端的请求写命令会被append追加到AOF缓冲区内；</p>
<p>（2）AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中；</p>
<p>（3）AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；</p>
<h3 id="Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；"><a href="#Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；" class="headerlink" title="Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；"></a>Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；</h3><p><img src="https://s2.loli.net/2022/03/24/D6Lui9TNl8PYUqw.png" alt="image-20220324165540158"></p>
<p><em><strong>*AOF启动*</strong></em><em><strong>*/*</strong></em><em><strong>*修复*</strong></em><em><strong>*/*</strong></em><em><strong>*恢复*</strong></em></p>
<p>l AOF的备份机制和性能虽然和RDB不同, 但是备份和恢复的操作同RDB一样，都是拷贝备份文件，需要恢复时再拷贝到Redis工作目录下，启动系统即加载。</p>
<p>l 正常恢复</p>
<ol>
<li> 修改默认的appendonly no，改为yes</li>
<li> 将有数据的aof文件复制一份保存到对应目录(查看目录：config get dir)</li>
<li>恢复：重启redis然后重新加载</li>
</ol>
<p>l 异常恢复</p>
<ol>
<li> 修改默认的appendonly no，改为yes</li>
<li>如遇到****AOF文件损坏*<em><strong>，通过/usr/local/bin/</strong></em>*redis-check-aof–fix appendonly.aof****进行恢复</li>
<li> 备份被写坏的AOF文件</li>
<li> 恢复：重启redis，然后重新加载</li>
</ol>
<h2 id="AOF同步频率设置"><a href="#AOF同步频率设置" class="headerlink" title="*AOF同步频率设置*"></a><em><strong>*AOF同步频率设置*</strong></em></h2><p>appendfsync always</p>
<p>始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好</p>
<p>appendfsync everysec</p>
<p>每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</p>
<p>appendfsync no</p>
<p>redis不主动进行同步，把同步时机交给操作系统。</p>
<p><em><strong>*Rewrite压缩*</strong></em></p>
<p>1是什么：</p>
<p>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制, 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof</p>
<p>2重写原理，如何实现重写</p>
<p>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，redis4.0版本后的重写，是指上就是把rdb 的快照，以二级制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作。</p>
<p>no-appendfsync-on-rewrite：</p>
<p>如果 no-appendfsync-on-rewrite=yes ,不写入aof文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（降低数据安全性，提高性能）</p>
<p>​    如果 no-appendfsync-on-rewrite=no,  还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低）</p>
<p>触发机制，何时重写</p>
<p>Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发</p>
<p>重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定Redis要满足一定条件才会进行重写。 </p>
<p>auto-aof-rewrite-percentage：设置重写的基准值，文件达到100%时开始重写（文件是原来重写后文件的2倍时触发）</p>
<p>auto-aof-rewrite-min-size：设置重写的基准值，最小文件64MB。达到这个值开始重写。</p>
<p>例如：文件达到70MB开始重写，降到50MB，下次什么时候开始重写？100MB</p>
<p>系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为base_size,</p>
<p>如果Redis的AOF当前大小&gt;= base_size +base_size*100% (默认)且当前大小&gt;=64mb(默认)的情况下，Redis会对AOF进行重写。 </p>
<h2 id="Redis-事务处理实践"><a href="#Redis-事务处理实践" class="headerlink" title="Redis 事务处理实践"></a>Redis 事务处理实践</h2><h3 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h3><p>redis进行事务控制时，通常是基于如下指令进行实现，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">multi 开启事务</span><br><span class="line">exec 提交事务</span><br><span class="line">discard 取消事务</span><br><span class="line">watch 监控，如果监控的值发生变化，则提交事务时会失败</span><br><span class="line">unwatch 去掉监控</span><br></pre></td></tr></table></figure>

<p>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。</p>
<p>Redis保证一个事务中的所有命令要么都执行，要么都不执行(原子性)。如果在发送EXEC命令前客户端断线了，则Redis会清空事务队列，事务中的所有命令都不会执行。而一旦客户端发送了EXEC命令，所有的命令就都会被执行，即使此后客户端断线也没关系，因为Redis中已经记录了所有要执行的命令。</p>
<h3 id="Redis事务控制实践"><a href="#Redis事务控制实践" class="headerlink" title="Redis事务控制实践"></a>Redis事务控制实践</h3><h4 id="exec提交事务"><a href="#exec提交事务" class="headerlink" title="exec提交事务"></a>exec提交事务</h4><p>例如：模拟转账，tony 500，jack 200，tony转给jack100。过程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set tony 500</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set jack 200</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget tony jack</span><br><span class="line">1) &quot;500&quot;</span><br><span class="line">2) &quot;200&quot;</span><br><span class="line">127.0.0.1:6379&gt; multi #开启事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; decrby tony 100 #所有指令操作会进入到队列</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incrby jack 100</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; mget tony jack</span><br><span class="line">QUEUED </span><br><span class="line">127.0.0.1:6379(TX)&gt; exec  #提交事务</span><br><span class="line">1) (integer) 400</span><br><span class="line">2) (integer) 300</span><br><span class="line">3) 1) &quot;400&quot;</span><br><span class="line">   2) &quot;300&quot;</span><br><span class="line">127.0.0.1:6379&gt; mget tony jack</span><br><span class="line">1) &quot;400&quot;</span><br><span class="line">2) &quot;300&quot;</span><br></pre></td></tr></table></figure>

<h4 id="discard取消事务"><a href="#discard取消事务" class="headerlink" title="discard取消事务"></a>discard取消事务</h4><p>注意redis事务太简单，没有回滚，而只有取消。</p>
<p>当出现错误指令时，事务也会自动取消。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mget tony jack</span><br><span class="line">1) &quot;400&quot;</span><br><span class="line">2) &quot;300&quot;</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incrby jack 100</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; discard</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get jack</span><br><span class="line">&quot;300&quot;</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(error) ERR EXEC without MULTI</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set ticket 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set money 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch ticket		#乐观锁，对值进行观察，改变则事务失败</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi				#开启事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decr ticket</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby money 100</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(nil) #执行事务，失败</span><br><span class="line">127.0.0.1:6379&gt; get ticket</span><br><span class="line">“0”</span><br><span class="line">127.0.0.1:6379&gt; unwatch #取消监控</span><br></pre></td></tr></table></figure>

<h2 id="Redis架构设计"><a href="#Redis架构设计" class="headerlink" title="Redis架构设计"></a>Redis架构设计</h2><h4 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h4><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>单个Redis支持的读写能力还是有限的,此时我们可以使用多个redis来提高redis的并发处理能力,这些redis如何协同,就需要有一定的架构设计,这里我们首先从主从(Master/Slave)架构进行分析和实现.</p>
<h4 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h4><p>redis主从架构如图所示</p>
<p><img src="https://s2.loli.net/2022/01/13/zUIOygfiDqF41oN.png" alt="image-20220113094231555"></p>
<h3 id="快速入门实践"><a href="#快速入门实践" class="headerlink" title="快速入门实践"></a>快速入门实践</h3><p>第一步:删除所有原有的redis容器,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm -f  redis容器名</span><br></pre></td></tr></table></figure>

<p>第二步：进入你的宿主机docker目录,然后将redis01拷贝两份，例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -r redis01/ redis02</span><br><span class="line">cp -r redis01/ redis03</span><br></pre></td></tr></table></figure>

<p>第三步：启动三个新的redis容器，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis6379 \</span><br><span class="line">-v /usr/local/docker/redis01/data:/data \</span><br><span class="line">-v /usr/local/docker/redis01/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf \</span><br><span class="line">--appendonly yes</span><br><span class="line"></span><br><span class="line">docker run -p 6380:6379 --name redis6380 \</span><br><span class="line">-v /usr/local/docker/redis02/data:/data \</span><br><span class="line">-v /usr/local/docker/redis02/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf \</span><br><span class="line">--appendonly yes</span><br><span class="line"></span><br><span class="line">docker run -p 6381:6379 --name redis6381 \</span><br><span class="line">-v /usr/local/docker/redis03/data:/data \  </span><br><span class="line">-v /usr/local/docker/redis03/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf \ </span><br><span class="line">--appendonly yes  #开启持久化</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 6380:6379 --name redis6380 端口映射加命名</span><br><span class="line">-v /root/redis/redis01/data:/data  容器 /data 映射到宿主机 /root/redis/redis01/data</span><br><span class="line">-d redis  后台模式启动 redis ,redis-server /etc/redis/redis.conf    redis 将以 /etc/redis/redis.conf 为配置文件启动</span><br><span class="line">--appendonly yes  #开启持久化</span><br></pre></td></tr></table></figure>

<p>第四步 检测redis服务角色</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"></span><br><span class="line">查看奴隶机</span><br><span class="line">\# Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_repl_offset:3860</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:2</span><br><span class="line">repl_backlog_histlen:3859</span><br></pre></td></tr></table></figure>

<p>第五步：检测redis6379的ip设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect redis6379</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">……</span><br><span class="line">&quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;c33071765cb48acb1efed6611615c767b04b98e6e298caa0dc845420e6112b73&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;4c77e3f458ea64b7fc45062c5b2b3481fa32005153b7afc211117d0f7603e154&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>第六步：设置Master/Slave架构</p>
<p>分别登陆redis6380/redis6381，然后执行如下语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slaveof 172.17.0.2 6379 </span><br></pre></td></tr></table></figure>

<p>第七步：再次登陆redis6379，然后检测info</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@centos7964 ~]# docker exec -it redis6379 redis-cli</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\# Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=172.17.0.3,port=6379,state=online,offset=2004,lag=1</span><br><span class="line">slave1:ip=172.17.0.4,port=6379,state=online,offset=2004,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">........</span><br></pre></td></tr></table></figure>

<p>第八步: 登陆redis6379测试，master读写都可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@centos7964 ~]# docker exec -it redis6379 redis-cli</span><br><span class="line">127.0.0.1:6379&gt; set role master6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get role</span><br><span class="line">&quot;master6379&quot;</span><br></pre></td></tr></table></figure>

<p>第九步: 登陆redis6380测试，slave只能读</p>
<p>查看docker日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs redis6380</span><br></pre></td></tr></table></figure>

<h2 id="Redis哨兵模式"><a href="#Redis哨兵模式" class="headerlink" title="Redis哨兵模式"></a>Redis哨兵模式</h2><p>架构图:</p>
<p><img src="https://s2.loli.net/2022/01/13/Rb5CIBgofMjpErq.png" alt="image-20220113112951839"></p>
<h3 id="哨兵快速入门"><a href="#哨兵快速入门" class="headerlink" title="哨兵快速入门"></a>哨兵快速入门</h3><p>第一步：打开三个redis客户端窗口，分别进入3台redis容器内部，在容器(Container)指定目录/etc/redis中执行如下语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/redis/sentinel.conf </span><br><span class="line">sentinel monitor redis6379 172.17.0.2 6379 1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>其中, 如上指令表示要的监控的master, redis6379为服务名, 172.17.0.2和6379为master的ip和端口,1表示多少个sentinel认为一个master失效时，master才算真正失效.</p>
<p>第二步：在每个redis容器内部的/etc/redis目录下执行如下指令，启动哨兵服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-sentinel sentinel.conf</span><br></pre></td></tr></table></figure>

<p>第三步：打开一个新的客户端连接窗口，关闭redis6379服务（这个服务是master服务）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop redis6379</span><br></pre></td></tr></table></figure>

<p>在其它客户端窗口，检测日志输出，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">410:X 11 Jul 2021 09:54:27.383 # +switch-master redis6379 172.17.0.2 6379 172.17.0.4 6379</span><br><span class="line">410:X 11 Jul 2021 09:54:27.383 * +slave slave 172.17.0.3:6379 172.17.0.3 6379 @ redis6379 172.17.0.4 6379</span><br><span class="line">410:X 11 Jul 2021 09:54:27.383 * +slave slave 172.17.0.2:6379 172.17.0.2 6379 @ redis6379 172.17.0.4 6379</span><br></pre></td></tr></table></figure>

<p>第四步：登陆ip为172.17.0.4对应的服务进行info检测，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\# Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=172.17.0.3,port=6379,state=online,offset=222807,lag=0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:3d63e8474dd7bcb282ff38027d4a78c413cede53</span><br><span class="line">master_replid2:5baf174fd40e97663998abf5d8e89a51f7458488</span><br><span class="line">master_repl_offset:222807</span><br><span class="line">second_repl_offset:110197</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:29</span><br><span class="line">repl_backlog_histlen:222779</span><br></pre></td></tr></table></figure>

<p>从上面的信息输出发现,redis6381服务现在已经变为master。</p>
<h3 id="Sentinel-配置进阶"><a href="#Sentinel-配置进阶" class="headerlink" title="Sentinel 配置进阶"></a>Sentinel 配置进阶</h3><p>对于sentinel.conf文件中的内容,我们还可以基于实际需求,进行增强配置,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sentinel monitor redis6379 172.17.0.2 6379 1 </span><br><span class="line">daemonize yes #后台运行</span><br><span class="line">logfile &quot;/var/log/sentinel_log.log&quot; #运行日志</span><br><span class="line">sentinel down-after-milliseconds redis6379 30000 #默认30秒</span><br></pre></td></tr></table></figure>

<p>其中:<br>1)daemonize yes表示后台运行(默认为no)<br>2)logfile 用于指定日志文件位置以及名字<br>3)sentinel down-after-milliseconds 表示master失效了多长时间才认为失效</p>
<p>例如: 基于cat指令创建sentinel.conf文件,并添加相关内容.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/redis/sentinel.conf</span><br><span class="line">sentinel monitor redis6379 172.17.0.2 6379 1</span><br><span class="line">daemonize yes </span><br><span class="line">logfile &quot;/var/log/sentinel_log.log&quot;</span><br><span class="line">sentinel down-after-milliseconds redis6379 30000 </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>哨兵工作原理分析<br>1)：每个Sentinel以每秒钟一次的频率向它所知的Master，Slave以及其他 Sentinel 实例发送一个 PING 命令。</p>
<p>2)：如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值(这个配置项指定了需要多少失效时间，一个master才会被这个sentinel主观地认为是不可用的。 单位是毫秒，默认为30秒)， 则这个实例会被 Sentinel 标记为主观下线。</p>
<p>3)：如果一个Master被标记为主观下线，则正在监视这个Master的所有 Sentinel 要以每秒一次的频率确认Master的确进入了主观下线状态。</p>
<p>4)：当有足够数量的 Sentinel（大于等于配置文件指定的值）在指定的时间范围内确认Master的确进入了主观下线状态， 则Master会被标记为客观下线 。</p>
<p>5)：在一般情况下， 每个 Sentinel 会以每 10 秒一次的频率向它已知的所有Master，Slave发送 INFO 命令 。</p>
<p>6)：当Master被 Sentinel 标记为客观下线时，Sentinel 向下线的 Master 的所有 Slave 发送 INFO 命令的频率会从 10 秒一次改为每秒一次 。</p>
<p>7)：若没有足够数量的 Sentinel 同意 Master 已经下线， Master 的客观下线状态就会被移除。<br>8): 若 Master 重新向 Sentinel 的 PING 命令返回有效回复， Master 的主观下线状态就会被移除。</p>
<h3 id="Redis集群高可用"><a href="#Redis集群高可用" class="headerlink" title="Redis集群高可用"></a>Redis集群高可用</h3><h3 id="基本架构-1"><a href="#基本架构-1" class="headerlink" title="基本架构"></a>基本架构</h3><p>对于redis集群(Cluster),一般最少设置为6个节点,3个master,3个slave,其简易架构如下:</p>
<p><img src="https://s2.loli.net/2022/01/13/A2oHZgQ4379kGNF.png" alt="image-20220113145044437"></p>
<h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><p>第一步：准备网络环境<br>创建虚拟网卡，主要是用于redis-cluster能于外界进行网络通信，一般常用桥接模式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network create redis-net</span><br></pre></td></tr></table></figure>

<p>查看docker的网卡信息，可使用如下指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure>

<p>查看docker网络详细信息，可使用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network inspect redis-net</span><br></pre></td></tr></table></figure>

<p>第二步：准备redis配置模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/local/docker/redis-cluster</span><br><span class="line">cd /usr/local/docker/redis-cluster</span><br><span class="line">vim redis-cluster.tmpl</span><br></pre></td></tr></table></figure>

<p>在redis-cluster.tmpl中输入以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">port $&#123;PORT&#125;</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 192.168.126.129</span><br><span class="line">cluster-announce-port $&#123;PORT&#125;</span><br><span class="line">cluster-announce-bus-port 1$&#123;PORT&#125;</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<p>各节点解释如下所示：</p>
<p>1.port：节点端口，即对外提供通信的端口<br>2.cluster-enabled：是否启用集群<br>3.cluster-config-file：集群配置文件<br>4.cluster-node-timeout：连接超时时间<br>5.cluster-announce-ip：宿主机ip<br>6.cluster-announce-port：集群节点映射端口<br>7.cluster-announce-bus-port：集群总线端口<br>8.appendonly：持久化模式</p>
<p>第三步：创建节点配置文件</p>
<p>在redis-cluser中执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for port in $(seq 8010 8015); \</span><br><span class="line">do \</span><br><span class="line">  mkdir -p ./$&#123;port&#125;/conf  \</span><br><span class="line">  &amp;&amp; PORT=$&#123;port&#125; envsubst &lt; ./redis-cluster.tmpl &gt; ./$&#123;port&#125;/conf/redis.conf \</span><br><span class="line">  &amp;&amp; mkdir -p ./$&#123;port&#125;/data; \</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li><p>for 变量 in $(seq var1 var2);do …; done为linux中的一种shell 循环脚本, 例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@centos7964 ~]# for i in $(seq 1 5);</span><br><span class="line">&gt; do echo $i;</span><br><span class="line">&gt; done;</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure></li>
</ul>
<p>通过cat指令查看配置文件内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /usr/local/docker/redis-cluster/801&#123;0..5&#125;/conf/redis.conf</span><br></pre></td></tr></table></figure>

<p>第四步：创建集群中的redis节点容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for port in $(seq 8010 8015); \</span><br><span class="line">do \</span><br><span class="line">   docker run -it -d -p $&#123;port&#125;:$&#123;port&#125; -p 1$&#123;port&#125;:1$&#123;port&#125; \</span><br><span class="line">  --privileged=true -v /usr/local/docker/redis-cluster/$&#123;port&#125;/conf/redis.conf:/usr/local/etc/redis/redis.conf \</span><br><span class="line">  --privileged=true -v /usr/local/docker/redis-cluster/$&#123;port&#125;/data:/data \</span><br><span class="line">  --restart always --name redis-$&#123;port&#125; --net redis-net \</span><br><span class="line">  --sysctl net.core.somaxconn=1024 redis redis-server /usr/local/etc/redis/redis.conf; \</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>其中, –privileged=true表示让启动的容器用户具备真正root权限, –sysctl net.core.somaxconn=1024 这是一个linux的内核参数,用于设置请求队列大小,默认为128,后续启动redis的启动指令需要先放到这个请求队列中,然后依次启动.<br>创建成功以后，通过docker ps指令查看节点内容。</p>
<p>第五步：创建redis-cluster集群配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it redis-8010 bash</span><br></pre></td></tr></table></figure>

<p>如上指令要尽量放在一行执行，其中最后的1表示主从比例，当出现选择提示信息时，输入yes即可。当集群创建好以后,可以通过一些相关指令查看集群信息,例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cluster nodes   #查看集群节点数</span><br><span class="line">cluster info #查看集群基本信息</span><br></pre></td></tr></table></figure>

<p>第六步：连接redis-cluster，并添加数据到redis</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -c -h 192.168.126.129 -p 8010</span><br></pre></td></tr></table></figure>

<p>其中,这里-c表示集群(cluster),-h表示host(一般写ip地址),-p为端口(port)</p>
<p><strong>其它：</strong><br>在搭建过程，可能在出现问题后，需要停止或直接删除docker容器，可以使用以下参考命令:</p>
<p>批量停止docker 容器,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a | grep -i &quot;redis-801*&quot; | awk &#x27;&#123;print $1&#125;&#x27; | xargs docker stop</span><br></pre></td></tr></table></figure>

<p>批量删除docker 容器,例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a | grep -i &quot;redis-801*&quot; | awk &#x27;&#123;print $1&#125;&#x27; | xargs docker rm -f</span><br></pre></td></tr></table></figure>

<p>批量删除文件,目录等,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf 801&#123;0..5&#125;/conf/redis.conf</span><br><span class="line">rm -rf 801&#123;0..5&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/01/13/15UxJznuqo7vCiF.png" alt="image-20220113173348903"></p>
<h3 id="Jedis读写数据测试"><a href="#Jedis读写数据测试" class="headerlink" title="Jedis读写数据测试"></a>Jedis读写数据测试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">void testJedisCluster()throws Exception&#123;</span><br><span class="line">      Set&lt;HostAndPort&gt; nodes = new HashSet&lt;&gt;();</span><br><span class="line">      nodes.add(new HostAndPort(&quot;192.168.126.129&quot;,8010));</span><br><span class="line">      nodes.add(new HostAndPort(&quot;192.168.126.129&quot;,8011));</span><br><span class="line">      nodes.add(new HostAndPort(&quot;192.168.126.129&quot;,8012));</span><br><span class="line">      nodes.add(new HostAndPort(&quot;192.168.126.129&quot;,8013));</span><br><span class="line">      nodes.add(new HostAndPort(&quot;192.168.126.129&quot;,8014));</span><br><span class="line">      nodes.add(new HostAndPort(&quot;192.168.126.129&quot;,8015));</span><br><span class="line">      JedisCluster jedisCluster = new JedisCluster(nodes);</span><br><span class="line">      //使用jedisCluster操作redis</span><br><span class="line">      jedisCluster.set(&quot;test&quot;, &quot;cluster&quot;);</span><br><span class="line">      String str = jedisCluster.get(&quot;test&quot;);</span><br><span class="line">      System.out.println(str);</span><br><span class="line">      //关闭连接池</span><br><span class="line">      jedisCluster.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="RedisTemplate读写数据测试"><a href="#RedisTemplate读写数据测试" class="headerlink" title="RedisTemplate读写数据测试"></a>RedisTemplate读写数据测试</h3><p>导入依赖：单体配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">#配置redis</span><br><span class="line">  redis:</span><br><span class="line">    host: 192.168.199.131</span><br><span class="line">    #超时时间</span><br><span class="line">    timeout: 10000ms</span><br><span class="line">    #lettuce连接池配置</span><br><span class="line">    lettuce:</span><br><span class="line">      pool:</span><br><span class="line">        #最大链接数,默认的就是8</span><br><span class="line">        max-active: 8</span><br><span class="line">        #最大连接阻塞等待时间,默认-1,表示不等待</span><br><span class="line">        max-wait: 10000ms</span><br><span class="line">        #最大空闲连接,默认8</span><br><span class="line">        max-idle: 200</span><br><span class="line">        #最小空闲连接,默认0</span><br><span class="line">        min-idle: 5</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    void test()&#123;</span><br><span class="line">        RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">        String result = connection.ping();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第一步：配置application.yml,例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    cluster: #redis 集群配置</span><br><span class="line">      nodes: 192.168.126.129:8010,192.168.126.129:8011,192.168.126.129:8012,192.168.126.129:8013,192.168.126.129:8014,192.168.126.129:8015</span><br><span class="line">      max-redirects: 3 #最大跳转次数</span><br><span class="line">    timeout: 5000 #超时时间</span><br><span class="line">    database: 0</span><br><span class="line">    jedis: #连接池</span><br><span class="line">      pool:</span><br><span class="line">        max-idle: 8</span><br><span class="line">        max-wait: 0</span><br></pre></td></tr></table></figure>

<p>第二步：编写单元测试类，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.cy.redis;</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class RedisClusterTests &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line">    @Test</span><br><span class="line">    void testMasterReadWrite()&#123;</span><br><span class="line">        //1.获取数据操作对象</span><br><span class="line">        ValueOperations valueOperations = redisTemplate.opsForValue();</span><br><span class="line">        //2.读写数据</span><br><span class="line">        valueOperations.set(&quot;city&quot;,&quot;beijing&quot;);</span><br><span class="line">        Object city=valueOperations.get(&quot;city&quot;);</span><br><span class="line">        System.out.println(city);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="缓存穿透（查不到）和雪崩"><a href="#缓存穿透（查不到）和雪崩" class="headerlink" title="缓存穿透（查不到）和雪崩"></a>缓存穿透（查不到）和雪崩</h3><p><img src="https://s2.loli.net/2022/01/18/Ib8ei7dPgKRLBzq.png" alt="image-20220118092046272"></p>
<p>用户想要查询一个数据，发现redis内存数据没有，也就是缓存中没有，于是就向持久层数据库查询，发现也没有，于是本次查询失败，当用户很多的时候，缓存都没有命中，于是都去请i去了持久层数据库，这给持久层造成很大的压力，这时候就相当于出现了缓存穿透。</p>
<h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p><img src="https://s2.loli.net/2022/01/18/aAVJzQN6wWcntox.png" alt="image-20220118092557779"></p>
<p><img src="https://s2.loli.net/2022/01/18/dFp4YkwnAocO1lr.png" alt="image-20220118092632125"></p>
<p>但是这种方法或存在两个问题:</p>
<p>1.如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键。</p>
<p>2.即使对空值设置了过期时间，函数会存在缓存层和存储层有一段时间窗口的不一致，这对于需要保持一致性的业务有影响。</p>
<h3 id="缓存击穿-量太大"><a href="#缓存击穿-量太大" class="headerlink" title="缓存击穿(量太大)"></a>缓存击穿(量太大)</h3><p>微博服务器宕机</p>
<p><img src="https://s2.loli.net/2022/01/18/3qhl1NAoQs4K8dz.png" alt="image-20220118093030682"></p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>数据永不过期</p>
<p>加互斥锁：使用分布式锁，保证每个key同时只有一个线程去查询后端服务，其他线程等待。这种方式将高并发的压力转移到分布式锁，对分布式锁考验较大。</p>
<h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>在某一段时间，缓存集中国企失效。redis宕机。</p>
<p><img src="https://s2.loli.net/2022/01/18/PVykXIZxpb2BdiN.png" alt="image-20220118093659482"></p>
<p><img src="https://s2.loli.net/2022/01/18/suL8FVIp2wlahd5.png" alt="image-20220118094030979"></p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      <categories>
        <category>数据库</category>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title>python的GUI编程</title>
    <url>/2022/06/12/python%E7%9A%84GUI%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>Tkinter 提供了布局功能，主要包含 pack、grid 和 place 三种布局方法。其中 pack 布局方法在前面使用过，这是最简单的布局方式。</p>
<p>grid 布局法就是将屏幕切成表格的样子，通过横向坐标 row 和纵向坐标 column 来指定元素的位置。第一行标记为 0，第一列也标记为 0。</p>
<p>最后一种布局方法是 place，它直接指定元素在父元素中的坐标值，单位是像素。</p>
<h1 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h1><h4 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line">import glob</span><br><span class="line">from PIL import Image,ImageTk</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.geometry(&#x27;906x687+100+100&#x27;)</span><br><span class="line">root.title(&quot;图片查看器&quot;)</span><br><span class="line"></span><br><span class="line">photos = glob.glob(&quot;photo/*.png&quot;)</span><br><span class="line">photos = [ImageTk.PhotoImage(Image.open(photo).resize((900,600))) for photo in photos]</span><br><span class="line">current_photo_no = 0</span><br><span class="line">photo_label = tk.Label(root,image=photos[current_photo_no],width=900,height=600)</span><br><span class="line">photo_label.pack()</span><br><span class="line">number_var = tk.StringVar()</span><br><span class="line">number_var.set(f&#x27;&#123;current_photo_no+1&#125; of &#123;len(photos)&#125;&#x27;)</span><br><span class="line">tk.Label(root,textvariable=number_var,bd=1,relief=tk.SUNKEN,anchor=tk.CENTER).pack(fill=tk.X)</span><br><span class="line"></span><br><span class="line">button_frame = tk.Frame(root)</span><br><span class="line">button_frame.pack()</span><br><span class="line">prev_photo = tk.Button(button_frame,text=&quot;上一页&quot;)</span><br><span class="line">next_photo = tk.Button(button_frame,text=&quot;下一页&quot;)</span><br><span class="line">prev_photo.pack(side=tk.LEFT,anchor=tk.CENTER)</span><br><span class="line">next_photo.pack(side=tk.RIGHT,anchor=tk.CENTER)</span><br><span class="line"></span><br><span class="line">def change_photos(next_no):</span><br><span class="line">    global current_photo_no</span><br><span class="line">    current_photo_no+=next_no</span><br><span class="line"></span><br><span class="line">    if current_photo_no&gt;= len(photos):</span><br><span class="line">        current_photo_no=0</span><br><span class="line">    if current_photo_no&lt; 0:</span><br><span class="line">        current_photo_no=len(photos)-1</span><br><span class="line">    number_var.set(f&#x27;&#123;current_photo_no+1&#125; of &#123;len(photos)&#125;&#x27;)</span><br><span class="line">    photo_label.configure(image=photos[current_photo_no])</span><br><span class="line"></span><br><span class="line">prev_photo.config(command=lambda:change_photos(-1))</span><br><span class="line">next_photo.config(command=lambda:change_photos(1))</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>

<h4 id="辞职信"><a href="#辞职信" class="headerlink" title="辞职信"></a>辞职信</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from cProfile import label</span><br><span class="line">import tkinter as tk</span><br><span class="line">from PIL import Image,ImageTk</span><br><span class="line">from tkinter import messagebox</span><br><span class="line">from random import random</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.geometry(&#x27;500x300+100+100&#x27;)</span><br><span class="line"></span><br><span class="line">root.title(&#x27;辞职信&#x27;)</span><br><span class="line"></span><br><span class="line">frame1 = tk.Frame(root,height=300,width=500)</span><br><span class="line">frame1.pack()</span><br><span class="line"></span><br><span class="line">tk.Label(frame1,text=&#x27;尊敬的各位领导:&#x27;,font=24,padx=30,pady=30).pack(side=tk.LEFT,anchor=tk.N)</span><br><span class="line">img = ImageTk.PhotoImage(Image.open(&#x27;photo/系统架构图.png&#x27;).resize((100,200)))</span><br><span class="line"># img = tk.PhotoImage(file=&#x27;&#x27;)</span><br><span class="line">label_img = tk.Label(frame1,image=img,padx=30,pady=30,bd=0)</span><br><span class="line">label_img.pack(side=tk.LEFT,anchor=tk.N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tk.Label(frame1,text=&#x27;辞职人:张三&#x27;,height=25,font=24,padx=30,pady=30,anchor=tk.S).pack(side=tk.LEFT)</span><br><span class="line"></span><br><span class="line">yes_btn = tk.Button(frame1,text=&quot;同意&quot;)</span><br><span class="line">no_btn = tk.Button(frame1,text=&quot;不同意&quot;)#db=0</span><br><span class="line"></span><br><span class="line">yes_btn.place(relx=0.3,rely=0.8,anchor=tk.CENTER)</span><br><span class="line">no_btn.place(relx=0.6,rely=0.8,anchor=tk.CENTER)</span><br><span class="line"></span><br><span class="line">frame2 = tk.Frame(root)</span><br><span class="line"># frame2.pack()</span><br><span class="line">tk.Label(frame2,text=&quot;老板大人,臣告退了\n这一退，可能就是一辈子了\n!!!&quot;,font=(&#x27;黑体&#x27;,18),justify=tk.LEFT,height=300,fg=&#x27;red&#x27;,padx=50).pack()</span><br><span class="line">tk.Button(frame2,text=&quot;退出&quot;,command=root.quit).place(relx=0.9,rely=0.8)</span><br><span class="line"></span><br><span class="line">def on_exit():</span><br><span class="line">    messagebox.showwarning(title=&quot;提示&quot;,message=&quot;此路不通&quot;)</span><br><span class="line">root.protocol(&#x27;WM_DELETE_WINDOW&#x27;,on_exit)</span><br><span class="line"></span><br><span class="line">def move(event):</span><br><span class="line">    no_btn.place(relx=random(),rely=random(),anchor=tk.CENTER)</span><br><span class="line">no_btn.bind(&#x27;&lt;Enter&gt;&#x27;,move)</span><br><span class="line"></span><br><span class="line">def sure():</span><br><span class="line">    frame1.pack_forget()</span><br><span class="line">    frame2.pack()</span><br><span class="line">yes_btn.config(command=sure)</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>

<h4 id="记事本"><a href="#记事本" class="headerlink" title="记事本"></a>记事本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import tkinter as tk</span><br><span class="line">from tkinter import filedialog, messagebox</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(&#x27;04 记事本&#x27;)</span><br><span class="line">root.geometry(&quot;800x500+100+100&quot;)</span><br><span class="line">&quot;&quot;&quot;记事本事件 1&quot;&quot;&quot;</span><br><span class="line">filename = &quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def new_file():</span><br><span class="line">    &quot;&quot;&quot;新建文件&quot;&quot;&quot;</span><br><span class="line">    global filename</span><br><span class="line">    root.title(&#x27;未命名文件&#x27;)</span><br><span class="line">    filename = None</span><br><span class="line">    textPad.delete(1.0, tk.END)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def open_file():</span><br><span class="line">    &quot;&quot;&quot;打开已经存在的文件&quot;&quot;&quot;</span><br><span class="line">    global filename</span><br><span class="line">    filename = filedialog.askopenfilename()</span><br><span class="line">    if filename == &#x27;&#x27;:</span><br><span class="line">        filename = None</span><br><span class="line">    else:</span><br><span class="line">        root.title(&#x27;FileName:&#x27; + os.path.basename(filename))</span><br><span class="line">        textPad.delete(1.0, tk.END)</span><br><span class="line">        text = open(filename, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;).read()</span><br><span class="line">        textPad.insert(1.0, text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def save_as():</span><br><span class="line">    global filename</span><br><span class="line">    filename = filedialog.asksaveasfilename(initialfile=&#x27;未命名.txt&#x27;, defaultextension=&#x27;.txt&#x27;)</span><br><span class="line">    open(filename, &#x27;w&#x27;).write(textPad.get(1.0, tk.END))</span><br><span class="line">    root.title(&#x27;FileName:&#x27; + os.path.basename(filename))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def author():</span><br><span class="line">    messagebox.showinfo(&#x27;作者信息&#x27;, &#x27;本软件有青灯教育正心老师编写&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def about():</span><br><span class="line">    messagebox.showinfo(&#x27;版权信息.Copyleft&#x27;, &#x27;本软件版权归属为青灯教育&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;记事本布局&quot;&quot;&quot;</span><br><span class="line">&quot;&quot;&quot;创建菜单栏&quot;&quot;&quot;</span><br><span class="line">menubar = tk.Menu(root, tearoff=False)</span><br><span class="line">root.config(menu=menubar)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;创建二级菜单 文件&quot;&quot;&quot;</span><br><span class="line">file_menu = tk.Menu(menubar, tearoff=False)</span><br><span class="line">file_menu.add_command(label=&#x27;新建&#x27;)</span><br><span class="line">file_menu.add_command(label=&#x27;打开&#x27;, command=open_file)</span><br><span class="line">file_menu.add_command(label=&#x27;保存&#x27;)</span><br><span class="line">file_menu.add_command(label=&#x27;另存为&#x27;, command=save_as)</span><br><span class="line"># 设置二级菜单的名字</span><br><span class="line">menubar.add_cascade(label=&#x27;文件&#x27;, menu=file_menu)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;创建二级菜单 编辑&quot;&quot;&quot;</span><br><span class="line">edit_menu = tk.Menu(menubar, tearoff=False)</span><br><span class="line">edit_menu.add_command(label=&#x27;撤销&#x27;)</span><br><span class="line">edit_menu.add_command(label=&#x27;重做&#x27;)</span><br><span class="line"># 添加分割线</span><br><span class="line">edit_menu.add_separator()</span><br><span class="line">edit_menu.add_command(label=&quot;复制&quot;)</span><br><span class="line">edit_menu.add_command(label=&quot;剪切&quot;)</span><br><span class="line">edit_menu.add_command(label=&quot;粘贴&quot;)</span><br><span class="line">menubar.add_cascade(label=&quot;编辑&quot;, menu=edit_menu)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;创建二级菜单 关于&quot;&quot;&quot;</span><br><span class="line">about_menu = tk.Menu(menubar, tearoff=False)</span><br><span class="line">about_menu.add_command(label=&quot;作者&quot;, command=author)</span><br><span class="line">about_menu.add_command(label=&quot;版权&quot;, command=about)</span><br><span class="line">menubar.add_cascade(label=&quot;关于&quot;, menu=about_menu)</span><br><span class="line"></span><br><span class="line">var_status = tk.StringVar()</span><br><span class="line">var_format = &quot;字符数：&#123;&#125;&quot;</span><br><span class="line">var_status.set(var_format.format(0))</span><br><span class="line"># 状态栏</span><br><span class="line">status = tk.Label(root, textvariable=var_status, bd=1, relief=tk.SUNKEN, anchor=tk.W)</span><br><span class="line">status.pack(side=tk.BOTTOM, fill=tk.X)</span><br><span class="line"></span><br><span class="line">var_line = tk.StringVar()</span><br><span class="line"># 行数</span><br><span class="line">line_label = tk.Label(root, width=1, bg=&#x27;antique white&#x27;, textvariable=var_line, anchor=tk.N, font=18)</span><br><span class="line">line_label.pack(side=tk.LEFT, fill=tk.Y)</span><br><span class="line"></span><br><span class="line"># 文本编辑区域</span><br><span class="line">textPad = tk.Text(root, undo=True, font=18)</span><br><span class="line">textPad.pack(expand=tk.YES, fill=tk.BOTH)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;记事本事件 2&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def status_func(key):</span><br><span class="line">    &quot;&quot;&quot;设置状态栏信息&quot;&quot;&quot;</span><br><span class="line">    contents = textPad.get(1.0, tk.END)</span><br><span class="line">    length = contents.count(&#x27;\n&#x27;)</span><br><span class="line">    char = contents.replace(&#x27;\n&#x27;, &quot;&quot;)</span><br><span class="line">    char_len = len(char)</span><br><span class="line">    var_status.set(var_format.format(char_len))</span><br><span class="line"></span><br><span class="line">    &quot;&quot;&quot;设置显示行数的内容&quot;&quot;&quot;</span><br><span class="line">    line_str = &#x27;&#x27;</span><br><span class="line">    for i in range(1, length + 1):</span><br><span class="line">        line_str += f&quot;&#123;i&#125;\n&quot;</span><br><span class="line">    var_line.set(line_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 绑定状态栏</span><br><span class="line">textPad.bind(&#x27;&lt;Key&gt;&#x27;, status_func)</span><br><span class="line"></span><br><span class="line"># 滑动栏</span><br><span class="line">scroll = tk.Scrollbar(textPad, cursor=&quot;circle&quot;)</span><br><span class="line">textPad.config(yscrollcommand=scroll.set)</span><br><span class="line">scroll.config(command=textPad.yview)</span><br><span class="line">scroll.pack(side=tk.RIGHT, fill=tk.Y)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Redis缓存机制与应用</title>
    <url>/2022/03/04/redis%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>Redis是目前最为主流的缓存技术之一，Redis基于内存操作从而拥有强大的性能，可以达到每秒10万次的请求，可以说是一款非常强大的缓存技术了。</p>
<p>本文分为三部分：</p>
<ul>
<li>基础知识介绍</li>
<li>常用技术讲解与缓存机制</li>
<li>使用场景、缓存问题</li>
</ul>
<h1 id="基础知识介绍"><a href="#基础知识介绍" class="headerlink" title="基础知识介绍"></a>基础知识介绍</h1><p><strong>NoSQL概述</strong></p>
<p>什么是NoSQL？</p>
<p>NoSQL = Not Only SQL （不仅仅是SQL）</p>
<p>关系型数据库：表格 ，行 ，列</p>
<p>非关系型数据库：没有固定的查询语言，键值对存储，列存储，文档存储</p>
<p>随着web2.0互联网的诞生！传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区。</p>
<p>NoSQL 特点</p>
<p>1、方便扩展</p>
<p>2、大数据量高性能（Redis 一秒写8万次，读取11万）</p>
<p>3、数据类型是多样性的</p>
<p>NoSQL四大分类</p>
<p>KV键值对：如Redis主要是用于内容缓存，主要是为了处理大量数据高访问负载</p>
<p>文档型数据库：如MongoDBMongoDB 是一个基于分布式文件存储的数据库</p>
<p>列存储数据库：如HBase分布式文件系统，以列簇式存储，将同一列数据存储在一起</p>
<p><strong>Redis简介</strong></p>
<p>Redis 是什么？</p>
<p>Redis（Remote Dictionary Server )，即远程字典服务，它是一个开源的由ANSI C语言编写，性能优秀、支持网络、可持久化的Key-Value内存的NoSQL数据库!</p>
<p>Redis 能干嘛？</p>
<p>1、内存存储、持久化。</p>
<p>2、效率高，可以用于高速缓存</p>
<p>3、发布订阅系统</p>
<p>4、计时器、浏览量！ 5、……..</p>
<p><strong>Redis好处</strong></p>
<p>主要从“高性能”和“高并发”这两点来介绍。</p>
<p><img src="https://s2.loli.net/2022/03/04/W8gYo3ODqa4Cjxz.png" alt="image-20220304090814060"></p>
<p>把数据库数据存入缓存，请求直接从内存中读取不用经过数据库，减轻数据库压力并且提升性能。</p>
<h1 id="常用技术讲解与缓存机制"><a href="#常用技术讲解与缓存机制" class="headerlink" title="常用技术讲解与缓存机制"></a>常用技术讲解与缓存机制</h1><p>Redis主要有5种数据类型，包括String，List，Set，Zset，Hash，满足大部分的使用要求</p>
<p><strong>String</strong></p>
<ul>
<li>String：session、对象、小文件（存文件流字节数组，比磁盘IO快）？</li>
<li>int：秒杀、限流、计数</li>
<li>bitmap：</li>
</ul>
<p>场景1.setbit和bitcount结合可以统计一年365天哪天有用户操作过，getbit可以获取某一天是否用户操作过</p>
<p>场景2.权限控制，比如每个权限对应一个bit,哪个用户有该权限，该位为1，没权限为0</p>
<p><strong>list</strong></p>
<p>替换java jvm中的集合，可以作为数据共享，java的话多进程间不能共享或不好共享</p>
<p><strong>hash</strong></p>
<p>可以使redis key变少，类似对象。</p>
<p>场景1.商品详情页、商品对应的收藏数、库存啊，放在redis中因为是原子性的，多地方访问都是实时性的</p>
<p>场景2.聚合场景：一个对象在数据库中可能各个属性在不同表，可以聚合到redis同个对象中</p>
<p><strong>set</strong></p>
<p>set性能慢，可以单独redis实例</p>
<p>场景1.SRANDMEMBER或者spop命令可以用来抽奖</p>
<p>场景2.随机事件</p>
<p>场景3.共同好友（交集）</p>
<p>场景4.推荐好友（差集）</p>
<p><strong>sorted_set</strong></p>
<p>有序集合，数量少时底层是zipList压缩表，数据多了变skiplist</p>
<p>场景1.排行榜</p>
<p>场景2.有序事件</p>
<p>场景3.评论分页</p>
<p><img src="https://s2.loli.net/2022/03/04/xidTYmsfXCEIper.png" alt="image-20220304090918435"></p>
<p>Redis 中除开最常用的 5 种数据类型之外，还有 3 种特殊的数据类型</p>
<p><img src="https://s2.loli.net/2022/03/04/2pJnTr98Lycsfjv.png" alt="image-20220304090934388"></p>
<p>可以通过help命令查询相关类型命令说明，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">help @string help @list</span><br></pre></td></tr></table></figure>

<p>分享一下我记录的几种数据类型的基本命令</p>
<p><strong>String</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#设置值 set key value   #获取值 get key   #获取值类型（set的都是String） type key    #获取值编码类型(raw/int) object encoding key   #获取字节长度(注意1字节等于8位bit) strlen key   #+1计算 #incr key</span><br></pre></td></tr></table></figure>

<p><strong>bitmap</strong>（二进制操作）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#设置该值左边第几位为1，bit长度不是8位整数的补成8的整数长度,如 10会补成00000010，  0100000001 会补成0000000100000001 格式：setbit key offset value setbit k1 1 1  #01000000  对应ascii码为‘@’ get k1  #&#x27;@&#x27; </span><br><span class="line">#将k1值得第7位设置为1 setbit k1 7 1 #01000001 对应ascii码为‘A’ setbit k1 8 1 #0100000110000000    </span><br><span class="line">#获取对应位置bit的值（1或0） getbit key offset  getbit k1 7  #假如k1值位00000001，第7位返回1 getbit k1 5  #假如k1值位00000001，第5位返回0  </span><br><span class="line">#获取对应范围内1的数量（注意范围是字节区间，不是Bit位区间） bitcount key [start end] bitcount k1 #获取bit位为1的数量 相当于bitcount k1 0 -1（假如k1值位00001001，返回2，假如k1值位0000000100001001，返回3） bitcount k1 0 0 </span><br><span class="line">#获取第一个字节的8位Bit中有几位为1 （假如k1值位0000000100001001，返回1），注意是从左边开始数每8位为一个字节  #与、或、非、异或操作 bitop opration destkey key [key...]  </span><br><span class="line">#opration可选值（and/or/not）,destkey为计算完后要保存的新的key bitop and k3 k1 k2 #与运算，假如k1为01000000，k2为00000001，则结果k3为00000000 bitop or k3 k1 k2 </span><br><span class="line">#或运算，假如k1为01000000，k2为00000001，则结果k3为01000001 bitop xor k3 k1 k2 #异或运算，假如k1为01000000，k2为01000001，则结果k3为00000001 bitop not k3 k1  </span><br><span class="line">#非运算，假如k1为01000000，则结果k3为10111111</span><br></pre></td></tr></table></figure>

<p><strong>list(链表)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#左边插入 格式：lpush key value [value...] lpush k1 1 2 3 4 5 6  #k1值为六项：6 5 4 3 2 1  #右边插入 格式：rpush key value [value...] rpush k1 1 2 3 4 5 6  #k1值为六项：1 2 3 4 5 6  #获取k1范围内的的值 lrange k1 0 -1   #获取第一个数（最左边的数）并删除该值（像栈操作） lpop key  #k1值为六项：1 2 3 4 5 6 那么会返回1，k1值变为2 3 4 5 6  #获取指定下标值 lindex key  #删除范围之外的数值 ltrim key start end  ltrim k1 0 3 #k1值为六项：1 2 3 4 5 6,那么k1只留下1 2 3 4</span><br></pre></td></tr></table></figure>

<p><strong>hash（对象）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#设置对象属性值 hset key field value hset user1 name huangtl #设置user1的name属性为huangtl hset user1 age  18 #设置user1的age属性为18  #单个属性获取 hget user1 age #18  #所有属性获取 hgetall user1 #返回属性、值、属性、值 ：name huangtl age 18  #获取对象所有key hkeys user1 #返回user1的所有属性:name age  #获取对象所有kvalue hvals user1 #返回user1的所有属性得值:huangtl 18</span><br></pre></td></tr></table></figure>

<p><strong>set(无序、去重集合)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#存入集合数据 sadd key member [member...] sadd k1 1 2 3 4 5 6 2 #两个2知会存一个2，集合内数值有1 2 3 4 5 6  #获取集合数据 SMEMBERS k1  #随机获取集合几条数据 SRANDMEMBER k1 [count] SRANDMEMBER k1 #随机获取一条 SRANDMEMBER k1 8 #随机获取8条数据，不会重复的数据，集合不足8条取集合全部数据 SRANDMEMBER k1 -8 #随机取8条，可能会重复的数据，集合不足8条也会取8条数据  #取数值并删除 spop key [count] spop key  #随机取一条并删除 spop key 5 #随机取5条并删除  #多个集合取并集 SUNION key [key...] SUNION k1 k2 #假如k1为1 2 3 4 5 6 ，k2为4 5 6 7 8 9，则返回1 2 3 4 5 6 7 8 9  #多个集合取交集 SINTER key [key...] SINTER k1 k2 #假如k1为1 2 3 4 5 6 ，k2为4 5 6 7 8 9，则返回4 5 6   #多个集合取差集 sdiff key [key...] sdiff k1 k2 #按顺序取k1减掉k2中的值后剩下的值 #假如k1为1 2 3 4 5 6 ，k2为4 5 6 7 8 9，则返回1 2 3  sdiff k2 k1 #按顺序取k2不减掉k1中的值值后剩下的值 #假如k1为1 2 3 4 5 6 ，k2为4 5 6 7 8 9，则返回7 8 9  </span><br></pre></td></tr></table></figure>

<p><strong>sorted_set（有序集合）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#新建key并添加元素 zadd key score member [score member...] zadd set1 1 apple 2 orange 3 banana  #返回范围内集合数据，按score分值正序 zrange set1 0 -1  #默认返回 apple orange banana zrange set1 -2 -1 #按正序取最后两名，返回 orange banana ZREVRANGE set1 0 1 #倒序返回前两名，返回  banana orange  #获取元素位置 zrank set1 apple #返回0，代表apple在第一位</span><br></pre></td></tr></table></figure>

<p><strong>事务</strong></p>
<p>Redis 事务本质：一组命令的集合！ 一个事务中的所有命令都会被序列化，在事务执行过程的中，会按照顺序执行！</p>
<p>Redis单条命令式保存原子性的，但是事务不保证原子性！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启事务 multi   #命令入队 set k1 v1  set k2 v2   get k2    # 执行事务 exec   </span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/03/04/rfCmtEXMW8ARndp.png" alt="image-20220304091437206"></p>
<p><strong>Redis持久化</strong></p>
<p>持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。</p>
<p>redis提供两种持久化机制 RDB（默认） 和 AOF 机制。</p>
<p>1、RDB</p>
<p>RDB是Redis DataBase缩写快照 ，默认的持久化方式。按照一定的时间将内存的数据以快照的形式保存到硬盘中，对应产生的数据文件为dump.rdb</p>
<p><img src="https://s2.loli.net/2022/03/04/7tN6LkFedIGqW2m.png" alt="image-20220304091451985"></p>
<p>触发机制</p>
<p>（1）save的规则满足的情况下</p>
<p>（2）执行 flushall 命令</p>
<p>（3）退出redis，也会产生 rdb 文件</p>
<p>2、AOF：</p>
<p>持久化，AOF持久化(即Append Only File持久化)，则是将Redis执行的每次写命令记录到单独的日志文件中，当重启Redis会重新将持久化的日志中文件恢复数据。</p>
<p><img src="https://s2.loli.net/2022/03/04/NhxGAjVYck7o81Q.png" alt="image-20220304091513278"></p>
<p>AOF的三种策略（1）always （2）everysec(默认值) （3）no always</p>
<p><img src="https://s2.loli.net/2022/03/04/Mtqgn9fL5PyhHYk.png" alt="image-20220304091602502"></p>
<p>在应用时，要根据自己的实际需求，选择RDB或者AOF，其实，如果想要数据足够安全，可以两种方式都开启，但两种持久化方式同时进行IO操作，会严重影响服务器性能，因此有时候不得不做出选择。</p>
<p><strong>redis主从复制</strong></p>
<p>概念主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master/leader)，后者称为从节点(slave/follower)；数据的复制是单向的，只能由主节点到从节点。</p>
<p>优点：（1）读写分离 （2）备份</p>
<p>缺点：主服务器宕机，需要人工启动</p>
<p><img src="https://s2.loli.net/2022/03/04/sSLV6CxMA2X7hJt.png" alt="image-20220304091623236"></p>
<p><strong>哨兵模式</strong></p>
<p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p>
<p><img src="https://s2.loli.net/2022/03/04/BoLwWKcVXkvPEjD.png" alt="image-20220304091641893"></p>
<h1 id="使用场景、缓存问题"><a href="#使用场景、缓存问题" class="headerlink" title="使用场景、缓存问题"></a>使用场景、缓存问题</h1><p>1、热点数据的缓存</p>
<p>公司项目用户量达到一定数量的时候，这时合理的利用缓存不仅能够提升项目访问速度，还能大大降低数据库的压力。</p>
<p>2、业务上的统计，排行榜</p>
<p>为了保证数据实时效，比如项目的访问量，每次浏览都得给+1，并发量高时如果每次都请求数据库操作无疑是种挑战和压力</p>
<p>3、限时业务的运用</p>
<p>每日签到、限制登录功能等业务场景</p>
<p>4、消息队列</p>
<p>提供基本的发布订阅功能，但不像消息队列那种专业级别</p>
<p><strong>缓存雪崩</strong></p>
<p>原因：大量redis key在同一时间失效，导致大量请求访问数据库，数据库服务器宕机，线上服务大面积报错。</p>
<p>解决办法：</p>
<p>（1）redis高可用</p>
<p>（2）加锁排队，限流降级</p>
<p>（3）缓存失效时间均匀分布</p>
<p><img src="https://s2.loli.net/2022/03/04/W5leSDp8nbOHsXu.png" alt="image-20220304091719539"></p>
<p><strong>缓存穿透</strong></p>
<p>原因：指缓存和数据库中都没有的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p>
<p>解决办法： （1）接口层增加校验 （2）采用布隆过滤器</p>
<p><img src="https://s2.loli.net/2022/03/04/AQEgvFThdrxGH7R.png" alt="image-20220304091759459"></p>
<p><strong>缓存击穿</strong></p>
<p>原因：指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。比如微博热搜。</p>
<p>解决办法：</p>
<p>（1）设置热点数据缓存没有过期时间</p>
<p>（2）加互斥锁</p>
<p><img src="https://s2.loli.net/2022/03/04/15FEWkiSNftRGmJ.png" alt="image-20220304091829212"></p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title>renren-fast学习</title>
    <url>/2022/04/18/renren-fast%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="mysql多数据源配置"><a href="#mysql多数据源配置" class="headerlink" title="mysql多数据源配置"></a>mysql多数据源配置</h1><h1 id="shiro-jwt"><a href="#shiro-jwt" class="headerlink" title="shiro+jwt"></a>shiro+jwt</h1>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>shiro框架</title>
    <url>/2022/04/08/shiro%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="spring整合shiro-1"><a href="#spring整合shiro-1" class="headerlink" title="spring整合shiro-1"></a>spring整合shiro-1</h1><h2 id="四、shiro中的认证"><a href="#四、shiro中的认证" class="headerlink" title="四、shiro中的认证"></a>四、shiro中的认证</h2><h3 id="4-1-认证"><a href="#4-1-认证" class="headerlink" title="4.1 认证"></a>4.1 认证</h3><p>身份认证，就是判断一个用户是否为合法用户的处理过程。最常用的简单身份认证方式是系统通过核对用户输入的用户名和口令，看其是否与系统中存储的该用户的用户名和口令一致，来判断用户身份是否正确。</p>
<h3 id="4-2-shiro中认证的关键对象"><a href="#4-2-shiro中认证的关键对象" class="headerlink" title="4.2 shiro中认证的关键对象"></a>4.2 shiro中认证的关键对象</h3><ul>
<li><strong>Subject：主体</strong></li>
</ul>
<p>访问系统的用户，主体可以是用户、程序等，进行认证的都称为主体；</p>
<ul>
<li><strong>Principal：身份信息</strong></li>
</ul>
<p>是主体（subject）进行身份认证的标识，标识必须具有<code>唯一性</code>，如用户名、手机号、邮箱地址等，一个主体可以有多个身份，但是必须有一个主身份（Primary Principal）。</p>
<ul>
<li><strong>credential：凭证信息</strong></li>
</ul>
<p>是只有主体自己知道的安全信息，如密码、证书等。</p>
<h3 id="4-3-认证流程"><a href="#4-3-认证流程" class="headerlink" title="4.3 认证流程"></a>4.3 认证流程</h3><p><img src="https://s2.loli.net/2022/05/01/jXq5JepdUDBCNnZ.png" alt="image-20220501103307399"></p>
<p>4.4 认证的开发</p>
<ol>
<li><p>创建项目并引入依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;groupId&gt;com.lut&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro&lt;/artifactId&gt;</span><br><span class="line"> &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;shiro&lt;/name&gt;</span><br><span class="line"> &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line"> &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">     &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;spring-boot.version&gt;2.3.7.RELEASE&lt;/spring-boot.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--        引入jsp的依赖--&gt;</span><br><span class="line">        &lt;!--引入JSP解析依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;jstl&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!--引入shiro整合Springboot依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.5.3&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--mybatis相关依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--mysql--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.38&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!--redis整合springboot--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--引入shiro和ehcache--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.5.3&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--redis整合springboot--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!--druid--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.19&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--        &lt;dependency&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;version&gt;3.0-alpha-1&lt;/version&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;/dependency&gt;--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-boot.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.3.7.RELEASE&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.lut.ShiroApplication&lt;/mainClass&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;repackage&lt;/id&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<p>2.引入shiro配置文件</p>
<p>配置文件：名称随意，以 .ini 结尾，放在 resources 目录下</p>
<p><strong>注意</strong>：在实际的项目开发中并不会使用这种方式，这种方法可以用来初学时练手</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="attr">zhangsan</span>=<span class="number">123456</span></span><br><span class="line"><span class="attr">lisi</span>=<span class="number">456789</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="https://s2.loli.net/2022/05/01/QP8yM9tDFRnArEk.png" alt="image-20220501103427628"></p>
<h5 id="3-开发认证代码"><a href="#3-开发认证代码" class="headerlink" title="3.开发认证代码"></a>3.开发认证代码</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.test;</span><br><span class="line"></span><br><span class="line">import org.apache.shiro.SecurityUtils;</span><br><span class="line">import org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line">import org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line">import org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line">import org.apache.shiro.realm.text.IniRealm;</span><br><span class="line">import org.apache.shiro.subject.Subject;</span><br><span class="line"></span><br><span class="line">public class test01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //1.创建安全管理器对象</span><br><span class="line">        DefaultSecurityManager securityManager = new DefaultSecurityManager();</span><br><span class="line">        //2.给安全管理器设置realm</span><br><span class="line">        securityManager.setRealm(new IniRealm(&quot;classpath:shiro.ini&quot;));</span><br><span class="line">        //3.SecurityUtils给全局安全工具类设置安全管理器</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        //4.关键对象subject主体</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        //5.创建令牌</span><br><span class="line">        UsernamePasswordToken token = new UsernamePasswordToken(&quot;zhangsan&quot;,&quot;123789&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(&quot;认证状态&quot;+subject.isAuthenticated());//fasle</span><br><span class="line">            //用户认证</span><br><span class="line">            subject.login(token);</span><br><span class="line">            System.out.println(&quot;认证状态&quot;+subject.isAuthenticated());</span><br><span class="line">        &#125;catch (UnknownAccountException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;认证失败，用户名不存在&quot;);</span><br><span class="line">        &#125;catch (IncorrectCredentialsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;认证失败，密码错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.常见的异常类型<br>DisabledAccountException（帐号被禁用）<br>LockedAccountException（帐号被锁定）<br>ExcessiveAttemptsException（登录失败次数过多）<br>ExpiredCredentialsException（凭证过期）等<br>4.5 自定义Realm<br>通过分析源码可得：</p>
<p>认证：</p>
<blockquote>
<p>1.最终执行用户名比较是 在SimpleAccountRealm类 的 doGetAuthenticationInfo 方法中完成用户名校验</p>
<p>2.最终密码校验是在 AuthenticatingRealm类 的 assertCredentialsMatch方法 中</p>
<p>总结：</p>
<p>AuthenticatingRealm 认证realm doGetAuthenticationInf</p>
<p>AuthorizingRealm 授权realm doGetAuthorizationInfo</p>
</blockquote>
<p>自定义Realm的作用：放弃使用.ini文件，使用数据库查询</p>
<p>上边的程序使用的是Shiro自带的IniRealm，IniRealm从ini配置文件中读取用户的信息，大部分情况下需要从系统的数据库中读取用户信息，所以需要自定义realm。</p>
<h5 id="1-shiro提供的Realm"><a href="#1-shiro提供的Realm" class="headerlink" title="1.shiro提供的Realm"></a>1.shiro提供的Realm</h5><p><img src="https://s2.loli.net/2022/05/01/JqxLAC8lNHOzEbh.png" alt="image-20220501103614346"></p>
<h5 id="2-根据认证源码认证使用的是SimpleAccountRealm"><a href="#2-根据认证源码认证使用的是SimpleAccountRealm" class="headerlink" title="2.根据认证源码认证使用的是SimpleAccountRealm"></a>2.根据认证源码认证使用的是SimpleAccountRealm</h5><p><img src="https://s2.loli.net/2022/05/01/Tas9EvU5y2fqmck.png" alt="image-20220501103633373"></p>
<p><code>SimpleAccountRealm的部分源码中有两个方法一个是 认证 一个是 授权</code>,</p>
<p>源码部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class SimpleAccountRealm extends AuthorizingRealm &#123;</span><br><span class="line">		//.......省略</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;</span><br><span class="line">        UsernamePasswordToken upToken = (UsernamePasswordToken) token;</span><br><span class="line">        SimpleAccount account = getUser(upToken.getUsername());</span><br><span class="line"></span><br><span class="line">        if (account != null) &#123;</span><br><span class="line"></span><br><span class="line">            if (account.isLocked()) &#123;</span><br><span class="line">                throw new LockedAccountException(&quot;Account [&quot; + account + &quot;] is locked.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (account.isCredentialsExpired()) &#123;</span><br><span class="line">                String msg = &quot;The credentials for account [&quot; + account + &quot;] are expired&quot;;</span><br><span class="line">                throw new ExpiredCredentialsException(msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;</span><br><span class="line">        String username = getUsername(principals);</span><br><span class="line">        USERS_LOCK.readLock().lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            return this.users.get(username);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            USERS_LOCK.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="3-自定义realm"><a href="#3-自定义realm" class="headerlink" title="3.自定义realm"></a>3.自定义realm</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.realm;</span><br><span class="line"></span><br><span class="line">import org.apache.shiro.authc.AuthenticationException;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line">import org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 自定义Realm</span><br><span class="line"> */</span><br><span class="line">public class CustomerRealm extends AuthorizingRealm &#123;</span><br><span class="line">    //授权</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;</span><br><span class="line">        System.out.println(&quot;==================&quot;);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //认证</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;</span><br><span class="line">        //在token中获取 用户名</span><br><span class="line">        String principal = (String) token.getPrincipal();</span><br><span class="line">        System.out.println(principal);</span><br><span class="line"></span><br><span class="line">        //实际开发中应当 根据身份信息使用jdbc mybatis查询相关数据库</span><br><span class="line">        //在这里只做简单的演示</span><br><span class="line">        //假设username,password是从数据库获得的信息</span><br><span class="line">        String username=&quot;zhangsan&quot;;</span><br><span class="line">        String password=&quot;123456&quot;;</span><br><span class="line">        if(username.equals(principal))&#123;</span><br><span class="line">            //参数1:返回数据库中正确的用户名</span><br><span class="line">            //参数2:返回数据库中正确密码</span><br><span class="line">            //参数3:提供当前realm的名字 this.getName();</span><br><span class="line">            SimpleAuthenticationInfo simpleAuthenticationInfo = new SimpleAuthenticationInfo(principal,password,this.getName());</span><br><span class="line">            return simpleAuthenticationInfo;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-使用自定义Realm认证"><a href="#4-使用自定义Realm认证" class="headerlink" title="4.使用自定义Realm认证"></a>4.使用自定义Realm认证</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.test;</span><br><span class="line"></span><br><span class="line">import com.lut.realm.CustomerRealm;</span><br><span class="line">import org.apache.shiro.SecurityUtils;</span><br><span class="line">import org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line">import org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line">import org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line">import org.apache.shiro.subject.Subject;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试自定义的Realm</span><br><span class="line"> */</span><br><span class="line">public class TestAuthenticatorCusttomerRealm &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //1.创建安全管理对象 securityManager</span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = new DefaultSecurityManager();</span><br><span class="line"></span><br><span class="line">        //2.给安全管理器设置realm（设置为自定义realm获取认证数据）</span><br><span class="line">        defaultSecurityManager.setRealm(new CustomerRealm());</span><br><span class="line">        //IniRealm realm = new IniRealm(&quot;classpath:shiro.ini&quot;);</span><br><span class="line"></span><br><span class="line">        //3.给安装工具类中设置默认安全管理器</span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line"></span><br><span class="line">        //4.获取主体对象subject</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        //5.创建token令牌</span><br><span class="line">        UsernamePasswordToken token = new UsernamePasswordToken(&quot;zhangsan&quot;, &quot;123&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            subject.login(token);//用户登录</span><br><span class="line">            System.out.println(&quot;登录成功~~&quot;);</span><br><span class="line">        &#125; catch (UnknownAccountException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;用户名错误!!&quot;);</span><br><span class="line">        &#125;catch (IncorrectCredentialsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;密码错误!!!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-6-使用MD5-Salt-Hash"><a href="#4-6-使用MD5-Salt-Hash" class="headerlink" title="4.6 使用MD5+Salt+Hash"></a>4.6 使用MD5+Salt+Hash</h3><p><strong>补充：MD5算法</strong></p>
<p>作用：一般用来加密或者签名（校验和）</p>
<p>特点：MD5算法不可逆如何内容相同无论执行多少次md5生成结果始终是一致</p>
<p>网络上提供的MD5在线解密一般是用穷举的方法</p>
<p>生成结果：始终是一个16进制32位长度字符串</p>
<p><strong>MD5的基本使用：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.test;</span><br><span class="line"></span><br><span class="line">import org.apache.shiro.crypto.hash.Md5Hash;</span><br><span class="line"></span><br><span class="line">public class TestShiroMD5 &#123;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        //使用md5</span><br><span class="line">        Md5Hash md5Hash = new Md5Hash(&quot;123&quot;);</span><br><span class="line">        System.out.println(md5Hash.toHex());</span><br><span class="line"></span><br><span class="line">        //使用MD5 + salt处理</span><br><span class="line">        Md5Hash md5Hash1 = new Md5Hash(&quot;123&quot;, &quot;X0*7ps&quot;);</span><br><span class="line">        System.out.println(md5Hash1.toHex());</span><br><span class="line"></span><br><span class="line">        //使用md5 + salt + hash散列（参数代表要散列多少次，一般是 1024或2048）</span><br><span class="line">        Md5Hash md5Hash2 = new Md5Hash(&quot;123&quot;, &quot;X0*7ps&quot;, 1024);</span><br><span class="line">        System.out.println(md5Hash2.toHex());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">202cb962ac59075b964b07152d234b70</span><br><span class="line">bad42e603db5b50a78d600917c2b9821</span><br><span class="line">7268f6d32ec8d6f4c305ae92395b00e8</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实际应用：将 盐和散列 后的值存在数据库中，自动realm从数据库取出盐和加密后的值由shiro完成密码校验。</p>
</blockquote>
<h5 id="1-自定义md5-salt的realm"><a href="#1-自定义md5-salt的realm" class="headerlink" title="1.自定义md5+salt的realm"></a>1.自定义md5+salt的realm</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.realm;</span><br><span class="line"></span><br><span class="line">import org.apache.shiro.authc.AuthenticationException;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line">import org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line">import org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 使用自定义realm 加入md5 + salt +hash</span><br><span class="line"> */</span><br><span class="line">public class CustomerMd5Realm extends AuthorizingRealm &#123;</span><br><span class="line"></span><br><span class="line">    //授权</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;</span><br><span class="line">        //获取 token中的 用户名</span><br><span class="line">        String principal = (String) token.getPrincipal();</span><br><span class="line"></span><br><span class="line">        //假设这是从数据库查询到的信息</span><br><span class="line">        String username=&quot;zhangsan&quot;;</span><br><span class="line">        String password=&quot;7268f6d32ec8d6f4c305ae92395b00e8&quot;;//加密后</span><br><span class="line"></span><br><span class="line">        //根据用户名查询数据库</span><br><span class="line">        if (username.equals(principal)) &#123;</span><br><span class="line">            //参数1:数据库用户名</span><br><span class="line">            //参数2:数据库md5+salt之后的密码</span><br><span class="line">            //参数3:注册时的随机盐</span><br><span class="line">            //参数4:realm的名字</span><br><span class="line">            return new SimpleAuthenticationInfo(principal,</span><br><span class="line">                    password,</span><br><span class="line">                    ByteSource.Util.bytes(&quot;@#$*&amp;QU7O0!&quot;),</span><br><span class="line">                    this.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-使用md5-salt-认证"><a href="#2-使用md5-salt-认证" class="headerlink" title="2.使用md5+salt 认证"></a>2.使用md5+salt 认证</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.test;</span><br><span class="line"></span><br><span class="line">import com.lut.realm.CustomerMd5Realm;</span><br><span class="line">import org.apache.shiro.SecurityUtils;</span><br><span class="line">import org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line">import org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line">import org.apache.shiro.authc.credential.HashedCredentialsMatcher;</span><br><span class="line">import org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line">import org.apache.shiro.subject.Subject;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class TestCustomerMd5RealmAuthenicator &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        //1.创建安全管理器</span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = new DefaultSecurityManager();</span><br><span class="line"></span><br><span class="line">        //2.注入realm</span><br><span class="line">        CustomerMd5Realm realm = new CustomerMd5Realm();</span><br><span class="line"></span><br><span class="line">        //3.设置realm使用hash凭证匹配器</span><br><span class="line">        HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();</span><br><span class="line">        //声明：使用的算法</span><br><span class="line">        credentialsMatcher.setHashAlgorithmName(&quot;md5&quot;);</span><br><span class="line">        //声明：散列次数</span><br><span class="line">        credentialsMatcher.setHashIterations(1024);</span><br><span class="line">        realm.setCredentialsMatcher(credentialsMatcher);</span><br><span class="line">        defaultSecurityManager.setRealm(realm);</span><br><span class="line"></span><br><span class="line">        //4.将安全管理器注入安全工具</span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line"></span><br><span class="line">        //5.通过安全工具类获取subject</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        //6.认证</span><br><span class="line">        UsernamePasswordToken token = new UsernamePasswordToken(&quot;zhangsan&quot;, &quot;123&quot;);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">            System.out.println(&quot;登录成功&quot;);</span><br><span class="line">        &#125; catch (UnknownAccountException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;用户名错误&quot;);</span><br><span class="line">        &#125;catch (IncorrectCredentialsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;密码错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、shiro中的授权"><a href="#五、shiro中的授权" class="headerlink" title="五、shiro中的授权"></a>五、shiro中的授权</h1><h2 id="5-1-授权"><a href="#5-1-授权" class="headerlink" title="5.1 授权"></a>5.1 授权</h2><p>授权，即访问控制，控制谁能访问哪些资源。主体进行身份认证后需要分配权限方可访问系统的资源，对于某些资源没有权限是无法访问的。</p>
<h2 id="5-2-关键对象"><a href="#5-2-关键对象" class="headerlink" title="5.2 关键对象"></a>5.2 关键对象</h2><p>授权可简单理解为who对what(which)进行How操作：</p>
<p>Who，即主体（Subject），主体需要访问系统中的资源。</p>
<p>What，即资源（Resource)，如系统菜单、页面、按钮、类方法、系统商品信息等。资源包括资源类型和资源实例，比如商品信息为资源类型，类型为t01的商品为资源实例，编号为001的商品信息也属于资源实例。</p>
<p>How，权限/许可（Permission)，规定了主体对资源的操作许可，权限离开资源没有意义，如用户查询权限、用户添加权限、某个类方法的调用权限、编号为001用户的修改权限等，通过权限可知主体对哪些资源都有哪些操作许可。</p>
<h2 id="5-3-授权流程"><a href="#5-3-授权流程" class="headerlink" title="5.3 授权流程"></a>5.3 授权流程</h2><p><img src="https://s2.loli.net/2022/05/01/rW57Xejum26VanU.png" alt="image-20220501103924018"></p>
<h3 id="5-4-授权方式"><a href="#5-4-授权方式" class="headerlink" title="5.4 授权方式"></a>5.4 授权方式</h3><p><strong>基于角色的访问控制</strong></p>
<ul>
<li><p>RBAC基于角色的访问控制（Role-Based Access Control）是以角色为中心进行访问控制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(subject.hasRole(<span class="string">&quot;admin&quot;</span>))&#123;</span><br><span class="line">   <span class="comment">//操作什么资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>基于资源的访问控制</strong></p>
<ul>
<li>RBAC基于资源的访问控制（Resource-Based Access Control）是以资源为中心进行访问控制</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(subject.isPermission(&quot;user:update:01&quot;))&#123; //资源实例</span><br><span class="line">  //对资源01用户具有修改的权限</span><br><span class="line">&#125;</span><br><span class="line">if(subject.isPermission(&quot;user:update:*&quot;))&#123;  //资源类型</span><br><span class="line">  //对 所有的资源 用户具有更新的权限</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-5-权限字符串"><a href="#5-5-权限字符串" class="headerlink" title="5.5 权限字符串"></a>5.5 权限字符串</h2><p> 权限字符串的规则是：资源标识符：操作：资源实例标识符，意思是对哪个资源的哪个实例具有什么操作，“:”是资源/操作/实例的分割符，权限字符串也可以使用*通配符。</p>
<p>例子：</p>
<p>用户创建权限：user:create，或user:create:*<br>用户修改实例001的权限：user:update:001<br>用户实例001的所有权限：user:*：001</p>
<h5 id="5-6-shiro中授权编程实现方式"><a href="#5-6-shiro中授权编程实现方式" class="headerlink" title="5.6 shiro中授权编程实现方式"></a>5.6 shiro中授权编程实现方式</h5><h5 id="编程式"><a href="#编程式" class="headerlink" title="编程式"></a>编程式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">if(subject.hasRole(“admin”)) &#123;</span><br><span class="line">	//有权限</span><br><span class="line">&#125; else &#123;</span><br><span class="line">	//无权限</span><br></pre></td></tr></table></figure>

<h5 id="注解式"><a href="#注解式" class="headerlink" title="注解式"></a>注解式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequiresRoles(&quot;admin&quot;)</span><br><span class="line">public void hello() &#123;</span><br><span class="line">	//有权限</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="标签式"><a href="#标签式" class="headerlink" title="标签式"></a>标签式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSP/GSP 标签：在JSP/GSP 页面通过相应的标签完成：</span><br><span class="line">&lt;shiro:hasRole name=&quot;admin&quot;&gt;</span><br><span class="line">	&lt;!-- 有权限--&gt;</span><br><span class="line">&lt;/shiro:hasRole&gt;</span><br><span class="line">注意: Thymeleaf 中使用shiro需要额外集成!</span><br></pre></td></tr></table></figure>

<h3 id="5-7-开发授权"><a href="#5-7-开发授权" class="headerlink" title="5.7 开发授权"></a>5.7 开发授权</h3><h5 id="1-realm的实现"><a href="#1-realm的实现" class="headerlink" title="1.realm的实现"></a>1.realm的实现</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.realm;</span><br><span class="line"></span><br><span class="line">import org.apache.shiro.authc.AuthenticationException;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line">import org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line">import org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 使用自定义realm 加入md5 + salt +hash</span><br><span class="line"> * 实现授权操作</span><br><span class="line"> */</span><br><span class="line">public class CustomerMd5Realm extends AuthorizingRealm &#123;</span><br><span class="line"></span><br><span class="line">    //授权</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;</span><br><span class="line"></span><br><span class="line">        String primaryPrincipal = (String)principals.getPrimaryPrincipal();</span><br><span class="line">        System.out.println(&quot;身份信息: &quot;+primaryPrincipal); //用户名</span><br><span class="line"></span><br><span class="line">        //根据身份信息 用户名 获取当前用户的角色信息，以及权限信息</span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();</span><br><span class="line">        //假设 admin,user 是从数据库查到的 角色信息</span><br><span class="line">        simpleAuthorizationInfo.addRole(&quot;admin&quot;);</span><br><span class="line">        simpleAuthorizationInfo.addRole(&quot;user&quot;);</span><br><span class="line">        //假设 ... 是从数据库查到的 权限信息赋值给权限对象</span><br><span class="line">        simpleAuthorizationInfo.addStringPermission(&quot;user:*:01&quot;);</span><br><span class="line">        simpleAuthorizationInfo.addStringPermission(&quot;prodect:*&quot;);//第三个参数为*省略</span><br><span class="line"></span><br><span class="line">        return simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //认证</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;</span><br><span class="line">        //获取 token中的 用户名</span><br><span class="line">        String principal = (String) token.getPrincipal();</span><br><span class="line"></span><br><span class="line">        //假设这是从数据库查询到的信息</span><br><span class="line">        String username=&quot;zhangsan&quot;;</span><br><span class="line">        String password=&quot;7268f6d32ec8d6f4c305ae92395b00e8&quot;;//加密后</span><br><span class="line"></span><br><span class="line">        //根据用户名查询数据库</span><br><span class="line">        if (username.equals(principal)) &#123;</span><br><span class="line">            //参数1:数据库用户名</span><br><span class="line">            //参数2:数据库md5+salt之后的密码</span><br><span class="line">            //参数3:注册时的随机盐</span><br><span class="line">            //参数4:realm的名字</span><br><span class="line">            return new SimpleAuthenticationInfo(principal,</span><br><span class="line">                    password,</span><br><span class="line">                    ByteSource.Util.bytes(&quot;@#$*&amp;QU7O0!&quot;),</span><br><span class="line">                    this.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-授权"><a href="#2-授权" class="headerlink" title="2.授权"></a>2.授权</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.test;</span><br><span class="line"></span><br><span class="line">import com.lut.realm.CustomerMd5Realm;</span><br><span class="line">import org.apache.commons.collections.ArrayStack;</span><br><span class="line">import org.apache.shiro.SecurityUtils;</span><br><span class="line">import org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line">import org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line">import org.apache.shiro.authc.credential.HashedCredentialsMatcher;</span><br><span class="line">import org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line">import org.apache.shiro.subject.Subject;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class TestCustomerMd5RealmAuthenicator &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        //1.创建安全管理器</span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = new DefaultSecurityManager();</span><br><span class="line"></span><br><span class="line">        //2.注入realm</span><br><span class="line">        CustomerMd5Realm realm = new CustomerMd5Realm();</span><br><span class="line"></span><br><span class="line">        //3.设置realm使用hash凭证匹配器</span><br><span class="line">        HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();</span><br><span class="line">        //声明：使用的算法</span><br><span class="line">        credentialsMatcher.setHashAlgorithmName(&quot;md5&quot;);</span><br><span class="line">        //声明：散列次数</span><br><span class="line">        credentialsMatcher.setHashIterations(1024);</span><br><span class="line">        realm.setCredentialsMatcher(credentialsMatcher);</span><br><span class="line">        defaultSecurityManager.setRealm(realm);</span><br><span class="line"></span><br><span class="line">        //4.将安全管理器注入安全工具</span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line"></span><br><span class="line">        //5.通过安全工具类获取subject</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        //6.认证</span><br><span class="line">        UsernamePasswordToken token = new UsernamePasswordToken(&quot;zhangsan&quot;, &quot;123&quot;);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">            System.out.println(&quot;登录成功&quot;);</span><br><span class="line">        &#125; catch (UnknownAccountException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;用户名错误&quot;);</span><br><span class="line">        &#125;catch (IncorrectCredentialsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;密码错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //授权</span><br><span class="line">        if (subject.isAuthenticated())&#123;</span><br><span class="line"></span><br><span class="line">            //基于角色权限控制</span><br><span class="line">            System.out.println(subject.hasRole(&quot;admin&quot;));</span><br><span class="line">            //基于多角色的权限控制</span><br><span class="line">            System.out.println(subject.hasAllRoles(Arrays.asList(&quot;admin&quot;, &quot;user&quot;)));//true</span><br><span class="line">            System.out.println(subject.hasAllRoles(Arrays.asList(&quot;admin&quot;, &quot;manager&quot;)));//false</span><br><span class="line">            //是否具有其中一个角色</span><br><span class="line">            boolean[] booleans = subject.hasRoles(Arrays.asList(&quot;admin&quot;, &quot;user&quot;, &quot;manager&quot;));</span><br><span class="line">            for (boolean aBoolean : booleans) &#123;</span><br><span class="line">                System.out.println(aBoolean);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;====这是一个分隔符====&quot;);</span><br><span class="line"></span><br><span class="line">            //基于权限字符串的访问控制  资源标识符：操作：资源类型</span><br><span class="line">            //用户具有的权限 user:*:01  prodect:*</span><br><span class="line">            System.out.println(&quot;权限:&quot;+subject.isPermitted(&quot;user:update:01&quot;));</span><br><span class="line">            System.out.println(&quot;权限:&quot;+subject.isPermitted(&quot;prodect:update:02&quot;));</span><br><span class="line"></span><br><span class="line">            //分别具有哪些权限</span><br><span class="line">            boolean[] permitted = subject.isPermitted(&quot;user:*:01&quot;, &quot;user:update:02&quot;);</span><br><span class="line">            for (boolean b : permitted) &#123;</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //同时具有哪些权限</span><br><span class="line">            boolean permittedAll = subject.isPermittedAll(&quot;prodect:*:01&quot;, &quot;prodect:update:03&quot;);</span><br><span class="line">            System.out.println(permittedAll);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="整合SpringBoot项目实战"><a href="#整合SpringBoot项目实战" class="headerlink" title="整合SpringBoot项目实战"></a>整合SpringBoot项目实战</h1><h2 id="六、整合SpringBoot项目实战"><a href="#六、整合SpringBoot项目实战" class="headerlink" title="六、整合SpringBoot项目实战"></a>六、整合SpringBoot项目实战</h2><h3 id="6-1-整合思路"><a href="#6-1-整合思路" class="headerlink" title="6.1 整合思路"></a>6.1 整合思路</h3><p><img src="https://s2.loli.net/2022/05/01/CQ7YhFlkboP38Os.png" alt="image-20200525185630463"></p>
<h3 id="6-2-配置环境"><a href="#6-2-配置环境" class="headerlink" title="6.2 配置环境"></a>6.2 配置环境</h3><h4 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h4><p><img src="https://s2.loli.net/2022/05/01/HaMjAdb5QtnB34Y.png" alt="image-20200523100842032"></p>
<h4 id="2-引入依赖"><a href="#2-引入依赖" class="headerlink" title="2.引入依赖"></a>2.引入依赖</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--引入JSP解析依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;jstl&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--引入shiro整合Springboot依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;shiro-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.5.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>3.修改视图</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">application.properties 文件</span><br><span class="line"></span><br><span class="line">server.port=8080</span><br><span class="line">server.servlet.context-path=/shiro</span><br><span class="line">spring.application.name=shiro</span><br><span class="line"></span><br><span class="line">spring.mvc.view.prefix=/</span><br><span class="line">spring.mvc.view.suffix=.jsp</span><br></pre></td></tr></table></figure>

<h4 id="4-修改配置"><a href="#4-修改配置" class="headerlink" title="4.修改配置"></a>4.修改配置</h4><p>JSP 与IDEA 与SpringBoot存在一定的<strong>不兼容</strong>，修改此配置即可解决</p>
<p><img src="https://s2.loli.net/2022/05/01/RBWfKSk8izHuUxm.png" alt="image-20210129102527414"></p>
<h3 id="6-3-简单使用"><a href="#6-3-简单使用" class="headerlink" title="6.3 简单使用"></a>6.3 简单使用</h3><h4 id="1-创建配置类"><a href="#1-创建配置类" class="headerlink" title="1.创建配置类"></a>1.创建配置类</h4><p>用来整合shiro框架相关的配置类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.config;</span><br><span class="line"></span><br><span class="line">import com.lut.shiro.realms.CustomerRealm;</span><br><span class="line">import org.apache.shiro.authc.credential.HashedCredentialsMatcher;</span><br><span class="line">import org.apache.shiro.realm.Realm;</span><br><span class="line">import org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line">import org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 用来整合shiro框架相关的配置类</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class ShiroConfig &#123;</span><br><span class="line"></span><br><span class="line">    //1.创建shiroFilter  //负责拦截所有请求</span><br><span class="line">    @Bean</span><br><span class="line">    public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultWebSecurityManager defaultWebSecurityManager)&#123;</span><br><span class="line"></span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();</span><br><span class="line">        //给filter设置安全管理器</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line"></span><br><span class="line">        //配置系统受限资源</span><br><span class="line">        //配置系统公共资源</span><br><span class="line">        Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(&quot;/index.jsp&quot;,&quot;authc&quot;);//authc 请求这个资源需要认证和授权</span><br><span class="line"></span><br><span class="line">        //默认认证界面路径---当认证不通过时跳转</span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(&quot;/login.jsp&quot;);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line"></span><br><span class="line">        return shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //2.创建安全管理器</span><br><span class="line">    @Bean</span><br><span class="line">    public DefaultWebSecurityManager getDefaultWebSecurityManager(Realm realm)&#123;</span><br><span class="line">        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();</span><br><span class="line">        //给安全管理器设置</span><br><span class="line">        defaultWebSecurityManager.setRealm(realm);</span><br><span class="line"></span><br><span class="line">        return defaultWebSecurityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //3.创建自定义realm</span><br><span class="line">    @Bean</span><br><span class="line">    public Realm getRealm()&#123;</span><br><span class="line">        CustomerRealm customerRealm = new CustomerRealm();</span><br><span class="line"></span><br><span class="line">        return customerRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-自定义realm"><a href="#2-自定义realm" class="headerlink" title="2.自定义realm"></a>2.自定义realm</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.shiro.realms;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationException;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line">import org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line">import org.springframework.util.CollectionUtils;</span><br><span class="line">import org.springframework.util.ObjectUtils;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//自定义realm</span><br><span class="line">public class CustomerRealm extends AuthorizingRealm &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-JSP文件"><a href="#3-JSP文件" class="headerlink" title="3.JSP文件"></a>3.JSP文件</h4><p>index.jsp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@page contentType=&quot;text/html;utf-8&quot; pageEncoding=&quot;utf-8&quot; isELIgnored=&quot;false&quot; %&gt;</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot;</span><br><span class="line">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--    受限资源--%&gt;</span><br><span class="line">    &lt;h1&gt;系统主页&lt;/h1&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;用户管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;商品管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;订单管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;物流管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>login.jsp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@page contentType=&quot;text/html;utf-8&quot; pageEncoding=&quot;utf-8&quot; isELIgnored=&quot;false&quot; %&gt;</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot;</span><br><span class="line">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;登录界面&lt;/h1&gt;</span><br><span class="line">    &lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        用户名:&lt;input type=&quot;text&quot; name=&quot;username&quot; &gt; &lt;br/&gt;</span><br><span class="line">        密码  : &lt;input type=&quot;text&quot; name=&quot;password&quot;&gt; &lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="4-简单测试"><a href="#4-简单测试" class="headerlink" title="4.简单测试"></a>4.简单测试</h4><p>访问：<a href="http://localhost:8080/shiro/index.jsp">http://localhost:8080/shiro/index.jsp</a></p>
<p>由于没有验证成功，会跳转到登录页面</p>
<p><img src="https://s2.loli.net/2022/05/01/duSXayrkqspmlEf.png" alt="image-20210129111952357"></p>
<p>目前项目结构：</p>
<p><img src="https://s2.loli.net/2022/05/01/V7ArcLsgnzuMqCT.png" alt="image-20210129112154241"></p>
<h3 id="6-4-常见过滤器"><a href="#6-4-常见过滤器" class="headerlink" title="6.4 常见过滤器"></a>6.4 常见过滤器</h3><ul>
<li>注意: <strong>shiro提供和多个默认的过滤器，我们可以用这些过滤器来配置控制指定url的权限：</strong></li>
</ul>
<p>配置缩写    对应的过滤器    功能<br>anon    AnonymousFilter    指定url可以匿名访问（访问时不需要认证授权）<br>authc    FormAuthenticationFilter    指定url需要form表单登录，默认会从请求中获取username、password,rememberMe等参数并尝试登录，如果登录不了就会跳转到loginUrl配置的路径。我们也可以用这个过滤器做默认的登录逻辑，但是一般都是我们自己在控制器写登录逻辑的，自己写的话出错返回的信息都可以定制嘛。<br>authcBasic    BasicHttpAuthenticationFilter    指定url需要basic登录<br>logout    LogoutFilter    登出过滤器，配置指定url就可以实现退出功能，非常方便<br>noSessionCreation    NoSessionCreationFilter    禁止创建会话<br>perms    PermissionsAuthorizationFilter    需要指定权限才能访问<br>port    PortFilter    需要指定端口才能访问<br>rest    HttpMethodPermissionFilter    将http请求方法转化成相应的动词来构造一个权限字符串，这个感觉意义不大，有兴趣自己看源码的注释<br>roles    RolesAuthorizationFilter    需要指定角色才能访问<br>ssl    SslFilter    需要https请求才能访问<br>user    UserFilter    需要已登录或“记住我”的用户才能访问</p>
<h4 id="6-5-认证和退出实现"><a href="#6-5-认证和退出实现" class="headerlink" title="6.5 认证和退出实现"></a>6.5 认证和退出实现</h4><h4 id="6-5-1-登录实现"><a href="#6-5-1-登录实现" class="headerlink" title="6.5.1 登录实现"></a>6.5.1 登录实现</h4><p>1.login.jsp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@page contentType=&quot;text/html;utf-8&quot; pageEncoding=&quot;utf-8&quot; isELIgnored=&quot;false&quot; %&gt;</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot;</span><br><span class="line">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;登录界面&lt;/h1&gt;</span><br><span class="line">    &lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        用户名:&lt;input type=&quot;text&quot; name=&quot;username&quot; &gt; &lt;br/&gt;</span><br><span class="line">        密码  : &lt;input type=&quot;text&quot; name=&quot;password&quot;&gt; &lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/img_convert/b68e76ab37bf5dc6445deacdd6d41990.png" alt="image-20210129130149681"></p>
<h4 id="2-UserController"><a href="#2-UserController" class="headerlink" title="2.UserController"></a>2.UserController</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.controller;</span><br><span class="line"></span><br><span class="line">import org.apache.shiro.SecurityUtils;</span><br><span class="line">import org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line">import org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line">import org.apache.shiro.subject.Subject;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletOutputStream;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用来处理身份认证</span><br><span class="line">     * @param username</span><br><span class="line">     * @param password</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;login&quot;)</span><br><span class="line">    public String login(String username, String password) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取主体对象</span><br><span class="line">            Subject subject = SecurityUtils.getSubject();</span><br><span class="line">            subject.login(new UsernamePasswordToken(username, password));</span><br><span class="line">            return &quot;redirect:/index.jsp&quot;;</span><br><span class="line">        &#125; catch (UnknownAccountException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;用户名错误!&quot;);</span><br><span class="line">        &#125; catch (IncorrectCredentialsException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;密码错误!&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return &quot;redirect:/login.jsp&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>在认证过程中使用subject.login进行认证</strong></li>
</ul>
<h4 id="3-自定义Realm"><a href="#3-自定义Realm" class="headerlink" title="3.自定义Realm"></a>3.自定义Realm</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.shiro.realms;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationException;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line">import org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line">import org.springframework.util.CollectionUtils;</span><br><span class="line">import org.springframework.util.ObjectUtils;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//自定义realm</span><br><span class="line">public class CustomerRealm extends AuthorizingRealm &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;=============&quot;);</span><br><span class="line"></span><br><span class="line">        //从传过来的token获取到的用户名</span><br><span class="line">        String principal = (String) token.getPrincipal();</span><br><span class="line">        System.out.println(&quot;用户名&quot;+principal);</span><br><span class="line"></span><br><span class="line">        //假设是从数据库获得的 用户名，密码</span><br><span class="line">        String password_db=&quot;123&quot;;</span><br><span class="line">        String username_db=&quot;zhangsan&quot;;</span><br><span class="line"></span><br><span class="line">        if (username_db.equals(principal))&#123;</span><br><span class="line">//            SimpleAuthenticationInfo simpleAuthenticationInfo =</span><br><span class="line">            return new SimpleAuthenticationInfo(principal,&quot;123&quot;, this.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-ShiroConfig"><a href="#4-ShiroConfig" class="headerlink" title="4.ShiroConfig"></a>4.ShiroConfig</h4><p>主要的Shiro配置类中声明：哪些是需要验证的资源，哪些是公开的资源</p>
<p>注意：先配置公共资源，后配置需要认证/授权的资源</p>
<p>此时认证功能没有md5和随机盐的认证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.config;</span><br><span class="line">import com.lut.shiro.realms.CustomerRealm;</span><br><span class="line">import org.apache.shiro.authc.credential.HashedCredentialsMatcher;</span><br><span class="line">import org.apache.shiro.realm.Realm;</span><br><span class="line">import org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line">import org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 用来整合shiro框架相关的配置类</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class ShiroConfig &#123;</span><br><span class="line"></span><br><span class="line">    //1.创建shiroFilter  //负责拦截所有请求</span><br><span class="line">    @Bean</span><br><span class="line">    public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultWebSecurityManager defaultWebSecurityManager)&#123;</span><br><span class="line"></span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();</span><br><span class="line">        //给filter设置安全管理器</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line"></span><br><span class="line">        //配置系统受限资源</span><br><span class="line">        //配置系统公共资源</span><br><span class="line">        Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();</span><br><span class="line">        map.put(&quot;/user/login&quot;,&quot;anon&quot;);//anon 设置为公共资源  放行资源放在下面</span><br><span class="line">        map.put(&quot;/user/register&quot;,&quot;anon&quot;);//anon 设置为公共资源  放行资源放在下面</span><br><span class="line">        map.put(&quot;/register.jsp&quot;,&quot;anon&quot;);//anon 设置为公共资源  放行资源放在下面</span><br><span class="line">        map.put(&quot;/user/getImage&quot;,&quot;anon&quot;);</span><br><span class="line"></span><br><span class="line">        map.put(&quot;/**&quot;,&quot;authc&quot;);//authc 请求这个资源需要认证和授权</span><br><span class="line"></span><br><span class="line">        //默认认证界面路径---当认证不通过时跳转</span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(&quot;/login.jsp&quot;);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line"></span><br><span class="line">        return shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //2.创建安全管理器</span><br><span class="line">    @Bean</span><br><span class="line">    public DefaultWebSecurityManager getDefaultWebSecurityManager(Realm realm)&#123;</span><br><span class="line">        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();</span><br><span class="line">        //给安全管理器设置</span><br><span class="line">        defaultWebSecurityManager.setRealm(realm);</span><br><span class="line"></span><br><span class="line">        return defaultWebSecurityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //3.创建自定义realm</span><br><span class="line">    @Bean</span><br><span class="line">    public Realm getRealm()&#123;</span><br><span class="line">        CustomerRealm customerRealm = new CustomerRealm();</span><br><span class="line">        return customerRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-5-2-退出认证"><a href="#6-5-2-退出认证" class="headerlink" title="6.5.2 退出认证"></a>6.5.2 退出认证</h4><h4 id="1-index-jsp"><a href="#1-index-jsp" class="headerlink" title="1.index.jsp"></a>1.index.jsp</h4><p>添加登出链接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@page contentType=&quot;text/html;utf-8&quot; pageEncoding=&quot;utf-8&quot; isELIgnored=&quot;false&quot; %&gt;</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot;</span><br><span class="line">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--受限资源--%&gt;</span><br><span class="line">&lt;h1&gt;系统主页&lt;/h1&gt;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/user/logout&quot;&gt;退出登录&lt;/a&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;用户管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;商品管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;订单管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;物流管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-UserController-1"><a href="#2-UserController-1" class="headerlink" title="2.UserController"></a>2.UserController</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.controller;</span><br><span class="line"></span><br><span class="line">import org.apache.shiro.SecurityUtils;</span><br><span class="line">import org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line">import org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line">import org.apache.shiro.subject.Subject;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletOutputStream;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 退出登录</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;logout&quot;)</span><br><span class="line">    public String logout() &#123;</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        subject.logout();//退出用户</span><br><span class="line">        return &quot;redirect:/login.jsp&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用来处理身份认证</span><br><span class="line">     * @param username</span><br><span class="line">     * @param password</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;login&quot;)</span><br><span class="line">    public String login(String username, String password) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取主体对象</span><br><span class="line">            Subject subject = SecurityUtils.getSubject();</span><br><span class="line">            subject.login(new UsernamePasswordToken(username, password));</span><br><span class="line">            return &quot;redirect:/index.jsp&quot;;</span><br><span class="line">        &#125; catch (UnknownAccountException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;用户名错误!&quot;);</span><br><span class="line">        &#125; catch (IncorrectCredentialsException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;密码错误!&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return &quot;redirect:/login.jsp&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h4><p>登录正常，登出正常，未登录和登出后不能访问index.jsp</p>
<h3 id="6-7-MD5、Salt的认证实现"><a href="#6-7-MD5、Salt的认证实现" class="headerlink" title="6.7 MD5、Salt的认证实现"></a>6.7 MD5、Salt的认证实现</h3><h4 id="6-7-1-用户注册-随机盐处理"><a href="#6-7-1-用户注册-随机盐处理" class="headerlink" title="6.7.1 用户注册+随机盐处理"></a>6.7.1 用户注册+随机盐处理</h4><h5 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--mybatis相关依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--mysql--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;5.1.38&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--druid--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.1.19&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h5 id="2-application-properties"><a href="#2-application-properties" class="headerlink" title="2.application.properties"></a>2.application.properties</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/shiro?characterEncoding=UTF-8</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=88888888</span><br><span class="line"></span><br><span class="line">mybatis.type-aliases-package=com.lut.entity</span><br><span class="line">mybatis.mapper-locations=classpath:mapper/*.xml</span><br></pre></td></tr></table></figure>

<h5 id="3-创建数据库"><a href="#3-创建数据库" class="headerlink" title="3.创建数据库"></a>3.创建数据库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0;</span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for t_user</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `t_user`;</span><br><span class="line">CREATE TABLE `t_user` (</span><br><span class="line">  `id` int(6) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(40) DEFAULT NULL,</span><br><span class="line">  `password` varchar(40) DEFAULT NULL,</span><br><span class="line">  `salt` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/05/01/ZHBEUKjm7vyXLiD.png" alt="image-20200526200425569"></p>
<h5 id="4-创建entity"><a href="#4-创建entity" class="headerlink" title="4.创建entity"></a>4.创建entity</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.entity;</span><br><span class="line"></span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line">import lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@Accessors(chain = true)</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class User &#123;</span><br><span class="line">    private String  id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    private String salt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-创建DAO接口"><a href="#5-创建DAO接口" class="headerlink" title="5.创建DAO接口"></a>5.创建DAO接口</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.dao;</span><br><span class="line">import com.lut.entity.User;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line">@Mapper</span><br><span class="line">public interface UserDao &#123;</span><br><span class="line"></span><br><span class="line">    void save(User user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-开发mapper配置文件"><a href="#6-开发mapper配置文件" class="headerlink" title="6.开发mapper配置文件"></a>6.开发mapper配置文件</h5><p>注意：mapper文件的位置要在 application.properties配置的目录下面</p>
<p><strong>注意：mapper文件的命名 与 Dao接口保持一致</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;com.lut.dao.UserDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=&quot;save&quot; parameterType=&quot;User&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;</span><br><span class="line">        insert into t_user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;salt&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<p><strong>在图中，标红的地方要保持命名一致，不然会有莫名其妙的BUG</strong></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/35d23af18fe1f2002841269319028516.png" alt="image-20210129140745067"></p>
<h5 id="7-开发service接口"><a href="#7-开发service接口" class="headerlink" title="7.开发service接口"></a>7.开发service接口</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.service;</span><br><span class="line"></span><br><span class="line">import com.lut.entity.User;</span><br><span class="line"></span><br><span class="line">public interface UserService &#123;</span><br><span class="line">    //注册用户方法</span><br><span class="line">    void register(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="8-创建salt工具类"><a href="#8-创建salt工具类" class="headerlink" title="8.创建salt工具类"></a>8.创建salt工具类</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.utils;</span><br><span class="line"></span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">public class SaltUtils &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 生成salt的静态方法</span><br><span class="line">     * @param n</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getSalt(int n)&#123;</span><br><span class="line">        char[] chars = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567890!@#$%^&amp;*()&quot;.toCharArray();</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            char aChar = chars[new Random().nextInt(chars.length)];</span><br><span class="line">            sb.append(aChar);</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="9-开发service实现类"><a href="#9-开发service实现类" class="headerlink" title="9.开发service实现类"></a>9.开发service实现类</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.service;</span><br><span class="line"></span><br><span class="line">import com.lut.dao.UserDao;</span><br><span class="line">import com.lut.entity.User;</span><br><span class="line">import com.lut.utils.SaltUtils;</span><br><span class="line">import org.apache.shiro.crypto.hash.Md5Hash;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@Transactional</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserDao userDAO;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void register(User user) &#123;</span><br><span class="line">        //处理业务调用dao</span><br><span class="line">        //1.生成随机盐</span><br><span class="line">        String salt = SaltUtils.getSalt(8);</span><br><span class="line">        //2.将随机盐保存到数据</span><br><span class="line">        user.setSalt(salt);</span><br><span class="line">        //3.明文密码进行md5 + salt + hash散列</span><br><span class="line">        Md5Hash md5Hash = new Md5Hash(user.getPassword(),salt,1024);</span><br><span class="line">        user.setPassword(md5Hash.toHex());</span><br><span class="line"></span><br><span class="line">        userDAO.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="10-开发Controller"><a href="#10-开发Controller" class="headerlink" title="10.开发Controller"></a>10.开发Controller</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户注册</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;register&quot;)</span><br><span class="line">    public String register(User user) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            userService.register(user);</span><br><span class="line">            return &quot;redirect:/login.jsp&quot;;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return &quot;redirect:/register.jsp&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="11-设置公共资源"><a href="#11-设置公共资源" class="headerlink" title="11.设置公共资源"></a>11.设置公共资源</h5><p>在ShiroConfig中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">map.put(&quot;/user/register&quot;,&quot;anon&quot;);//anon 设置为公共资源 </span><br><span class="line">map.put(&quot;/register.jsp&quot;,&quot;anon&quot;);//anon 设置为公共资源 </span><br></pre></td></tr></table></figure>

<h5 id="12-测试"><a href="#12-测试" class="headerlink" title="12.测试"></a>12.测试</h5><p>添加成功</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/5725e49a9b7ad4bb4b7fe7c017c851ed.png" alt="img"></p>
<h4 id="6-7-2-开发数据库认证"><a href="#6-7-2-开发数据库认证" class="headerlink" title="6.7.2 开发数据库认证"></a>6.7.2 开发数据库认证</h4><h5 id="1-开发DAO"><a href="#1-开发DAO" class="headerlink" title="1.开发DAO"></a>1.开发DAO</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface UserDAO &#123;</span><br><span class="line">    </span><br><span class="line">    void save(User user);</span><br><span class="line">	//根据身份信息认证的方法</span><br><span class="line">    User findByUserName(String username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.开发mapper配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;findByUserName&quot; parameterType=&quot;String&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">  select id,username,password,salt from t_user</span><br><span class="line">  where username = #&#123;username&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h5 id="3-开发Service接口"><a href="#3-开发Service接口" class="headerlink" title="3.开发Service接口"></a>3.开发Service接口</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface UserService &#123;</span><br><span class="line">    //注册用户方法</span><br><span class="line">    void register(User user);</span><br><span class="line">    //根据用户名查询业务的方法</span><br><span class="line">    User findByUserName(String username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-开发Service实现类"><a href="#4-开发Service实现类" class="headerlink" title="4.开发Service实现类"></a>4.开发Service实现类</h5><p><strong>注意：一定别忘记添加注解：@Service(“userService”)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service(&quot;userService&quot;)</span><br><span class="line">@Transactional</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserDAO userDAO;</span><br><span class="line">    @Override</span><br><span class="line">    public User findByUserName(String username) &#123;</span><br><span class="line">        return userDAO.findByUserName(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-开发工厂工具类"><a href="#5-开发工厂工具类" class="headerlink" title="5.开发工厂工具类"></a>5.开发工厂工具类</h5><p><strong>在工厂中获取bean对象的工具类</strong></p>
<p>ApplicationContextUtils</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.utils;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.BeansException;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.ApplicationContextAware;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class ApplicationContextUtils implements ApplicationContextAware &#123;</span><br><span class="line"></span><br><span class="line">    private static ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class="line">        this.context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //根据bean名字获取工厂中指定bean 对象</span><br><span class="line">    public static Object getBean(String beanName)&#123;</span><br><span class="line">        System.out.println(&quot;beanName&quot;+beanName);</span><br><span class="line">        Object object=context.getBean(beanName);</span><br><span class="line">        System.out.println(&quot;object&quot;+object);</span><br><span class="line">        return context.getBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-修改自定义realm"><a href="#6-修改自定义realm" class="headerlink" title="6.修改自定义realm"></a>6.修改自定义realm</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//自定义realm</span><br><span class="line">public class CustomerRealm extends AuthorizingRealm &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;</span><br><span class="line"></span><br><span class="line">        //根据身份信息//从传过来的token获取到的用户名</span><br><span class="line">        String principal = (String) token.getPrincipal();</span><br><span class="line"></span><br><span class="line">        //在工厂中获取service对象</span><br><span class="line">        UserService userService = (UserService) ApplicationContextUtils.getBean(&quot;userService&quot;);</span><br><span class="line"></span><br><span class="line">        //根据身份信息查询</span><br><span class="line">        User user = userService.findByUserName(principal);</span><br><span class="line">        System.out.println(&quot;User:&quot;+user);</span><br><span class="line"></span><br><span class="line">        //用户不为空</span><br><span class="line">        if(!ObjectUtils.isEmpty(user))&#123;</span><br><span class="line">            //返回数据库信息</span><br><span class="line">            SimpleAuthenticationInfo simpleAuthenticationInfo = new SimpleAuthenticationInfo(user.getUsername(), user.getPassword(),</span><br><span class="line">                    ByteSource.Util.bytes(user.getSalt()), this.getName());</span><br><span class="line">            return simpleAuthenticationInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-修改ShiroConfig中realm"><a href="#7-修改ShiroConfig中realm" class="headerlink" title="7.修改ShiroConfig中realm"></a>7.修改ShiroConfig中realm</h5><p>使用凭证匹配器以及hash散列</p>
<p>以及在 getShiroFilterFactoryBean 中添加公共资源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.config;</span><br><span class="line">import com.lut.shiro.realms.CustomerRealm;</span><br><span class="line">import org.apache.shiro.authc.credential.HashedCredentialsMatcher;</span><br><span class="line">import org.apache.shiro.realm.Realm;</span><br><span class="line">import org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line">import org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 用来整合shiro框架相关的配置类</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class ShiroConfig &#123;</span><br><span class="line"></span><br><span class="line">    //1.创建shiroFilter  //负责拦截所有请求</span><br><span class="line">    @Bean</span><br><span class="line">    public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultWebSecurityManager defaultWebSecurityManager)&#123;</span><br><span class="line"></span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();</span><br><span class="line">        //给filter设置安全管理器</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line"></span><br><span class="line">        //配置系统受限资源</span><br><span class="line">        //配置系统公共资源</span><br><span class="line">        Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();</span><br><span class="line">        map.put(&quot;/user/login&quot;,&quot;anon&quot;);//anon 设置为公共资源  放行资源放在下面</span><br><span class="line">        map.put(&quot;/user/register&quot;,&quot;anon&quot;);//anon 设置为公共资源  放行资源放在下面</span><br><span class="line">        map.put(&quot;/register.jsp&quot;,&quot;anon&quot;);//anon 设置为公共资源  放行资源放在下面</span><br><span class="line">        map.put(&quot;/user/getImage&quot;,&quot;anon&quot;);</span><br><span class="line"></span><br><span class="line">        map.put(&quot;/**&quot;,&quot;authc&quot;);//authc 请求这个资源需要认证和授权</span><br><span class="line"></span><br><span class="line">        //默认认证界面路径---当认证不通过时跳转</span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(&quot;/login.jsp&quot;);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line"></span><br><span class="line">        return shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //2.创建安全管理器</span><br><span class="line">    @Bean</span><br><span class="line">    public DefaultWebSecurityManager getDefaultWebSecurityManager(Realm realm)&#123;</span><br><span class="line">        DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();</span><br><span class="line">        //给安全管理器设置</span><br><span class="line">        defaultWebSecurityManager.setRealm(realm);</span><br><span class="line"></span><br><span class="line">        return defaultWebSecurityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Realm getRealm()&#123;</span><br><span class="line">        CustomerRealm customerRealm = new CustomerRealm();</span><br><span class="line"></span><br><span class="line">        //设置hashed凭证匹配器</span><br><span class="line">        HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();</span><br><span class="line"></span><br><span class="line">        //设置md5加密</span><br><span class="line">        credentialsMatcher.setHashAlgorithmName(&quot;md5&quot;);</span><br><span class="line"></span><br><span class="line">        //设置散列次数</span><br><span class="line">        credentialsMatcher.setHashIterations(1024);</span><br><span class="line">        customerRealm.setCredentialsMatcher(credentialsMatcher);</span><br><span class="line">        return customerRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="8-启动测试"><a href="#8-启动测试" class="headerlink" title="8.启动测试"></a>8.启动测试</h5><h3 id="6-8-授权实现"><a href="#6-8-授权实现" class="headerlink" title="6.8 授权实现"></a>6.8 授权实现</h3><h4 id="6-8-1-没有数据库"><a href="#6-8-1-没有数据库" class="headerlink" title="6.8.1 没有数据库"></a>6.8.1 没有数据库</h4><h5 id="1-页面资源授权"><a href="#1-页面资源授权" class="headerlink" title="1.页面资源授权"></a>1.页面资源授权</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@page contentType=&quot;text/html;utf-8&quot; pageEncoding=&quot;utf-8&quot; isELIgnored=&quot;false&quot; %&gt;</span><br><span class="line">&lt;%@taglib prefix=&quot;shiro&quot; uri=&quot;http://shiro.apache.org/tags&quot; %&gt;</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot;</span><br><span class="line">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--    受限资源--%&gt;</span><br><span class="line">&lt;h1&gt;系统主页&lt;/h1&gt;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/user/logout&quot;&gt;退出登录&lt;/a&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;shiro:hasAnyRoles name=&quot;user_manager,admin,addinfo_manager&quot;&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;&quot;&gt;用户管理&lt;/a&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;shiro:hasPermission name=&quot;user:add:*&quot;&gt;</span><br><span class="line">                    &lt;li&gt;&lt;a href=&quot;&quot;&gt;添加&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/shiro:hasPermission&gt;</span><br><span class="line">                &lt;shiro:hasPermission name=&quot;user:delete:*&quot;&gt;</span><br><span class="line">                    &lt;li&gt;&lt;a href=&quot;&quot;&gt;删除&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/shiro:hasPermission&gt;</span><br><span class="line">                &lt;shiro:hasPermission name=&quot;user:update:*&quot;&gt;</span><br><span class="line">                    &lt;li&gt;&lt;a href=&quot;&quot;&gt;修改&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/shiro:hasPermission&gt;</span><br><span class="line">                &lt;shiro:hasPermission name=&quot;user:find:*&quot;&gt;</span><br><span class="line">                    &lt;li&gt;&lt;a href=&quot;&quot;&gt;查询&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/shiro:hasPermission&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/shiro:hasAnyRoles&gt;</span><br><span class="line">    &lt;shiro:hasAnyRoles name=&quot;order_manager,admin,addinfo_manager&quot;&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;&quot;&gt;订单管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;shiro:hasPermission name=&quot;order:add:*&quot;&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&quot;&gt;添加&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;/shiro:hasPermission&gt;</span><br><span class="line">            &lt;shiro:hasPermission name=&quot;order:delete:*&quot;&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&quot;&gt;删除&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;/shiro:hasPermission&gt;</span><br><span class="line">            &lt;shiro:hasPermission name=&quot;order:update:*&quot;&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&quot;&gt;修改&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;/shiro:hasPermission&gt;</span><br><span class="line">            &lt;shiro:hasPermission name=&quot;order:find:*&quot;&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&quot;&gt;查询&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;/shiro:hasPermission&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/shiro:hasAnyRoles&gt;</span><br><span class="line">    &lt;shiro:hasRole name=&quot;admin&quot;&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;&quot;&gt;商品管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;&quot;&gt;物流管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/shiro:hasRole&gt;</span><br><span class="line"></span><br><span class="line">    &lt;shiro:hasRole name=&quot;user&quot;&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;&quot;&gt;仅普通用户可见&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;&quot;&gt;公共资源&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/shiro:hasRole&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="2-代码方式授权"><a href="#2-代码方式授权" class="headerlink" title="2.代码方式授权"></a>2.代码方式授权</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;save&quot;)</span><br><span class="line">public String save()&#123;</span><br><span class="line">  System.out.println(&quot;进入方法&quot;);</span><br><span class="line">  </span><br><span class="line">  //基于角色</span><br><span class="line">  //获取主体对象</span><br><span class="line">  Subject subject = SecurityUtils.getSubject();</span><br><span class="line">  //代码方式</span><br><span class="line">  if (subject.hasRole(&quot;admin&quot;)) &#123;</span><br><span class="line">    System.out.println(&quot;保存订单!&quot;);</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    System.out.println(&quot;无权访问!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  //基于权限字符串</span><br><span class="line">  //....</span><br><span class="line">  return &quot;redirect:/index.jsp&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-方法调用授权"><a href="#3-方法调用授权" class="headerlink" title="3.方法调用授权"></a>3.方法调用授权</h5><ul>
<li>@RequiresRoles 用来基于角色进行授权</li>
<li>@RequiresPermissions 用来基于权限进行授权</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.apache.shiro.authz.annotation.RequiresPermissions;</span><br><span class="line">import org.apache.shiro.authz.annotation.RequiresRoles;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;order&quot;)</span><br><span class="line">public class OrderController &#123;</span><br><span class="line"></span><br><span class="line">    @RequiresRoles(value=&#123;&quot;admin&quot;,&quot;user&quot;&#125;)//用来判断角色  同时具有 admin user</span><br><span class="line">    @RequiresPermissions(&quot;user:update:01&quot;) //用来判断权限字符串</span><br><span class="line">    @RequestMapping(&quot;save&quot;)</span><br><span class="line">    public String save()&#123;</span><br><span class="line">        System.out.println(&quot;进入方法&quot;);</span><br><span class="line">        return &quot;redirect:/index.jsp&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-8-2-连接数据库"><a href="#6-8-2-连接数据库" class="headerlink" title="6.8.2 连接数据库"></a>6.8.2 连接数据库</h4><h5 id="4-授权数据持久化"><a href="#4-授权数据持久化" class="headerlink" title="4.授权数据持久化"></a>4.授权数据持久化</h5><p><img src="https://s2.loli.net/2022/05/01/pQOlgMTCzFvKk9B.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for t_perms</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `t_perms`;</span><br><span class="line">CREATE TABLE `t_pers` (</span><br><span class="line">  `id` int(6) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(80) DEFAULT NULL,</span><br><span class="line">  `url` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for t_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `t_role`;</span><br><span class="line">CREATE TABLE `t_role` (</span><br><span class="line">  `id` int(6) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(60) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for t_role_perms</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `t_role_perms`;</span><br><span class="line">CREATE TABLE `t_role_perms` (</span><br><span class="line">  `id` int(6) NOT NULL,</span><br><span class="line">  `roleid` int(6) DEFAULT NULL,</span><br><span class="line">  `permsid` int(6) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for t_user</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `t_user`;</span><br><span class="line">CREATE TABLE `t_user` (</span><br><span class="line">  `id` int(6) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(40) DEFAULT NULL,</span><br><span class="line">  `password` varchar(40) DEFAULT NULL,</span><br><span class="line">  `salt` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for t_user_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `t_user_role`;</span><br><span class="line">CREATE TABLE `t_user_role` (</span><br><span class="line">  `id` int(6) NOT NULL,</span><br><span class="line">  `userid` int(6) DEFAULT NULL,</span><br><span class="line">  `roleid` int(6) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/05/01/tl13PdjwyhUvCsM.png" alt="image-20210130103905929"></p>
<h5 id="5-创建实体类"><a href="#5-创建实体类" class="headerlink" title="5.创建实体类"></a>5.创建实体类</h5><p>User</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@Accessors(chain = true)</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    private String salt;</span><br><span class="line"></span><br><span class="line">    //定义角色集合</span><br><span class="line">    private List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Role</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@Accessors(chain = true)</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Role implements Serializable &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    //定义权限的集合</span><br><span class="line">    private List&lt;Perms&gt; perms;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Perms</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@Accessors(chain = true)</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Perms implements Serializable &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-创建dao方法"><a href="#6-创建dao方法" class="headerlink" title="6.创建dao方法"></a>6.创建dao方法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//根据用户名查询所有角色</span><br><span class="line">User findRolesByUserName(String username);</span><br><span class="line">//根据角色id查询权限集合</span><br><span class="line">List&lt;Perms&gt; findPermsByRoleId(String id);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="7-mapper实现"><a href="#7-mapper实现" class="headerlink" title="7.mapper实现"></a>7.mapper实现</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;resultMap id=&quot;userMap&quot; type=&quot;User&quot;&gt;</span><br><span class="line">  &lt;id column=&quot;uid&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">  &lt;result column=&quot;username&quot; property=&quot;username&quot;/&gt;</span><br><span class="line">  &lt;!--角色信息--&gt;</span><br><span class="line">  &lt;collection property=&quot;roles&quot; javaType=&quot;list&quot; ofType=&quot;Role&quot;&gt;</span><br><span class="line">    &lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">    &lt;result column=&quot;rname&quot; property=&quot;name&quot;/&gt;</span><br><span class="line">  &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;findRolesByUserName&quot; parameterType=&quot;String&quot; resultMap=&quot;userMap&quot;&gt;</span><br><span class="line">  SELECT u.id uid,u.username,r.id,r.NAME rname</span><br><span class="line">  FROM t_user u</span><br><span class="line">  LEFT JOIN t_user_role ur</span><br><span class="line">  ON u.id=ur.userid</span><br><span class="line">  LEFT JOIN t_role r</span><br><span class="line">  ON ur.roleid=r.id</span><br><span class="line">  WHERE u.username=#&#123;username&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;findPermsByRoleId&quot; parameterType=&quot;String&quot; resultType=&quot;Perms&quot;&gt;</span><br><span class="line">  SELECT p.id,p.NAME,p.url,r.NAME</span><br><span class="line">  FROM t_role r</span><br><span class="line">  LEFT JOIN t_role_perms rp</span><br><span class="line">  ON r.id=rp.roleid</span><br><span class="line">  LEFT JOIN t_perms p ON rp.permsid=p.id</span><br><span class="line">  WHERE r.id=#&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h5 id="8-Service接口"><a href="#8-Service接口" class="headerlink" title="8.Service接口"></a>8.Service接口</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//根据用户名查询所有角色</span><br><span class="line">User findRolesByUserName(String username);</span><br><span class="line">//根据角色id查询权限集合</span><br><span class="line">List&lt;Perms&gt; findPermsByRoleId(String id);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="9-Service实现"><a href="#9-Service实现" class="headerlink" title="9.Service实现"></a>9.Service实现</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public List&lt;Perms&gt; findPermsByRoleId(String id) &#123;</span><br><span class="line">  return userDAO.findPermsByRoleId(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public User findRolesByUserName(String username) &#123;</span><br><span class="line">  return userDAO.findRolesByUserName(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-修改自定义realm"><a href="#10-修改自定义realm" class="headerlink" title="10.修改自定义realm"></a>10.修改自定义realm</h3><p><strong>注意：</strong>如果你创建了一个用户，并为这个用户授予了一个角色，但这个角色并未关联任何的 授权字符串，那么调用数据库获得的结果是 List<Perms> perms=[null]，此时 perms已经被初始化，里面只有一个属性null，使用判空的方法无法判别，此时继续遍历会报出空指针异常，此时应当添加判断条件 perms.get(0)!=null</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.shiro.realms;</span><br><span class="line">import com.lut.entity.Perms;</span><br><span class="line">import com.lut.entity.User;</span><br><span class="line">import com.lut.service.UserService;</span><br><span class="line">import com.lut.utils.ApplicationContextUtils;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationException;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line">import org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line">import org.apache.shiro.util.ByteSource;</span><br><span class="line">import org.springframework.util.CollectionUtils;</span><br><span class="line">import org.springframework.util.ObjectUtils;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//自定义realm</span><br><span class="line">public class CustomerRealm extends AuthorizingRealm &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;</span><br><span class="line">        //获取身份信息</span><br><span class="line">        String primaryPrincipal = (String) principals.getPrimaryPrincipal();</span><br><span class="line">        System.out.println(&quot;调用授权验证: &quot;+primaryPrincipal);</span><br><span class="line">        //根据主身份信息获取角色 和 权限信息</span><br><span class="line">        UserService userService = (UserService) ApplicationContextUtils.getBean(&quot;userService&quot;);</span><br><span class="line">        User user = userService.findRolesByUserName(primaryPrincipal);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;user:&quot;+user);</span><br><span class="line"></span><br><span class="line">        //授权角色信息</span><br><span class="line">        if(!CollectionUtils.isEmpty(user.getRoles()))&#123;</span><br><span class="line"></span><br><span class="line">            SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">            user.getRoles().forEach(role-&gt;&#123;</span><br><span class="line">                simpleAuthorizationInfo.addRole(role.getName()); //添加角色信息</span><br><span class="line"></span><br><span class="line">                //权限信息</span><br><span class="line">                List&lt;Perms&gt; perms = userService.findPermsByRoleId(role.getId());</span><br><span class="line">                System.out.println(&quot;perms:&quot;+perms);</span><br><span class="line"></span><br><span class="line">                if(!CollectionUtils.isEmpty(perms) &amp;&amp; perms.get(0)!=null )&#123;</span><br><span class="line">                    perms.forEach(perm-&gt;&#123;</span><br><span class="line">                        simpleAuthorizationInfo.addStringPermission(perm.getName());</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            return simpleAuthorizationInfo;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;</span><br><span class="line"></span><br><span class="line">        //根据身份信息//从传过来的token获取到的用户名</span><br><span class="line">        String principal = (String) token.getPrincipal();</span><br><span class="line"></span><br><span class="line">        //在工厂中获取service对象</span><br><span class="line">        UserService userService = (UserService) ApplicationContextUtils.getBean(&quot;userService&quot;);</span><br><span class="line"></span><br><span class="line">        //根据身份信息查询</span><br><span class="line">        User user = userService.findByUserName(principal);</span><br><span class="line">        System.out.println(&quot;User:&quot;+user);</span><br><span class="line"></span><br><span class="line">        //用户不为空</span><br><span class="line">        if(!ObjectUtils.isEmpty(user))&#123;</span><br><span class="line">            //返回数据库信息</span><br><span class="line">            SimpleAuthenticationInfo simpleAuthenticationInfo = new SimpleAuthenticationInfo(user.getUsername(), user.getPassword(),</span><br><span class="line">                    ByteSource.Util.bytes(user.getSalt()), this.getName());</span><br><span class="line">            return simpleAuthenticationInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="11-向数据库添加信息"><a href="#11-向数据库添加信息" class="headerlink" title="11.向数据库添加信息"></a>11.向数据库添加信息</h5><p><img src="https://s2.loli.net/2022/05/01/sD1qEj5ANbFrSM6.png" alt="image-20210130104624195"></p>
<h4 id="简单来说："><a href="#简单来说：" class="headerlink" title="简单来说："></a>简单来说：</h4><p>用户 admin 具有 admin的角色，具有 对于 user，order的所有权限</p>
<p>用户 zhangsan 具有 user的角色，没有权限，只能访问公共资源</p>
<p>用户 usermanager 具有 user_manager的角色，具有 对于 user的所有权限</p>
<p>用户 ordermanager 具有 order_manager的角色，具有 对于 order的所有权限</p>
<p>用户 addinfomanager 具有 addinfo_manager的角色，具有 对于 user,order 的添加权限</p>
<h5 id="12-启动测试"><a href="#12-启动测试" class="headerlink" title="12.启动测试"></a>12.启动测试</h5><p><img src="https://s2.loli.net/2022/05/01/FnrzdLoiSp4JCAB.png" alt="img"></p>
<h3 id="6-9-使用CacheManager"><a href="#6-9-使用CacheManager" class="headerlink" title="6.9 使用CacheManager"></a>6.9 使用CacheManager</h3><h4 id="6-9-1-Cache-作用"><a href="#6-9-1-Cache-作用" class="headerlink" title="6.9.1 Cache 作用"></a>6.9.1 Cache 作用</h4><ul>
<li>Cache 缓存: <strong>计算机内存中一段数据</strong></li>
<li>作用: <strong>用来减轻DB的访问压力,从而提高系统的查询效率</strong></li>
<li>流程:</li>
</ul>
<p><img src="https://s2.loli.net/2022/05/01/zmbuT7xOSkQjrlZ.png" alt="image-20200530090656417"></p>
<h4 id="6-9-2-使用shiro中默认EhCache实现缓存"><a href="#6-9-2-使用shiro中默认EhCache实现缓存" class="headerlink" title="6.9.2 使用shiro中默认EhCache实现缓存"></a>6.9.2 使用shiro中默认EhCache实现缓存</h4><h5 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--引入shiro和ehcache--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.5.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h5 id="2-开启缓存"><a href="#2-开启缓存" class="headerlink" title="2.开启缓存"></a>2.开启缓存</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//3.创建自定义realm</span><br><span class="line">    @Bean</span><br><span class="line">    public Realm getRealm()&#123;</span><br><span class="line">        CustomerRealm customerRealm = new CustomerRealm();</span><br><span class="line">        //修改凭证校验匹配器</span><br><span class="line">        HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();</span><br><span class="line">        //设置加密算法为md5</span><br><span class="line">        credentialsMatcher.setHashAlgorithmName(&quot;MD5&quot;);</span><br><span class="line">        //设置散列次数</span><br><span class="line">        credentialsMatcher.setHashIterations(1024);</span><br><span class="line">        customerRealm.setCredentialsMatcher(credentialsMatcher);</span><br><span class="line"></span><br><span class="line">        //开启缓存管理器</span><br><span class="line">        customerRealm.setCachingEnabled(true);</span><br><span class="line">        customerRealm.setAuthorizationCachingEnabled(true);</span><br><span class="line">        customerRealm.setAuthorizationCachingEnabled(true);</span><br><span class="line">        customerRealm.setCacheManager(new EhCacheManager());</span><br><span class="line">        return customerRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="3-启动刷新页面进行测试"><a href="#3-启动刷新页面进行测试" class="headerlink" title="3.启动刷新页面进行测试"></a>3.启动刷新页面进行测试</h5><ul>
<li>注意:如果控制台没有任何sql展示说明缓存已经开启</li>
</ul>
<h4 id="6-9-3-shiro中使用Redis作为缓存实现"><a href="#6-9-3-shiro中使用Redis作为缓存实现" class="headerlink" title="6.9.3 shiro中使用Redis作为缓存实现"></a>6.9.3 shiro中使用Redis作为缓存实现</h4><h5 id="1-引入redis依赖"><a href="#1-引入redis依赖" class="headerlink" title="1.引入redis依赖"></a>1.引入redis依赖</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--redis整合springboot--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-配置redis连接"><a href="#2-配置redis连接" class="headerlink" title="2.配置redis连接"></a>2.配置redis连接</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>

<h5 id="4-开发RedisCacheManager"><a href="#4-开发RedisCacheManager" class="headerlink" title="4.开发RedisCacheManager"></a>4.开发RedisCacheManager</h5><p><strong>自定义shiro缓存管理器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.shiro.cache;</span><br><span class="line"></span><br><span class="line">import org.apache.shiro.cache.Cache;</span><br><span class="line">import org.apache.shiro.cache.CacheException;</span><br><span class="line">import org.apache.shiro.cache.CacheManager;</span><br><span class="line"></span><br><span class="line">//自定义shiro缓存管理器</span><br><span class="line">public class RedisCacheManager implements CacheManager &#123;</span><br><span class="line"></span><br><span class="line">    //参数1:认证或者是授权缓存的统一名称</span><br><span class="line">    @Override</span><br><span class="line">    public &lt;K, V&gt; Cache&lt;K, V&gt; getCache(String cacheName) throws CacheException &#123;</span><br><span class="line">        System.out.println(cacheName);</span><br><span class="line">        return new RedisCache&lt;K,V&gt;(cacheName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="5-开RedisCache实现"><a href="#5-开RedisCache实现" class="headerlink" title="5.开RedisCache实现"></a>5.开RedisCache实现</h5><p><strong>自定义redis缓存的实现</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.shiro.cache;</span><br><span class="line"></span><br><span class="line">import com.lut.utils.ApplicationContextUtils;</span><br><span class="line">import org.apache.shiro.cache.Cache;</span><br><span class="line">import org.apache.shiro.cache.CacheException;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">//自定义redis缓存的实现</span><br><span class="line">public class RedisCache&lt;k,v&gt; implements Cache&lt;k,v&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private String cacheName;</span><br><span class="line"></span><br><span class="line">    public RedisCache() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public RedisCache(String cacheName) &#123;</span><br><span class="line">        this.cacheName = cacheName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public v get(k k) throws CacheException &#123;</span><br><span class="line">        System.out.println(&quot;get key:&quot;+k);</span><br><span class="line">        return (v) getRedisTemplate().opsForHash().get(this.cacheName,k.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public v put(k k, v v) throws CacheException &#123;</span><br><span class="line">        System.out.println(&quot;put key: &quot;+k);</span><br><span class="line">        System.out.println(&quot;put value:&quot;+v);</span><br><span class="line">        getRedisTemplate().opsForHash().put(this.cacheName,k.toString(),v);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public v remove(k k) throws CacheException &#123;</span><br><span class="line">        System.out.println(&quot;=============remove=============&quot;);</span><br><span class="line">        return (v) getRedisTemplate().opsForHash().delete(this.cacheName,k.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void clear() throws CacheException &#123;</span><br><span class="line">        System.out.println(&quot;=============clear==============&quot;);</span><br><span class="line">        getRedisTemplate().delete(this.cacheName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int size() &#123;</span><br><span class="line">        return getRedisTemplate().opsForHash().size(this.cacheName).intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Set&lt;k&gt; keys() &#123;</span><br><span class="line">        return getRedisTemplate().opsForHash().keys(this.cacheName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Collection&lt;v&gt; values() &#123;</span><br><span class="line">        return getRedisTemplate().opsForHash().values(this.cacheName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private RedisTemplate getRedisTemplate()&#123;</span><br><span class="line">        RedisTemplate redisTemplate = (RedisTemplate) ApplicationContextUtils.getBean(&quot;redisTemplate&quot;);</span><br><span class="line">        redisTemplate.setKeySerializer(new StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashKeySerializer(new StringRedisSerializer());</span><br><span class="line">        return redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-启动项目测试发现报错"><a href="#6-启动项目测试发现报错" class="headerlink" title="6.启动项目测试发现报错"></a>6.启动项目测试发现报错</h5><p><img src="https://s2.loli.net/2022/05/01/ifd1mcp4w8UWoyJ.png" alt="image-20200530100850618"></p>
<p><img src="https://s2.loli.net/2022/05/01/lG7Z5oK6vQxeirc.png" alt="image-20200530100948598"></p>
<ul>
<li><p>错误解释: <strong>由于shiro中提供的simpleByteSource实现没有实现序列化,所有在认证时出现错误信息</strong></p>
</li>
<li><p>解决方案: <strong>需要自动salt实现序列化</strong></p>
<ul>
<li><p>实现 实体类 序列化</p>
</li>
<li><p><strong>自定义salt实现 实现序列化接口</strong></p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.shiro.salt;</span><br><span class="line"></span><br><span class="line">import org.apache.shiro.codec.Base64;</span><br><span class="line">import org.apache.shiro.codec.CodecSupport;</span><br><span class="line">import org.apache.shiro.codec.Hex;</span><br><span class="line">import org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">//自定义salt实现 实现序列化接口</span><br><span class="line">public class MyByteSource implements ByteSource, Serializable &#123;</span><br><span class="line">  private  byte[] bytes;</span><br><span class="line">  private String cachedHex;</span><br><span class="line">  private String cachedBase64;</span><br><span class="line">  </span><br><span class="line">  public MyByteSource()&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public MyByteSource(byte[] bytes) &#123;</span><br><span class="line">      this.bytes = bytes;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public MyByteSource(char[] chars) &#123;</span><br><span class="line">      this.bytes = CodecSupport.toBytes(chars);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public MyByteSource(String string) &#123;</span><br><span class="line">      this.bytes = CodecSupport.toBytes(string);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public MyByteSource(ByteSource source) &#123;</span><br><span class="line">      this.bytes = source.getBytes();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public MyByteSource(File file) &#123;</span><br><span class="line">      this.bytes = (new com.lut.shiro.salt.MyByteSource.BytesHelper()).getBytes(file);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public MyByteSource(InputStream stream) &#123;</span><br><span class="line">      this.bytes = (new com.lut.shiro.salt.MyByteSource.BytesHelper()).getBytes(stream);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public static boolean isCompatible(Object o) &#123;</span><br><span class="line">      return o instanceof byte[] || o instanceof char[] || o instanceof String || o instanceof ByteSource || o instanceof File || o instanceof InputStream;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public byte[] getBytes() &#123;</span><br><span class="line">      return this.bytes;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public boolean isEmpty() &#123;</span><br><span class="line">      return this.bytes == null || this.bytes.length == 0;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public String toHex() &#123;</span><br><span class="line">      if (this.cachedHex == null) &#123;</span><br><span class="line">          this.cachedHex = Hex.encodeToString(this.getBytes());</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      return this.cachedHex;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public String toBase64() &#123;</span><br><span class="line">      if (this.cachedBase64 == null) &#123;</span><br><span class="line">          this.cachedBase64 = Base64.encodeToString(this.getBytes());</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      return this.cachedBase64;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public String toString() &#123;</span><br><span class="line">      return this.toBase64();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public int hashCode() &#123;</span><br><span class="line">      return this.bytes != null &amp;&amp; this.bytes.length != 0 ? Arrays.hashCode(this.bytes) : 0;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public boolean equals(Object o) &#123;</span><br><span class="line">      if (o == this) &#123;</span><br><span class="line">          return true;</span><br><span class="line">      &#125; else if (o instanceof ByteSource) &#123;</span><br><span class="line">          ByteSource bs = (ByteSource)o;</span><br><span class="line">          return Arrays.equals(this.getBytes(), bs.getBytes());</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          return false;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  private static final class BytesHelper extends CodecSupport &#123;</span><br><span class="line">      private BytesHelper() &#123;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public byte[] getBytes(File file) &#123;</span><br><span class="line">          return this.toBytes(file);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public byte[] getBytes(InputStream stream) &#123;</span><br><span class="line">          return this.toBytes(stream);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在realm中使用自定义salt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;</span><br><span class="line">  System.out.println(&quot;==========================&quot;);</span><br><span class="line">  //根据身份信息</span><br><span class="line">  String principal = (String) token.getPrincipal();</span><br><span class="line">  //在工厂中获取service对象</span><br><span class="line">  UserService userService = (UserService) ApplicationContextUtils.getBean(&quot;userService&quot;);</span><br><span class="line">  User user = userService.findByUserName(principal);</span><br><span class="line">  if(!ObjectUtils.isEmpty(user))&#123;</span><br><span class="line">    return new SimpleAuthenticationInfo(user.getUsername(),user.getPassword(), </span><br><span class="line">                                      new MyByteSource(user.getSalt()),this.getName());</span><br><span class="line">  &#125;</span><br><span class="line">  return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-再次启动测试-发现可以成功放入redis缓存"><a href="#7-再次启动测试-发现可以成功放入redis缓存" class="headerlink" title="7.再次启动测试,发现可以成功放入redis缓存"></a>7.再次启动测试,发现可以成功放入redis缓存</h5><h4 id="6-9-4-加入验证码验证"><a href="#6-9-4-加入验证码验证" class="headerlink" title="6.9.4 加入验证码验证"></a>6.9.4 加入验证码验证</h4><h5 id="1-验证码工具类"><a href="#1-验证码工具类" class="headerlink" title="1.验证码工具类"></a>1.验证码工具类</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lut.utils;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import java.awt.*;</span><br><span class="line">import java.awt.geom.AffineTransform;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *@创建人  cx</span><br><span class="line"> *@创建时间  2018/11/27 17:36</span><br><span class="line"> *@描述   验证码生成</span><br><span class="line"> */</span><br><span class="line">public class VerifyCodeUtils&#123;</span><br><span class="line"></span><br><span class="line">    //使用到Algerian字体，系统里没有的话需要安装字体，字体只显示大写，去掉了1,0,i,o几个容易混淆的字符</span><br><span class="line">    public static final String VERIFY_CODES = &quot;23456789ABCDEFGHJKLMNPQRSTUVWXYZ&quot;;</span><br><span class="line">    private static Random random = new Random();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 使用系统默认字符源生成验证码</span><br><span class="line">     * @param verifySize    验证码长度</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String generateVerifyCode(int verifySize)&#123;</span><br><span class="line">        return generateVerifyCode(verifySize, VERIFY_CODES);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 使用指定源生成验证码</span><br><span class="line">     * @param verifySize    验证码长度</span><br><span class="line">     * @param sources   验证码字符源</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String generateVerifyCode(int verifySize, String sources)&#123;</span><br><span class="line">        if(sources == null || sources.length() == 0)&#123;</span><br><span class="line">            sources = VERIFY_CODES;</span><br><span class="line">        &#125;</span><br><span class="line">        int codesLen = sources.length();</span><br><span class="line">        Random rand = new Random(System.currentTimeMillis());</span><br><span class="line">        StringBuilder verifyCode = new StringBuilder(verifySize);</span><br><span class="line">        for(int i = 0; i &lt; verifySize; i++)&#123;</span><br><span class="line">            verifyCode.append(sources.charAt(rand.nextInt(codesLen-1)));</span><br><span class="line">        &#125;</span><br><span class="line">        return verifyCode.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成随机验证码文件,并返回验证码值</span><br><span class="line">     * @param w</span><br><span class="line">     * @param h</span><br><span class="line">     * @param outputFile</span><br><span class="line">     * @param verifySize</span><br><span class="line">     * @return</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public static String outputVerifyImage(int w, int h, File outputFile, int verifySize) throws IOException&#123;</span><br><span class="line">        String verifyCode = generateVerifyCode(verifySize);</span><br><span class="line">        outputImage(w, h, outputFile, verifyCode);</span><br><span class="line">        return verifyCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 输出随机验证码图片流,并返回验证码值</span><br><span class="line">     * @param w</span><br><span class="line">     * @param h</span><br><span class="line">     * @param os</span><br><span class="line">     * @param verifySize</span><br><span class="line">     * @return</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public static String outputVerifyImage(int w, int h, OutputStream os, int verifySize) throws IOException&#123;</span><br><span class="line">        String verifyCode = generateVerifyCode(verifySize);</span><br><span class="line">        outputImage(w, h, os, verifyCode);</span><br><span class="line">        return verifyCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成指定验证码图像文件</span><br><span class="line">     * @param w</span><br><span class="line">     * @param h</span><br><span class="line">     * @param outputFile</span><br><span class="line">     * @param code</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public static void outputImage(int w, int h, File outputFile, String code) throws IOException&#123;</span><br><span class="line">        if(outputFile == null)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        File dir = outputFile.getParentFile();</span><br><span class="line">        if(!dir.exists())&#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        try&#123;</span><br><span class="line">            outputFile.createNewFile();</span><br><span class="line">            FileOutputStream fos = new FileOutputStream(outputFile);</span><br><span class="line">            outputImage(w, h, fos, code);</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; catch(IOException e)&#123;</span><br><span class="line">            throw e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 输出指定验证码图片流</span><br><span class="line">     * @param w</span><br><span class="line">     * @param h</span><br><span class="line">     * @param os</span><br><span class="line">     * @param code</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public static void outputImage(int w, int h, OutputStream os, String code) throws IOException&#123;</span><br><span class="line">        int verifySize = code.length();</span><br><span class="line">        BufferedImage image = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        Random rand = new Random();</span><br><span class="line">        Graphics2D g2 = image.createGraphics();</span><br><span class="line">        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);</span><br><span class="line">        Color[] colors = new Color[5];</span><br><span class="line">        Color[] colorSpaces = new Color[] &#123; Color.WHITE, Color.CYAN,</span><br><span class="line">                Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA, Color.ORANGE,</span><br><span class="line">                Color.PINK, Color.YELLOW &#125;;</span><br><span class="line">        float[] fractions = new float[colors.length];</span><br><span class="line">        for(int i = 0; i &lt; colors.length; i++)&#123;</span><br><span class="line">            colors[i] = colorSpaces[rand.nextInt(colorSpaces.length)];</span><br><span class="line">            fractions[i] = rand.nextFloat();</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(fractions);</span><br><span class="line"></span><br><span class="line">        g2.setColor(Color.GRAY);// 设置边框色</span><br><span class="line">        g2.fillRect(0, 0, w, h);</span><br><span class="line"></span><br><span class="line">        Color c = getRandColor(200, 250);</span><br><span class="line">        g2.setColor(c);// 设置背景色</span><br><span class="line">        g2.fillRect(0, 2, w, h-4);</span><br><span class="line"></span><br><span class="line">        //绘制干扰线</span><br><span class="line">        Random random = new Random();</span><br><span class="line">        g2.setColor(getRandColor(160, 200));// 设置线条的颜色</span><br><span class="line">        for (int i = 0; i &lt; 20; i++) &#123;</span><br><span class="line">            int x = random.nextInt(w - 1);</span><br><span class="line">            int y = random.nextInt(h - 1);</span><br><span class="line">            int xl = random.nextInt(6) + 1;</span><br><span class="line">            int yl = random.nextInt(12) + 1;</span><br><span class="line">            g2.drawLine(x, y, x + xl + 40, y + yl + 20);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 添加噪点</span><br><span class="line">        float yawpRate = 0.05f;// 噪声率</span><br><span class="line">        int area = (int) (yawpRate * w * h);</span><br><span class="line">        for (int i = 0; i &lt; area; i++) &#123;</span><br><span class="line">            int x = random.nextInt(w);</span><br><span class="line">            int y = random.nextInt(h);</span><br><span class="line">            int rgb = getRandomIntColor();</span><br><span class="line">            image.setRGB(x, y, rgb);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        shear(g2, w, h, c);// 使图片扭曲</span><br><span class="line"></span><br><span class="line">        g2.setColor(getRandColor(100, 160));</span><br><span class="line">        int fontSize = h-4;</span><br><span class="line">        Font font = new Font(&quot;Algerian&quot;, Font.ITALIC, fontSize);</span><br><span class="line">        g2.setFont(font);</span><br><span class="line">        char[] chars = code.toCharArray();</span><br><span class="line">        for(int i = 0; i &lt; verifySize; i++)&#123;</span><br><span class="line">            AffineTransform affine = new AffineTransform();</span><br><span class="line">            affine.setToRotation(Math.PI / 4 * rand.nextDouble() * (rand.nextBoolean() ? 1 : -1), (w / verifySize) * i + fontSize/2, h/2);</span><br><span class="line">            g2.setTransform(affine);</span><br><span class="line">            g2.drawChars(chars, i, 1, ((w-10) / verifySize) * i + 5, h/2 + fontSize/2 - 10);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        g2.dispose();</span><br><span class="line">        ImageIO.write(image, &quot;jpg&quot;, os);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Color getRandColor(int fc, int bc) &#123;</span><br><span class="line">        if (fc &gt; 255)</span><br><span class="line">            fc = 255;</span><br><span class="line">        if (bc &gt; 255)</span><br><span class="line">            bc = 255;</span><br><span class="line">        int r = fc + random.nextInt(bc - fc);</span><br><span class="line">        int g = fc + random.nextInt(bc - fc);</span><br><span class="line">        int b = fc + random.nextInt(bc - fc);</span><br><span class="line">        return new Color(r, g, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static int getRandomIntColor() &#123;</span><br><span class="line">        int[] rgb = getRandomRgb();</span><br><span class="line">        int color = 0;</span><br><span class="line">        for (int c : rgb) &#123;</span><br><span class="line">            color = color &lt;&lt; 8;</span><br><span class="line">            color = color | c;</span><br><span class="line">        &#125;</span><br><span class="line">        return color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static int[] getRandomRgb() &#123;</span><br><span class="line">        int[] rgb = new int[3];</span><br><span class="line">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">            rgb[i] = random.nextInt(255);</span><br><span class="line">        &#125;</span><br><span class="line">        return rgb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void shear(Graphics g, int w1, int h1, Color color) &#123;</span><br><span class="line">        shearX(g, w1, h1, color);</span><br><span class="line">        shearY(g, w1, h1, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void shearX(Graphics g, int w1, int h1, Color color) &#123;</span><br><span class="line"></span><br><span class="line">        int period = random.nextInt(2);</span><br><span class="line"></span><br><span class="line">        boolean borderGap = true;</span><br><span class="line">        int frames = 1;</span><br><span class="line">        int phase = random.nextInt(2);</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; h1; i++) &#123;</span><br><span class="line">            double d = (double) (period &gt;&gt; 1)</span><br><span class="line">                    * Math.sin((double) i / (double) period</span><br><span class="line">                    + (6.2831853071795862D * (double) phase)</span><br><span class="line">                    / (double) frames);</span><br><span class="line">            g.copyArea(0, i, w1, 1, (int) d, 0);</span><br><span class="line">            if (borderGap) &#123;</span><br><span class="line">                g.setColor(color);</span><br><span class="line">                g.drawLine((int) d, i, 0, i);</span><br><span class="line">                g.drawLine((int) d + w1, i, w1, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void shearY(Graphics g, int w1, int h1, Color color) &#123;</span><br><span class="line"></span><br><span class="line">        int period = random.nextInt(40) + 10; // 50;</span><br><span class="line"></span><br><span class="line">        boolean borderGap = true;</span><br><span class="line">        int frames = 20;</span><br><span class="line">        int phase = 7;</span><br><span class="line">        for (int i = 0; i &lt; w1; i++) &#123;</span><br><span class="line">            double d = (double) (period &gt;&gt; 1)</span><br><span class="line">                    * Math.sin((double) i / (double) period</span><br><span class="line">                    + (6.2831853071795862D * (double) phase)</span><br><span class="line">                    / (double) frames);</span><br><span class="line">            g.copyArea(i, 0, 1, h1, 0, (int) d);</span><br><span class="line">            if (borderGap) &#123;</span><br><span class="line">                g.setColor(color);</span><br><span class="line">                g.drawLine(i, (int) d, i, 0);</span><br><span class="line">                g.drawLine(i, (int) d + h1, i, h1);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //获取验证码</span><br><span class="line">        String s = generateVerifyCode(4);</span><br><span class="line">        //将验证码放入图片中</span><br><span class="line">        outputImage(260,60,new File(&quot;/Users/chenyannan/Desktop/安工资料/aa.jpg&quot;),s);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-开发页面加入验证码"><a href="#2-开发页面加入验证码" class="headerlink" title="2.开发页面加入验证码"></a>2.开发页面加入验证码</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    用户名:&lt;input type=&quot;text&quot; name=&quot;username&quot; &gt; &lt;br/&gt;</span><br><span class="line">    密码  : &lt;input type=&quot;text&quot; name=&quot;password&quot;&gt; &lt;br&gt;</span><br><span class="line">    请输入验证码: &lt;input type=&quot;text&quot; name=&quot;code&quot;&gt;&lt;img src=&quot;$&#123;pageContext.request.contextPath&#125;/user/getImage&quot; alt=&quot;&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h5 id="3-开发控制器"><a href="#3-开发控制器" class="headerlink" title="3.开发控制器"></a>3.开发控制器</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;getImage&quot;)</span><br><span class="line">public void getImage(HttpSession session, HttpServletResponse response) throws IOException &#123;</span><br><span class="line">  //生成验证码</span><br><span class="line">  String code = VerifyCodeUtils.generateVerifyCode(4);</span><br><span class="line">  //验证码放入session</span><br><span class="line">  session.setAttribute(&quot;code&quot;,code);</span><br><span class="line">  //验证码存入图片</span><br><span class="line">  ServletOutputStream os = response.getOutputStream();</span><br><span class="line">  response.setContentType(&quot;image/png&quot;);</span><br><span class="line">  VerifyCodeUtils.outputImage(220,60,os,code);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-放行验证码"><a href="#4-放行验证码" class="headerlink" title="4.放行验证码"></a>4.放行验证码</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">map.put(&quot;/user/getImage&quot;,&quot;anon&quot;);//验证码</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/05/01/3C7f6ILnEmQDJae.png" alt="img"></p>
<h5 id="5-修改认证流程"><a href="#5-修改认证流程" class="headerlink" title="5.修改认证流程"></a>5.修改认证流程</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;login&quot;)</span><br><span class="line">    public String login(String username, String password,String code,HttpSession session) &#123;</span><br><span class="line">        //比较验证码</span><br><span class="line">        String codes = (String) session.getAttribute(&quot;code&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            if (codes.equalsIgnoreCase(code))&#123;</span><br><span class="line">                //获取主体对象</span><br><span class="line">                Subject subject = SecurityUtils.getSubject();</span><br><span class="line">                    subject.login(new UsernamePasswordToken(username, password));</span><br><span class="line">                    return &quot;redirect:/index.jsp&quot;;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                throw new RuntimeException(&quot;验证码错误!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (UnknownAccountException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;用户名错误!&quot;);</span><br><span class="line">        &#125; catch (IncorrectCredentialsException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;密码错误!&quot;);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;redirect:/login.jsp&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-修改salt不能序列化的问题"><a href="#6-修改salt不能序列化的问题" class="headerlink" title="6.修改salt不能序列化的问题"></a>6.修改salt不能序列化的问题</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//自定义salt实现  实现序列化接口</span><br><span class="line">public class MyByteSource implements ByteSource,Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private  byte[] bytes;</span><br><span class="line">    private String cachedHex;</span><br><span class="line">    private String cachedBase64;</span><br><span class="line"></span><br><span class="line">    //加入无参数构造方法实现序列化和反序列化</span><br><span class="line">    public MyByteSource()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyByteSource(byte[] bytes) &#123;</span><br><span class="line">        this.bytes = bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyByteSource(char[] chars) &#123;</span><br><span class="line">        this.bytes = CodecSupport.toBytes(chars);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyByteSource(String string) &#123;</span><br><span class="line">        this.bytes = CodecSupport.toBytes(string);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyByteSource(ByteSource source) &#123;</span><br><span class="line">        this.bytes = source.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyByteSource(File file) &#123;</span><br><span class="line">        this.bytes = (new MyByteSource.BytesHelper()).getBytes(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyByteSource(InputStream stream) &#123;</span><br><span class="line">        this.bytes = (new MyByteSource.BytesHelper()).getBytes(stream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static boolean isCompatible(Object o) &#123;</span><br><span class="line">        return o instanceof byte[] || o instanceof char[] || o instanceof String || o instanceof ByteSource || o instanceof File || o instanceof InputStream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public byte[] getBytes() &#123;</span><br><span class="line">        return this.bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isEmpty() &#123;</span><br><span class="line">        return this.bytes == null || this.bytes.length == 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toHex() &#123;</span><br><span class="line">        if (this.cachedHex == null) &#123;</span><br><span class="line">            this.cachedHex = Hex.encodeToString(this.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return this.cachedHex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toBase64() &#123;</span><br><span class="line">        if (this.cachedBase64 == null) &#123;</span><br><span class="line">            this.cachedBase64 = Base64.encodeToString(this.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return this.cachedBase64;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return this.toBase64();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        return this.bytes != null &amp;&amp; this.bytes.length != 0 ? Arrays.hashCode(this.bytes) : 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (o == this) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else if (o instanceof ByteSource) &#123;</span><br><span class="line">            ByteSource bs = (ByteSource)o;</span><br><span class="line">            return Arrays.equals(this.getBytes(), bs.getBytes());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static final class BytesHelper extends CodecSupport &#123;</span><br><span class="line">        private BytesHelper() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public byte[] getBytes(File file) &#123;</span><br><span class="line">            return this.toBytes(file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public byte[] getBytes(InputStream stream) &#123;</span><br><span class="line">            return this.toBytes(stream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-启动测试"><a href="#7-启动测试" class="headerlink" title="7.启动测试"></a>7.启动测试</h5><p><img src="https://s2.loli.net/2022/05/01/MEDYGpr9lcTnfqA.png" alt="image-20210130145447628"></p>
<h4 id="6-9-5-JSP中Shiro常用标签"><a href="#6-9-5-JSP中Shiro常用标签" class="headerlink" title="6.9.5 JSP中Shiro常用标签"></a>6.9.5 JSP中Shiro常用标签</h4><p>此模块参考：<a href="https://www.cnblogs.com/fancongcong/p/8093258.html">https://www.cnblogs.com/fancongcong/p/8093258.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;shiro:guest&gt;</span><br><span class="line">    游客访问 &lt;a href = &quot;login.jsp&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;/shiro:guest&gt;</span><br><span class="line"> </span><br><span class="line">user 标签：用户已经通过认证\记住我 登录后显示响应的内容</span><br><span class="line">&lt;shiro:user&gt;</span><br><span class="line">    欢迎[&lt;shiro:principal/&gt;]登录 &lt;a href = &quot;logout&quot;&gt;退出&lt;/a&gt;</span><br><span class="line">&lt;/shiro:user&gt;</span><br><span class="line"> </span><br><span class="line">authenticated标签：用户身份验证通过，即 Subjec.login 登录成功 不是记住我登录的</span><br><span class="line">&lt;shiro:authenticted&gt;</span><br><span class="line">    用户[&lt;shiro:principal/&gt;] 已身份验证通过</span><br><span class="line">&lt;/shiro:authenticted&gt;</span><br><span class="line"> </span><br><span class="line">notAuthenticated标签：用户未进行身份验证，即没有调用Subject.login进行登录,包括&quot;记住我&quot;也属于未进行身份验证</span><br><span class="line">&lt;shiro:notAuthenticated&gt;</span><br><span class="line">    未身份验证(包括&quot;记住我&quot;)</span><br><span class="line">&lt;/shiro:notAuthenticated&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">principal 标签：显示用户身份信息，默认调用</span><br><span class="line">Subjec.getPrincipal()获取，即Primary Principal</span><br><span class="line">&lt;shiro:principal property = &quot;username&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">hasRole标签：如果当前Subject有角色将显示body体内的内容</span><br><span class="line">&lt;shiro:hashRole name = &quot;admin&quot;&gt;</span><br><span class="line">    用户[&lt;shiro:principal/&gt;]拥有角色admin</span><br><span class="line">&lt;/shiro:hashRole&gt;</span><br><span class="line"> </span><br><span class="line">hasAnyRoles标签：如果Subject有任意一个角色(或的关系)将显示body体里的内容</span><br><span class="line">&lt;shiro:hasAnyRoles name = &quot;admin,user&quot;&gt;</span><br><span class="line">    用户[&lt;shiro:pricipal/&gt;]拥有角色admin 或者 user</span><br><span class="line">&lt;/shiro:hasAnyRoles&gt;</span><br><span class="line"> </span><br><span class="line">lacksRole:如果当前 Subjec没有角色将显示body体内的内容</span><br><span class="line">&lt;shiro:lacksRole name = &quot;admin&quot;&gt;</span><br><span class="line">    用户[&lt;shiro:pricipal/&gt;]没有角色admin</span><br><span class="line">&lt;/shiro:lacksRole&gt;</span><br><span class="line"> </span><br><span class="line">hashPermission:如果当前Subject有权限将显示body体内容</span><br><span class="line">&lt;shiro:hashPermission name = &quot;user:create&quot;&gt;</span><br><span class="line">    用户[&lt;shiro:pricipal/&gt;] 拥有权限user:create</span><br><span class="line">&lt;/shiro:hashPermission&gt;</span><br><span class="line"> </span><br><span class="line">lacksPermission:如果当前Subject没有权限将显示body体内容</span><br><span class="line">&lt;shiro:lacksPermission name = &quot;org:create&quot;&gt;</span><br><span class="line">    用户[&lt;shiro:pricipal/&gt;] 没有权限org:create</span><br><span class="line">&lt;/shiro:lacksPermission&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="七、Shiro整合springboot之thymeleaf权限控制"><a href="#七、Shiro整合springboot之thymeleaf权限控制" class="headerlink" title="七、Shiro整合springboot之thymeleaf权限控制"></a>七、Shiro整合springboot之thymeleaf权限控制</h2><h3 id="1-引入扩展依赖"><a href="#1-引入扩展依赖" class="headerlink" title="1.引入扩展依赖"></a>1.引入扩展依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.theborakompanioni&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;thymeleaf-extras-shiro&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-页面中引入命名空间"><a href="#2-页面中引入命名空间" class="headerlink" title="2.页面中引入命名空间"></a>2.页面中引入命名空间</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xmlns:shiro=“http://www.pollix.at/thymeleaf/shiro”</span><br><span class="line"></span><br><span class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br><span class="line">      xmlns:shiro=&quot;http://www.pollix.at/thymeleaf/shiro&quot;&gt;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<h3 id="3-常见权限控制标签使用"><a href="#3-常见权限控制标签使用" class="headerlink" title="3.常见权限控制标签使用"></a>3.常见权限控制标签使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 验证当前用户是否为“访客”，即未认证（包含未记住）的用户。 --&gt;</span><br><span class="line">&lt;p shiro:guest=&quot;&quot;&gt;Please &lt;a href=&quot;login.html&quot;&gt;login&lt;/a&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 认证通过或已记住的用户。 --&gt;</span><br><span class="line">&lt;p shiro:user=&quot;&quot;&gt;</span><br><span class="line">    Welcome back John! Not John? Click &lt;a href=&quot;login.html&quot;&gt;here&lt;/a&gt; to login.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 已认证通过的用户。不包含已记住的用户，这是与user标签的区别所在。 --&gt;</span><br><span class="line">&lt;p shiro:authenticated=&quot;&quot;&gt;</span><br><span class="line">    Hello, &lt;span shiro:principal=&quot;&quot;&gt;&lt;/span&gt;, how are you today?</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;a shiro:authenticated=&quot;&quot; href=&quot;updateAccount.html&quot;&gt;Update your contact information&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 输出当前用户信息，通常为登录帐号信息。 --&gt;</span><br><span class="line">&lt;p&gt;Hello, &lt;shiro:principal/&gt;, how are you today?&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 未认证通过用户，与authenticated标签相对应。与guest标签的区别是，该标签包含已记住用户。 --&gt;</span><br><span class="line">&lt;p shiro:notAuthenticated=&quot;&quot;&gt;</span><br><span class="line">    Please &lt;a href=&quot;login.html&quot;&gt;login&lt;/a&gt; in order to update your credit card information.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 验证当前用户是否属于该角色。 --&gt;</span><br><span class="line">&lt;a shiro:hasRole=&quot;admin&quot; href=&quot;admin.html&quot;&gt;Administer the system&lt;/a&gt;&lt;!-- 拥有该角色 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 与hasRole标签逻辑相反，当用户不属于该角色时验证通过。 --&gt;</span><br><span class="line">&lt;p shiro:lacksRole=&quot;developer&quot;&gt;&lt;!-- 没有该角色 --&gt;</span><br><span class="line">    Sorry, you are not allowed to developer the system.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 验证当前用户是否属于以下所有角色。 --&gt;</span><br><span class="line">&lt;p shiro:hasAllRoles=&quot;developer, 2&quot;&gt;&lt;!-- 角色与判断 --&gt;</span><br><span class="line">    You are a developer and a admin.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 验证当前用户是否属于以下任意一个角色。  --&gt;</span><br><span class="line">&lt;p shiro:hasAnyRoles=&quot;admin, vip, developer,1&quot;&gt;&lt;!-- 角色或判断 --&gt;</span><br><span class="line">    You are a admin, vip, or developer.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--验证当前用户是否拥有指定权限。  --&gt;</span><br><span class="line">&lt;a shiro:hasPermission=&quot;userInfo:add&quot; href=&quot;createUser.html&quot;&gt;添加用户&lt;/a&gt;&lt;!-- 拥有权限 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 与hasPermission标签逻辑相反，当前用户没有制定权限时，验证通过。 --&gt;</span><br><span class="line">&lt;p shiro:lacksPermission=&quot;userInfo:del&quot;&gt;&lt;!-- 没有权限 --&gt;</span><br><span class="line">    Sorry, you are not allowed to delete user accounts.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 验证当前用户是否拥有以下所有角色。 --&gt;</span><br><span class="line">&lt;p shiro:hasAllPermissions=&quot;userInfo:view, userInfo:add&quot;&gt;&lt;!-- 权限与判断 --&gt;</span><br><span class="line">    You can see or add users.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 验证当前用户是否拥有以下任意一个权限。  --&gt;</span><br><span class="line">&lt;p shiro:hasAnyPermissions=&quot;userInfo:view, userInfo:del&quot;&gt;&lt;!-- 权限或判断 --&gt;</span><br><span class="line">    You can see or delete users.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;a shiro:hasPermission=&quot;pp&quot; href=&quot;createUser.html&quot;&gt;Create a new User&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-加入shiro的方言配置"><a href="#4-加入shiro的方言配置" class="headerlink" title="4.加入shiro的方言配置"></a>4.加入shiro的方言配置</h3><ul>
<li><strong>页面标签不起作用一定要记住加入方言处理</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean(name = &quot;shiroDialect&quot;)</span><br><span class="line">public ShiroDialect shiroDialect()&#123;</span><br><span class="line">  return new ShiroDialect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/05/25/QJE9sIGt1nwkfOD.png" alt="image-20200601210335151"></p>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>shiro</category>
        <category>安全</category>
      </categories>
  </entry>
  <entry>
    <title>swagger学习记录</title>
    <url>/2022/03/14/swagger%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="SpringBoot集成Swagger"><a href="#SpringBoot集成Swagger" class="headerlink" title="SpringBoot集成Swagger"></a>SpringBoot集成Swagger</h1><p><strong>SpringBoot集成Swagger</strong> =&gt; <strong>springfox</strong>，两个jar包</p>
<ul>
<li><strong>Springfox-swagger2</strong></li>
<li>swagger-springmvc</li>
</ul>
<p><strong>使用Swagger</strong></p>
<p>要求：jdk 1.8 + 否则swagger2无法运行</p>
<p>步骤：</p>
<p>1、新建一个SpringBoot-web项目</p>
<p>2、添加Maven依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>3、编写HelloController，测试确保运行成功！</p>
<p>4、要使用Swagger，我们需要编写一个配置类-SwaggerConfig来配置 Swagger</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration //配置类</span><br><span class="line">@EnableSwagger2// 开启Swagger2的自动配置</span><br><span class="line">public class SwaggerConfig &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、访问测试 ：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> ，可以看到swagger的界面；</p>
<p><img src="https://s2.loli.net/2022/03/14/wVUuxI5THJApdXL.png" alt="image-20220314220539879"></p>
<blockquote>
<h3 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h3></blockquote>
<p>1、Swagger实例Bean是Docket，所以通过配置Docket实例来配置Swaggger。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean //配置docket以配置Swagger具体参数</span><br><span class="line">public Docket docket() &#123;</span><br><span class="line">   return new Docket(DocumentationType.SWAGGER_2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、可以通过apiInfo()属性配置文档信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//配置文档信息</span><br><span class="line">private ApiInfo apiInfo() &#123;</span><br><span class="line">   Contact contact = new Contact(&quot;联系人名字&quot;, &quot;http://xxx.xxx.com/联系人访问链接&quot;, &quot;联系人邮箱&quot;);</span><br><span class="line">   return new ApiInfo(</span><br><span class="line">           &quot;Swagger学习&quot;, // 标题</span><br><span class="line">           &quot;学习演示如何配置Swagger&quot;, // 描述</span><br><span class="line">           &quot;v1.0&quot;, // 版本</span><br><span class="line">           &quot;http://terms.service.url/组织链接&quot;, // 组织链接</span><br><span class="line">           contact, // 联系人信息</span><br><span class="line">           &quot;Apach 2.0 许可&quot;, // 许可</span><br><span class="line">           &quot;许可链接&quot;, // 许可连接</span><br><span class="line">           new ArrayList&lt;&gt;()// 扩展</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、Docket 实例关联上 apiInfo()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Docket docket() &#123;</span><br><span class="line">   return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、重启项目，访问测试 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a>  看下效果；</p>
<blockquote>
<h3 id="配置扫描接口"><a href="#配置扫描接口" class="headerlink" title="配置扫描接口"></a>配置扫描接口</h3></blockquote>
<p>1、构建Docket时通过select()方法配置怎么扫描接口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Docket docket() &#123;</span><br><span class="line">   return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .select()// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br><span class="line">      .apis(RequestHandlerSelectors.basePackage(&quot;com.kuang.swagger.controller&quot;))</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、重启项目测试，由于我们配置根据包的路径扫描接口，所以我们只能看到一个类</p>
<p>3、除了通过包路径配置扫描接口外，还可以通过配置其他方式扫描接口，这里注释一下所有的配置方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">any() // 扫描所有，项目中的所有接口都会被扫描到</span><br><span class="line">none() // 不扫描接口</span><br><span class="line">// 通过方法上的注解扫描，如withMethodAnnotation(GetMapping.class)只扫描get请求</span><br><span class="line">withMethodAnnotation(final Class&lt;? extends Annotation&gt; annotation)</span><br><span class="line">// 通过类上的注解扫描，如.withClassAnnotation(Controller.class)只扫描有controller注解的类中的接口</span><br><span class="line">withClassAnnotation(final Class&lt;? extends Annotation&gt; annotation)</span><br><span class="line">basePackage(final String basePackage) // 根据包路径扫描接口</span><br></pre></td></tr></table></figure>

<p>4、除此之外，我们还可以配置接口扫描过滤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Docket docket() &#123;</span><br><span class="line">   return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .select()// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br><span class="line">      .apis(RequestHandlerSelectors.basePackage(&quot;com.kuang.swagger.controller&quot;))</span><br><span class="line">       // 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span><br><span class="line">      .paths(PathSelectors.ant(&quot;/kuang/**&quot;))</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、这里的可选值还有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">any() // 任何请求都扫描</span><br><span class="line">none() // 任何请求都不扫描</span><br><span class="line">regex(final String pathRegex) // 通过正则表达式控制</span><br><span class="line">ant(final String antPattern) // 通过ant()控制</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="配置Swagger开关"><a href="#配置Swagger开关" class="headerlink" title="配置Swagger开关"></a>配置Swagger开关</h3></blockquote>
<p>1、通过enable()方法配置是否启用swagger，如果是false，swagger将不能在浏览器中访问了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Docket docket() &#123;</span><br><span class="line">   return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .enable(false) //配置是否启用Swagger，如果是false，在浏览器将无法访问</span><br><span class="line">      .select()// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br><span class="line">      .apis(RequestHandlerSelectors.basePackage(&quot;com.kuang.swagger.controller&quot;))</span><br><span class="line">       // 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span><br><span class="line">      .paths(PathSelectors.ant(&quot;/kuang/**&quot;))</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、如何动态配置当项目处于test、dev环境时显示swagger，处于prod时不显示？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Docket docket(Environment environment) &#123;</span><br><span class="line">   // 设置要显示swagger的环境</span><br><span class="line">   Profiles of = Profiles.of(&quot;dev&quot;, &quot;test&quot;);</span><br><span class="line">   // 判断当前是否处于该环境</span><br><span class="line">   // 通过 enable() 接收此参数判断是否要显示</span><br><span class="line">   boolean b = environment.acceptsProfiles(of);</span><br><span class="line">   </span><br><span class="line">   return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .enable(b) //配置是否启用Swagger，如果是false，在浏览器将无法访问</span><br><span class="line">      .select()// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br><span class="line">      .apis(RequestHandlerSelectors.basePackage(&quot;com.kuang.swagger.controller&quot;))</span><br><span class="line">       // 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span><br><span class="line">      .paths(PathSelectors.ant(&quot;/kuang/**&quot;))</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、可以在项目中增加一个dev的配置文件查看效果！</p>
<p><img src="https://s2.loli.net/2022/03/14/lQK5cBzR4dAbGCU.png" alt="image-20220314220628322"></p>
<blockquote>
<h3 id="配置API分组"><a href="#配置API分组" class="headerlink" title="配置API分组"></a>配置API分组</h3></blockquote>
<p><img src="https://s2.loli.net/2022/03/14/gbksfHZpiCRJA7M.png" alt="image-20220314220649345"></p>
<p>1、如果没有配置分组，默认是default。通过groupName()方法即可配置分组：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Docket docket(Environment environment) &#123;</span><br><span class="line">   return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo())</span><br><span class="line">      .groupName(&quot;hello&quot;) // 配置分组</span><br><span class="line">       // 省略配置....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、重启项目查看分组</p>
<p>3、如何配置多个分组？配置多个分组只需要配置多个docket即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Docket docket1()&#123;</span><br><span class="line">   return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;group1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@Bean</span><br><span class="line">public Docket docket2()&#123;</span><br><span class="line">   return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;group2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@Bean</span><br><span class="line">public Docket docket3()&#123;</span><br><span class="line">   return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;group3&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、重启项目查看即可</p>
<blockquote>
<h3 id="实体配置"><a href="#实体配置" class="headerlink" title="实体配置"></a>实体配置</h3></blockquote>
<p>1、新建一个实体类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ApiModel(&quot;用户实体&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line">   @ApiModelProperty(&quot;用户名&quot;)</span><br><span class="line">   public String username;</span><br><span class="line">   @ApiModelProperty(&quot;密码&quot;)</span><br><span class="line">   public String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、只要这个实体在<strong>请求接口</strong>的返回值上（即使是泛型），都能映射到实体项中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/getUser&quot;)</span><br><span class="line">public User getUser()&#123;</span><br><span class="line">   return new User();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、重启查看测试</p>
<p><img src="https://s2.loli.net/2022/03/14/r3ml1pVjvaZTLW6.png" alt="image-20220314220709313"></p>
<p>注：并不是因为@ApiModel这个注解让实体显示在这里了，而是只要出现在接口方法的返回值上的实体都会显示在这里，而@ApiModel和@ApiModelProperty这两个注解只是为实体添加注释的。</p>
<p>@ApiModel为类添加注释</p>
<p>@ApiModelProperty为类属性添加注释</p>
<blockquote>
<h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3></blockquote>
<p>Swagger的所有注解定义在io.swagger.annotations包下</p>
<p>下面列一些经常用到的，未列举出来的可以另行查阅说明：</p>
<table>
<thead>
<tr>
<th>Swagger注解</th>
<th>简单说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Api(tags = “xxx模块说明”)</td>
<td>作用在模块类上</td>
</tr>
<tr>
<td>@ApiOperation(“xxx接口说明”)</td>
<td>作用在接口方法上</td>
</tr>
<tr>
<td>@ApiModel(“xxxPOJO说明”)</td>
<td>作用在模型类上：如VO、BO</td>
</tr>
<tr>
<td>@ApiModelProperty(value = “xxx属性说明”,hidden = true)</td>
<td>作用在类方法和属性上，hidden设置为true可以隐藏该属性</td>
</tr>
<tr>
<td>@ApiParam(“xxx参数说明”)</td>
<td>作用在参数、方法和字段上，类似@ApiModelProperty</td>
</tr>
</tbody></table>
<p>我们也可以给请求的接口配置一些注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ApiOperation(&quot;狂神的接口&quot;)</span><br><span class="line">@PostMapping(&quot;/kuang&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String kuang(@ApiParam(&quot;这个名字会被返回&quot;)String username)&#123;</span><br><span class="line">   return username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的话，可以给一些比较难理解的属性或者接口，增加一些配置信息，让人更容易阅读！</p>
<p>相较于传统的Postman或Curl方式测试接口，使用swagger简直就是傻瓜式操作，不需要额外说明文档(写得好本身就是文档)而且更不容易出错，只需要录入数据然后点击Execute，如果再配合自动化框架，可以说基本就不需要人为操作了。</p>
<p>Swagger是个优秀的工具，现在国内已经有很多的中小型互联网公司都在使用它，相较于传统的要先出Word接口文档再测试的方式，显然这样也更符合现在的快速迭代开发行情。当然了，提醒下大家在正式环境要记得关闭Swagger，一来出于安全考虑二来也可以节省运行时内存。</p>
<blockquote>
<h3 id="拓展：其他皮肤"><a href="#拓展：其他皮肤" class="headerlink" title="拓展：其他皮肤"></a>拓展：其他皮肤</h3></blockquote>
<p>我们可以导入不同的包实现不同的皮肤定义：</p>
<p>1、默认的  <strong>访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2、bootstrap-ui  <strong>访问 <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入swagger-bootstrap-ui包 /doc.html--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.9.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>3、Layui-ui  <strong>访问 <a href="http://localhost:8080/docs.html">http://localhost:8080/docs.html</a></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入swagger-ui-layer包 /docs.html--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.github.caspar-chen&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;swagger-ui-layer&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.1.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>4、mg-ui  <strong>访问 <a href="http://localhost:8080/document.html">http://localhost:8080/document.html</a></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入swagger-ui-layer包 /document.html--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.zyplayer&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;swagger-mg-ui&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.0.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Swagger生成doc文档"><a href="#Swagger生成doc文档" class="headerlink" title="Swagger生成doc文档"></a>Swagger生成doc文档</h1><h4 id="通过解析Json数据生成doc文档。"><a href="#通过解析Json数据生成doc文档。" class="headerlink" title="通过解析Json数据生成doc文档。"></a>通过解析Json数据生成doc文档。</h4><h5 id="项目位置："><a href="#项目位置：" class="headerlink" title="项目位置："></a>项目位置：</h5><p>链接：<a href="https://pan.baidu.com/s/1xxX26p2Pz61PUVviLw8VXQ">https://pan.baidu.com/s/1xxX26p2Pz61PUVviLw8VXQ</a><br>提取码：pn37</p>
<p>启动工程，访问地址： <a href="http://127.0.0.1:8080/swagger-ui.html">http://127.0.0.1:8080/swagger-ui.html</a></p>
<p><img src="https://s2.loli.net/2022/03/14/Nht2dnV1a48uCxg.png" alt="image-20220314221104520"></p>
]]></content>
      <categories>
        <category>swagger</category>
      </categories>
  </entry>
  <entry>
    <title>代理设计模式</title>
    <url>/2022/03/12/%E4%BB%A3%E7%90%86%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="1-介绍两个动态代理"><a href="#1-介绍两个动态代理" class="headerlink" title="1.介绍两个动态代理"></a>1.介绍两个动态代理</h1><h4 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h4><p><img src="https://s2.loli.net/2022/03/12/YJZGzu3bHTF4tyv.png" alt="image-20220312150315457"></p>
<p>然后</p>
<p><img src="https://s2.loli.net/2022/03/12/mauhGQ6eL7JUY5c.png" alt="image-20220312150405249"></p>
<p><img src="https://s2.loli.net/2022/03/12/9ZvqPHAs5RWGceT.png" alt="image-20220312150503570"></p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://s2.loli.net/2022/03/12/EYQelfX5HJ9hqjy.png" alt="image-20220312150744992"></p>
<h1 id="2-cglib和JDK"><a href="#2-cglib和JDK" class="headerlink" title="2.cglib和JDK"></a>2.cglib和JDK</h1><h4 id="入门代码测试"><a href="#入门代码测试" class="headerlink" title="入门代码测试"></a>入门代码测试</h4><h4 id="编辑Service接口"><a href="#编辑Service接口" class="headerlink" title="编辑Service接口"></a>编辑Service接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jt.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编辑ServiceImpl实现类"><a href="#编辑ServiceImpl实现类" class="headerlink" title="编辑ServiceImpl实现类"></a>编辑ServiceImpl实现类</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserServiceImpl implements UserService&#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    @Override</span><br><span class="line">    public void addUser() &#123;</span><br><span class="line">        userMapper.addUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写UserMapper类"><a href="#编写UserMapper类" class="headerlink" title="编写UserMapper类"></a>编写UserMapper类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.mapper;</span><br><span class="line"></span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">    public void addUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写UserMapperImpl类"><a href="#编写UserMapperImpl类" class="headerlink" title="编写UserMapperImpl类"></a>编写UserMapperImpl类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.mapper;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line">@Repository</span><br><span class="line">public class UserMapperImpl implements UserMapper&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addUser() &#123;</span><br><span class="line">        System.out.println(&quot;你好&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编写UserController类"><a href="#编写UserController类" class="headerlink" title="编写UserController类"></a>编写UserController类</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.controller;</span><br><span class="line"></span><br><span class="line">import com.jt.service.UserService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    UserService userService;</span><br><span class="line">    public void addUser()&#123;</span><br><span class="line">        userService.addUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写动态代理类CGlibProxy"><a href="#编写动态代理类CGlibProxy" class="headerlink" title="编写动态代理类CGlibProxy"></a>编写动态代理类CGlibProxy</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.proxy;</span><br><span class="line"></span><br><span class="line">import org.springframework.cglib.proxy.Enhancer;</span><br><span class="line">import org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line">import org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class CGlibProxy &#123;</span><br><span class="line">    public static Object getProxy(Object target)&#123;</span><br><span class="line">        //1.创建增强器对象</span><br><span class="line">        Enhancer enhancer = new Enhancer();</span><br><span class="line">        //2.设定父级 目标对象</span><br><span class="line">        enhancer.setSuperclass(target.getClass());</span><br><span class="line">        //3.定义回调方法 代理对象执行目标方法时调用</span><br><span class="line">        enhancer.setCallback(getMethodInterceptor(target));</span><br><span class="line">        //4.创建代理对象</span><br><span class="line">        return enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">    public static MethodInterceptor getMethodInterceptor(Object target)&#123;</span><br><span class="line"></span><br><span class="line">        return new MethodInterceptor() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123;</span><br><span class="line">                System.out.println(&quot;CGlibProxy事务开始&quot;);</span><br><span class="line">                //执行目标方法</span><br><span class="line">                Object result= method.invoke(target,objects);</span><br><span class="line">                System.out.println(&quot;CGlibProxy事务提交&quot;);</span><br><span class="line"></span><br><span class="line">                return result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写测试类CGLIB代理"><a href="#编写测试类CGLIB代理" class="headerlink" title="编写测试类CGLIB代理"></a>编写测试类CGLIB代理</h4><p><img src="https://s2.loli.net/2022/03/12/VNPy73TLvAs2lqj.png" alt="image-20220312151143810"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Springdemo8ProxyApplicationTests &#123;</span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() &#123;</span><br><span class="line">        ApplicationContext context = new AnnotationConfigApplicationContext(config.class);</span><br><span class="line">        UserController userController = context.getBean(UserController.class);</span><br><span class="line">        UserController proxy = (UserController) CGlibProxy.getProxy(userController);</span><br><span class="line">        proxy.addUser();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编写测试类JDK代理"><a href="#编写测试类JDK代理" class="headerlink" title="编写测试类JDK代理"></a>编写测试类JDK代理</h2><h4 id="JDKProxy代理类"><a href="#JDKProxy代理类" class="headerlink" title="JDKProxy代理类"></a>JDKProxy代理类</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class JDKProxy &#123;</span><br><span class="line">    //传入target目标对象获取代理对象的</span><br><span class="line">    //利用代理对象 实现方法拓展</span><br><span class="line">    public static Object getProxy(Object target)&#123;</span><br><span class="line">        //1.获取类加载器</span><br><span class="line">        ClassLoader classLoader = target.getClass().getClassLoader();</span><br><span class="line">        //2.获取接口数组类型</span><br><span class="line">        Class[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">        //3.代理对象执行方法时的回调方法</span><br><span class="line">        return Proxy.newProxyInstance(classLoader, interfaces, invocationHandler(target));</span><br><span class="line">    &#125;</span><br><span class="line">    public static InvocationHandler invocationHandler(Object target)&#123;</span><br><span class="line">        return new InvocationHandler() &#123;</span><br><span class="line">            /**</span><br><span class="line">             *</span><br><span class="line">             * @param proxy</span><br><span class="line">             * @param method</span><br><span class="line">             * @param args</span><br><span class="line">             * @return</span><br><span class="line">             * @throws Throwable</span><br><span class="line">             */</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">                System.out.println(&quot;事务开始&quot;);</span><br><span class="line">                Object invoke = method.invoke(target, args);</span><br><span class="line">                System.out.println(&quot;事务提交&quot;);</span><br><span class="line"></span><br><span class="line">                return invoke;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试类contextJDK："><a href="#测试类contextJDK：" class="headerlink" title="测试类contextJDK："></a>测试类contextJDK：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    void contextJDK()&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext context = new AnnotationConfigApplicationContext(config.class);</span><br><span class="line">        UserController userController = context.getBean(UserController.class);</span><br><span class="line">        UserController proxy = (UserController) JDKProxy.getProxy(userController);</span><br><span class="line">        proxy.addUser();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>报错</p>
</blockquote>
<p><img src="https://s2.loli.net/2022/03/12/bEahZwfqAHxSlBY.png" alt="image-20220312151958896"></p>
<p>原因，没有实现接口对象。</p>
<h2 id="修改测试类"><a href="#修改测试类" class="headerlink" title="修改测试类"></a>修改测试类</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    void contextJDK()&#123;</span><br><span class="line">        ApplicationContext context = new AnnotationConfigApplicationContext(config.class);</span><br><span class="line">        UserService userService = context.getBean(UserService.class);</span><br><span class="line">        UserService proxy =(UserService) JDKProxy.getProxy(userService);</span><br><span class="line">        proxy.addUser();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>jdk代理: 要求必须有/实现<strong>接口</strong>. 如果没有接口,则JDK代理不能正常执行.<br>cglib代理: 要求被代理者有无接口都可以. <strong>代理对象是目标对象的子类</strong> 重写子类方法</p>
<h2 id="关于JDK代理和CGlib代理总结-高程-架构"><a href="#关于JDK代理和CGlib代理总结-高程-架构" class="headerlink" title="关于JDK代理和CGlib代理总结(高程/架构)!!!"></a>关于JDK代理和CGlib代理总结(高程/架构)!!!</h2><p><strong>1. JDK要求必须有或者实现接口, cglib有无接口都可以创建代理对象.代理对象是目标对象的子类</strong></p>
<ol start="2">
<li><p>JDK代理工具API: Proxy.newProxyInstance(类加载器,接口数组,invocationHandler接口)</p>
</li>
<li><p>CGlib代理工具API: Enhancer 增强器对象 获取代理对象 enhancer.create(); 回调接口MethodInterceptor接口</p>
</li>
<li><p>JDK中执行目标方法<br>-method.invoke(target,args);<br>CGlib中执行目标方法<br>-method.invoke(target,args);</p>
</li>
</ol>
<h1 id="Spring-AOP介绍"><a href="#Spring-AOP介绍" class="headerlink" title="Spring AOP介绍"></a>Spring AOP介绍</h1><h3 id="层级代码结构"><a href="#层级代码结构" class="headerlink" title="层级代码结构"></a>层级代码结构</h3><p><img src="https://s2.loli.net/2022/03/12/iPAElyj2VhaMvWk.png" alt="image-20220312152942187"></p>
<h4 id="UserService类："><a href="#UserService类：" class="headerlink" title="UserService类："></a>UserService类：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.service;</span><br><span class="line"></span><br><span class="line">public interface UserService &#123;</span><br><span class="line">    public void addUser();</span><br><span class="line">    public String findUser(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="UserServiceImpl类"><a href="#UserServiceImpl类" class="headerlink" title="UserServiceImpl类:"></a>UserServiceImpl类:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.jt.anno.Lyj;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class UserServiceImpl implements UserService&#123;</span><br><span class="line">    @Override</span><br><span class="line">    @Lyj(name = &quot;add&quot;)</span><br><span class="line">    public void addUser() &#123;</span><br><span class="line">        //int i = 1/0;</span><br><span class="line">        System.out.println(&quot;添加用户&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Lyj(name = &quot;update&quot;)</span><br><span class="line">    public String findUser(String name)&#123;</span><br><span class="line">        System.out.println(&quot;发现用户:&quot;+name);</span><br><span class="line">        return name+&quot;我是返回值&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Config类"><a href="#Config类" class="headerlink" title="Config类"></a>Config类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ComponentScan(&quot;com.jt&quot;)</span><br><span class="line">@EnableAspectJAutoProxy//(proxyTargetClass = true)//开启切面配置类注解</span><br><span class="line">public class Config &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="注解Lyj"><a href="#注解Lyj" class="headerlink" title="注解Lyj"></a>注解Lyj</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.anno;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line">@Retention(RetentionPolicy.RUNTIME) //注解运行期有效</span><br><span class="line">@Target(ElementType.METHOD)         //注解标识 方法</span><br><span class="line">public @interface Lyj &#123;</span><br><span class="line">    String name();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="切面代理类SpringAOP："><a href="#切面代理类SpringAOP：" class="headerlink" title="切面代理类SpringAOP："></a>切面代理类SpringAOP：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.apo;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.*;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">@Aspect//添加切面类注解</span><br><span class="line">//@Component</span><br><span class="line">public class SpringAOP &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 知识回顾: AOP利用动态代理扩展目标方法.</span><br><span class="line">     * 公式:    切面 = 切入点表达式 + 通知方法</span><br><span class="line">     * 切入点表达式: 如果目标对象满足切入点表达式的判断(if),</span><br><span class="line">     *             则spring自动为其创建代理对象</span><br><span class="line">     * 通知方法:  对目标方法进行扩展的封装方法.</span><br><span class="line">     * 目标对象的bean的ID: userServiceImpl</span><br><span class="line">     * 切入点表达式:</span><br><span class="line">     *      1. bean(&quot;bean的ID&quot;)</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    //@Pointcut(&quot;bean(userServiceImpl)&quot;) 整个类的方法</span><br><span class="line">    //@Pointcut(&quot;within(com.*.service..*)&quot;) 整个service包下类的方法</span><br><span class="line">    //@Pointcut(&quot;execution(* com.jt.service.UserServiceImpl.addUser())&quot;) 无参的addUser()方法</span><br><span class="line">    //@Pointcut(&quot;execution(* com.jt.service..*.add*(..))&quot;) 整个类下面的add参数名方法</span><br><span class="line">    @Pointcut(&quot;@annotation(com.jt.anno.Lyj)&quot;)//Lyi注解标记的方法</span><br><span class="line">    public void pointcut()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //前置通知:再目标方法执行之前执行</span><br><span class="line">    @Before(&quot;pointcut()&quot;)</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        //System.out.println(this.getClass());</span><br><span class="line">       // System.out.println(&quot;我是前置通知!!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @AfterThrowing(value = &quot;pointcut()&quot;,throwing = &quot;exception&quot;)</span><br><span class="line">    public void afterThrowing(Exception exception)&#123;</span><br><span class="line">        System.out.println(&quot;我是异常通知！！！！&quot;);</span><br><span class="line">        System.out.println(&quot;获取异常信息:&quot;+exception.getMessage());</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //2.后置通知: 在目标方法执行之后执行</span><br><span class="line">    // 通过returning = &quot;result&quot;属性,获取目标方法的返回值,当作参数传递给result</span><br><span class="line">    @AfterReturning(value = &quot;pointcut()&quot;,returning = &quot;result&quot;)</span><br><span class="line">    public void afterReturning(Object result)&#123;</span><br><span class="line">        System.out.println(&quot;最终通知都要执行&quot;);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Around(&quot;pointcut()&quot;)</span><br><span class="line">    public Object around(ProceedingJoinPoint joinPoint) throws Throwable&#123;</span><br><span class="line">        System.out.println(&quot;环绕通知执行前&quot;);</span><br><span class="line">        Class targetClass = joinPoint.getTarget().getClass();</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        String className = joinPoint.getSignature().getDeclaringTypeName();</span><br><span class="line">        Object[] objs = joinPoint.getArgs();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;类型:&quot;+targetClass);</span><br><span class="line">        System.out.println(&quot;方法名称:&quot;+methodName);</span><br><span class="line">        System.out.println(&quot;类名称:&quot;+className);</span><br><span class="line">        System.out.println(&quot;方法中携带的参数:&quot;+ Arrays.toString(objs));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Object result = joinPoint.proceed();</span><br><span class="line">        System.out.println(&quot;环绕通知执行后&quot;);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SpringAOP1类"><a href="#SpringAOP1类" class="headerlink" title="SpringAOP1类"></a>SpringAOP1类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.apo;</span><br><span class="line"></span><br><span class="line">import com.jt.anno.Lyj;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.Around;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.annotation.PostConstruct;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">public class SpringAOP1 &#123;</span><br><span class="line">    private List list = new ArrayList();</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void init()&#123;</span><br><span class="line">        list.add(&quot;add&quot;);</span><br><span class="line">        list.add(&quot;update&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Around(&quot;@annotation(lyj)&quot;)</span><br><span class="line">    public Object around(ProceedingJoinPoint joinPoint, Lyj lyj) throws Throwable &#123;</span><br><span class="line">        String name = lyj.name();</span><br><span class="line">        if(list.contains(name))&#123;</span><br><span class="line">            System.out.println(&quot;方法增强&quot;);</span><br><span class="line">            Object proceed = joinPoint.proceed();</span><br><span class="line">            return proceed;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            System.out.println(&quot;不匹配&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="测试类编写"><a href="#测试类编写" class="headerlink" title="测试类编写"></a>测试类编写</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.springdemo9_aop;</span><br><span class="line"></span><br><span class="line">import com.jt.config.Config;</span><br><span class="line"></span><br><span class="line">import com.jt.service.UserService;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line">class Springdemo9AopApplicationTests &#123;</span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() &#123;</span><br><span class="line">        ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);</span><br><span class="line">        UserService userService = context.getBean(UserService.class);</span><br><span class="line">        //userService.addUser();</span><br><span class="line"></span><br><span class="line">        userService.addUser();</span><br><span class="line">        userService.findUser(&quot;用户1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="XML文件配置"><a href="#XML文件配置" class="headerlink" title="XML文件配置"></a>XML文件配置</h3><p><strong>PersonServiceBean</strong>类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package test.spring.service.impl;  </span><br><span class="line">  </span><br><span class="line">import test.spring.service.PersonService;  </span><br><span class="line">  </span><br><span class="line">//代理对象实现目标对象所有接口  </span><br><span class="line">public class PersonServiceBean implements PersonService &#123;  </span><br><span class="line">  </span><br><span class="line">    public PersonServiceBean() &#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public void save(String name) &#123;  </span><br><span class="line">        System.out.println(&quot;save()-&gt;&gt;&quot; + name);  </span><br><span class="line">        throw new RuntimeException(&quot;&gt;&gt;----自定义异常----&lt;&lt;&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public String getResult() &#123;  </span><br><span class="line">        return &quot;getResult()==&gt;&gt;返回结果&quot;;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p><strong>MyInterceptor2</strong>类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package test.spring.aop;  </span><br><span class="line">  </span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;  </span><br><span class="line">  </span><br><span class="line">public class MyInterceptor2 &#123;  </span><br><span class="line">  </span><br><span class="line">    public void doAccessCheck() &#123;  </span><br><span class="line">        System.out.println(&quot;前置通知--&gt;&gt;&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void doAfterReturning() &#123;  </span><br><span class="line">        System.out.println(&quot;后置通知--&gt;&gt;&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void doAfter() &#123;  </span><br><span class="line">        System.out.println(&quot;最终通知&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void doAfterThrowing() &#123;  </span><br><span class="line">        System.out.println(&quot;异常通知--&gt;&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public Object doAround(ProceedingJoinPoint pJoinPoint) throws Throwable &#123;  </span><br><span class="line">        System.out.println(&quot;环绕通知&quot;);  </span><br><span class="line">        // 这里如果pJoinPoint.proceed()不执行，后面拦截到的方法都不会执行，非常适用于权限管理  </span><br><span class="line">        Object result = pJoinPoint.proceed();  </span><br><span class="line">        System.out.println(&quot;退出&quot;);  </span><br><span class="line">        return result;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p><strong>AOPTest3</strong>类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package test.spring.junit;  </span><br><span class="line">  </span><br><span class="line">import org.junit.Test;  </span><br><span class="line">import org.springframework.context.support.AbstractApplicationContext;  </span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;  </span><br><span class="line">  </span><br><span class="line">import test.spring.service.PersonService;  </span><br><span class="line">  </span><br><span class="line">public class AOPTest3 &#123;  </span><br><span class="line">  </span><br><span class="line">    @Test  </span><br><span class="line">    public void test() &#123;  </span><br><span class="line">        AbstractApplicationContext aContext = //  </span><br><span class="line">        new ClassPathXmlApplicationContext(&quot;beans2.xml&quot;);  </span><br><span class="line">        PersonService pService = (PersonService) aContext  </span><br><span class="line">                .getBean(&quot;personService&quot;);  </span><br><span class="line">        pService.save(&quot;LinDL&quot;);  </span><br><span class="line">        pService.getResult();  </span><br><span class="line">        aContext.close();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="beans2-xml配置文件"><a href="#beans2-xml配置文件" class="headerlink" title="beans2.xml配置文件"></a>beans2.xml配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span><br><span class="line">           http://www.springframework.org/schema/context</span><br><span class="line">           http://www.springframework.org/schema/context/spring-context-2.5.xsd</span><br><span class="line">           http://www.springframework.org/schema/aop </span><br><span class="line">           http://www.springframework.org/schema/aop/spring-aop-2.5.xsd&quot;&gt;</span><br><span class="line">     &lt;aop:aspectj-autoproxy /&gt;</span><br><span class="line">    &lt;bean id=&quot;personService&quot; class=&quot;test.spring.service.impl.PersonServiceBean&quot;&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;myInterceptor&quot; class=&quot;test.spring.aop.MyInterceptor2&quot;&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">           &lt;aop:aspect id=&quot;myAspect&quot; ref=&quot;myInterceptor&quot;&gt;</span><br><span class="line">                    &lt;aop:pointcut  id=&quot;myPointCut&quot;  expression=&quot;execution(* test.spring.service.impl.PersonServiceBean.*(..))&quot; /&gt;</span><br><span class="line">                    &lt;aop:before pointcut-ref=&quot;myPointCut&quot; method=&quot;doAccessCheck&quot; /&gt;</span><br><span class="line">                    &lt;aop:after-returning pointcut-ref=&quot;myPointCut&quot;  method=&quot;doAfterReturning&quot; /&gt;</span><br><span class="line">                    &lt;aop:after-throwing pointcut-ref=&quot;myPointCut&quot;  method=&quot;doAfterThrowing&quot; /&gt;</span><br><span class="line">                    &lt;aop:around pointcut-ref=&quot;myPointCut&quot; method=&quot;doAround&quot; /&gt;</span><br><span class="line">                    &lt;aop:after pointcut-ref=&quot;myPointCut&quot; method=&quot;doAfter&quot; /&gt;</span><br><span class="line">           &lt;/aop:aspect&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt; </span><br></pre></td></tr></table></figure>

<p>切面的切入点语法定义</p>
<ul>
<li><strong>拦截test.spring.service.impl.PersonServiceBean下的所有方法<br>expression=”execution(* test.spring.service.impl.PersonServiceBean.*(..))”</strong></li>
<li>**拦截test.spring.service.impl子包下的所有类的所有方法<br>expression=”execution(* test.spring.service.impl..*.*(..))”<br>**</li>
<li>**拦截test.spring.service.impl.PersonServiceBean下的所有返回值为String类型的方法<br>expression=”execution(java.lang.String test.spring.service.impl.PersonServiceBean.*(..))”<br>**</li>
<li><strong>拦截test.spring.service.impl.PersonServiceBean下的所有方法中第一个参数类型为String的方法<br>expression=”execution(* test.spring.service.impl.PersonServiceBean.*(java.lang.String,..))”</strong></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>安装Hadoop</title>
    <url>/2022/02/23/%E5%AE%89%E8%A3%85Hadoop/</url>
    <content><![CDATA[<h1 id="集群环境准备"><a href="#集群环境准备" class="headerlink" title="集群环境准备"></a>集群环境准备</h1><h2 id="准备虚拟机"><a href="#准备虚拟机" class="headerlink" title="准备虚拟机"></a>准备虚拟机</h2><p>克隆三个虚拟机hadoop01、hadoop02、hadoop03均为NAT模式，其中hadoop01内存设置为1G（16G内存以上建议设置为2G），hadoop02和hadoop03为512M。</p>
<p><img src="https://s2.loli.net/2022/02/23/nILraS6VJpW4h8U.png" alt="image-20220223141638805"></p>
<h3 id="修改系统邮件提示"><a href="#修改系统邮件提示" class="headerlink" title="修改系统邮件提示"></a>修改系统邮件提示</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;unset MAILCHECK&quot;</span>&gt;&gt; /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="关闭NetworkManager，防止网络出错"><a href="#关闭NetworkManager，防止网络出错" class="headerlink" title="关闭NetworkManager，防止网络出错"></a>关闭NetworkManager，防止网络出错</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl stop NetworkManager</span><br><span class="line">systemctl disable NetworkManager</span><br></pre></td></tr></table></figure>

<h2 id="修改为静态IP"><a href="#修改为静态IP" class="headerlink" title="修改为静态IP"></a>修改为静态IP</h2><p>修改IP地址，将：</p>
<p>第一台hadoop01的虚拟机ip地址改为：192.168.64.101</p>
<p>第二台hadoop02的虚拟机ip地址改为：192.168.64.102</p>
<p>第三台hadoop03的虚拟机ip地址改为：192.168.64.103</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts   #进入网络配置目录</span><br><span class="line">dir ifcfg*                         #找到网卡配置文件</span><br><span class="line">ifcfg-ens33                         #找到版本最新的文件并修改</span><br><span class="line">vim ifcfg-ens33</span><br><span class="line">或者</span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>

<h3 id="配置文件内容"><a href="#配置文件内容" class="headerlink" title="配置文件内容"></a>配置文件内容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line"> </span><br><span class="line">BOOTPROTO=static                              #改成static，针对NAT</span><br><span class="line"> </span><br><span class="line">NAME=eno16777736</span><br><span class="line"> </span><br><span class="line">UUID=4cc9c89b-cf9e-4847-b9ea-ac713baf4cc8</span><br><span class="line"> </span><br><span class="line">DEVICE=eno16777736</span><br><span class="line"> </span><br><span class="line">DNS1=114.114.114.114     #和网关相同</span><br><span class="line"> </span><br><span class="line">ONBOOT=yes               #开机启动此网卡</span><br><span class="line"> </span><br><span class="line">IPADDR=192.168.64.101    #固定IP地址</span><br><span class="line"> </span><br><span class="line">NETMASK=255.255.255.0    #子网掩码</span><br><span class="line"> </span><br><span class="line">GATEWAY=192.168.64.2     #网关和NAT自动配置的相同，不同则无法登录</span><br></pre></td></tr></table></figure>

<h3 id="重启网络"><a href="#重启网络" class="headerlink" title="重启网络"></a>重启网络</h3><p>以下两种方式任选其一</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service network restart   #重启网络</span><br><span class="line"> </span><br><span class="line">systemctl restart network.service   #重启网络centos7</span><br></pre></td></tr></table></figure>

<h3 id="查看IP"><a href="#查看IP" class="headerlink" title="查看IP"></a>查看IP</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip addr                  #查看IP地址 ip add</span><br></pre></td></tr></table></figure>

<h2 id="mobaxTerm的使用"><a href="#mobaxTerm的使用" class="headerlink" title="mobaxTerm的使用"></a>mobaxTerm的使用</h2><p><img src="https://s2.loli.net/2022/02/23/GQ8nO1JrefNaXZI.png" alt="image-20220223141841844"></p>
<p>登录成功后，弹出对话框点yes 保存密码。</p>
<p>补充：mobaxTerm远程连接慢的问题</p>
<p>在使用shell连接虚拟机时连接等待时间太长，ssh的服务端在连接时会自动检测dns环境是否一致导致的，修改为不检测即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、打开sshd服务的配置文件</span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">把UseDNS yes改为UseDNS no（如果没有，自行编写在文件末尾加入）</span><br><span class="line">2、重启sshd服务</span><br><span class="line">systemctl restart sshd.service 或者 /etc/init.d/sshd restart</span><br></pre></td></tr></table></figure>

<h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service        #关闭防火墙服务</span><br><span class="line">systemctl disable firewalld.service     #禁止防火墙开启启动</span><br></pre></td></tr></table></figure>

<p>检查防火墙状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop01 ~]# firewall-cmd --state		#检查防火墙状态</span><br><span class="line">false							#返回值，未运行</span><br></pre></td></tr></table></figure>

<h2 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hostname</span><br></pre></td></tr></table></figure>

<h2 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure>

<p>在配置文件中增加ip地址映射</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.64.101 hadoop01</span><br><span class="line">192.168.64.102 hadoop02</span><br><span class="line">192.168.64.103 hadoop03</span><br></pre></td></tr></table></figure>

<h2 id="三台机器重启"><a href="#三台机器重启" class="headerlink" title="三台机器重启"></a>三台机器重启</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h2 id="设置免密登录"><a href="#设置免密登录" class="headerlink" title="设置免密登录"></a>设置免密登录</h2><h3 id="三台机器生成公钥与私钥"><a href="#三台机器生成公钥与私钥" class="headerlink" title="三台机器生成公钥与私钥"></a>三台机器生成公钥与私钥</h3><h3 id="拷贝公钥到同一台机器"><a href="#拷贝公钥到同一台机器" class="headerlink" title="拷贝公钥到同一台机器"></a>拷贝公钥到同一台机器</h3><p>三台机器执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-copy-id hadoop01</span><br></pre></td></tr></table></figure>

<h3 id="复制第一台机器的认证到其他机器"><a href="#复制第一台机器的认证到其他机器" class="headerlink" title="复制第一台机器的认证到其他机器"></a>复制第一台机器的认证到其他机器</h3><p>将第一台机器的公钥拷贝到其他机器上</p>
<p>在第一台机器上面执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /root/.ssh/authorized_keys hadoop02:/root/.ssh</span><br><span class="line">scp /root/.ssh/authorized_keys hadoop03:/root/.ssh</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在hadoop01上进行远程登录测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh hadoop02</span><br></pre></td></tr></table></figure>

<p>不需要输入密码直接进入说明成功，exit退出</p>
<h2 id="三台机器时钟同步"><a href="#三台机器时钟同步" class="headerlink" title="三台机器时钟同步"></a>三台机器时钟同步</h2><p>通过网络进行时钟同步</p>
<p>通过网络连接外网进行时钟同步,必须保证虚拟机连上外网</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ntpdate us.pool.ntp.org</span><br></pre></td></tr></table></figure>

<p>三台机器定时任务</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*    *    *    *    *</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab  -e   </span><br><span class="line"></span><br><span class="line">*/1 * * * * /usr/sbin/ntpdate us.pool.ntp.org;</span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab [-u username]　　　　//省略用户表表示操作当前用户的crontab</span><br><span class="line">    -e      (编辑工作表)</span><br><span class="line">    -l      (列出工作表里的命令)</span><br><span class="line">    -r      (删除工作作)</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="三台机器安装jdk"><a href="#三台机器安装jdk" class="headerlink" title="三台机器安装jdk"></a>三台机器安装jdk</h2><p>查看自带的openjdk</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep java</span><br></pre></td></tr></table></figure>

<p>如果有，请卸载系统自带的openjdk，方式如下（注：目前系统已经卸载）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -e java-1.6.0-openjdk-1.6.0.41-1.13.13.1.el6_8.x86_64 tzdata-java-2016j-1.el6.noarch java-1.7.0-openjdk-1.7.0.131-2.6.9.0.el6_8.x86_64 --nodeps</span><br></pre></td></tr></table></figure>

<p>三台机器创建目录</p>
<p>所有软件的安装路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /opt/servers</span><br></pre></td></tr></table></figure>

<p>所有软件压缩包的存放路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /opt/softwares</span><br></pre></td></tr></table></figure>

<p>上传jdk到/export/softwares路径下去，并解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvzf jdk-8u65-linux-x64.tar.gz -C ../servers/</span><br></pre></td></tr></table></figure>

<p>配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">export JAVA_HOME=/opt/servers/jdk1.8.0_65</span><br><span class="line">export PATH=:$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>

<p>修改完成之后记得 source /etc/profile生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<p>发送文件到hadoop02和hadoop03</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r /opt/servers/jdk1.8.0_65/ hadoop02:/opt/servers/</span><br><span class="line">scp -r /opt/servers/jdk1.8.0_65/ hadoop03:/opt/servers/</span><br></pre></td></tr></table></figure>

<p>注意：发送完成后要配置环境变量并生效。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /etc/profile hadoop02:/etc/</span><br><span class="line">scp /etc/profile hadoop03:/etc/</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>出现JDK版本号即为成功。</p>
<h2 id="修改windows中的hosts文件"><a href="#修改windows中的hosts文件" class="headerlink" title="修改windows中的hosts文件"></a>修改windows中的hosts文件</h2><p>在windows中的hosts文件里添加如下映射</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.64.101 hadoop01</span><br><span class="line">192.168.64.102 hadoop02</span><br><span class="line">192.168.64.103 hadoop03</span><br></pre></td></tr></table></figure>

<h2 id="hadoop的核心组件"><a href="#hadoop的核心组件" class="headerlink" title="hadoop的核心组件"></a>hadoop的核心组件</h2><p>HDFS：分布式存储组件</p>
<p>MapReduce：分布式计算组件</p>
<p>Yarn：资源调度管理器</p>
<h2 id="hadoop2-x架构模型"><a href="#hadoop2-x架构模型" class="headerlink" title="hadoop2.x架构模型"></a>hadoop2.x架构模型</h2><p><img src="https://s2.loli.net/2022/02/24/PcWuklZC45S27me.png" alt="image-20220224091121111"></p>
<p><strong>文件系统核心模块</strong>：</p>
<p><strong>NameNode</strong>：集群当中的主节点，主要用于管理集群当中的各种元数据</p>
<p><strong>secondaryNameNode</strong>：主要能用于hadoop当中元数据信息的辅助管理</p>
<p><strong>DataNode</strong>：集群当中的从节点，主要用于存储集群当中的各种数据</p>
<p><strong>数据计算核心模块：</strong></p>
<p><strong>ResourceManager</strong>：接收用户的计算请求任务，并负责集群的资源分配</p>
<p><strong>NodeManager</strong>：负责执行主节点APPmaster分配的任务</p>
<h3 id="伪分布式部署"><a href="#伪分布式部署" class="headerlink" title="伪分布式部署"></a>伪分布式部署</h3><p>需要环境：</p>
<p>JDK，JAVA_HOME，配置hosts，关闭防火墙，配置免密登录等。</p>
<p>注意：我们只将其安装在hadoop01节点上。</p>
<h4 id="进入目录"><a href="#进入目录" class="headerlink" title="进入目录"></a>进入目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/softwares</span><br></pre></td></tr></table></figure>

<h4 id="上传安装包并解压"><a href="#上传安装包并解压" class="headerlink" title="上传安装包并解压"></a>上传安装包并解压</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvzf hadoop-2.7.7.tar.gz -C ../servers/</span><br></pre></td></tr></table></figure>

<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>位置：/opt/servers/hadoop-2.7.7/etc/hadoop</p>
<h5 id="修改hadoop-env-sh"><a href="#修改hadoop-env-sh" class="headerlink" title="修改hadoop-env.sh"></a>修改hadoop-env.sh</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /opt/servers/hadoop-2.7.7/etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure>

<p>修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/opt/servers/jdk1.8.0_65</span><br><span class="line">export HADOOP_CONF_DIR=/opt/servers/hadoop-2.7.7/etc/hadoop</span><br></pre></td></tr></table></figure>

<h5 id="修改-core-site-xml"><a href="#修改-core-site-xml" class="headerlink" title="修改 core-site.xml"></a>修改 core-site.xml</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /opt/servers/hadoop-2.7.7/etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure>

<p>增加namenode配置、文件存储位置配置：粘贴代码部分到标签内</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!--用来指定hdfs的老大，namenode的地址--&gt;</span><br><span class="line"> </span><br><span class="line">&lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">&lt;value&gt;hdfs://hadoop01:8020&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt; </span><br><span class="line"> </span><br><span class="line">&lt;property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!--用来指定hadoop运行时产生文件的存放目录--&gt;  </span><br><span class="line"> </span><br><span class="line">&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">&lt;value&gt;/opt/servers/hadoop-2.7.7/tmp&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<h5 id="修改-hdfs-site-xml"><a href="#修改-hdfs-site-xml" class="headerlink" title="修改 hdfs-site.xml"></a>修改 hdfs-site.xml</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /opt/servers/hadoop-2.7.7/etc/hadoop/hdfs-site.xml</span><br></pre></td></tr></table></figure>

<p>配置包括自身在内的备份副本数量到标签内</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!--指定hdfs保存数据副本的数量，包括自己，默认为3--&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!--伪分布式模式，此值必须为1--&gt;</span><br><span class="line"> </span><br><span class="line">&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">&lt;value&gt;1&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!--设置hdfs操作权限，false表示任何用户都可以在hdfs上操作文件--&gt;</span><br><span class="line"> </span><br><span class="line">&lt;property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;name&gt;dfs.permissions&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">&lt;value&gt;false&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<h5 id="修改-mapred-site-xml"><a href="#修改-mapred-site-xml" class="headerlink" title="修改 mapred-site.xml"></a>修改 mapred-site.xml</h5><p>说明：在/opt/servers/hadoop-2.7.7/etc/hadoop的目录下，只有一个mapred-site.xml.template文件，复制一个。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp mapred-site.xml.template mapred-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /opt/servers/hadoop-2.7.7/etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure>

<p>配置mapreduce运行在yarn上：粘贴高亮部分到标签内</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property&gt; </span><br><span class="line"> </span><br><span class="line">&lt;!--指定mapreduce运行在yarn上--&gt;</span><br><span class="line"> </span><br><span class="line">&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">&lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<h5 id="修改-yarn-site-xml"><a href="#修改-yarn-site-xml" class="headerlink" title="修改 yarn-site.xml"></a>修改 yarn-site.xml</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /opt/servers/hadoop-2.7.7/etc/hadoop/yarn-site.xml</span><br></pre></td></tr></table></figure>

<p>配置：粘贴高亮部分到标签内</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!--指定yarn的老大resourcemanager的地址--&gt;</span><br><span class="line"> </span><br><span class="line">&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">&lt;value&gt;hadoop01&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!--NodeManager获取数据的方式--&gt;</span><br><span class="line"> </span><br><span class="line">&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<h5 id="修改slaves"><a href="#修改slaves" class="headerlink" title="修改slaves"></a>修改slaves</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /opt/servers/hadoop-2.7.7/etc/hadoop/slaves</span><br></pre></td></tr></table></figure>

<p>修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop01</span><br></pre></td></tr></table></figure>

<h5 id="配置hadoop的环境变量"><a href="#配置hadoop的环境变量" class="headerlink" title="配置hadoop的环境变量"></a>配置hadoop的环境变量</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HADOOP_HOME=/opt/servers/hadoop-2.7.7</span><br><span class="line">export PATH=:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</span><br></pre></td></tr></table></figure>

<p>配置完成之后生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<p>环境变量配置完成，测试环境变量是否生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $HADOOP_HOME</span><br></pre></td></tr></table></figure>

<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><h5 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure>

<h5 id="2-启动"><a href="#2-启动" class="headerlink" title="2.启动"></a>2.启动</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure>

<h5 id="3-停止"><a href="#3-停止" class="headerlink" title="3.停止"></a>3.停止</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop-all.sh</span><br></pre></td></tr></table></figure>

<h5 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure>

<h5 id="5-停止服务"><a href="#5-停止服务" class="headerlink" title="5.停止服务"></a>5.停止服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop-all.sh</span><br></pre></td></tr></table></figure>

<h5 id="6-访问浏览器"><a href="#6-访问浏览器" class="headerlink" title="6.访问浏览器"></a>6.访问浏览器</h5><p>windows的浏览器中访问hadoop01:50070</p>
<p>安装成功！</p>
<h5 id="7-如果没有安装成功"><a href="#7-如果没有安装成功" class="headerlink" title="7.如果没有安装成功"></a>7.如果没有安装成功</h5><p>如果没有成功（进程数不够）</p>
<p>1.stop-all.sh 停掉hadoop所有进程</p>
<p>2.删掉hadoop2.7.7下的tmp文件</p>
<p>3.hdfs namenode -format 重新初始化（出现successfully证明成功），如果配置文件报错，安装报错信息修改相应位置后重新执行第二步。</p>
<p>4.start-all.sh 启动hadoop</p>
<h3 id="完全分布式部署"><a href="#完全分布式部署" class="headerlink" title="完全分布式部署"></a>完全分布式部署</h3><p>安装环境服务部署规划</p>
<p>服务器IP    192.168.64.101    192.168.64.102    192.168.64.103</p>
<table>
<thead>
<tr>
<th>服务器IP</th>
<th>192.168.64.101</th>
<th>192.168.64.102</th>
<th>192.168.64.103</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>NameNode</td>
<td></td>
<td></td>
</tr>
<tr>
<td>HDFS</td>
<td>Secondary NameNode</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>DataNode</td>
<td>DataNode</td>
<td>DataNode</td>
</tr>
<tr>
<td>YARN</td>
<td>ResourceManager</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>NodeManager</td>
<td>NodeManager</td>
<td>NodeManager</td>
</tr>
<tr>
<td>MapReduce</td>
<td>JobHistoryServer</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>先在第一台机器hadoop01进行部署</p>
<p>注意：如果已安装伪分布模式，先删除格式化后生成的数据文件，其他请略过。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /opt/servers/hadoop-2.7.7/tmp</span><br></pre></td></tr></table></figure>

<h4 id="进入目录-1"><a href="#进入目录-1" class="headerlink" title="进入目录"></a>进入目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/softwares</span><br></pre></td></tr></table></figure>

<h4 id="上传安装包并解压-1"><a href="#上传安装包并解压-1" class="headerlink" title="上传安装包并解压"></a>上传安装包并解压</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvzf hadoop-2.7.7.tar.gz -C ../servers/</span><br></pre></td></tr></table></figure>

<h4 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>位置：/opt/servers/hadoop-2.7.7/etc/hadoop</p>
<h5 id="修改hadoop-env-sh-1"><a href="#修改hadoop-env-sh-1" class="headerlink" title="修改hadoop-env.sh"></a>修改hadoop-env.sh</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /opt/servers/hadoop-2.7.7/etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure>

<p>修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/opt/servers/jdk1.8.0_65</span><br><span class="line">export HADOOP_CONF_DIR=/opt/servers/hadoop-2.7.7/etc/hadoop</span><br></pre></td></tr></table></figure>

<h5 id="修改-core-site-xml-1"><a href="#修改-core-site-xml-1" class="headerlink" title="修改 core-site.xml"></a>修改 core-site.xml</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /opt/servers/hadoop-2.7.7/etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure>

<p>增加namenode配置、文件存储位置配置：粘贴代码部分到标签内</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!--用来指定hdfs的老大，namenode的地址--&gt;</span><br><span class="line"> </span><br><span class="line">&lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">&lt;value&gt;hdfs://hadoop01:8020&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt; </span><br><span class="line"> </span><br><span class="line">&lt;property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!--用来指定hadoop运行时产生文件的存放目录--&gt;  </span><br><span class="line"> </span><br><span class="line">&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">&lt;value&gt;/opt/servers/hadoop-2.7.7/tmp&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<h5 id="修改-hdfs-site-xml-1"><a href="#修改-hdfs-site-xml-1" class="headerlink" title="修改 hdfs-site.xml"></a>修改 hdfs-site.xml</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /opt/servers/hadoop-2.7.7/etc/hadoop/hdfs-site.xml</span><br></pre></td></tr></table></figure>

<p>配置包括自身在内的备份副本数量到标签内</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!--指定hdfs保存数据副本的数量，包括自己，默认为3--&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">&lt;value&gt;2&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!--设置hdfs操作权限，false表示任何用户都可以在hdfs上操作文件--&gt;</span><br><span class="line"> </span><br><span class="line">&lt;property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;name&gt;dfs.permissions&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">&lt;value&gt;false&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<h5 id="修改-mapred-site-xml-1"><a href="#修改-mapred-site-xml-1" class="headerlink" title="修改 mapred-site.xml"></a>修改 mapred-site.xml</h5><p>说明：在/opt/servers/hadoop-2.7.7/etc/hadoop的目录下，只有一个mapred-site.xml.template文件，复制一个。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp mapred-site.xml.template mapred-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /opt/servers/hadoop-2.7.7/etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure>

<p>配置mapreduce运行在yarn上：粘贴高亮部分到标签内</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property&gt; </span><br><span class="line"> </span><br><span class="line">&lt;!--指定mapreduce运行在yarn上--&gt;</span><br><span class="line"> </span><br><span class="line">&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">&lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<h5 id="修改-yarn-site-xml-1"><a href="#修改-yarn-site-xml-1" class="headerlink" title="修改 yarn-site.xml"></a>修改 yarn-site.xml</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /opt/servers/hadoop-2.7.7/etc/hadoop/yarn-site.xml</span><br></pre></td></tr></table></figure>

<p>配置：粘贴高亮部分到标签内</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!--指定yarn的老大resourcemanager的地址--&gt;</span><br><span class="line"> </span><br><span class="line">&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">&lt;value&gt;hadoop01&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!--NodeManager获取数据的方式--&gt;</span><br><span class="line"> </span><br><span class="line">&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<h5 id="修改slaves-1"><a href="#修改slaves-1" class="headerlink" title="修改slaves"></a>修改slaves</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /opt/servers/hadoop-2.7.7/etc/hadoop/slaves</span><br></pre></td></tr></table></figure>

<p>修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop01</span><br><span class="line">hadoop02</span><br><span class="line">hadoop03</span><br></pre></td></tr></table></figure>

<h5 id="配置hadoop的环境变量-1"><a href="#配置hadoop的环境变量-1" class="headerlink" title="配置hadoop的环境变量"></a>配置hadoop的环境变量</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">export HADOOP_HOME=/opt/servers/hadoop-2.7.7</span><br><span class="line">export PATH=:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</span><br></pre></td></tr></table></figure>

<p>配置完成之后生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<p>环境变量配置完成，测试环境变量是否生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $HADOOP_HOME</span><br></pre></td></tr></table></figure>

<h5 id="分发文件到hadoop02、hadoop03服务器"><a href="#分发文件到hadoop02、hadoop03服务器" class="headerlink" title="分发文件到hadoop02、hadoop03服务器"></a>分发文件到hadoop02、hadoop03服务器</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/servers/</span><br><span class="line">scp -r hadoop-2.7.7/ hadoop02:$PWD</span><br><span class="line">scp -r hadoop-2.7.7/ hadoop03:$PWD</span><br></pre></td></tr></table></figure>

<h5 id="hadoop02、hadoop03服务器配置hadoop的环境变量"><a href="#hadoop02、hadoop03服务器配置hadoop的环境变量" class="headerlink" title="hadoop02、hadoop03服务器配置hadoop的环境变量"></a>hadoop02、hadoop03服务器配置hadoop的环境变量</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HADOOP_HOME=/opt/servers/hadoop-2.7.7</span><br><span class="line">export PATH=:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</span><br></pre></td></tr></table></figure>

<p>配置完成之后生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<p>环境变量配置完成，测试环境变量是否生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $HADOOP_HOME</span><br></pre></td></tr></table></figure>

<h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><h5 id="1-初始化-1"><a href="#1-初始化-1" class="headerlink" title="1.初始化"></a>1.初始化</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure>

<h5 id="2-启动-1"><a href="#2-启动-1" class="headerlink" title="2.启动"></a>2.启动</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure>

<h5 id="3-停止-1"><a href="#3-停止-1" class="headerlink" title="3.停止"></a>3.停止</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop-all.sh</span><br></pre></td></tr></table></figure>

<h5 id="4-测试-1"><a href="#4-测试-1" class="headerlink" title="4.测试"></a>4.测试</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure>

<h5 id="5-停止服务-1"><a href="#5-停止服务-1" class="headerlink" title="5.停止服务"></a>5.停止服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop-all.sh</span><br></pre></td></tr></table></figure>

<h5 id="6-访问浏览器-1"><a href="#6-访问浏览器-1" class="headerlink" title="6.访问浏览器"></a>6.访问浏览器</h5><p>windows的浏览器中访问</p>
<p>hdfs集群访问地址</p>
<p><a href="http://hadoop01:50070/">http://hadoop01:50070/</a></p>
<p>yarn集群访问地址</p>
<p><a href="http://hadoop01:8088/">http://hadoop01:8088/</a></p>
<p>安装成功！</p>
<h5 id="补充：可以按照组件启动服务"><a href="#补充：可以按照组件启动服务" class="headerlink" title="补充：可以按照组件启动服务"></a>补充：可以按照组件启动服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure>

<p>也可以单独启动一个服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在主节点上使用以下命令启动 HDFS NameNode：</span><br><span class="line">hadoop-daemon.sh start namenode </span><br><span class="line">#在每个从节点上使用以下命令启动 HDFS DataNode： </span><br><span class="line">hadoop-daemon.sh start datanode </span><br><span class="line">#在主节点上使用以下命令启动 YARN ResourceManager： </span><br><span class="line">yarn-daemon.sh  start resourcemanager </span><br><span class="line">#在每个从节点上使用以下命令启动 YARN nodemanager： </span><br><span class="line">yarn-daemon.sh start nodemanager </span><br></pre></td></tr></table></figure>

<h1 id="hadoop集群初体验"><a href="#hadoop集群初体验" class="headerlink" title="hadoop集群初体验"></a>hadoop集群初体验</h1><h2 id="HDFS-使用初体验"><a href="#HDFS-使用初体验" class="headerlink" title="HDFS 使用初体验"></a>HDFS 使用初体验</h2><p>从Linux 本地上传一个文本文件到 hdfs 的/test/input 目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir -p /test/input </span><br><span class="line"></span><br><span class="line">hadoop fs -put /root/install.log  /test/input 	</span><br></pre></td></tr></table></figure>

<h2 id="mapreduce程序初体验"><a href="#mapreduce程序初体验" class="headerlink" title="mapreduce程序初体验"></a>mapreduce程序初体验</h2><p>在 Hadoop 安装包的</p>
<p>hadoop2.7.7/share/hadoop/mapreduce 下有官方自带的mapreduce 程序。我们可以使用如下的命令进行运行测试。</p>
<p>示例程序jar:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop-mapreduce-examples-2.7.7.jar</span><br></pre></td></tr></table></figure>

<p>计算圆周率:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop jar /opt/servers/hadoop-2.7.7/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.7.jar pi 2 5</span><br></pre></td></tr></table></figure>

<p>关于圆周率的估算，感兴趣的可以查询资料 Monte Carlo 方法来计算 Pi 值。</p>
<h3 id="Hadoop文件操作"><a href="#Hadoop文件操作" class="headerlink" title="Hadoop文件操作:"></a>Hadoop文件操作:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir -p /test/input#文件夹</span><br><span class="line">hadoop常见指令：</span><br><span class="line"></span><br><span class="line">hdfs dfs -copyFromLocal /local/data /hdfs/data：将本地文件上传到 hdfs</span><br><span class="line">上（原路径只能是一个文件）</span><br><span class="line">hdfs dfs -put /tmp/ /hdfs/ ：和 copyFromLocal 区别是，put 原路径可以是文件夹等</span><br><span class="line">hadoop fs -ls / ：查看根目录文件</span><br><span class="line">hadoop fs -ls /tmp/data：查看/tmp/data目录</span><br><span class="line">hadoop fs -cat /tmp/a.txt ：查看 a.txt，与 -text 一样</span><br><span class="line">hadoop fs -mkdir dir：创建目录dir</span><br><span class="line">hadoop fs -rmr dir：删除目录dir</span><br><span class="line"></span><br><span class="line">/opt/servers/hadoop-2.7.7/tmp/dfs/data/current/BP-69414054-192.168.199.101-1645667165994/current/finalized/subdir0/subdir0</span><br><span class="line"></span><br><span class="line">ls -l --block-size=k</span><br></pre></td></tr></table></figure>

<h1 id="分布式文件系统HDFS"><a href="#分布式文件系统HDFS" class="headerlink" title="分布式文件系统HDFS"></a>分布式文件系统HDFS</h1><h2 id="HDFS的来源"><a href="#HDFS的来源" class="headerlink" title="HDFS的来源"></a>HDFS的来源</h2><p><img src="https://s2.loli.net/2022/02/24/aiRCLD48IT19mPo.png" alt="image-20220224105158528"></p>
<h3 id="vim编码问题"><a href="#vim编码问题" class="headerlink" title="vim编码问题"></a>vim编码问题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.vimrc</span><br><span class="line">set fileencodings=utf-8,gb2312,gbk,gb18030,big5</span><br><span class="line">set fenc=utf-8</span><br><span class="line">set enc=utf-8</span><br></pre></td></tr></table></figure>

<h2 id="NameNode与Datanode的总结概述"><a href="#NameNode与Datanode的总结概述" class="headerlink" title="NameNode与Datanode的总结概述"></a>NameNode与Datanode的总结概述</h2><p><img src="https://s2.loli.net/2022/02/24/z5CpKxWDQwij72F.png" alt="image-20220224114017791"></p>
<p><img src="https://s2.loli.net/2022/02/24/VOEft6UpDeRHaSg.png" alt="image-20220224114239792"></p>
<p>DNFS不宜放小文件，这样占空间比较多。元数据较多。</p>
<h2 id="元文件FSImage与edits"><a href="#元文件FSImage与edits" class="headerlink" title="元文件FSImage与edits"></a>元文件FSImage与edits</h2><p>FSimage是一个镜像文件，是一个完整的元数据文件</p>
<p>edits：日志文件，是每隔一个小时生成</p>
<p><strong>一般开始时对namenode的操作都放在edits中，为什么不放在fsimage中呢？</strong><br>因为fsimage是namenode的完整的镜像，内容很大，如果每次都加载到内存的话生成树状拓扑结构，这是非常耗内存和CPU。fsimage内容包含了namenode管理下的所有datanode中文件及文件block及block所在的datanode的元数据信息。随着edits内容增大，就需要在一定时间点和fsimage合并。</p>
<p><img src="https://s2.loli.net/2022/02/24/GeZtxCInhD4JLjs.png" alt="image-20220224142317754"></p>
<p><strong>2.x的hadoop元数据合并条件</strong></p>
<p>dfs.namenode.checkpoint.period: 默认是一个小时（3600s)</p>
<p>dfs.namenode.checkpoint.txns：默认为1000000条edits记录</p>
<p><strong>FSimage文件当中的文件信息查看：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd  /opt/servers/hadoop-2.7.7/tmp/dfs/name/current</span><br><span class="line">hdfs oiv -i fsimage_0000000000000000864 -p XML -o hello.xml</span><br></pre></td></tr></table></figure>

<p><strong>edits当中的文件信息查看：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd  /opt/servers/hadoop-2.7.7/tmp/dfs/nn/edits</span><br><span class="line">hdfs oev -i  edits_0000000000000000865-0000000000000000866 -o myedit.xml -p XML</span><br></pre></td></tr></table></figure>

<h2 id="HDFS的文件写入过程"><a href="#HDFS的文件写入过程" class="headerlink" title="HDFS的文件写入过程"></a>HDFS的文件写入过程</h2><p><img src="https://s2.loli.net/2022/02/24/YTvk82yOM3pWbEL.png" alt="image-20220224143902592"></p>
<p>详细步骤解析：</p>
<p>1、 client发起文件上传请求，通过RPC与NameNode建立通讯，NameNode检查目标文件是否已存在，父目录是否存在，返回是否可以上传；</p>
<p>2、 client请求第一个block该传输到哪些DataNode服务器上；</p>
<p>3、 NameNode根据配置文件中指定的备份数量及机架感知原理进行文件分配，返回可用的DataNode的地址如：A，B，C；</p>
<p>注：Hadoop在设计时考虑到数据的安全与高效，数据文件默认在HDFS上存放三份，存储策略为本地一份，同机架内其它某一节点上一份，不同机架的某一节点上一份。</p>
<p>4、 client请求3台DataNode中的一台A上传数据（本质上是一个RPC调用，建立pipeline），A收到请求会继续调用B，然后B调用C，将整个pipeline建立完成，后逐级返回client；</p>
<p>5、 client开始往A上传第一个block（先从磁盘读取数据放到一个本地内存缓存），以packet为单位（默认64K），A收到一个packet就会传给B，B传给C；A每传一个packet会放入一个应答队列等待应答。</p>
<p>6、 数据被分割成一个个packet数据包在pipeline上依次传输，在pipeline反方向上，逐个发送ack（命令正确应答），最终由pipeline中第一个DataNode节点A将pipelineack发送给client;</p>
<p>7、 当一个block传输完成之后，client再次请求NameNode上传第二个block到服务器。</p>
<h2 id="HDFS的文件读取过程"><a href="#HDFS的文件读取过程" class="headerlink" title="HDFS的文件读取过程"></a>HDFS的文件读取过程</h2><p><img src="https://s2.loli.net/2022/02/24/HjyRCrW2afnUcSq.png" alt="image-20220224143737904"></p>
<p>详细步骤解析</p>
<p>1、 Client向NameNode发起RPC请求，来确定请求文件block所在的位置；</p>
<p>2、 NameNode会视情况返回文件的部分或者全部block列表，对于每个block，NameNode 都会返回含有该 block 副本的 DataNode 地址；这些返回的 DN 地址，会按照集群拓扑结构得出 DataNode 与客户端的距离，然后进行排序，排序两个规则：网络拓扑结构中距离 Client 近的排靠前；心跳机制中超时汇报的 DN 状态为 STALE，这样的排靠后；</p>
<p>3、 Client 选取排序靠前的 DataNode 来读取 block，如果客户端本身就是DataNode,那么将从本地直接获取数据(短路读取特性)；</p>
<p>4、 底层上本质是建立 Socket Stream（FSDataInputStream），重复的调用父类 DataInputStream 的 read 方法，直到这个块上的数据读取完毕；</p>
<p>5、 当读完列表的 block 后，若文件读取还没有结束，客户端会继续向NameNode 获取下一批的 block 列表；</p>
<p>6、 读取完一个 block 都会进行 checksum 验证，如果读取 DataNode 时出现错误，客户端会通知 NameNode，然后再从下一个拥有该 block 副本的DataNode 继续读。</p>
<p>7、 read 方法是并行的读取 block 信息，不是一块一块的读取；NameNode 只是返回Client请求包含块的DataNode地址，并不是返回请求块的数据；</p>
<p>8、 最终读取来所有的 block 会合并成一个完整的最终文件。</p>
<h2 id="HDFS基本Shell操作"><a href="#HDFS基本Shell操作" class="headerlink" title="HDFS基本Shell操作"></a>HDFS基本Shell操作</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs#查看命令</span><br></pre></td></tr></table></figure>

<p>创建文件夹（支持多级创建）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir -p /xxx</span><br></pre></td></tr></table></figure>

<p>查看目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls /xxx</span><br></pre></td></tr></table></figure>

<p>递归查看多级目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -lsr /xxx</span><br></pre></td></tr></table></figure>

<p>上传文件到HDFS：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -put xxx.txt /xxx</span><br></pre></td></tr></table></figure>

<p>下载文件到本地当前目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -get /xxx/xxx/xxx.txt  /xxx</span><br></pre></td></tr></table></figure>

<p>删除文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -rm /xxx/xxx/xxx.txt</span><br></pre></td></tr></table></figure>

<p>删除文件夹(文件夹必须为空)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -rmdir /xxx/xxx</span><br></pre></td></tr></table></figure>

<p>强制删除文件夹或文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -rm -r /xxx</span><br></pre></td></tr></table></figure>

<h2 id="HDFS的api操作"><a href="#HDFS的api操作" class="headerlink" title="HDFS的api操作"></a>HDFS的api操作</h2><p>安装准备:</p>
<p>解决winutils.exe的问题</p>
<p>配置环境变量</p>
<p>HADOOP_HOME=”位置”</p>
<p>PATH = %HADOOP_HOME%\bin</p>
<p>把hadoop.dll放到c:\windows\system32</p>
<h3 id="创建maven工程并导入jar包"><a href="#创建maven工程并导入jar包" class="headerlink" title="创建maven工程并导入jar包"></a>创建maven工程并导入jar包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;hadoop-common&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.7.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;hadoop-hdfs&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.7.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;hadoop-client&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.7.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="使用文件系统方式访问数据"><a href="#使用文件系统方式访问数据" class="headerlink" title="使用文件系统方式访问数据"></a>使用文件系统方式访问数据</h3><p>在 java 中操作 HDFS，主要涉及以下 Class：</p>
<p>Configuration：该类的对象封转了客户端或者服务器的配置;</p>
<p>FileSystem：该类的对象是一个文件系统对象，可以用该对象的一些方法来对文件进行操作，通过 FileSystem 的静态方法 get 获得该对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileSystem fs = FileSystem.get(conf)</span><br></pre></td></tr></table></figure>

<p>get 方法从 conf 中的一个参数 fs.defaultFS 的配置值判断具体是什么类型的文件系统。如果我们的代码中没有指定 fs.defaultFS，并且工程 classpath下也没有给定相应的配置，conf中的默认值就来自于hadoop的jar包中的core-default.xml ， 默 认 值 为 ： file:/// ， 则 获 取 的 将 不 是 一 个DistributedFileSystem 的实例，而是一个本地文件系统的客户端对象<br>获取FileSystem的方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Configuration configuration=new Configuration();</span><br><span class="line">configuration.set(&quot;fs.defaultFS&quot;,&quot;hdfs://192.168.64.101:8020&quot;);</span><br><span class="line">FileSystem fileSystem=FileSystem.get(configuration);</span><br><span class="line">System.out.println(fileSystem.toString());</span><br></pre></td></tr></table></figure>

<h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void mkdirs() throws  Exception&#123;</span><br><span class="line">    FileSystem fileSystem = FileSystem.get(new URI(&quot;hdfs://192.168.64.101:8020&quot;), new Configuration());</span><br><span class="line">    boolean mkdirs = fileSystem.mkdirs(new Path(&quot;/hello/mydir/test&quot;));</span><br><span class="line">    fileSystem.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class HDFSDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">       /* Configuration conf = new Configuration();</span><br><span class="line">        //指定hdfs的访问地址</span><br><span class="line">        conf.set(&quot;fs.defaultFS&quot;,&quot;hdfs://hadoop01:8020&quot;);</span><br><span class="line"></span><br><span class="line">        FileSystem fileSystem = FileSystem.get(conf);</span><br><span class="line">        System.out.println(fileSystem.toString());*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /*//上传目录</span><br><span class="line">        Configuration conf = new Configuration();</span><br><span class="line">        //指定hdfs的访问地址</span><br><span class="line">        conf.set(&quot;fs.defaultFS&quot;,&quot;hdfs://hadoop01:8020&quot;);</span><br><span class="line">        //获取文件系统对象</span><br><span class="line">        FileSystem fs = FileSystem.get(conf);</span><br><span class="line">        //创建目录</span><br><span class="line">        fs.mkdirs(new Path(&quot;/test/input&quot;));</span><br><span class="line">        //关闭资源</span><br><span class="line">        fs.close();*/</span><br><span class="line"></span><br><span class="line">        /*//上传文件</span><br><span class="line">        Configuration conf = new Configuration();</span><br><span class="line">        //指定hdfs的访问地址</span><br><span class="line">        conf.set(&quot;fs.defaultFS&quot;,&quot;hdfs://hadoop01:8020&quot;);</span><br><span class="line">        conf.set(&quot;dfs.replication&quot;,&quot;2&quot;);</span><br><span class="line">        //获取文件系统对象</span><br><span class="line">        FileSystem fs = FileSystem.get(conf);</span><br><span class="line">        //创建目录</span><br><span class="line">//        fs.copyFromLocalFile(new Path(&quot;file:///f:\\aaa.txt&quot;),new Path(&quot;/test/input&quot;));</span><br><span class="line">        fs.copyFromLocalFile(new Path(&quot;file:///f:\\aaa.txt&quot;),new Path(&quot;/test/input/bbb.txt&quot;));</span><br><span class="line">        //关闭资源</span><br><span class="line">        fs.close();*/</span><br><span class="line"></span><br><span class="line">        /*//下载文件</span><br><span class="line">        Configuration conf = new Configuration();</span><br><span class="line">        //指定hdfs的访问地址</span><br><span class="line">        conf.set(&quot;fs.defaultFS&quot;,&quot;hdfs://hadoop01:8020&quot;);</span><br><span class="line">        conf.set(&quot;dfs.replication&quot;,&quot;2&quot;);</span><br><span class="line">        //获取文件系统对象</span><br><span class="line">        FileSystem fs = FileSystem.get(conf);</span><br><span class="line">        //创建目录</span><br><span class="line">//        fs.copyFromLocalFile(new Path(&quot;file:///f:\\aaa.txt&quot;),new Path(&quot;/test/input&quot;));</span><br><span class="line">        fs.copyToLocalFile(new Path(&quot;/test/input/bbb.txt&quot;),new Path(&quot;file:///f:\\\\bbb.txt&quot;));</span><br><span class="line">        //关闭资源</span><br><span class="line">        fs.close();*/</span><br><span class="line">        //下载文件</span><br><span class="line">        Configuration conf = new Configuration();</span><br><span class="line">        //指定hdfs的访问地址</span><br><span class="line">        conf.set(&quot;fs.defaultFS&quot;,&quot;hdfs://hadoop01:8020&quot;);</span><br><span class="line">        conf.set(&quot;dfs.replication&quot;,&quot;2&quot;);</span><br><span class="line">        //获取文件系统对象</span><br><span class="line">        FileSystem fs = FileSystem.get(conf);</span><br><span class="line">        //创建目录</span><br><span class="line">//        fs.copyFromLocalFile(new Path(&quot;file:///f:\\aaa.txt&quot;),new Path(&quot;/test/input&quot;));</span><br><span class="line">        fs.copyToLocalFile(new Path(&quot;/test/input/bbb.txt&quot;),new Path(&quot;file:///f:\\bbb.txt&quot;));</span><br><span class="line">        //关闭资源</span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="创建文件夹-1"><a href="#创建文件夹-1" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void getFileToLocal()throws  Exception&#123;</span><br><span class="line">   Configuration configuration=new Configuration();</span><br><span class="line">		configuration.set(&quot;fs.defaultFS&quot;,&quot;hdfs://192.168.64.101:8020&quot;);</span><br><span class="line">	FileSystem fileSystem=FileSystem.get(configuration);</span><br><span class="line">    FSDataInputStream open = fileSystem.open(new Path(&quot;/test/input/install.log&quot;));</span><br><span class="line">    FileOutputStream fileOutputStream = new FileOutputStream(new File(&quot;c:\\install.log&quot;));</span><br><span class="line">    IOUtils.copy(open,fileOutputStream );</span><br><span class="line">    IOUtils.closeQuietly(open);</span><br><span class="line">    IOUtils.closeQuietly(fileOutputStream);</span><br><span class="line">    fileSystem.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void getFileToLocal()throws  Exception&#123;</span><br><span class="line">   Configuration configuration=new Configuration();</span><br><span class="line">		configuration.set(&quot;fs.defaultFS&quot;,&quot;hdfs://192.168.64.101:8020&quot;);</span><br><span class="line">	FileSystem fileSystem=FileSystem.get(configuration);</span><br><span class="line">    FSDataInputStream open = fileSystem.open(new Path(&quot;/test/input/install.log&quot;));</span><br><span class="line">    FileOutputStream fileOutputStream = new FileOutputStream(new File(&quot;c:\\install.log&quot;));</span><br><span class="line">    IOUtils.copy(open,fileOutputStream );</span><br><span class="line">    IOUtils.closeQuietly(open);</span><br><span class="line">    IOUtils.closeQuietly(fileOutputStream);</span><br><span class="line">    fileSystem.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上传文件</span><br><span class="line">@Test</span><br><span class="line">public void putData() throws  Exception&#123;</span><br><span class="line">  	Configuration configuration=new Configuration();</span><br><span class="line">		configuration.set(&quot;fs.defaultFS&quot;,&quot;hdfs://192.168.64.101:8020&quot;);</span><br><span class="line">	FileSystem fileSystem=FileSystem.get(configuration);</span><br><span class="line">    fileSystem.copyFromLocalFile(new Path(&quot;file:///c:\\install.log&quot;),new Path(&quot;/hello/mydir/test&quot;));</span><br><span class="line">    fileSystem.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="MapReduce介绍"><a href="#MapReduce介绍" class="headerlink" title="MapReduce介绍"></a>MapReduce介绍</h1><h2 id="理解MapReduce思想"><a href="#理解MapReduce思想" class="headerlink" title="理解MapReduce思想"></a>理解MapReduce思想</h2><p> MapReduce思想在生活中处处可见。或多或少都曾接触过这种思想。MapReduce的思想核心是“<strong>分而治之</strong>”，适用于大量复杂的任务处理场景（大规模数据处理场景）。即使是发布过论文实现分布式计算的谷歌也只是实现了这种思想，而不是自己原创。</p>
<p>Map负责“分”，即把复杂的任务分解为若干个“简单的任务”来并行处理。可以进行拆分的前提是这些小任务可以并行计算，彼此间几乎没有依赖关系。</p>
<p>Reduce(规约)负责“合”，即对map阶段的结果进行全局汇总。</p>
<p><img src="https://s2.loli.net/2022/02/25/6RN7vMpimCQYa2x.png" alt="image-20220225145609927"></p>
<h3 id="数据处理结构图"><a href="#数据处理结构图" class="headerlink" title="数据处理结构图"></a>数据处理结构图</h3><p><img src="https://s2.loli.net/2022/02/26/3UqNRxfeOHBjYVC.png" alt="image-20220226095357744"></p>
<h2 id="WordCount实例"><a href="#WordCount实例" class="headerlink" title="WordCount实例"></a>WordCount实例</h2><h3 id="准备数据并上传"><a href="#准备数据并上传" class="headerlink" title="准备数据并上传"></a>准备数据并上传</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt/servers</span><br><span class="line">vim wordcount.txt</span><br><span class="line"></span><br><span class="line">hello world hadoop</span><br><span class="line">hive sqoop flume hello</span><br><span class="line">kitty tom jerry world</span><br><span class="line">hadoop</span><br><span class="line"></span><br><span class="line">hdfs dfs -mkdir -p /wordcount/input</span><br><span class="line">hdfs dfs -put wordcount.txt /wordcount/input</span><br></pre></td></tr></table></figure>



<h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><h4 id="编写mapper"><a href="#编写mapper" class="headerlink" title="编写mapper"></a>编写mapper</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * LongWritable:k1,行的偏移量</span><br><span class="line"> * Text:v1,行的值</span><br><span class="line"> * Test:k2，出去的key，就是词</span><br><span class="line"> * IntWritable:v2,出去的value值，出现的一次</span><br><span class="line"> */</span><br><span class="line">public class WordMapper extends Mapper&lt;LongWritable, Text,Text, IntWritable&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 每来一行数据调用一次方法</span><br><span class="line">     * @param key：当前行的偏移量</span><br><span class="line">     * @param value:当前行的值</span><br><span class="line">     * @param context:上下文</span><br><span class="line">     * @throws IOException</span><br><span class="line">     * @throws InterruptedException</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException &#123;</span><br><span class="line">        //hello hadoop -&gt;hello,1  hadoop,1</span><br><span class="line">//        获取当前行数据</span><br><span class="line">        String line = value.toString();</span><br><span class="line">//        将当前行数据拆分成一个一个词</span><br><span class="line">        String[] words = line.split(&quot; &quot;);</span><br><span class="line">        for (String word:words)&#123;</span><br><span class="line">            //将词出现1次方式输出</span><br><span class="line">            context.write(new Text(word),new IntWritable(1));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写Reducer"><a href="#编写Reducer" class="headerlink" title="编写Reducer"></a>编写Reducer</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * hello,1  hello,1    -&gt; hello,6</span><br><span class="line"> * Text:K2,词</span><br><span class="line"> * IntWritable：v2，出现的1次</span><br><span class="line"> * Text：k3，词</span><br><span class="line"> * IntWritable：v3，出现的总次数</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class WordReducer extends Reducer&lt;Text, IntWritable, Text,IntWritable&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * hello,(1,1,1,1,1,1)  =&gt;  hello,6</span><br><span class="line">     *</span><br><span class="line">     * @param key:词，聚合的元素    hello</span><br><span class="line">     * @param values：聚合的v2数据 (1,1,1,1,1,1)</span><br><span class="line">     * @param context：上下文</span><br><span class="line">     * @throws IOException</span><br><span class="line">     * @throws InterruptedException</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    protected void reduce(Text key, Iterable&lt;IntWritable&gt; values, Context context) throws IOException, InterruptedException &#123;</span><br><span class="line">        //定义变量接收累加值</span><br><span class="line">        Long count = 0L;</span><br><span class="line">        //循环遍历每一个值，然后进行累加</span><br><span class="line">        for (IntWritable value:values)&#123;</span><br><span class="line">            count += value.get();</span><br><span class="line">        &#125;</span><br><span class="line">        //hello,6</span><br><span class="line">        context.write(key,new IntWritable(count.intValue()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写运行main函数"><a href="#编写运行main函数" class="headerlink" title="编写运行main函数"></a>编写运行main函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class JobMain &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        //构建一个运行作业的job对象</span><br><span class="line">        Configuration conf = new Configuration();</span><br><span class="line">        Job job = Job.getInstance(conf, JobMain.class.getSimpleName());</span><br><span class="line"></span><br><span class="line">        //如果放到服务器上打包运行，一定要加上</span><br><span class="line">        job.setJarByClass(JobMain.class);</span><br><span class="line"></span><br><span class="line">        //1.指定数据读取的方式</span><br><span class="line">        job.setInputFormatClass(TextInputFormat.class);</span><br><span class="line">        TextInputFormat.addInputPath(job,</span><br><span class="line">                new Path(&quot;hdfs://hadoop01:8020/test/input/wordcount.txt&quot;));</span><br><span class="line"></span><br><span class="line">        //2.设定map</span><br><span class="line">        job.setMapperClass(WordMapper.class);</span><br><span class="line">        //指明map的输出类型  hello 1</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">        //7.设定reduce</span><br><span class="line">        job.setReducerClass(WordReducer.class);</span><br><span class="line">        //执行reduce的输出k3，v3类型   hello，6</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">        //8.结果的写出保存</span><br><span class="line">        job.setOutputFormatClass(TextOutputFormat.class);</span><br><span class="line">        TextOutputFormat.setOutputPath(job,</span><br><span class="line">                new Path(&quot;hdfs://hadoop01:8020/test/output/001&quot;));</span><br><span class="line"></span><br><span class="line">        job.waitForCompletion(true);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Hive简介"><a href="#Hive简介" class="headerlink" title="Hive简介"></a>Hive简介</h1><h2 id="什么是Hive"><a href="#什么是Hive" class="headerlink" title="什么是Hive"></a>什么是Hive</h2><p>Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供类SQL查询功能（HQL）。</p>
<p>其本质是将SQL转换为MapReduce的任务进行运算，底层由HDFS来提供数据的存储，说白了hive可以理解为一个将SQL转换为MapReduce的任务的工具，甚至更进一步可以说hive就是一个MapReduce的客户端。</p>
<h2 id="Hive架构图"><a href="#Hive架构图" class="headerlink" title="Hive架构图"></a>Hive架构图</h2><p><img src="https://s2.loli.net/2022/02/25/SchbaBENgQftGDo.png" alt="image-20220225163722320"></p>
<h1 id="HIVE的安装部署"><a href="#HIVE的安装部署" class="headerlink" title="HIVE的安装部署"></a>HIVE的安装部署</h1><h2 id="derby版hive直接使用"><a href="#derby版hive直接使用" class="headerlink" title="derby版hive直接使用"></a>derby版hive直接使用</h2><p>前提：Hive安装非常简单，解压之后即可直接运行，不需要太多配置，前提是要配置JAVA_HOME和HADOOP_HOME。并且Hadoop要全量启动（五个进程）</p>
<h3 id="解压hive"><a href="#解压hive" class="headerlink" title="解压hive"></a>解压hive</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt/softwares</span><br><span class="line">tar -xvzf apache-hive-2.3.6-bin.tar.gz -C ../servers/</span><br></pre></td></tr></table></figure>

<h3 id="修改目录名称"><a href="#修改目录名称" class="headerlink" title="修改目录名称"></a>修改目录名称</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ../servers/</span><br><span class="line">mv apache-hive-2.3.6-bin hive-2.3.6</span><br></pre></td></tr></table></figure>

<h3 id="初始化元数据库"><a href="#初始化元数据库" class="headerlink" title="初始化元数据库"></a>初始化元数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd hive-2.3.6</span><br><span class="line">bin/schematool -dbType derby -initSchema</span><br></pre></td></tr></table></figure>

<h3 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h3><p>在hive-2.3.6目录下执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/hive</span><br></pre></td></tr></table></figure>

<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database jtdb;</span><br></pre></td></tr></table></figure>

<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use jtdb;</span><br><span class="line">create table tb_user(id int,name string);</span><br></pre></td></tr></table></figure>

<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into table tb_user values(1,&quot;zhangfei&quot;);</span><br></pre></td></tr></table></figure>

<p>Hive在必要的时候会将HQL编译为MR来执行。</p>
<h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><p>Hive启动不了<br>检查JAVA_HOME和HADOOP_HOME是否配置成功。如果没有问题并报错：Cannot find hadoop installation: $HADOOP_HOME or….</p>
<p>解决办法：</p>
<p>指定HADOOP_HOME路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt/servers/hive-2.3.6/conf</span><br><span class="line">cp hive-env.sh.template hive-env.sh</span><br><span class="line">vim hive-env.sh</span><br></pre></td></tr></table></figure>

<p>增加HADOOP_HOME</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HADOOP_HOME=/opt/servers/hadoop-2.7.7</span><br></pre></td></tr></table></figure>

<h3 id="Hive启动报错Safe-mode"><a href="#Hive启动报错Safe-mode" class="headerlink" title="Hive启动报错Safe mode"></a>Hive启动报错Safe mode</h3><p>Hadoop在启动时有个安全模式，其在启动时有些工作要做，元数据的处理，DataNode的等待等过程。需要一段时间，遇到时需要等一段时间，耐心稍微等一会。过会自动就会好。</p>
<p>如果长时间还报错，还在安全模式。可以手工设置退出安全模式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop dfsadmin -safemode leave</span><br></pre></td></tr></table></figure>

<p>参数value的说明如下：</p>
<ol>
<li>enter - 进入安全模式</li>
<li>leave - 强制NameNode离开安全模式</li>
<li>get - 返回安全模式是否开启的信息</li>
<li>wait - 等待，一直到安全模式结束</li>
</ol>
<h2 id="基于mysql管理元数据版hive"><a href="#基于mysql管理元数据版hive" class="headerlink" title="基于mysql管理元数据版hive"></a>基于mysql管理元数据版hive</h2><h3 id="解压hive-1"><a href="#解压hive-1" class="headerlink" title="解压hive"></a>解压hive</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt/softwares</span><br><span class="line">tar -xvzf apache-hive-2.3.6-bin.tar.gz -C ../servers/</span><br></pre></td></tr></table></figure>

<h3 id="修改目录名称-1"><a href="#修改目录名称-1" class="headerlink" title="修改目录名称"></a>修改目录名称</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ../servers/</span><br><span class="line">mv apache-hive-2.3.6-bin hive-2.3.6</span><br></pre></td></tr></table></figure>

<h3 id="检测服务器mysql数据库"><a href="#检测服务器mysql数据库" class="headerlink" title="检测服务器mysql数据库"></a>检测服务器mysql数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<h3 id="配置mysql允许外网访问"><a href="#配置mysql允许外网访问" class="headerlink" title="配置mysql允许外网访问"></a>配置mysql允许外网访问</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27; with grant option; </span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h3 id="退出mysql"><a href="#退出mysql" class="headerlink" title="退出mysql"></a>退出mysql</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit;</span><br></pre></td></tr></table></figure>

<h3 id="修改配置文件hive-site-xml"><a href="#修改配置文件hive-site-xml" class="headerlink" title="修改配置文件hive-site.xml"></a>修改配置文件hive-site.xml</h3><p>创建hive-site.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch hive-site.xml</span><br></pre></td></tr></table></figure>

<p>添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span><br><span class="line"> </span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line"> </span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;property&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;name&gt;hive.default.fileformat&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;value&gt;TextFile&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;property&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;!--端口改为你自己的端口，这里是连接数据库中hive数据库--&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;value&gt;jdbc:mysql://hadoop01:3306/hive?createDatabaseIfNotExist=true&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;description&gt;JDBC connect string for a JDBC metastore&lt;/description&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;property&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;description&gt;Driver class name for a JDBC metastore&lt;/description&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;property&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;!--连接MySQL的用户名--&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;value&gt;root&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;description&gt;username to use against metastore database&lt;/description&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;property&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;!--连接MySQL的密码--&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;value&gt;root&lt;/value&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;description&gt;password to use against metastore database&lt;/description&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/property&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<h3 id="上传mysql驱动"><a href="#上传mysql驱动" class="headerlink" title="上传mysql驱动"></a>上传mysql驱动</h3><p>将资料中mysql-connector-java-5.1.38-bin.jar上传到hive的lib目录中。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure>

<p>显示schemaTool completed，表示执行成功。</p>
<p>重复上述创建表的操作。</p>
<p>注意：先删除之前在hdfs上的目录。</p>
<p>DBS：数据库信息</p>
<p><img src="https://s2.loli.net/2022/02/28/BcJ8nEsiVdatgZO.png" alt="image-20220228092518111"></p>
<p>TBLS：表信息</p>
<p><img src="https://s2.loli.net/2022/02/28/sMHTZC2gAO3qb5z.png" alt="image-20220228092538142"></p>
<p>SDS：表详细信息</p>
<p><img src="https://s2.loli.net/2022/02/28/feU28oKhCvTjVlN.png" alt="image-20220228092602450"></p>
<p>COLUMNS_V2：列信息</p>
<p><img src="https://s2.loli.net/2022/02/28/CqnOfyjaXJWzGTh.png" alt="image-20220228092633074"></p>
<h2 id="创建数据库与创建数据库表"><a href="#创建数据库与创建数据库表" class="headerlink" title="创建数据库与创建数据库表"></a>创建数据库与创建数据库表</h2><h3 id="管理表（内部表）"><a href="#管理表（内部表）" class="headerlink" title="管理表（内部表）"></a>管理表（内部表）</h3><h4 id="创建数据库操作"><a href="#创建数据库操作" class="headerlink" title="创建数据库操作"></a>创建数据库操作</h4><h5 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database if not exists myhive;</span><br><span class="line">use  myhive;</span><br></pre></td></tr></table></figure>

<p>说明：hive的表存放位置模式是由hive-site.xml当中的一个属性指定的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;</span><br><span class="line">&lt;value&gt;/user/hive/warehouse&lt;/value&gt;</span><br></pre></td></tr></table></figure>

<h5 id="创建数据库并指定hdfs存储位置"><a href="#创建数据库并指定hdfs存储位置" class="headerlink" title="创建数据库并指定hdfs存储位置"></a>创建数据库并指定hdfs存储位置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database myhive2 location &#x27;/myhive2&#x27;;   </span><br></pre></td></tr></table></figure>

<h5 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h5><p>可以使用alter database 命令来修改数据库的一些属性。但是数据库的元数据信息是不可更改的，包括数据库的名称以及数据库所在的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter  database  myhive2  set  dbproperties(&#x27;createtime&#x27;=&#x27;20210611&#x27;);</span><br></pre></td></tr></table></figure>

<h5 id="查看数据库详细信息"><a href="#查看数据库详细信息" class="headerlink" title="查看数据库详细信息"></a>查看数据库详细信息</h5><p>查看数据库基本信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc  database  myhive2;</span><br></pre></td></tr></table></figure>

<p>查看数据库更多详细信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc database extended  myhive2; </span><br></pre></td></tr></table></figure>

<h5 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h5><p>删除一个空数据库，如果数据库下面有数据表，那么就会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop  database  myhive2;</span><br></pre></td></tr></table></figure>

<p>强制删除数据库，包含数据库下面的表一起删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop  database  myhive  cascade;   //不要执行了</span><br></pre></td></tr></table></figure>

<h4 id="创建数据库表操作"><a href="#创建数据库表操作" class="headerlink" title="创建数据库表操作"></a>创建数据库表操作</h4><h5 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use myhive;</span><br><span class="line">create table stu(id int,name string);</span><br><span class="line">insert into stu values (1,&quot;zhangsan&quot;);</span><br><span class="line">select * from stu;</span><br></pre></td></tr></table></figure>

<h5 id="Hive建表时候的字段类型"><a href="#Hive建表时候的字段类型" class="headerlink" title="Hive建表时候的字段类型"></a>Hive建表时候的字段类型</h5><table>
<thead>
<tr>
<th><strong>分类</strong></th>
<th><strong>类型</strong></th>
<th><strong>描述</strong></th>
<th><strong>字面量示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>原始类型</td>
<td>BOOLEAN</td>
<td>true/false</td>
<td>TRUE</td>
</tr>
<tr>
<td></td>
<td>TINYINT</td>
<td>1字节的有符号整数 -128~127</td>
<td>1Y</td>
</tr>
<tr>
<td></td>
<td>SMALLINT</td>
<td>2个字节的有符号整数，-32768~32767</td>
<td>1S</td>
</tr>
<tr>
<td></td>
<td>INT</td>
<td>4个字节的带符号整数</td>
<td>1</td>
</tr>
<tr>
<td></td>
<td>BIGINT</td>
<td>8字节带符号整数</td>
<td>1L</td>
</tr>
<tr>
<td>FLOAT</td>
<td>4字节单精度浮点数1.0</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>DOUBLE</td>
<td>8字节双精度浮点数</td>
<td>1.0</td>
</tr>
<tr>
<td></td>
<td>DEICIMAL</td>
<td>任意精度的带符号小数</td>
<td>1.0</td>
</tr>
<tr>
<td></td>
<td>STRING</td>
<td>字符串，变长</td>
<td>“a”,’b’</td>
</tr>
<tr>
<td></td>
<td>VARCHAR</td>
<td>变长字符串</td>
<td>“a”,’b’</td>
</tr>
<tr>
<td></td>
<td>CHAR</td>
<td>固定长度字符串</td>
<td>“a”,’b’</td>
</tr>
<tr>
<td></td>
<td>BINARY</td>
<td>字节数组</td>
<td>无法表示</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>时间戳，毫秒值精度</td>
<td>122327493795</td>
<td></td>
</tr>
<tr>
<td></td>
<td>DATE</td>
<td>日期</td>
<td>‘2016-03-29’</td>
</tr>
<tr>
<td></td>
<td><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types#LanguageManualTypes-Intervals">INTERVAL</a></td>
<td>时间频率间隔</td>
<td></td>
</tr>
<tr>
<td>复杂类型</td>
<td>ARRAY</td>
<td>有序的的同类型的集合</td>
<td>array(1,2)</td>
</tr>
<tr>
<td>MAP</td>
<td>key-value,key必须为原始类型，value可以任意类型</td>
<td>map(‘a’,1,’b’,2)</td>
<td></td>
</tr>
<tr>
<td></td>
<td>STRUCT</td>
<td>字段集合,类型可以不同</td>
<td>struct(‘1’,1,1.0), named_stract(‘col1’,’1’,’col2’,1,’clo3’,1.0)</td>
</tr>
<tr>
<td>UNION</td>
<td>在有限取值范围内的一个值</td>
<td>create_union(1,’a’,63)</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h5 id="创建表并指定字段之间的分隔符"><a href="#创建表并指定字段之间的分隔符" class="headerlink" title="创建表并指定字段之间的分隔符"></a>创建表并指定字段之间的分隔符</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create  table if not exists stu2(id int ,name string) row format delimited fields terminated by &#x27;\t&#x27;  stored as textfile location &#x27;/user/stu2&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="外部表："><a href="#外部表：" class="headerlink" title="外部表："></a>外部表：</h3><h4 id="外部表说明："><a href="#外部表说明：" class="headerlink" title="外部表说明："></a>外部表说明：</h4><p>外部表因为是指定其他的hdfs路径的数据加载到表当中来，所以hive表会认为自己不完全独占这份数据，所以删除hive表的时候，数据仍然存放在hdfs当中，不会删掉。</p>
<p>内部表：当删除表的时候，表结构和表数据全部都会删除掉。</p>
<p>外部表：当删除表的时候，认为表的数据会被其他人使用，自己没有独享数据的权利，所以只会删除掉表的结构（元数据），不会删除表的数据。</p>
<h6 id="操作案例"><a href="#操作案例" class="headerlink" title="操作案例"></a>操作案例</h6><p>分别创建老师与学生表外部表，并向表中加载数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create external table teacher (t_id string,t_name string) row format delimited fields terminated by &#x27;\t&#x27;;</span><br></pre></td></tr></table></figure>

<p>创建学生表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create external table student (s_id string,s_name string,s_birth string , s_sex string ) row format delimited fields terminated by &#x27;\t&#x27;;</span><br></pre></td></tr></table></figure>

<p>从本地文件系统向表中加载数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load data local inpath &#x27;/opt/data/hivedatas/student.csv&#x27; into table student;</span><br></pre></td></tr></table></figure>

<p>加载数据并覆盖已有数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load data local inpath &#x27;/opt/data/hivedatas/student.csv&#x27; overwrite  into table student;</span><br></pre></td></tr></table></figure>

<p>从hdfs文件系统向表中加载数据（需要提前将数据上传到hdfs文件系统，其实就是一个移动文件的操作）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt/servers/hivedatas</span><br><span class="line">hdfs dfs -mkdir -p /hivedatas</span><br><span class="line">hdfs dfs -put teacher.csv /hivedatas/</span><br><span class="line">load data inpath &#x27;/hivedatas/teacher.csv&#x27; into table teacher;</span><br></pre></td></tr></table></figure>

<p>如果删掉student表，hdfs的数据仍然存在，并且重新创建表之后，表中就直接存在数据了,因为我们的student表使用的是外部表，drop table之后，表当中的数据依然保留在hdfs上面了。</p>
<h3 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h3><h5 id="创建分区表语法"><a href="#创建分区表语法" class="headerlink" title="创建分区表语法"></a>创建分区表语法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table score(s_id string,c_id string, s_score int) partitioned by (month string) row format delimited fields terminated by &#x27;\t&#x27;;</span><br></pre></td></tr></table></figure>

<h5 id="创建一个表带多个分区"><a href="#创建一个表带多个分区" class="headerlink" title="创建一个表带多个分区"></a>创建一个表带多个分区</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table score2 (s_id string,c_id string, s_score int) partitioned by (year string,month string,day string) row format delimited fields terminated by &#x27;\t&#x27;;</span><br></pre></td></tr></table></figure>

<h5 id="加载数据到分区表中"><a href="#加载数据到分区表中" class="headerlink" title="加载数据到分区表中"></a>加载数据到分区表中</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load data local inpath &#x27;/opt/data/hivedatas/score.csv&#x27; into table score partition (month=&#x27;201806&#x27;);</span><br></pre></td></tr></table></figure>

<h5 id="加载数据到一个多分区的表中去"><a href="#加载数据到一个多分区的表中去" class="headerlink" title="加载数据到一个多分区的表中去"></a>加载数据到一个多分区的表中去</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load data local inpath &#x27;/opt/data/hivedatas/score.csv&#x27; into table score2 partition(year=&#x27;2018&#x27;,month=&#x27;06&#x27;,day=&#x27;01&#x27;);</span><br></pre></td></tr></table></figure>

<h5 id="查看分区"><a href="#查看分区" class="headerlink" title="查看分区"></a>查看分区</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show  partitions  score;</span><br></pre></td></tr></table></figure>

<h5 id="添加一个分区"><a href="#添加一个分区" class="headerlink" title="添加一个分区"></a>添加一个分区</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table score add partition(month=&#x27;201805&#x27;);</span><br></pre></td></tr></table></figure>

<h5 id="同时添加多个分区"><a href="#同时添加多个分区" class="headerlink" title="同时添加多个分区"></a>同时添加多个分区</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table score add partition(month=&#x27;201804&#x27;) partition(month = &#x27;201803&#x27;);</span><br></pre></td></tr></table></figure>

<p>注意：添加分区之后就可以在hdfs文件系统当中看到表下面多了一个文件夹</p>
<h5 id="删除分区"><a href="#删除分区" class="headerlink" title="删除分区"></a>删除分区</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table score drop partition(month = &#x27;201806&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="分桶表"><a href="#分桶表" class="headerlink" title="分桶表"></a>分桶表</h3><p>将数据按照指定的字段进行分成多个桶中去，说白了就是将数据按照字段进行划分，可以将数据按照字段划分到多个文件当中去</p>
<p>开启hive的桶表功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set hive.enforce.bucketing=true;</span><br></pre></td></tr></table></figure>

<p>设置reduce的个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set mapreduce.job.reduces=3;</span><br></pre></td></tr></table></figure>

<p>创建通表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table course (c_id string,c_name string,t_id string) clustered by(c_id) into 3 buckets row format delimited fields terminated by &#x27;\t&#x27;;</span><br></pre></td></tr></table></figure>

<p>桶表的数据加载，由于桶表的数据加载通过hdfs dfs -put文件或者通过load data均不好使，只能通过insert overwrite</p>
<p>创建普通表，并通过insert overwrite的方式将普通表的数据通过查询的方式加载到桶表当中去</p>
<h5 id="创建普通表："><a href="#创建普通表：" class="headerlink" title="创建普通表："></a>创建普通表：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table course_common (c_id string,c_name string,t_id string) row format delimited fields terminated by &#x27;\t&#x27;; </span><br></pre></td></tr></table></figure>

<h5 id="普通表中加载数据"><a href="#普通表中加载数据" class="headerlink" title="普通表中加载数据"></a>普通表中加载数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load data local inpath &#x27;/opt/servers/hivedatas/course.csv&#x27; into table course_common;</span><br></pre></td></tr></table></figure>

<p>通过insert overwrite给桶表中加载数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert overwrite table course select * from course_common cluster by(c_id);</span><br></pre></td></tr></table></figure>

<p>按百分比取样：整表数据的百分之三十</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from course tablesample(30 percent);</span><br></pre></td></tr></table></figure>

<h2 id="hive查询方法"><a href="#hive查询方法" class="headerlink" title="hive查询方法"></a>hive查询方法</h2><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><h4 id="全表查询"><a href="#全表查询" class="headerlink" title="全表查询"></a>全表查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from score;</span><br></pre></td></tr></table></figure>

<h5 id="选择特定列查询"><a href="#选择特定列查询" class="headerlink" title="选择特定列查询"></a>选择特定列查询</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select s_id ,c_id from score;</span><br></pre></td></tr></table></figure>

<h5 id="列别名"><a href="#列别名" class="headerlink" title="列别名"></a>列别名</h5><p>1）重命名一个列。</p>
<p>2）便于计算。</p>
<p>3）紧跟列名，也可以在列名和别名之间加入关键字‘AS’</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select s_id as myid ,c_id from score;</span><br></pre></td></tr></table></figure>

<h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p>求总行数（count）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(1) from score;</span><br></pre></td></tr></table></figure>

<p>求分数的最大值（max）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select max(s_score) from score;</span><br></pre></td></tr></table></figure>

<p>求分数的最小值（min）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select min(s_score) from score;</span><br></pre></td></tr></table></figure>

<p>求分数的总和（sum）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select sum(s_score) from score;</span><br></pre></td></tr></table></figure>

<p>求分数的平均值（avg）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select avg(s_score) from score;</span><br></pre></td></tr></table></figure>

<h3 id="LIMIT语句"><a href="#LIMIT语句" class="headerlink" title="LIMIT语句"></a>LIMIT语句</h3><p>典型的查询会返回多行数据。LIMIT子句用于限制返回的行数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from score limit 3;</span><br></pre></td></tr></table></figure>

<h3 id="WHERE语句"><a href="#WHERE语句" class="headerlink" title="WHERE语句"></a>WHERE语句</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from score where s_score &gt; 60;</span><br></pre></td></tr></table></figure>

<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><h4 id="GROUP-BY语句"><a href="#GROUP-BY语句" class="headerlink" title="GROUP BY语句"></a>GROUP BY语句</h4><p>GROUP BY语句通常会和聚合函数一起使用，按照一个或者多个列队结果进行分组，然后对每个组执行聚合操作。</p>
<p>案例实操：</p>
<p>计算每个学生的平均分数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select s_id ,avg(s_score) from score group by s_id;</span><br></pre></td></tr></table></figure>

<p>计算每个学生最高成绩</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select s_id ,max(s_score) from score group by s_id;</span><br></pre></td></tr></table></figure>

<h4 id="HAVING语句"><a href="#HAVING语句" class="headerlink" title="HAVING语句"></a>HAVING语句</h4><p>1）having与where不同点</p>
<p>（1）where针对表中的列发挥作用，查询数据；having针对查询结果中的列发挥作用，筛选数据。</p>
<p>（2）where后面不能写分组函数，而having后面可以使用分组函数。</p>
<p>（3）having只用于group by分组统计语句。</p>
<p>2）案例实操：</p>
<p> 求每个学生的平均分数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select s_id ,avg(s_score) from score group by s_id;</span><br></pre></td></tr></table></figure>

<p> 求每个学生平均分数大于85的人</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select s_id ,avg(s_score) avgscore from score group by s_id having avgscore &gt; 85;</span><br></pre></td></tr></table></figure>

















]]></content>
      <categories>
        <category>Java</category>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程序知识了解</title>
    <url>/2022/01/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E4%BA%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="基本语法使用"><a href="#基本语法使用" class="headerlink" title="基本语法使用:"></a>基本语法使用:</h2><h5 id="wx-for的使用"><a href="#wx-for的使用" class="headerlink" title="wx:for的使用"></a>wx:for的使用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wx:for=&quot;&#123;&#123;list&#125;&#125;&quot;用来循环数组，而list即为数组名wx:for-item=&quot;items&quot; 即用来定义一个循环过程中每个元素的变量的</span><br><span class="line">如果是一维数组,按照如下方式循环出来：</span><br><span class="line">&lt;view wx:for=&quot;&#123;&#123;list&#125;&#125;&quot;&gt;</span><br><span class="line">&#123;&#123;index&#125;&#125; &#123;&#123;item.name&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<h5 id="如果是二维甚至多维数组，按照如下方式循环："><a href="#如果是二维甚至多维数组，按照如下方式循环：" class="headerlink" title="如果是二维甚至多维数组，按照如下方式循环："></a>如果是二维甚至多维数组，按照如下方式循环：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;parentList&#125;&#125;&quot;&gt;</span><br><span class="line">&#123;&#123;item.id&#125;&#125;</span><br><span class="line">&lt;view wx:for=&quot;&#123;&#123;item.childList&#125;&#125;&quot; wx:for-item=&quot;items&quot;&gt;</span><br><span class="line">&#123;&#123;items.name&#125;&#125;&#123;&#123;item.account&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">for (var i = 0 ; i &lt; list.length; i++) &#123;</span><br><span class="line">var xxx = list[i];</span><br><span class="line">&#125;</span><br><span class="line">等同于</span><br><span class="line">&lt;view wx:for=&quot;&#123;&#123;list&#125;&#125;&quot; wx:for-item=&quot;xxx&quot;&gt;&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<h5 id="谨记：wx-for是循环数组，wx-for-item即给列表赋别名"><a href="#谨记：wx-for是循环数组，wx-for-item即给列表赋别名" class="headerlink" title="谨记：wx:for是循环数组，wx:for-item即给列表赋别名"></a>谨记：wx:for是循环数组，wx:for-item即给列表赋别名</h5><p>可以使用wx:for-item指定数组当前元素的变量名<br>可以使用wx:for-index指定数组当前下标的变量名，事例如下：<br>wxml文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;items&#125;&#125;&quot; wx:for-item=&quot;name&quot; wx:for-index=&quot;id&quot;&gt;</span><br><span class="line">&#123;&#123;id&#125;&#125;: &#123;&#123;name.one&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<p>下面是一个九九乘法表事例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;[1,2,3,4,5,6,7,8,9]&#125;&#125;&quot; wx:for-item=&quot;i&quot;&gt;</span><br><span class="line">&lt;view</span><br><span class="line"> wx:for=&quot;&#123;&#123;[1,2,3,4,5,6,7,8,9]&#125;&#125;&quot; wx:for-item=&quot;j&quot;&gt;</span><br><span class="line">&lt;view</span><br><span class="line"> wx:if=&quot;&#123;&#123;i &lt;= j&#125;&#125;&quot;&gt;</span><br><span class="line">&#123;&#123;i&#125;&#125;*&#123;&#123;j&#125;&#125; = &#123;&#123;i * j&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/02/27/3V7vOnj5Tkiyr8w.png" alt="image-20220227142824094"></p>
<p>云开发经常用于个人项目。使用的原因是因为免费的配置可以使用。发布网页首选。</p>
<p><img src="https://s2.loli.net/2022/01/15/rjkYxMS1BVs9CRK.png" alt="image-20220115115144570"></p>
<p>其中包括云函数，云数据库，云文件存储，数据分析功能。</p>
<p><img src="https://s2.loli.net/2022/01/15/ejGdtohs7lkDBTP.png" alt="image-20220115115436079"></p>
<p>点击左上角的云开发，弹出界面。可使用免费配置。点击开通。</p>
<p>进入界面:</p>
<p><img src="https://s2.loli.net/2022/01/15/eg5RY8fTnHDxNuK.png" alt="image-20220115115741621"></p>
<h3 id="初始环境准备"><a href="#初始环境准备" class="headerlink" title="初始环境准备"></a>初始环境准备</h3><p>project.config.json文件夹下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;description&quot;: &quot;项目配置文件&quot;,</span><br><span class="line">  &quot;cloudfunctionRoot&quot;:&quot;cloud&quot;,</span><br><span class="line">  &quot;packOptions&quot;: &#123;</span><br><span class="line">    &quot;ignore&quot;: []</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>创建目录cloud，显示:</p>
<p><img src="https://s2.loli.net/2022/01/15/wknhUq31THtugzB.png" alt="image-20220115120850399"></p>
<h3 id="云开发数据库操作"><a href="#云开发数据库操作" class="headerlink" title="云开发数据库操作"></a>云开发数据库操作</h3><h4 id="添加数据库"><a href="#添加数据库" class="headerlink" title="添加数据库"></a>添加数据库</h4><p>app.js中:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line">  onLaunch() &#123;</span><br><span class="line">    wx.cloud.init(&#123;</span><br><span class="line">      env: &#x27;env-6ggdazpq682cce7d&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  globalData: &#123;</span><br><span class="line">    userInfo: null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>index.js中:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const db = wx.cloud.database().collection(&quot;list&quot;)</span><br><span class="line">Page(&#123;</span><br><span class="line">  addData()&#123;</span><br><span class="line">    db.add(&#123;</span><br><span class="line">      data:&#123;</span><br><span class="line">        name:&quot;CSX&quot;,</span><br><span class="line">        age:20</span><br><span class="line">      &#125;,</span><br><span class="line">      success(res)&#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">      &#125;,fail(res)&#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查询数据</p>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/query-array-object.html">微信云数据库</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查询数据方法</span><br><span class="line">  getData()&#123;</span><br><span class="line">    db.get(&#123;</span><br><span class="line">      success(res)&#123;</span><br><span class="line">        console.log(&quot;查询数据&quot;,res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">匹配数组</span><br><span class="line">假设在集合中有如下一个记录：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;numbers&quot;: [10, 20, 30]</span><br><span class="line">&#125;</span><br><span class="line">可以传入一个完全相同的数组来筛选出这条记录：</span><br><span class="line">db.collection(&#x27;todos&#x27;).where(&#123;</span><br><span class="line">  numbers: [10, 20, 30]</span><br><span class="line">&#125;).get()</span><br></pre></td></tr></table></figure>

<p>删除数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delData()&#123;</span><br><span class="line">    console.log(this.data.id);</span><br><span class="line">    db.doc(this.data.id).remove(&#123;</span><br><span class="line">      success: function(res) &#123;</span><br><span class="line">        console.log(res.data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>更新数据:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//更新数据</span><br><span class="line">  updateData()&#123;</span><br><span class="line">    db.doc(this.data.id).update(&#123;</span><br><span class="line">      data:&#123;</span><br><span class="line">        name:this.data.name,</span><br><span class="line">        age:this.data.age</span><br><span class="line">      &#125;,</span><br><span class="line">      success(res)&#123;</span><br><span class="line">          console.log(&quot;更新成功&quot;,res.data);</span><br><span class="line">      &#125;,</span><br><span class="line">      fail(res)&#123;</span><br><span class="line">        console.log(&quot;更新成功&quot;,res.data);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="云函数开发环境"><a href="#云函数开发环境" class="headerlink" title="云函数开发环境:"></a>云函数开发环境:</h3><p>和pages同级目录下创建cloud。</p>
<p>project.config.json配置文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;description&quot;: &quot;项目配置文件&quot;,</span><br><span class="line">  &quot;cloudfunctionRoot&quot;:&quot;/cloud&quot;,</span><br><span class="line">  &quot;packOptions&quot;: &#123;</span><br><span class="line">    &quot;ignore&quot;: []</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>初始化云开发环境</p>
<p><img src="https://s2.loli.net/2022/01/15/sBqEYPOuIKrcT7R.png" alt="image-20220115181513146"></p>
<p>操作步骤:</p>
<p>cloud文件夹下新建node.js云函数</p>
<p>上传并部署依赖</p>
<h4 id="packageJson："><a href="#packageJson：" class="headerlink" title="packageJson："></a>packageJson：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;add&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;wx-server-sdk&quot;: &quot;~2.5.3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js:"></a>index.js:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 云函数入口文件</span><br><span class="line">const cloud = require(&#x27;wx-server-sdk&#x27;)</span><br><span class="line"></span><br><span class="line">cloud.init()//云函数初始化</span><br><span class="line"></span><br><span class="line">// 云函数入口函数</span><br><span class="line">exports.main = async (event, context) =&gt; &#123;</span><br><span class="line">  let a=event.a;</span><br><span class="line">  let b=event.b;</span><br><span class="line">  return a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在要引用页面的js中编写，调用云函数："><a href="#在要引用页面的js中编写，调用云函数：" class="headerlink" title="在要引用页面的js中编写，调用云函数："></a>在要引用页面的js中编写，调用云函数：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">//云函数测试</span><br><span class="line">  qiuhe()&#123;</span><br><span class="line">    console.log(&quot;你好&quot;);</span><br><span class="line">    wx.cloud.callFunction(&#123;</span><br><span class="line">      name:&quot;add&quot;,#调用函数</span><br><span class="line">      data:&#123;  #传入参数</span><br><span class="line">        a:1,</span><br><span class="line">        b:3</span><br><span class="line">      &#125;,</span><br><span class="line">      success(res)&#123;</span><br><span class="line">        console.log(&quot;请求成功&quot;,res);</span><br><span class="line">      &#125;,</span><br><span class="line">      fail(res)&#123;</span><br><span class="line">        console.log(&quot;请求失败&quot;,res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="云函数请求数据库数据"><a href="#云函数请求数据库数据" class="headerlink" title="云函数请求数据库数据"></a>云函数请求数据库数据</h4><p>packapgeJson：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;getshuju&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;wx-server-sdk&quot;: &quot;~2.5.3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>config.json:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;permissions&quot;: &#123;</span><br><span class="line">    &quot;openapi&quot;: [</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>index.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 云函数入口文件</span><br><span class="line">const cloud = require(&#x27;wx-server-sdk&#x27;)</span><br><span class="line"></span><br><span class="line">cloud.init(&#123;</span><br><span class="line">  env: &#x27;env-6ggdazpq682cce7d&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 云函数入口函数</span><br><span class="line">exports.main = async (event, context) =&gt; &#123;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  return cloud.database().collection(&quot;users&quot;).get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">//云函数获取数据库</span><br><span class="line">  yunhanshu()&#123;</span><br><span class="line">    wx.cloud.callFunction(&#123;</span><br><span class="line">      name:&quot;getshuju&quot;,</span><br><span class="line">      success(res)&#123;</span><br><span class="line">        console.log(&quot;成功&quot;,res)</span><br><span class="line">      &#125;,fail(res)&#123;</span><br><span class="line">        console.log(&quot;失败&quot;,res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="获取用户id："><a href="#获取用户id：" class="headerlink" title="获取用户id："></a>获取用户id：</h4><p>index.js:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 云函数入口文件</span><br><span class="line">const cloud = require(&#x27;wx-server-sdk&#x27;)</span><br><span class="line"></span><br><span class="line">cloud.init()</span><br><span class="line"></span><br><span class="line">// 云函数入口函数</span><br><span class="line">exports.main = async (event, context) =&gt; &#123;</span><br><span class="line">  const wxContext = cloud.getWXContext()</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    event,</span><br><span class="line">    openid: wxContext.OPENID,</span><br><span class="line">    appid: wxContext.APPID,</span><br><span class="line">    unionid: wxContext.UNIONID,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件存储服务应用"><a href="#文件存储服务应用" class="headerlink" title="文件存储服务应用"></a>文件存储服务应用</h2><p>index.wxml文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button bindtap=&quot;upload&quot;&gt;上传图片&lt;/button&gt;</span><br><span class="line">&lt;image src=&quot;&#123;&#123;imgUrl&#125;&#125;&quot;&gt;&lt;/image&gt;</span><br><span class="line">&lt;button bindtap=&quot;uploadVideo&quot;&gt;上传视频&lt;/button&gt;</span><br><span class="line">&lt;video src=&quot;&#123;&#123;videoUrl&#125;&#125;&quot;&gt;&lt;/video&gt;</span><br><span class="line">&lt;button bindtap=&quot;uploadExcel&quot;&gt;上传Excel文件&lt;/button&gt;</span><br><span class="line">&lt;button bindtap=&quot;openExcel&quot;&gt;下载excel文件&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>index.js文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// index.js</span><br><span class="line">// 获取应用实例</span><br><span class="line">const app = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">   imgUrl:&quot;&quot;,</span><br><span class="line">   videoUr:&quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">openExcel()&#123;</span><br><span class="line">  wx.cloud.downloadFile(&#123;</span><br><span class="line">    fileID: &#x27;cloud://env-6ggdazpq682cce7d.656e-env-6ggdazpq682cce7d-1309272002/1653572976725.xlsx&#x27;, // 文件 ID</span><br><span class="line">    success: res =&gt; &#123;</span><br><span class="line">      // 返回临时文件路径</span><br><span class="line">      console.log(res.tempFilePath);</span><br><span class="line">      wx.openDocument(&#123;</span><br><span class="line">        filePath: res.tempFilePath,</span><br><span class="line">        success:function(res)&#123;</span><br><span class="line">          console.log(&quot;打开文件成功：&quot;,res);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: console.error</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">  ,</span><br><span class="line">  //上传文件</span><br><span class="line">  uploadExcel()&#123;</span><br><span class="line">    wx.chooseMessageFile(&#123;</span><br><span class="line">      count: 1,</span><br><span class="line">      type: &#x27;all&#x27;,</span><br><span class="line">      success (res) &#123;</span><br><span class="line">        // tempFilePath可以作为 img 标签的 src 属性显示图片</span><br><span class="line">        const tempFilePaths = res.tempFiles;</span><br><span class="line">        wx.cloud.uploadFile(&#123;</span><br><span class="line">          cloudPath: new Date().getTime()+&quot;.xlsx&quot;, // 上传至云端的路径</span><br><span class="line">          filePath: res.tempFiles[0].path, // 小程序临时文件路径</span><br><span class="line">          success: res =&gt; &#123;</span><br><span class="line">            // 返回文件 ID</span><br><span class="line">            console.log(&quot;上传成功&quot;,res)</span><br><span class="line">          &#125;,</span><br><span class="line">          fail: console.error</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  ,</span><br><span class="line">  upload()&#123;</span><br><span class="line">    let that = this;</span><br><span class="line">    console.log(&quot;文件上传&quot;);</span><br><span class="line">    wx.chooseImage(&#123;</span><br><span class="line">      count: 1,</span><br><span class="line">      sizeType: [&#x27;original&#x27;, &#x27;compressed&#x27;],</span><br><span class="line">      sourceType: [&#x27;album&#x27;, &#x27;camera&#x27;],</span><br><span class="line">      success (res) &#123;</span><br><span class="line">        console.log(&quot;选择成功：&quot;,res);</span><br><span class="line">        that.uploadImg(res.tempFilePaths[0]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  uploadImg(fileUrl)&#123;</span><br><span class="line">    console.log(fileUrl);</span><br><span class="line">    wx.cloud.uploadFile(&#123;</span><br><span class="line">          cloudPath: new Date().getTime()+&quot;.png&quot;, // 上传至云端的路径</span><br><span class="line">          filePath: fileUrl, // 小程序临时文件路径</span><br><span class="line">          success: res =&gt; &#123;</span><br><span class="line">            // 返回文件 ID</span><br><span class="line">            console.log(&quot;上传成功&quot;,res)</span><br><span class="line">            this.setData(&#123;</span><br><span class="line">              imgUrl:res.fileID</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          fail: console.error</span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  uploadVideo()&#123;</span><br><span class="line">    wx.chooseVideo(&#123;</span><br><span class="line">      sourceType: [&#x27;album&#x27;,&#x27;camera&#x27;],</span><br><span class="line">      maxDuration: 60,</span><br><span class="line">      camera: &#x27;back&#x27;,</span><br><span class="line">      success(res) &#123;</span><br><span class="line">        console.log(&quot;上传视频:&quot;,res.tempFilePath)</span><br><span class="line">        wx.cloud.uploadFile(&#123;</span><br><span class="line">          cloudPath: new Date().getTime()+&quot;.mp4&quot;, // 上传至云端的路径</span><br><span class="line">          filePath: res.tempFilePath, // 小程序临时文件路径</span><br><span class="line">          success: res =&gt; &#123;</span><br><span class="line">            // 返回文件 ID</span><br><span class="line">            console.log(&quot;上传成功&quot;,res)</span><br><span class="line">          &#125;,</span><br><span class="line">          fail: console.error</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="云函数调用云函数"><a href="#云函数调用云函数" class="headerlink" title="云函数调用云函数"></a>云函数调用云函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 云函数入口文件</span><br><span class="line">const cloud = require(&#x27;wx-server-sdk&#x27;)</span><br><span class="line"></span><br><span class="line">cloud.init()</span><br><span class="line"></span><br><span class="line">// 云函数入口函数</span><br><span class="line">exports.main = async (event, context) =&gt; &#123;</span><br><span class="line">  const wxContext = cloud.getWXContext()</span><br><span class="line">  const db = cloud.database()</span><br><span class="line">  try &#123;</span><br><span class="line">    return await db.collection(&#x27;testTrigger&#x27;).get() //testTrigger是集合名</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.error(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 云函数入口文件</span><br><span class="line">const cloud = require(&#x27;wx-server-sdk&#x27;)</span><br><span class="line"></span><br><span class="line">cloud.init()</span><br><span class="line"></span><br><span class="line">// 云函数入口函数</span><br><span class="line">exports.main = async (event, context) =&gt; &#123;</span><br><span class="line">  const wxContext = cloud.getWXContext()</span><br><span class="line">  const db = cloud.database()</span><br><span class="line">  const t = new Date(); //获取当前时间</span><br><span class="line">  const res = await cloud.callFunction(&#123; //调用云函数getdate</span><br><span class="line">    // 要调用的云函数名称</span><br><span class="line">    name: &#x27;getdata&#x27;,</span><br><span class="line">    // 传递给云函数的参数</span><br><span class="line">    data: &#123;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  const arr=res.result.data; //把所有记录给arr</span><br><span class="line">  try&#123;</span><br><span class="line">    for (let i = 0; i &lt; arr.length;i++)&#123;</span><br><span class="line">      if (t.getTime() - arr[i].createTime &gt; 120000) &#123; // 计算差值，删除的条件</span><br><span class="line">        await db.collection(&#x27;testTrigger&#x27;).doc(arr[i]._id).remove()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr.length;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.error(e)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>微信小程序</category>
        <category>云开发</category>
      </categories>
  </entry>
  <entry>
    <title>视频剪辑学习记录</title>
    <url>/2022/07/27/%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>爬虫基础</title>
    <url>/2022/01/20/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>fiddler抓包:<br>    shift+delete<br>    保存单机右键：save-&gt;selected session-&gt;as text<br>    上面请求，下面响应报文<br>    rules：hide connects把turned to隐藏<br>    添加备注信息。replay重发。shift+R重发，go执行，decode解码，靶选择要抓的应用程序。textwizard解码工具，customer rules自定义规则。webform表单形式。<br>    auto_response:add rule并且使用enable rule unmatched request passthrough<br>    composer:发送包，设计器<br>    reset all重置证书</p>
<p>python基础：<br>    python类：<br>        _name = ‘protected类型的变量’<br>        __info = ‘私有类型的变量’<br>        方法也一样<br>        class Employee:<br>           ‘所有员工的基类’<br>           empCount = 0<br>           def <strong>init</strong>(self, name, salary):<br>              self.name = name<br>              self.salary = salary<br>              Employee.empCount += 1<br>           def displayCount(self):<br>             print “Total Employee %d” % Employee.empCount<br>           def displayEmployee(self):<br>              print “Name : “, self.name,  “, Salary: “, self.salary<br>            def <strong>del</strong>(self):<br>              class_name = self.<strong>class</strong>.<strong>name</strong><br>              print class_name, “销毁”<br>        Python内置类属性：<br>            <strong>dict</strong> : 类的属性（包含一个字典，由类的数据属性组成）<br>            <strong>doc</strong> :类的文档字符串<br>            <strong>name</strong>: 类名<br>            <strong>module</strong>: 类定义所在的模块（类的全名是’<strong>main</strong>.className’，如果类位于一个导入模块mymod中，那么className.<strong>module</strong> 等于 mymod）<br>            <strong>bases</strong> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）</p>
<p>第一个简单的python爬虫:<br>        #导入包<br>        import requests</p>
<pre><code>    #在main函数中运行
    if __name__==&quot;__main__&quot;:
    
    #指定url
    url = &quot;https://www.so.com/s?ie=utf-8&amp;src=hao_360so_b_cube&amp;shb=1&amp;hsid=fcd7c6a7a1a6ae9d&quot;
    
    #q请求参数封装字典
    param = &#123;
    &quot;q&quot;: wd,
    &#125;

    headers=&#123;
    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36 QIHU 360SE/12.2.1426.0&quot;
    &#125;
    
    #请求过程中带上请求的参数
    response=requests.get(url=url,param=param)
    
    #写入文件
    page_text=response.text
    fileName=kw+&quot;html&quot;
    with open(fileName,&#39;w&#39;,encoding=&#39;utf-8&#39;) as fp:
        fp.write(page_text)
    print(fileName,&#39;保存成功！！！&#39;)
    
提交json数据：
    # -*- coding:utf-8 -*-
    data=&#123;&#125; #提交数据的类型:使用 data 参数时，发送的数据默认使用 application/x-www-form-urlencoded 编码方式进行处理，Content-Type 字段的值为 application/x-www-form-urlencoded
    或者json=&#123;&#125;不用了  #提交数据的类型:Content-Type 字段的值为 application/json，证明是通过 application/json 编码发送的数据
    然后：data=json.dumps(data)
    json处理：
        import json

        a_file = open(&quot;netconfig.json&quot;,&quot;r&quot;)
        json_object = json.load(a_file)
        a_file.close()
        print(json_object)

        json_object[&quot;ssid&quot;] = &quot;mywifi&quot;

        a_file=open(&quot;netconfig.json&quot;,&quot;w&quot;)
        json.dump(json_object,a_file)
        a_file.close()
</code></pre>
<p>Python爬虫之selenium模拟浏览器操作：</p>
<pre><code>    # coding = utf-8
    #模拟浏览器自动登录yahoo邮箱
    from selenium import webdriver
    from time import sleep
    from selenium.webdriver.chrome.options import Options

    #一下三行为无头模式运行，无头模式不开启浏览器，也就是在程序里面运行的
    chrome_options = Options()
    chrome_options.add_argument(&quot;--headless&quot;)
    browser = webdriver.Chrome(executable_path=(r&#39;C:\Users\0923\AppData\Local\Google\Chrome\Application\chromedriver.exe&#39;), options=chrome_options)
    # #如果不用上面三行，那么就用下面这一行。运行的时候回自动的开启浏览器，并在浏览器中自动运行，你可以看到自动运行的过程
    # browser = webdriver.Chrome(executable_path=(r&#39;C:\Users\0923\AppData\Local\Google\Chrome\Application\chromedriver.exe&#39;))
    #设置访问链接
    browser.get(&quot;https://www.yahoo.com&quot;)
    #点击登录按钮
    browser.find_element_by_id(&quot;uh-signin&quot;).click()
    #输入用户名
    browser.find_element_by_id(&quot;login-username&quot;).send_keys(&quot;bjs***99&quot;)
    #点击“下一步”
    browser.find_element_by_id(&quot;login-signin&quot;).click()
    #等待10秒，以防读取不到（#login-passwd）元素
    sleep(10)
    #输入密码
    browser.find_element_by_id(&quot;login-passwd&quot;).send_keys(&quot;Zf***234&quot;)
    #点击signin按钮
    browser.find_element_by_id(&quot;login-signin&quot;).click()
    #获取cookie
    cookie_items = browser.get_cookies()
    cookie_str = &quot;&quot;
    #组装cookie字符串
    for item_cookie in cookie_items:
        item_str = item_cookie[&quot;name&quot;]+&quot;=&quot;+item_cookie[&quot;value&quot;]+&quot;; &quot;
        cookie_str += item_str
        print(item_cookie)
    #打印出来看一下
    print(cookie_str)
    # sleep(5)
    # browser.get_screenshot_as_file(&#39;test.png&#39;)
    # browser.close()
    # print(&#39;test!&#39;)

    作用：获取动态加载，实现模拟登陆
    
    Goole驱动程序:http://chromedriver.storage.googleapis.com/index.html
    Goole驱动程序器:http://bolg.csdn.net/builan_same/sarticle/details/51896672
    #导入包：
    form selenium import webdriver
    #选择驱动
    bro = webdriver.Chrome(executable_path=&quot;驱动路径&quot;)
    #发起请求
    bro.get(&quot;指定URL&quot;)
    获取当前页面的源码数据：
    page_text = bro.page_source
    
    然后导入lxml进行解析.....
    #标签定位
    search_input = bro.find_element_by_id(&#39;q&#39;)
    #标签交互
    search_input.send_keys(&#39;Iphone&#39;)
    #点击搜索
    btn = bro.find_element_by_css_selector(&#39;.btn-search&#39;)
    btn.click()
    #执行一组js程序
    bro.execut_script(&#39;window.scrollTo(0,document.body.scrollHeight&#39;)
    #后退
    bro.back()
    bro.forward()
    sleep(5)
    #退出
    bro.quit()
    
    #如果定位的标签是存在于外部的iframe标签之中则必须通过如下操作在进行标签定位
    bro.switch_to.frame(&#39;iframeResult&#39;)
    div = bro.find_element_by_id(&#39;id标签&#39;)
    
    #动作链
    导入包：from selenium.webdriver import ActionChains
    
    action = ActionChains(bro)
    #点击长按的指定div标签
    action.click_and_hold(div)#div是element对象
    
    for i in range(5):
        #perform()立即执行动作链操作
        action.move_by_offset(17,0).perform() #这个方法传两个参数,offeset(x,y)：x是水平，y是数值
        sleep(0.3)
    
    #释放动作
    action.release()
    print(div)
    
    #无头浏览器，无可视化界面(无头浏览器)
    导入包：from selenium.webdriver.chrome.options import Options
    chrome_options=Options()
    chrome_options.add_argument(&#39;--headless&#39;)
    chrome_options.add_argument(&#39;--disable-gpu&#39;)
    #然后操作浏览器代码
    
    #实现selenium规避检查的代码
    导入包：from selenium.webdriver import ChromeOptions
    option = ChromeOptions()
    option.add_experimental_option(&#39;excludeSwitches&#39;,[&#39;enable-automation&#39;])
    bro = webdriver.Chrome(executable_path=&#39;&#39;,chrome_options=chrome_options)
        
    验证码：超鹰官网：http://www.chaojiying.com/about.html
    
    #save_screenshot作用将当前界面截图保存
    bro.save_screenshot(&#39;aa.png&#39;)
    
    #确定验证码图片左上角和右下角的坐标
    code_img_ele = bro.find_element_by_xpath(&#39;&#39;)
    location = code_img_ele.location#验证码图片左上角的坐标x,y
    size = code_img_ele.size#验证码的长和宽
    #左上角和右下角坐标
    强转: int(x)
    rangle=&#123;
    &#125;
    
    #图片裁剪
    导入包：from PIL import Image
    i = Image.open(&#39;&#39;)
    code_img_name=&#39;.code.png&#39;
    #crop根据区域进行图片的裁剪
    frame = i.crop(rangle)
    frame.save(code_img_name)
    #验证码进行识别
    
    点击：ActionChains(bro).move_to_element_with_offset(code_img_ele,x,y).click().perform()
    time.sleep(0.5)
    bro.find_element_by_id(&#39;&#39;).send_keys(&#39;&#39;)
执行js代码：
    driver.execute_script(&#39;document.getElementById(&quot;kw&quot;).value = &quot;test&quot;&#39;);
    模拟键盘f12：builder.key_down(Keys.F12).perform()

ActionChains(driver).move_to_element(move).perform()#移动
click(on_element=None) ——单击鼠标左键
click_and_hold(on_element=None) ——点击鼠标左键，不松开
context_click(on_element=None) ——点击鼠标右键
double_click(on_element=None) ——双击鼠标左键
drag_and_drop(source, target) ——拖拽到某个元素然后松开
drag_and_drop_by_offset(source, xoffset, yoffset) ——拖拽到某个坐标然后松开
key_down(value, element=None) ——按下某个键盘上的键
key_up(value, element=None) ——松开某个键
move_by_offset(xoffset, yoffset) ——鼠标从当前位置移动到某个坐标
move_to_element(to_element) ——鼠标移动到某个元素
move_to_element_with_offset(to_element, xoffset, yoffset) ——移动到距某个元素（左上角坐标）多少距离的位置
perform() ——执行链中的所有动作
release(on_element=None) ——在某个元素位置松开鼠标左键
send_keys(*keys_to_send) ——发送某个键到当前焦点的元素
send_keys_to_element(element, *keys_to_send) ——发送某个键到指定元素
滑块验证方法：
    driver.switch_to.frame(driver.find_element_by_xpath(&#39;&#39;));
    switch_to_default_content()方法返回到主页面
    
    FindPic(self,target=&quot;&quot;背景图,template=&quot;&quot;):
        target_rgb=cv2.imread(target)
        target_gray=cv2.cvtColor(target_rgb,cv2.COLOR_BGR2GRAY)
        template_rgb=cv2.imread(template,0)
        res=cv2.matchTemplate(target_gray,template_rgb,cv2.TM_CCOEF_NORMED)
        value=cv2.minMaxLoc(res)
        print(value)
        return value[2][0]
    img=cv2.imread(&quot;&quot;)
    w1=img.shape[1]


    bro.switch_to.frame(0)
    element=bro.find_element_by_id(&quot;slideBlock&quot;)
    # 使用click_and_hold()方法悬停在滑块上，perform()方法用于执行
    ActionChains(bro).click_and_hold(on_element=element).perform()
    ActionChains(bro).move_to_element_with_offset(to_element=element,xoffset=200,yoffset=0).perform()
    # 模拟人类对准时间
    # 释放滑块
    ActionChains(bro).release().perform()
    
切换标签页:
    # 获取当前窗口句柄（窗口A）
    # handle = browser.current_window_handle
    # 获取当前所有窗口句柄（窗口A、B）
    handles = browser.window_handles #返回数组,取值handles[0]
    browser.close()#关闭当前标签页
    browser.quit()#关闭浏览器
</code></pre>
<p>爬虫解析之BeautifulSoup用法：<br>        导入包：from bs4 import BeautifulSoup<br>        #爬取对象加载<br>        soup = BeautifulSoup(page_text,’lxml’)<br>        解析文章的标题和详情页面<br>        li_list = soup.select(‘.book-mulu&gt;ul&gt;li’)<br>        fp = open(‘./‘,’w’,encoding = ‘utf-8’)<br>        soup.find(‘div’,class_=’chapter_content’)#要加下划线</p>
<pre><code>    print(soup.a)#返回的是第一次出现的tagName标签。
    soup.find(&#39;div&#39;)等同于soup.div
    soup.find(&#39;div&#39;,class/id/attr_=&#39;song&#39;)#属性定位
    soup.find_all(&#39;a&#39;)#返回的是符合要求的所有标签
    
    soup.select(&#39;.tang&#39;)#.表示类选择器
    soup.select(&#39;.tang&gt;ul&#39;)[0].text #表示类选择器下一级,text表示文本
    soup.select(&#39;.tang&gt;ul&#39;)[0].get_text()#可以获取某一个标签中所有的文本内容
    soup.select(&#39;.tang&gt;ul&#39;)[0][&#39;href&#39;]#获取属性值
</code></pre>
<p>xpath表达式:<br>        导入包：from lxml import etree</p>
<pre><code>    r = tree.xpath(&#39;//div[@class=&quot;song&quot;][7]&#39;)#//是多级跳跃，/是单级跳跃,索引从1开始
    
    r = tree.xpath(&#39;//div[@class=&quot;tang&quot;]//text()&#39;)
    r = tree.xpath(&#39;//div[@class=&quot;tang&quot;]/img/@src&#39;)
解决方法：
    res = requests.get(url)
    html = etree.HTML(res.content)
    contents = html.xpath(&#39;//div/xxxx&#39;)
</code></pre>
<p>第二种：<br>    res = requests.get(url)<br>    html_text = bytes(bytearray(res.text, encoding=’utf-8’))<br>    html = etree.HTML(html_text)<br>    contents = html.xpath(‘//div/xxxx’)</p>
<p>模拟登陆：<br>        requests携带cookie值就可以了<br>        使用session发送post请求<br>        response = session.post(url = url,headers=header,data=data)<br>        data_page_text=session.get(url = url,headers=header,data=data)</p>
<p>设置代理：<br>        response = session.post(url = url,headers=header,data=data，proxies={‘https’:’代理地址’})<br>        -透明：服务器知道该次请求使用了代理，也知道请求对应的真实ip<br>        -匿名：知道使用了代理，不知道真实ip<br>        -高匿：不知道使用了代理，更不知道真实的ip</p>
<p>多线程之爬虫异步：<br>            #线程池<br>                导入包: from multiprocessing.dump import Pool<br>                def get_page(msg){<br>                }<br>                pool = Pool(4)<br>                pool.map(get_page,name_list)    进程部署</p>
<pre><code>            时间验证：
                start_time = time.time()
                中间代码
                end_time=time.time()
            for req in requests:  进程仍进线程池
    　　　　     pool.putRequest(req) 
            pool.wait()
    进程池：
        from multiprocessing import Pool as ProcessPool
        def ulib_fetch&#123;
        &#125;#函数
        g_url_list =[]#列表
        process_pool = ProcessPool(3)
        ret = process_pool.apply_async(函数, (参数,))调用开辟的进程池
        process_pool.close()关闭
        process_pool.join()等待
        print json.dumps(ret.get(), False, False)
</code></pre>
<p>​<br>​<br>​<br>​        import multiprocessing<br>​        另一种麻烦的：<br>​        def do(n):             # 参数n由args=(1,)传入<br>​            name = multiprocessing.current_process().name        # 获取当前进程的名字<br>​            print(name, ‘starting’)<br>​            print(“worker “, n)<br>​            return<br>​<br>        if <strong>name</strong> == ‘<strong>main</strong>‘:<br>            numList = []<br>            for i in range(5):<br>                p = multiprocessing.Process(target=do, args=(i,))      # (i,)中加入”,”表示元祖<br>                numList.append(p)<br>                print(numList)<br>                p.start()                 # 用start()方法启动进程，执行do()方法<br>                p.join()                  # 等待子进程结束以后再继续往下运行，通常用于进程间的同步<br>                print(“Process end.”)</p>
<pre><code>    异步协同：
    async def request(url):
        #aiohttp:基于异步网络请求模块进行制定url的请求发送
        #get(),post();
        #headers,params/data
        asyncio with aiohttp.ClientSession as session:
            async with await session.get(url,headers) as response:
                获取响应数据要手动挂起
                #text一字符串形式响应数据
                #read以二进制的响应数据
                #奇偶苏宁()返回的就是json的数据对象
                page_text = await reponse.text()
                
        await asyncio.sleep()
        
    #tasks=[]#存放多个任务列表对象
    for url in urls:
        c = request(url)
        #当在asyncio中遇到阻塞操作必须手动挂起
        task = asyncio.ensure_future(c)
        stasks.appent(task)
        
    循环开启对象
    
    loop = asyncio.get_event_loop()
    需要将任务列表封装到wait中
    loop.run_until_complete(asyncio.wait(stasks))
    
    #json数据转换并且写入文件
    
    list_data = response.json()
    fp = open(&#39;&#39;,&#39;w&#39;,encoding=&#39;utf-8&#39;)
    json.dump(list_data,fp = fp,ensure_ascii=False)
    img_name.encode(&#39;iso-8859-1&#39;).decode(&#39;gbk&#39;)#编码转换
    res.text.encode(&#39;utf-8&#39;).decode(&#39;unicode_escape&#39;)#编码转换
    print(&#39;over!!!&#39;)
</code></pre>
<p>​<br>​        导入包：<br>​                import thread<br>​                import time<br>​                # 为线程定义一个函数<br>​                def print_time( threadName, delay):<br>​                    pass<br>​                # 创建两个线程<br>​                try:<br>​                   thread.start_new_thread( print_time, (“Thread-1”, 2, ) )<br>​                   thread.start_new_thread( print_time, (“Thread-2”, 4, ) )<br>​                except:<br>​                   print “Error: unable to start thread”<br>​<br>        Python通过两个标准库thread和threading提供对线程的支持。thread提供了低级别的、原始的线程以及一个简单的锁。</p>
<pre><code>    threading 模块提供的其他方法：

    threading.currentThread(): 返回当前的线程变量。
    threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。
    threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。
    除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法:

    run(): 用以表示线程活动的方法。
    start():启动线程活动。
    join([time]): 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生。
    isAlive(): 返回线程是否活动的。
    getName(): 返回线程名。
    setName(): 设置线程名。
    第一种：
    import threading
    函数
    def b(x):
        #for i in range(5):
        print(&#39;Program b(&#39;+x+&#39;) is running... at &#39;, ctime(),u&#39;.线程名为：&#39;,threading.current_thread().name )
        time.sleep(0.1)
    print(&#39;Mainthread %s is running...&#39; % threading.current_thread().name)
    thread_list = []
    #加入线程数组
    t3 = threading.Thread(target=b, args=(&#39;Java&#39;,))
    thread_list.append(t3)
    循环加入守护线程
    for t in thread_list:
        t.setDaemon(True)  # 设置为守护线程，不会因主线程结束而中断
        t.start()
    for t in thread_list:
        t.join()  # 子线程全部加入，主线程等所有子线程运行完毕
</code></pre>
<p>​<br>​<br>​        第二种：<br>​        class myThread (threading.Thread):   #继承父类threading.Thread<br>​            def <strong>init</strong>(self, threadID, name, counter):#覆写threading.Thread类<br>​                threading.Thread.<strong>init</strong>(self)# 重构run函数必须要写<br>​                self.threadID = threadID<br>​                self.name = name<br>​                self.counter = counter<br>​            def run(self):                   #把要执行的代码写到run函数里面 线程在创建后会直接运行run函数<br>​                print “Starting “ + self.name<br>​                print_time(self.name, self.counter, 5)//外置函数<br>​                print “Exiting “ + self.name<br>​        # 创建新线程<br>​        thread1 = myThread(1, “Thread-1”, 1)<br>​        thread2 = myThread(2, “Thread-2”, 2)<br>​<br>        # 开启线程<br>        thread1.start()<br>        thread2.start()<br>        #线程锁：</p>
<pre><code>        threadLock = threading.Lock()
    # 获得锁，成功获得锁定后返回True
    # 可选的timeout参数不填时将一直阻塞直到获得锁定
    # 否则超时后将返回False
    threadLock.acquire()
    print_time(self.name, self.counter, 3)
    # 释放锁
    threadLock.release()
    #等待线程执行完毕：
    for t in threads:
        t.join()
        
    线程队列：
        导入包：
        
            import Queue
            import threading
            import time
            
            exitFlag = 0

            class myThread (threading.Thread):
                def __init__(self, threadID, name, q):
                    threading.Thread.__init__(self)# 重构run函数必须要写
                    self.threadID = threadID
                    self.name = name
                    self.q = q
                def run(self):
                    print &quot;Starting &quot; + self.name
                    process_data(self.name, self.q)
                    print &quot;Exiting &quot; + self.name

            def process_data(threadName, q):
                while not exitFlag:
                    queueLock.acquire()            队列锁
                    if not workQueue.empty():
                        data = q.get()
                        queueLock.release()        队列锁释放
                        print &quot;%s processing %s&quot; % (threadName, data)
                    else:
                        queueLock.release()
                    time.sleep(1)

            threadList = [&quot;Thread-1&quot;, &quot;Thread-2&quot;, &quot;Thread-3&quot;]
            nameList = [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;, &quot;Four&quot;, &quot;Five&quot;]
            queueLock = threading.Lock()  线程锁
            workQueue = Queue.Queue(10)
            threads = []
            threadID = 1
            # 创建新线程
            for tName in threadList:
                thread = myThread(threadID, tName, workQueue)
                thread.start()
                threads.append(thread)
                threadID += 1
            # 填充队列
            queueLock.acquire()
            for word in nameList:
                workQueue.put(word)
            queueLock.release()
             
            # 等待队列清空
            while not workQueue.empty():
                pass
             
            # 通知线程是时候退出
            exitFlag = 1
            # 等待所有线程完成
            for t in threads:
                t.join()
        import threading
        import time

        def run(n):
            pass
        if __name__ == &#39;__main__&#39;:
        t1 = threading.Thread(target=run, args=(&quot;t1&quot;,))
        t2 = threading.Thread(target=run, args=(&quot;t2&quot;,))
        t.setDaemon(True)   #把子进程设置为守护线程，必须在start()之前设置
        #共享全局变量
        g_num = 100
        g_num = 100

        def work1():
            global g_num
            for i in range(3):
                g_num += 1
            print(&quot;in work1 g_num is : %d&quot; % g_num)
        互斥锁：
        import threading
        import time

        def Func(lock):
            global gl_num
            lock.acquire()
            gl_num += 1
            time.sleep(1)
            print(gl_num)
            lock.release()

        if __name__ == &#39;__main__&#39;:
            gl_num = 0
            lock = threading.RLock()
            for i in range(10):
                t = threading.Thread(target=Func, args=(lock,))
                t.start()
                
        semaphore = threading.BoundedSemaphore(5)  # 最多允许5个线程同时运行
            semaphore.acquire()   #加锁
            time.sleep(1)
            print(&quot;run the thread:%s\n&quot; % n)
            semaphore.release()     #释放
            
        事件（Event类）
        python线程的事件用于主线程控制其他线程的执行，事件是一个简单的线程同步对象，其主要提供以下几个方法：

        clear 将flag设置为“False”
        set 将flag设置为“True”
        is_set 判断是否设置了flag
        wait 会一直监听flag，如果没有检测到flag就一直处于阻塞状态
        事件处理的机制：全局定义了一个“Flag”，当flag值为“False”，那么event.wait()就会阻塞，当flag值为“True”，那么event.wait()便不再阻塞。
</code></pre>
<h2 id="多线程案例"><a href="#多线程案例" class="headerlink" title="多线程案例"></a>多线程案例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">event.isSet()：返回event的状态值；</span><br><span class="line"></span><br><span class="line">event.wait()：如果 event.isSet()==False将阻塞线程；</span><br><span class="line"></span><br><span class="line">event.set()： 设置event的状态值为True，所有阻塞池的线程激活进入就绪状态， 等待操作系统调度；</span><br><span class="line"></span><br><span class="line">event.clear()：恢复event的状态值为False。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from threading import Thread,Event</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">event=Event()</span><br><span class="line"></span><br><span class="line">def light():</span><br><span class="line">    print(&#x27;红灯正亮着&#x27;)</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    event.set() #绿灯亮</span><br><span class="line"></span><br><span class="line">def car(name):</span><br><span class="line">    print(&#x27;车%s正在等绿灯&#x27; %name)</span><br><span class="line">    event.wait() #等灯绿 此时event为False,直到event.set()将其值设置为True,才会继续运行.</span><br><span class="line">    print(&#x27;车%s通行&#x27; %name)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    # 红绿灯</span><br><span class="line">    t1=Thread(target=light)</span><br><span class="line">    t1.start()</span><br><span class="line">    # 车</span><br><span class="line">    for i in range(10):</span><br><span class="line">        t=Thread(target=car,args=(i,))</span><br><span class="line">        t.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>正则表达式：<br>        import re<br>        re.I    使匹配对大小写不敏感<br>        re.L    做本地化识别（locale-aware）匹配<br>        re.M    多行匹配，影响 ^ 和 $<br>        re.S    使 . 匹配包括换行在内的所有字符<br>        re.U    根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.<br>        re.X    该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</p>
<pre><code>    re.findall(ex,page_text,re.S)
    
    . ：用于匹配任意一个字符，如 a.c 可以匹配 abc 、aac 、akc 等
    ^ ：用于匹配以...开头的字符，如 ^abc 可以匹配 abcde 、abcc 、abcak 等
    $ ：用于匹配以...结尾的字符，如 abc$ 可以匹配 xxxabc 、123abc 等
    * ：匹配前一个字符零次或多次，如 abc* 可以匹配 ab 、abc 、abcccc 等
    + ：匹配前一个字符一次或多次，如 abc+ 可以匹配 abc 、abcc 、abcccc 等
    ? ：匹配前一个字符零次或一次，如 abc? 只能匹配到 ab 和 abc
    \ ：转义字符，比如我想匹配 a.c ，应该写成 a\.c ，否则 . 会被当成匹配字符
    | ：表示左右表达式任意匹配一个，如 aaa|bbb 可以匹配 aaa 也可以匹配 bbb
    []：匹配中括号中的任意一个字符，如 a[bc]d 可以匹配 abd 和 acd，也可以写一个范围，如 [0-9] 、[a-z] 等
    ()：被括起来的表达式将作为一个分组，如 (abc)&#123;2&#125; 可以匹配 abcabc ，a(123|456)b 可以匹配 a123b 或 a456b
    &#123;m&#125;：表示匹配前一个字符m次，如 ab&#123;2&#125;c 可以匹配 abbc
    &#123;m,n&#125;：表示匹配前一个字符 m 至 n 次，如 ab&#123;1,2&#125;c 可以匹配 abc 或 abbc
    \d ：匹配数字，如 a\dc 可以匹配 a1c 、a2c 、a3c 等
    \D ：匹配非数字，也就是除了数字之外的任意字符或符号，如 a\Dc 可以匹配 abc 、aac 、a.c 等
    \s ：匹配空白字符，也就是匹配空格、换行符、制表符等等，如 a\sc 可以匹配 &#39;a c&#39; 、a\nc 、a\tc 等
    \S ：匹配非空白字符，也就是匹配空格、换行符、制表符等之外的其他任意字符或符号，如 a\Sc 表示除了 &#39;a c&#39; 之外都能匹配，abc 、a3c 、a.c 等
    \w ：匹配大小写字母和数字，也就是匹配 [a-zA-Z0-9] 中的字符，如 a\wc 可以匹配 abc 、aBc 、a2c 等
    \W ：匹配非大小写字母和数字，也就是匹配大小写字母和数字之外的其他任意字符或符号，如 a\Wc 可以匹配 a.c 、a#c 、a+c 等
        
    (?=...)              顺序肯定环视，表示所在位置右侧能够匹配括号内正则
    (?!...)              顺序否定环视，表示所在位置右侧不能匹配括号内正则
    (?&lt;=...)             逆序肯定环视，表示所在位置左侧能够匹配括号内正则
    (?&lt;!...)             逆序否定环视，表示所在位置左侧不能匹配括号内正则
</code></pre>
<p>[Pp]ython    匹配 “Python” 或 “python”<br>rub[ye]        匹配 “ruby” 或 “rube”<br>[aeiou]        匹配中括号内的任意一个字母<br>[0-9]        匹配任何数字。类似于 [0123456789]<br>[a-z]        匹配任何小写字母<br>[A-Z]        匹配任何大写字母<br>[a-zA-Z0-9]    匹配任何字母及数字<br>[^aeiou]    除了aeiou字母以外的所有字符<br>[^0-9]        匹配除了数字外的字符</p>
<p>百度图像识别api调用：<br>        导入包：import base64<br>        获取access_token:<br>            # client_id 为官网获取的AK， client_secret 为官网获取的SK<br>            host = ‘<a href="https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=NAYP4DnwMttSF82MrwcrZzuX&amp;client_secret=rVcCGqGPQSSVf6FfNZ9rlLyIGQmH7hGf&#39;">https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=NAYP4DnwMttSF82MrwcrZzuX&amp;client_secret=rVcCGqGPQSSVf6FfNZ9rlLyIGQmH7hGf&#39;</a><br>            response = requests.get(host)<br>            #获取access_tocken<br>            access_token=response.json()[‘access_token’]</p>
<pre><code>    发送请求，获取请求的参数:
        request_url= &quot;https://aip.baidubce.com/rest/2.0/ocr/v1/general_basic&quot;
        img_url=&#39;C:/Users/Administrator/Desktop/课堂笔记/mfc学习/1.png&#39;
        f=open(img_url,&quot;rb&quot;)
        #编码转换
        img = base64.b64encode(f.read())

        params = &#123;&#39;image&#39;: img&#125;//参数携带image的数据
        request_url = request_url + &#39;?access_token=&#39; + access_token
        headers = &#123;&quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;&#125;请求头携带content-type
        #发送请求
        response = requests.post(request_url, data=params, headers=headers)
        result = response.json()[&quot;words_result&quot;]
</code></pre>
<p>Python的迭代:<br>        class Fab(object): </p>
<pre><code>        def __init__(self, max): 
            self.max = max 
            self.n, self.a, self.b = 0, 0, 1 
     
        def __iter__(self): 
            return self 
     
        def next(self): 
            if self.n &lt; self.max: 
                r = self.b 
                self.a, self.b = self.b, self.a + self.b 
                self.n = self.n + 1 
                return r 
            raise StopIteration()
     
    for n in Fab(5): 
        print n
    使用yield：
        def fab(max): 
            n, a, b = 0, 0, 1 
            while n &lt; max: 
                yield b      # 使用 yield
                # print b 
                a, b = b, a + b 
                n = n + 1
         
        for n in fab(5): 
            print n
        空间占用小
</code></pre>
<p>Python剪切数组：<br>    greater = [i for i in array[1:] if i &gt; per]<br>    len(array)数组长度<br>    随机数：<br>        随机字符：random.choice(‘abcdefg&amp;#%^*f’)<br>        随机浮点数：random.uniform(1, 10)，random.random()<br>        多个字符中选取特定数量的字符：random.sample(‘abcdefghij’,3)<br>        多个字符中选取特定数量的字符组成新字符串： string.join(random.sample([‘a’,’b’,’c’,’d’,’e’,’f’,’g’,’h’,’i’,’j’], 3)).r<br>        随机选取字符串：random.choice ( [‘apple’, ‘pear’, ‘peach’, ‘orange’, ‘lemon’] )<br>        洗牌：random.shuffle(items)<br>        随机整数：random.randint(0,99)</p>
<p>os模块用法：<br>    遍历所有文件和目录：<br>        #!/usr/bin/python<br>        # -<em>- coding: UTF-8 -</em>-<br>        import os<br>        for root, dirs, files in os.walk(“.”, topdown=False):<br>            for name in files:<br>                print(os.path.join(root, name))<br>            for name in dirs:<br>                print(os.path.join(root, name))</p>
<pre><code>    返回一个三元组(root,dirs,files)文件夹本身，文件夹所有目录名字，所有文件
    topdown：如果 topdown 参数为 True，walk 会遍历top文件夹，与top 文件夹中每一个子目录。
    onerror:异常调用    followlinks：如果为 True，则会遍历目录下的快捷方式(linux 下是软连接 symbolic link )实际所指的目录(默认关闭)，如果为 False，则优先遍历 top 的子目录。
            
    os.listdir(path)列出文件列表，不包括..
    os.path.join(path,path)组成新的路径
    os.rename(newname,newoldname)
    
    # 创建的目录
    path = &quot;/tmp/home/monthly/daily&quot;
    os.makedirs( path, 0755 );
    print &quot;路径被创建&quot;
    
    mkdir()方法语法格式如下：
    os.mkdir(path[, mode])
    参数
    path -- 要创建的目录，可以是相对或者绝对路径。
    mode -- 要为目录设置的权限数字模式。
</code></pre>
<p>拓展:<br>    # 获取cookie<br>    url = ‘<a href="http://www.baidu.com&/#39;">http://www.baidu.com&#39;</a><br>    r = requests.get(url)<br>    r.cookies</p>
<pre><code># 将CookieJar转为字典：
cookie_dict= requests.utils.dict_from_cookiejar(r.cookies)

# 将字典转为CookieJar：
cookies = requests.utils.cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True)

# 其中cookie_dict是要转换字典
# 转换完之后就可以把它赋给cookies 并传入到session中了：
s = requests.Session()
s.cookies = cookies
</code></pre>
<p>python写入数据库:<br>    #!/usr/bin/python<br>    # -<em>- coding: UTF-8 -</em>-</p>
<pre><code>import pymysql
db = pymysql.connect(host=&quot;localhost&quot;,user=&quot;root&quot;,password=&quot;123456&quot;,database=&quot;jt&quot;,charset=&#39;utf8&#39;,port=3306)
# 使用cursor()方法获取操作游标 
cursor = db.cursor()

# SQL 插入语句
sql = &quot;INSERT INTO EMPLOYEE(FIRST_NAME, \
       LAST_NAME, AGE, SEX, INCOME) \
       VALUES (%s, %s, %s, %s, %s )&quot; % \
       (&#39;Mac&#39;, &#39;Mohan&#39;, 20, &#39;M&#39;, 2000)
try:
   # 执行sql语句
   cursor.execute(sql)
   # 提交到数据库执行
   db.commit()
except:
   # 发生错误时回滚
   db.rollback()
   
# 关闭数据库连接
db.close()
</code></pre>
<p>数据库查询操作<br>    Python查询Mysql使用 fetchone() 方法获取单条数据, 使用fetchall() 方法获取多条数据。<br>    fetchone(): 该方法获取下一个查询结果集。结果集是一个对象<br>    fetchall():接收全部的返回结果行.<br>    rowcount: 这是一个只读属性，并返回执行execute()方法后影响的行数。</p>
<pre><code>import pymysql
db = pymysql.connect(host=&quot;localhost&quot;,user=&quot;root&quot;,password=&quot;123456&quot;,database=&quot;jt&quot;,charset=&#39;utf8&#39;,port=3306)
# 使用cursor()方法获取操作游标 
cursor = db.cursor()
# SQL 查询语句
sql = &quot;SELECT * FROM demo_user&quot;

try:
    # 执行SQL语句
    cursor.execute(sql)
    # 获取所有记录列表
    results = cursor.fetchall()
    for row in results:
        fname = row[0]
        lname = row[1]
        age = row[2]
        sex = row[3]
        # 打印结果
        # 打印结果
        print(fname,lname,age,sex)
except:
    print(&quot;Error: unable to fecth data&quot;)
db.close
</code></pre>
<p>1.笔记位置:CSDN<br>2.代码:前言帖子<br>3.eclipse的快捷键:Ctrl+Y反撤销,Alt+/补全代码。ctrl+Fn+F11,ctrl+Alt+向下, Ctrl+O查看类的方法，ctrl+d向下复制(IDEA),ALT+shift+向上(IDEA)<br>断点调试:<br>    按F6<br>jdk:<br>    1.JAVA开发工具包<br>    2.基础开发库<br>环境的准备:<br>    JAVA_HOME: C:\jdk1.8.0 301<br>    classpath:C:\lib<br>    path：%JAVA_HOME%bin<br>打开Package Explorer:<br>    Windows-&gt;show View-&gt;Package Explorer<br>设置字体大小:<br>    windows-&gt;preferences-&gt;general-&gt;apperarance-&gt;Colors and Fonts-&gt;右边Basic-&gt;Text Font</p>
<pre><code>jdk包含jre和jvm,jdk搭建在操作系统上.
只运行代码,有jre就行.jdk开发工具包.
</code></pre>
<p>数据类型:<br>    byte:1    -2的7次方到2次方7-1 或者 -128到127<br>    short:2    -2的15次方到2的15次方-1 或者 -128到127<br>    int:4    -2的31次方到2次方31-1 或者 -128到127<br>    long:8    -2的63次方到2次方63-1 或者 -128到127<br>    float:4    单精度,对小数部分的精度要求不高<br>    double:8    单精度,精确的小数部分并<br>    char:2    0到65535<br>    boolean:1 true和false</p>
<pre><code>引用类型:
</code></pre>
<p>课堂笔记:<br>    搜索:CGB2109,前言</p>
<p>resolved 引用,使用<br>local variable 局部变量<br>mismatch 不匹配<br>applicable 匹配<br>arguments 参数<br>access 权限<br>declared 声明 定义<br>implment 实现<br>native 本地的</p>
<p>静态代码块:实例化类只执行一次.<br>    static int count<br>    static{<br>        count = 1;<br>    }<br>数组创建(三种方式):<br>    char[] a1= {“a”,”b”,”c”};<br>    String[] a = {“a”,”b”,”c”};<br>    String[] b = new String[]{“a”,”b”,”c”};<br>    String[] c = new String[3];<br>    char类型的数组底层进行了处理，可以直接打印数据中的具体元素<br>    System.out.println(a2);<br>    system.out.println(Arrays.toString(a));//打印<br>    数组方法:<br>        Arrays.copyOf(form,5)//复制数组，返回新数组<br>        Iterator<Integer> c =Arrays.stream(b).iterator();//迭代输出</p>
<p><a href="https://pdf2word.wdku.net/">https://pdf2word.wdku.net/</a></p>
<p>代码块执行顺序:</p>
<p>​    构造代码块-&gt;构造方法-&gt;普通方法-&gt;局部代码块,分析</p>
<p>​    1.创建对象时，会触发构造函数</p>
<p>​    2.创建对象时，也会触发构造代码块，并且构造代码块优于构造方法执行</p>
<p>​    3.我们创建好对象后才能通过对象调用普通方法</p>
<p>​    4.如果普通方法里有局部代码块，才会触发对应的局部代码块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.子类在创建对象时，会默认先调用父类的构造方法</span><br><span class="line">2.原因是子类的构造函数中的第一行默认存在super()，--表示调用父类的无参构造</span><br><span class="line">3.当父类没有无参构造时，可以通过super(参数)调用父类的其他含参构造</span><br><span class="line">子类必须调用一个父类的构造函数，不管是无参还是含参，选一个即可</span><br><span class="line">4.构造方法不可以被继承！因为语法的原因:要求构造方法的类名必须是本类类名，不能在子类中出现一个父类名字的构造方法</span><br></pre></td></tr></table></figure>

<p>static：<br>    修饰的成员变量，创建的所有类共享。<br>    子类可以继承父类的static变量<br>    子类可以覆盖父类的static变量<br>    继承可以获得父类的静态方法<br>final:<br>    类不能被继承<br>    方法不能被重写，可以被继承<br>    修饰变量，变常量，不能更改，可以被继承</p>
<p>#3．密码长度不够,需要抛出异常<br>    #1&gt;创建异常对象–使用异常的错误信息字符串作为参数<br>    ex = Exception(‘密码长度不够’)<br>    #2&gt;抛出异常对象<br>    raise ex</p>
<p>匿名内部类：<br>    interface Inter1{<br>        void save();<br>        void get();<br>    }<br>    main()函数:<br>        new Inter1(){<br>            @Override<br>            public void get() {<br>                System.out.println(“你好”);<br>            }</p>
<pre><code>        @Override
        public void save() &#123;

        &#125;
    &#125;.get();
    
abstract class Inter5&#123;
    public void eat()&#123;

    &#125;
    abstract void get();
&#125;
main()函数:
     new Inter5()&#123;
        @Override
        public void get() &#123;
            System.out.println(&quot;我是匿名对象&quot;);
        &#125;
    &#125;.get();
</code></pre>
<p>java基础:</p>
<pre><code>反射的方法:
    //获取字节码对象的三种方式
    @Deprecated
    Class&lt;?&gt; c1 = Student.class;
    Class&lt;?&gt; c2 = Class.forName(&quot;cn.tedu.reflection.Student&quot;);
    Class&lt;?&gt; c3 = new Student().getClass();
    获取包名 类名
    clazz.getPackage().getName()//包名
    clazz.getSimpleName()//类名
    clazz.getName()//完整类名

    获取成员变量定义信息
    getFields()//获取所有公开的成员变量,包括继承变量
    getDeclaredFields()//获取本类定义的成员变量,包括私有,但不包括继承的变量
    getField(变量名)
    getDeclaredField(变量名)

    获取构造方法定义信息
    getConstructor(参数类型列表)//获取公开的构造方法
    getConstructors()//获取所有的公开的构造方法
    getDeclaredConstructors()//获取所有的构造方法,包括私有
    getDeclaredConstructor(int.class,String.class)

    获取方法定义信息
    getMethods()//获取所有可见的方法,包括继承的方法
    getMethod(方法名,参数类型列表)
    getDeclaredMethods()//获取本类定义的的方法,包括私有,不包括继承的方法
    getDeclaredMethod(方法名,int.class,String.class)

    反射新建实例
    clazz.newInstance();//执行无参构造创建对象
    clazz.newInstance(666,”海绵宝宝”);//执行含参构造创建对象
    clazz.getConstructor(int.class,String.class)//获取构造方法

    反射调用成员变量
    clazz.getDeclaredField(变量名);//获取变量
    clazz.setAccessible(true);//使私有成员允许访问
    f.set(实例,值);//为指定实例的变量赋值,静态变量,第一参数给null
    f.get(实例);//访问指定实例变量的值,静态变量,第一参数给null

    反射调用成员方法
    Method m = Clazz.getDeclaredMethod(方法名,参数类型列表);
    m.setAccessible(true);//使私有方法允许被调用
    m.invoke(实例,参数数据);//让指定实例来执行该方法

public class Book &#123;
    private Integer id;
    private String name;
    public Integer age;

    public Book() &#123;
        System.out.println(&quot;Public 无参构造函数&quot;);
    &#125;
    public Book(String name) &#123;
        System.out.println(&quot;Public 带参构造函数&quot;);
    &#125;
    private Book(String name,Double price)&#123;
        System.out.println(&quot;Private 带两参构造函数&quot;);
    &#125;

    public void printAll()&#123;
        System.out.println(&quot;公开方法&quot;);
    &#125;

    private void printOne()&#123;
        System.out.println(&quot;私有方法&quot;);
    &#125;
&#125;
获取构造函数:
    Class clz = Class.forName(&quot;com.entity.Book&quot;);
    //获取所有的构造函数
    Constructor[] constructors = clz.getDeclaredConstructors();
    //获取单个所有的构造函数
    try &#123;
        Constructor constructor =               
        clz.getDeclaredConstructor(String.class);
    &#125; catch (NoSuchMethodException e) &#123;
        e.printStackTrace();
    &#125;
    //获取所有的公开构造函数
    Constructor[] constructors1 = clz.getConstructors();
    //获取单个公开构造函数
    try &#123;
        Constructor constructor = clz.getConstructor(String.class);
    &#125; catch (NoSuchMethodException e) &#123;
        e.printStackTrace();
    &#125;

返回类型：
    getName();　　　　//获取全名  例如：com.bean.Book
</code></pre>
<p>　　    getSimpleName()　　//获取类名 例如：Book<br>        package getPackage();<br>        Class clz = Book.class;<br>        String name1 = clz.getName();<br>        String name2 = clz.getSimpleName();<br>        Package aPackage = clz.getPackage();<br>    获取方法<br>        Class clz = Class.forName(“Book”);<br>        Method[] methods = clz.getMethods();    //获取所有的公开方法<br>           for (Method method : methods) {<br>               System.out.println(method.getName());<br>           }    </p>
<pre><code>    Method method = clz.getMethod(&quot;printAll&quot;);        //获取单个的公开方法
    method.invoke(clz.newInstance(),null);
    Method[] methods1 = clz.getDeclaredMethods();    //获取所有方法
实例化对象
    第一种方式
　　Class clz = Book.class;
　　Object obj =  clz.newInstance();        //将创建一个无参book对象

    第二种方式
　　Class clz = Book.class;
　　Constructor constructor = clz.getDeclaredConstructor();   //获得无参构造 
　　Object obj = constructor.newInstance();    //实例化book对象
使用方法
　　　method.invoke(Object obj,Object... args)
　　　obj：如果是实例方法，则放个该方法的类对象给它
　　　obj：静态方法，写null
　　　args：方法的参数值，没有写null，或不写都行
    Method method = clz.getMethod(&quot;printAll&quot;);        //获取单个的公开方法
    method.invoke(clz.newInstance(),null);    //使用方法
获取字段
    Class clz = Book.class;
    //Public
    Field[] fields = clz.getFields();   //所有公开字段
    Field id = clz.getField(&quot;age&quot;); //age字段
    //所有
    Field[] declaredFields = clz.getDeclaredFields();   //所有字段
    clz.getDeclaredField(&quot;name&quot;);   //name字段
    Pojo p = new Pojo();
    // 查看被修改之前的值
    p.printName();
    // 反射获取字段, name成员变量
    Field nameField = p.getClass().getDeclaredField(&quot;name&quot;);
    // 由于name成员变量是private, 所以需要进行访问权限设定
    nameField.setAccessible(true);
    // 使用反射进行赋值
    nameField.set(p, new StringBuilder(&quot;111&quot;));
    // 打印查看被修改后的值
    p.printName();
    
    案例:
         Class clz = Class.forName(&quot;cn.tedu.oop.Phone&quot;);
        //获取所有的构造函数
        Constructor[] constructors = clz.getDeclaredConstructors();

        //获取单个所有的构造函数
        Constructor constructor = clz.getDeclaredConstructor(String.class,double.class,double.class,String.class);
        //获取所有的公开构造函数
        Constructor[] constructors1 = clz.getConstructors();

        for (Constructor constructor1:constructors)&#123;
            System.out.println(constructor1);
        &#125;
        Method[] methods = clz.getMethods();    //获取所有的公开方法
        for (Method method : methods) &#123;
            System.out.println(method.getName());
        &#125;
        Method method = clz.getMethod(&quot;call&quot;);        //获取单个的公开方法
        method.invoke(constructor.newInstance(&quot;品牌&quot;,15000,15,&quot;黑色&quot;),null);//获取形参
</code></pre>
<p>​<br>​<br>​<br>selenium环境搭建:<br>​    新建一个Maven的Project<br>​    添加如下到你的POM.XML, 就可以了<br>​    <dependency><br>​            <groupId>org.seleniumhq.selenium</groupId><br>​            <artifactId>selenium-java</artifactId><br>​            <version>2.44.0</version><br>​    </dependency><br>​<br>元素定位:<br>​    <input type="text" autocomplete="off" maxlength="100" id="kw" name="wd" class="s_ipt"><br>​    <input type="submit" class="btn self-btn bg s_btn" id="su" value="百度一下"><br>​    <input type="text" autocomplete="off" name="q" placeholder="书籍、电影、音乐、小组、小站、成员" size="12" maxlength="60"><br>​    WebDriver driver  = new FirefoxDriver();    //加载驱动<br>​    driver.get(“<a href="http://www.baidu.com&quot;/">http://www.baidu.com&quot;</a>);<br>​    WebElement searchBox = driver.findElement(By.id(“kw”));    //获取设置的表单<br>​    WebElement searchBox = driver.findElement(By.name(“q”));//通过名字获取<br>​    List<WebElement> buttons = driver.findElements(By.tagName(“div”)); //通过tagname获取<br>​    WebElement searchBox = driver.findElement(By.className(“search-combobox-input”));//通过class获取元素<br>​    WebElement loginLink = driver.findElement(By.linkText(“登录”));//通过text文本获取<br>​    WebElement button = driver.findElement(By.xpath(“/html/body/div/input[@value=’查询’]”));//通过xpath定位<br>​    searchBox.sendKeys(“小坦克 博客园”);    //设置值<br>​    username.getAttribute(“placeholder”); //获取属性值<br>​    login.getText(); //获取值<br>​    login.isDisplayed(); //元素是否显示<br>​    WebElement searchButton = driver.findElement(By.id(“su”));<br>​    searchButton.submit();    //提交参数<br>​    driver.close();<br>操作浏览器:<br>​    // 浏览器最大化<br>​    driver.manage().window().maximize();<br>​    driver.navigate().to(“<a href="http://www.baidu.com&quot;/">http://www.baidu.com&quot;</a>);<br>​    // 刷新浏览器<br>​    driver.navigate().refresh();<br>​    // 浏览器后退<br>​    driver.navigate().back();<br>​    // 浏览器前进<br>​    driver.navigate().forward();<br>​    // 浏览器退出<br>​    driver.quit();<br>​    //模拟鼠标操作<br>​    Actions action = new Actions(driver);<br>​    action.contextClick(driver.findElement(By.id(“kw”))).perform();<br>​    //杀掉windows进程<br>​    // kill firefox<br>​    WindowsUtils.tryToKillByName(“firefox.exe”);<br>​    // kill IE<br>​    WindowsUtils.tryToKillByName(“iexplore.exe”);<br>​    // kill chrome<br>​    WindowsUtils.tryToKillByName(“chrome.exe”);<br>​    // 点击按钮<br>​    addButton.click();<br>​    // 判断按钮是否enable<br>​    addButton.isEnabled();<br>selenium常用api函数:<br>​    <div><br>​        <p>下拉选择框框 Select</p><br>​        <select id="proAddItem_kind" name="kind"><br>​            <option value="1">电脑硬件</option><br>​            <option value="2">房产</option><br>​            <option value="18">种类AA</option><br>​            <option value="19">种类BB</option><br>​            <option value="20">种类BB</option><br>​            <option value="21">种类CC</option><br>​        </select><br>​    </div><br>​    // 找到元素<br>​    Select select = new Select(driver.findElement(By.id(“proAddItem_kind”)));</p>
<pre><code>// 选择对应的选择项， index 从0开始的
select.selectByIndex(2);
select.selectByValue(&quot;18&quot;);
select.selectByVisibleText(&quot;种类AA&quot;);

// 获取所有的选项
List&lt;WebElement&gt; options = select.getOptions();
for (WebElement webElement : options) &#123;
    System.out.println(webElement.getText());    
&#125;
&lt;div&gt;
    &lt;p&gt;单选项  Radio Button&lt;/p&gt;
    &lt;input type=&quot;radio&quot; value=&quot;Apple&quot; name=&quot;fruit&gt;&quot; /&gt;Apple
    &lt;input type=&quot;radio&quot; value=&quot;Pear&quot; name=&quot;fruit&gt;&quot; /&gt;Pear
    &lt;input type=&quot;radio&quot; value=&quot;Banana&quot; name=&quot;fruit&gt;&quot; /&gt;Banana
    &lt;input type=&quot;radio&quot; value=&quot;Orange&quot; name=&quot;fruit&gt;&quot; /&gt;Orange
&lt;/div&gt;
// 找到单选框元素
String xpath=&quot;//input[@type=&#39;radio&#39;][@value=&#39;Apple&#39;]&quot;;
WebElement apple = driver.findElement(By.xpath(xpath));
//选择某个单选框
apple.click();
//判断某个单选框是否已经被选择
boolean isAppleSelect = apple.isSelected();
// 获取元素属性
apple.getAttribute(&quot;value&quot;);
</code></pre>
<p>智能等待页面加载完成<br>    隐式等待<br>    WebDriver driver = new FirefoxDriver();<br>    driver.get(“file:///C:/Users/Tank/Desktop/set_timeout.html”);    </p>
<pre><code>driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
WebElement element = driver.findElement(By.cssSelector(&quot;.red_box&quot;));      
((JavascriptExecutor)driver).executeScript(&quot;arguments[0].style.border = \&quot;5px solid yellow\&quot;&quot;,element);  

显式等待
driver.get(&quot;E:\\StashFolder\\huoli_28@hotmail.com\\Stash\\Tank-MoneyProject\\浦东软件园培训中心\\我的教材\\Selenium Webdriver\\set_timeout.html&quot;);    

WebDriverWait wait = new WebDriverWait(driver, 20);
wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(&quot;.red_box&quot;)));
WebElement element = driver.findElement(By.cssSelector(&quot;.red_box&quot;));      
((JavascriptExecutor)driver).executeScript(&quot;arguments[0].style.border = \&quot;5px solid yellow\&quot;&quot;,element);  
frame进入方法:
    1.iFrame有ID 或者 name的情况
    dr.switchTo().frame(&quot;framename or id&quot;);
    //frame直接跟id和名称均可
    1.如果一个iFrame既没有id，也没有name,通用情况
    // 定位frame位置，并选取frame
    WebElement frame=driver.findElement(By.xpath( &quot;/html/body/div[2]/div[8]/div[2]/div[3]/div/div[2]/div/iframe&quot; ));
    driver.switchTo().frame(frame);
    
    2.跳出iFrame
    //跳出frame,进入default content;
    dr.switchTo().defaultContent();
</code></pre>
<p>selenium执行js代码:<br>    //谷歌浏览器<br>    driver=new ChromeDriver();<br>    //将WebElement类型的driver强制转换为js类型的<br>    js=(JavascriptExecutor) driver;<br>    //设置隐性等待<br>    driver.manage().timeouts().implicitlyWait(3, TimeUnit.SECONDS);<br>    //窗口最大化<br>    driver.manage().window().maximize();<br>    //使用Javascript语言打开百度网址<br>    js.executeScript(“window.location=’<a href="https://www.baidu.com/&#39;;&quot;">https://www.baidu.com/&#39;;&quot;</a>);<br>    //查找元素<br>    //向下转型，将WebElement 转换为object<br>    WebElement TestBOx=(WebElement)js.executeScript(“return document.getElementById(‘kw’);”);<br>    System.out.println(“执行Javascript，根据ID查找元素完成”);<br>    TestBOx.sendKeys(“test”);<br>    //高度<br>    long height=(long) js.executeScript(“return window.innerHeight;”);</p>
<p>浏览器截图:<br>    第一种：selenium之TakesScreenshot<br>        该方法可以只截取自动化运行的浏览器窗口内，不会截取浏览器的操作按钮和系统的任务栏区域<br>        File srcfile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);<br>        FileUtils.copyFile(srcfile, new File(“H:\12\takescreen截图.jpg”));</p>
<pre><code>第二种：通过Robot截图
    该方法会截取屏幕内的所有内容，包括系统自带的任务栏以及浏览器的导航栏和操作菜单
    BufferedImage image = null;
    image = new Robot().createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
    ImageIO.write(image, &quot;jpg&quot;, new File(&quot;H:\\12\\rebot截图.jpg&quot;));
第三种：保存指定元素截图
    BufferedImage img = ImageIO.read(screenshot);
    int width = element.getSize().getWidth();
    int height = element.getSize().getHeight();
    //获取指定元素的坐标
    Point point = element.getLocation();
    //从元素左上角坐标开始，按照元素的高宽对img进行裁剪为符合需要的图片
    BufferedImage dest = img.getSubimage(point.getX(), point.getY(), width, height);
    ImageIO.write(dest, &quot;png&quot;, screenshot);
    进行使用及查看
    driver.get(&quot;https://www.baidu.com/&quot;);
    Thread.sleep(2000);
    WebElement setting = driver.findElement(By.id(&quot;s-usersetting-top&quot;));
    Actions actions = new Actions(driver);
    actions.clickAndHold(setting).perform();
    driver.findElement(By.linkText(&quot;搜索设置&quot;)).click();
    WebElement xuanxiang = driver.findElement(By.xpath(&quot;/html/body/div[1]/div[6]/div&quot;));
    File src = ((FirefoxDriver) driver).getScreenshotAs(OutputType.FILE);
    FileUtils.copyFile(src, new File(&quot;D:\\screenshoot\\result.png&quot;));
    FileUtils.copyFile(ElementPicture.captureElement(src, xuanxiang), new File(&quot;D:\\screenshoot\\test.png&quot;));
</code></pre>
<p>HttpURLConnection使用:<br>    URL url = new URL(“<a href="http://localhost:8080/TestHttpURLConnectionPro/index.jsp&quot;">http://localhost:8080/TestHttpURLConnectionPro/index.jsp&quot;</a>);<br>    URLConnection rulConnection = url.openConnection();<br>    //此处的urlConnection对象实际上是根据URL的<br>    //请求协议(此处是http)生成的URLConnection类<br>    //的子类HttpURLConnection,故此处最好将其转化<br>    //为HttpURLConnection类型的对象,以便用到<br>    //HttpURLConnection更多的API.如下:<br>    HttpURLConnection httpUrlConnection = (HttpURLConnection) rulConnection;<br>    // 设置是否向httpUrlConnection输出，因为这个是post请求，参数要放在<br>    // http正文内，因此需要设为true, 默认情况下是false;<br>    httpUrlConnection.setDoOutput(true);<br>    // 设置是否从httpUrlConnection读入，默认情况下是true;<br>    httpUrlConnection.setDoInput(true);<br>    // Post 请求不能使用缓存<br>    httpUrlConnection.setUseCaches(false);<br>    // 设定传送的内容类型是可序列化的java对象<br>    // (如果不设此项,在传送序列化对象时,当WEB服务默认的不是这种类型时可能抛java.io.EOFException)<br>    httpUrlConnection.setRequestProperty(“Content-type”, “application/x-java-serialized-object”);<br>    // 设定请求的方法为”POST”，默认是GET<br>    httpUrlConnection.setRequestMethod(“POST”);<br>    // 连接，从上述第2条中url.openConnection()至此的配置必须要在connect之前完成，<br>    httpUrlConnection.connect();<br>    //方式1<br>    int returnCode = httpUrlConnection.getResponseCode(); // 查看请求是否成功<br>    //成功返回200<br>    if (returnCode == 200) {// 请求发送成功<br>        InputStream inStream = httpRequest.getInputStream();<br>        ObjectInputStream objInStream = new ObjectInputStream(inStream);<br>        Object obj = objInStream.readObject();<br>        //后续处理<br>    }<br>    //方式2<br>    int returnCode = httpUrlConnection.getResponseCode(); // 查看请求是否成功<br>    //成功返回200<br>    if (returnCode == 200) {// 请求发送成功<br>        // 将返回的输入流转换成字符串<br>        InputStream inputStream = httpUrlConn.getInputStream();<br>        InputStreamReader inputStreamReader = new InputStreamReader(inputStream, “utf-8”);<br>        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);</p>
<pre><code>    String str = null;
    while ((str = bufferedReader.readLine()) != null) &#123;
        buffer.append(str);
    &#125;
&#125;
// 此处getOutputStream会隐含的进行connect(即：如同调用上面的connect()方法， 
// 所以在开发中不调用上述的connect()也可以)。 
</code></pre>
<p>​    </p>
<pre><code> // 定义一个获取网络图片数据的方法:
public static byte[] getImage(String path) throws Exception &#123;
    URL url = new URL(path);
    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
    // 设置连接超时为5秒
    conn.setConnectTimeout(5000);
    // 设置请求类型为Get类型
    conn.setRequestMethod(&quot;GET&quot;);
    // 判断请求Url是否成功
    if (conn.getResponseCode() != 200) &#123;
        throw new RuntimeException(&quot;请求url失败&quot;);
    &#125;
    InputStream inStream = conn.getInputStream();
    byte[] bt = StreamTool.read(inStream);
    inStream.close();
    return bt;
&#125;

// 获取网页的html源代码
public static String getHtml(String path) throws Exception &#123;
    URL url = new URL(path);
    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
    conn.setConnectTimeout(5000);
    conn.setRequestMethod(&quot;GET&quot;);
    if (conn.getResponseCode() == 200) &#123;
        InputStream in = conn.getInputStream();
        byte[] data = StreamTool.read(in);
        String html = new String(data, &quot;UTF-8&quot;);
        return html;
    &#125;
    return null;
&#125;

//设置请求参数
OutputStream outStrm = httpUrlConnection.getOutputStream();
OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream(), &quot;UTF-8&quot;);
// 发送请求params参数
out.write(paramsStr);
out.flush();

 PrintWriter printWriter = new PrintWriter(connection.getOutputStream());
//PrintWriter printWriter = new PrintWriter(new OutputStreamWriter(connection.getOutputStream(),&quot;UTF-8&quot;));
// 发送请求params参数
printWriter.write(paramsStr);
printWriter.flush();

方法如下：
    第一次和服务器发起POST或是GET请求以后，通过getHeaderField方法获得SessionID，具体方法为：
    String session_value=getHeaderField(&quot;Set-Cookie&quot;);
    这里得到的session_value可能不全是sessionId，还包含其他内容，用正则或者其他方法获得session_value中的sessionId的值就可以了
     第二次发起POST或是GET请求的时候需要把刚才获得的SessionID放置在请求的头部然后再提交，这样就能服务器就会认为是同一个Session请求了，具体方法为：
    setRequestProperty(&quot;Cookie&quot;, session_value);
    这样就实现了保存session向服务器提交请求
     示例代码：
    URL url = new URL(link);
    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
    //获得session信息
    session_value = urlConnection.getHeaderField(&quot;Set-Cookie&quot;);
    String[] sessionId = session_value.split(&quot;;&quot;);
    //保存session信息
    urlConnection.setRequestProperty(&quot;Cookie&quot;, sessionId[0]);
</code></pre>
<p>httpclient使用:<br>    <dependency><br>            <groupId>org.apache.httpcomponents</groupId><br>            <artifactId>httpclient</artifactId><br>            <version>4.5.6</version><br>    </dependency><br>    <dependency><br>            <groupId>com.alibaba</groupId><br>            <artifactId>fastjson</artifactId><br>            <version>1.2.47</version><br>    </dependency><br>    代码:<br>        // 获得Http客户端(可以理解为:你得先有一个浏览器;注意:实际上HttpClient与浏览器是不一样的)<br>        CloseableHttpClient httpClient = HttpClientBuilder.create().build();</p>
<pre><code>    // 响应模型
    CloseableHttpResponse response = null;
    StringBuffer params = new StringBuffer();
    //添加请求参数
    params.append(&quot;name=&quot; + URLEncoder.encode(&quot;&amp;&quot;, &quot;utf-8&quot;));
    params.append(&quot;&amp;&quot;);
    params.append(&quot;age=24&quot;);
    response = httpClient.execute(httpGet);
    // 创建Get请求
    HttpGet httpGet = new HttpGet(&quot;http://localhost:12345/doGetControllerOne&quot;+ &quot;?&quot; + params);
    // 从响应模型中获取响应实体
    // 配置信息
    RequestConfig requestConfig = RequestConfig.custom()
            // 设置连接超时时间(单位毫秒)
            .setConnectTimeout(5000)
            // 设置请求超时时间(单位毫秒)
            .setConnectionRequestTimeout(5000)
            // socket读写超时时间(单位毫秒)
            .setSocketTimeout(5000)
            // 设置是否允许重定向(默认为true)
            .setRedirectsEnabled(true).build();

    // 将上面的配置信息 运用到这个Get请求里
    httpGet.setConfig(requestConfig);

    // 由客户端执行(发送)Get请求
    response = httpClient.execute(httpGet);

    // 从响应模型中获取响应实体
    HttpEntity responseEntity = response.getEntity();
    System.out.println(&quot;响应状态为:&quot; + response.getStatusLine());
    if (responseEntity != null) &#123;
        System.out.println(&quot;响应内容长度为:&quot; + responseEntity.getContentLength());
        System.out.println(&quot;响应内容为:&quot; + EntityUtils.toString(responseEntity));
    &#125;
    
    //没什么用
        // 将参数放入键值对类NameValuePair中,再放入集合中
        List&lt;NameValuePair&gt; params = new ArrayList&lt;&gt;();
        params.add(new BasicNameValuePair(&quot;flag&quot;, &quot;4&quot;));
        params.add(new BasicNameValuePair(&quot;meaning&quot;, &quot;这是什么鬼？&quot;));
        //URI 参数
        URI uri = null;
        uri = new URIBuilder().setScheme(&quot;http&quot;).setHost(&quot;localhost&quot;)
                                  .setPort(12345).setPath(&quot;/doGetControllerTwo&quot;)
                                  .setParameters(params).build();
        // 创建Get请求
        HttpGet httpGet = new HttpGet(uri);
    
    设置请求头:
        // 设置ContentType(注:如果只是传普通参数的话,ContentType不一定非要用application/json)
        ttpPost.setHeader(&quot;Content-Type&quot;, &quot;application/json;charset=utf8&quot;);
        
    对象实体:
    HttpPost httpPost = new HttpPost(&quot;http://localhost:12345/doPostControllerTwo&quot;);
    User user = new User();
    user.setName(&quot;潘晓婷&quot;);
    user.setAge(18);
    user.setGender(&quot;女&quot;);
    user.setMotto(&quot;姿势要优雅~&quot;);
    httpPost.setEntity(entity);
    // 我这里利用阿里的fastjson，将Object转换为json字符串;
    // (需要导入com.alibaba.fastjson.JSON包)
    String jsonString = JSON.toJSONString(user);
    StringEntity entity = new StringEntity(jsonString, &quot;UTF-8&quot;);
 
    // post请求是将参数放在请求体里面传过去的;这里将entity放入post请求体中
    httpPost.setEntity(entity);

//设置响应编码:
    EntityUtils.toString(responseEntity,StandardCharsets.UTF_8);
</code></pre>
<p>工具使用:<br>    连点两下shift，打开IDEA工具的搜索功能,注意勾选”include non-project item”,输入哟啊查的类，双击点入即可。<br>    在拓展库External Libraries找到jdk1.8-&gt;rt.jar-&gt;java.lang.Object<br>    按住ctrl键，点hashcode()查看源文件<br>Object：<br>    hashCode:<br>        本方法返回对应对象的哈希码值，本方法不同的对象返回不同的哈希码值。我们可以根据这个判断对象是否一样。<br>        new String(“你好”)和”你好”的哈希码值一样</p>
<pre><code>Object中的equals()的默认实现使用的是==比较
==比较的是左右两边的值，如果是及基本类型，比较的是字面值
比如1,2,3
如果是引用类型，比较的是引用类型变量保存的地址。

equals与hashCode逻辑要保存一致，重写的话都重写，不重写都不重写。
如果不重写:hashCode()的hashCode根据地址生成
        equals()底层使用==比较
重写了:hashCode的哈希码根据重写传入的属性值生成
        equal比较的是重写后的类型+所有属性与属性值
</code></pre>
<p>String:<br>    String s3 = “abc”;<br>    此种创建方式不仅写法简单，效率还高，字符串存在堆内存的常量池<br>    效果：如果第一次创建值”abc”,会正常放入常量池<br>    但第二创建就不会再常量池新建了，使用的是之前创建好的值”abc”</p>
<pre><code>String重写了equals方法,比较的是两个字符串是否相等。

判断是否是子类:
    b instanceof Object //b是否是Object的子类
</code></pre>
<p>测试程序执行效率:<br>    System.currentTimeMillis();//获取当前系统时间</p>
<p>StringBuffer或StringBuilder使用:<br>    //比String拼接快一千倍<br>    StringBuffer sb = new StringBuffer();<br>    sb.append(sb);<br>    StringBuffer<br>    StringBuilder和StringBuffer的区别<br>    1.在线程安全上 :<br>    –StringBuffer是旧版本就提供的，线程安全的。@since JDK1.0<br>    –StringBuilder是jdk1.5后产生，线程不安全的。@since 1.5<br>    2. 在执行效率上，StringBuilder &gt; StringBuffer &gt; String<br>    3.源码体现：本质上都是在调用父类抽象类AbstractStringBuilder来干活，只不过Buffer把代码加了同步关键字，使得程序可以保证线程安全问题。</p>
<p>正则表达式:<br>    String regex = “[0-9]{17}[0-9X]”;//匹配身份证号<br>    [abc]{3}//aaa,bbb,ccc<br>    [abc]?[123]//1,2,3,a1…<br>    [abc]* //出现0到多次<br>    [abc]+ //出现的次数&gt;=1次<br>    [^a-zA-Z] //排除英文字母<br>    input.matches(regex);//查看匹配程度</p>
<p>包装类:<br>    Integer默认值是null;<br>    创建方式:<br>        Integer i1 = new Integer(int|String);<br>        /<em>Integer对象创建方式二有一个高效的效果，但是要求:<br>        * 1.是Integer类型<br>        * 2.是使用valueOf()创建<br>        * 3.数据在-128~127范围内<br>        * 只有满足以上三个条件，相同的数据只会保存一次，后续再存都是使用之前创建好的数</em>/<br>        Integer i2 = Integer.valueOf(400);</p>
<pre><code>    只有Integer有高效效果，Double是没有的
    Double d1 = new Double(double|String);
    Double d2 = Double.valueOf(double|String);

自动装箱和自动拆箱:
    /*1.自动装箱:编译器会自动把基本类型int 5,包装成包装类型Integer
    * 然后交给i3来保存,自动装箱底层发生的代码Integer.valueOf(5);
    * valueOf()的方向: int --&gt; Integer*/
    
    Integer i3 = 127;//自动装箱
    
    /*自动拆箱:编译器会把包装类型i3拆掉箱子，变回基本类型数据127
    然后交给基本类型的变量i4来保存，底层发生的代码:i3.intValue()
    自动拆箱的方向:Integer[包装类型] -&gt;int [基本类型]*/
    int i4 = i3; 
    
处理精度问题:
    1.最好不要使用double作为构造函数的参数类型，不然还会有不精确地问题
    BigDecimal a = new BigDecimal(new Scanner(System.in).nextLine());
    BigDecimal b = new BigDecimal(new Scanner(System.in).nextLine());
    System.out.println(a.add(b));//加法运算
    System.out.println(a.subtract(b));//减法运算
    方法:Divide(BigDecimal bd,保留位数,舍入方式) : 除不尽时使用
    SSystem.out.println(a.divide(b,3,BigDecimal.ROUND_HALF_UP));//除法运算
    System.out.println(a.multiply(b));//乘法运算
    System.gc();
舍入方式解析:
    ROUND_HALF_UP 四舍五入,五入 如:4.4结果是4; 4.5结果是5
    ROUND_HALF_DOWN 五舍六入,五不入 如:4.5结果是4; 4.6结果是5
    ROUND_HALF_EVEN 公平舍入(银行常用)
    比如:在5和6之间,靠近5就舍弃成5,靠近6就进位成6,如果是5.5,就找偶数,变成6
    ROUND_UP 直接进位,不算0.1还是0.9,都进位
    ROUND_DOWN 直接舍弃,不算0.1还是0.9,都舍弃
    ROUND_CEILING(天花板) 向上取整,取实际值的大值
    朝正无穷方向round 如果为正数，行为和round_up一样，如果为负数，行为和round_down一样
    ROUND_FLOOR(地板) 向下取整,取实际值的小值
</code></pre>
<p>java文件操作:<br>    File file = new File(“D:\ready\1.txt”);<br>    System.out.println(file.length());//文件大小<br>    System.out.println(file.getName());//文件名字<br>    System.out.println(file.getPath());//文件路径<br>    System.out.println(file.isFile());<br>    System.out.println(file.isDirectory());//是否是目录<br>    System.out.println(file.getParent());//父目录<br>    System.out.println(file.getAbsolutePath());//绝对路径<br>    System.out.println(file.exists());//是否存在<br>    File file2 = new File(“D:\ready\2.txt”);<br>    System.out.println(file2.createNewFile()); //创建单个文件<br>    File file3 = new File(“D:\ready\n”);<br>    System.out.println(file3.mkdir()); //创建单个文件夹<br>    file3 = new File(“D:\ready\n\a\b\c”);<br>    System.out.println(file3.mkdirs()); //创建多个文件夹<br>    /<em>delete只能删除文件或者空的文件夹</em>/<br>    System.out.println(file3.delete());//只能删除单个文件，空文件夹</p>
<pre><code>File[] fs = file4.listFiles();
System.out.println(Arrays.toString(fs));

文件读写:
    InputStream in2 = new FileInputStream(&quot;&quot;);//获取文件输入流,FileInputStream(File file) 
    in.read();//每次调用都会读取一个字节，读到文件数据的末尾，就会返回-1，这个方法的返回值是int，查找指定字符的对应编码打印出来。
    方法:
        int read() //返回字符
        从此输入流中读取一个数据字节。 
        int read(byte[] b) 
        从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中,遇到末尾返回-1，没结束返回读取字节数。
        int read(byte[] b, int off, int len) 
        从此输入流中将最多 len 个字节的数据读入一个 byte 数组中.
        long skip(long n) 
        从输入流中跳过并丢弃 n 个字节的数据。
    
    BufferedInputStream使用(高效):
        InputStream in = new BufferedInputStream(new FileInputStream(new File(&quot;D:\\ready\\1.txt&quot;)));
        
    inputStreamReader使用(不常用):
        InputStreamReader(InputStream in) 
        创建一个使用默认字符集的 InputStreamReader。 
        InputStreamReader(InputStream in, Charset cs) 
                  创建使用给定字符集的 InputStreamReader。 
        InputStreamReader(InputStream in, CharsetDecoder dec) 
                  创建使用给定字符集解码器的 InputStreamReader。 
        InputStreamReader(InputStream in, String charsetName) 
                  创建使用指定字符集的 InputStreamReader。 
        
        FileReader--操作文件的字符输入流
            FileReader(String | File) 
        BufferedReader--高效字符输入流
            readLine();//读取一行，如果已到达流末尾，则返回 null 
            
    乱码解决:
        //a. 重新对获取的字符串进行编码
        Byte[] bytes = str.getBytes(String encodeCharName);
        //b. 重新对bytes进行编码，创建新的字符串对象
        str = new String(Byte[] bytes, String decodeCharsetName);
        // 一般结合使用
        str = new String(str.getBytes(String encodeName), String decodeCharsetName);
        // 创建指定字符集的 InputStreamReader
        InputStreamReader(InputStream in, String CharsetName)
        // 创建使用指定字符集的 OutputStreamWriter
        OutputStreamWriter(OutputStream out, String CharsetName)
    
    输出流:
        OutputStream out = new BufferedOutputStream(new FileOutputStream(&quot;D:\\ready\\4.txt&quot;,true));(高效)
        OutputStream out = new FileOutputStream(&quot;&quot;);
        out.write(100);
        字符输出流:
            BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;D:\\ready\\4.txt&quot;));
            bw.write(&quot;天下太平&quot;);
            OutputStreamWriter out = new FileWriter(&quot;D:\\ready\\4.txt&quot;);
            out.write(&quot;你好吗？&quot;);
    
    流的分类:
        (1)按照方向分类:输入流 输出流
        (2)按照操作的单位分类:字节流 字符流
        (3)组合情况:字节输入流 字节输出流 字符输入流 字符输出流
        2.字节输入流：
            (1)抽象父级：InputStream-&gt;不能实例化
            (2)普通子级: 
                FileInputStream-&gt;操作文件的字节输入流
                构造方法参数:File /String
                BufferedInputStream-&gt;高效字节输入流
                构造方法参数:InputStream,但无法创建抽象父级的对象，所以传的是FileInputStream
        3.字节输出流
            (1)抽象父级：OutputStream-&gt;不能实例化
        注意:默认存在一个参数boolean append，默认值为false，也就是覆盖输出
        如果将FileOutputStream构造函数的第二个参数append设置为true，就会实现追加输出的效果
            (2)普通子级: 
                FileOutputStream-&gt;操作文件的字节输出流
                构造方法参数:File /String
                BufferedOutputStream-&gt;高效字节输出流
                构造方法参数:OutputStream,但无法创建抽象父级的对象，所以传的是FileOutputStream
        4.字符输入流
            (1)抽象父级: Reader-&gt;不能实例化
            (2)普通子级: 
                FileReader-&gt;操作文件的字符输入流
                构造方法参数:File/String
                BufferedReader-&gt;高效字符输入流
                构造方法参数:Reader,但无法创建抽象父级对象，所以传的是FileReader
        5.字符输出流
            (1)抽象父级: Writer-&gt;不能实例化
            (2)普通子级: 
                FileWriter-&gt;操作文件的字符输出流
                构造方法参数:File/String
                BufferedWriter-&gt;高效字符输出流
                构造方法参数:Writer,但无法创建抽象父级对象，所以传的是FileWriter

克隆使用:
    浅克隆共享引用变量。深克隆不共享引用变量。
        class Person implements Cloneable&#123; 
            public Object clone() &#123; 
             return super.clone();
            &#125;     
        &#125;
    深克隆重写
        public Object clone() &#123; 
         Person person = new Person(); 
         person.setFname(this.fname); 
         person.setLname(this.lname); 
         return person; 
        &#125; 
        @Override
        public Object clone() throws CloneNotSupportedException &#123;
            // TODO Auto-generated method stub
            //注意以下代码
            Teacher teacher = (Teacher)super.clone();
            teacher.setStudent((Student)teacher.getStudent().clone());
            return teacher;
        &#125;
        
序列化和反序列化:
    2 特点/应用场景
        1.需要序列化的文件必须实现Serializable接口,用来启用序列化功能
        2.不需要序列化的数据可以修饰成static,原因:static资源属于类资源,不随着对象被序列化输出
        3.每一个被序列化的文件都有一个唯一的id,如果没有添加此id,编译器会自动根据类的定义信息计算产生一个
        4.在反序列化时,如果和序列化的版本号不一致,无法完成反序列化
        5.常用与服务器之间的数据传输,序列化成文件,反序列化读取数据
        6.常用使用套接字流在主机之间传递对象
        7.不需要序列化的数据也可以被修饰成transient(临时的),只在程序运行期间在内存中存在,不会被序列化持久保存

    1.为什么反序列化版本号需要与序列化版本号一致？
        我们在反序列化时，JVM会拿着反序列化流中的serialVersionUID与序列化时相应的实体类中的serialVersionUID来比较，如果不一致，就无法正常反序列化，出现序列化版本不一致的异常InvalidClassException。
        而且我们在定义需要序列化的实体类时，如果没有手动添加UID,
        Java序列化机制会根据编译的class自动生成一个，那么只有同一次编译生成的class才是一样的UID。
        如果我们手动添加了UID,只要这个值不修改，就可以不论编译次数，进行序列化和反序列化操作。

    2.IDEA中设置自动生成serialVersionUID的提示：
        Setting-&gt;Editor-&gt;Inspections-&gt;上搜索UID-&gt;勾选Serializable class..
    public class Student implements Serializable&#123;
        private static final long serialVersionUID = -3193364654654535741L;
        private String name;//姓名
    &#125;
        
    序列化:
        3 涉及到的流对象
            序列化：ObjectOutputStream
            构造方法:
                ObjectOutputStream(OutputStream out)
                创建写入指定 OutputStream 的 ObjectOutputStream
                普通方法:
                writeObject(Object obj)
                将指定的对象写入 ObjectOutputStream
        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(&quot;D://ready//1.txt&quot;));
        //2.指定要序列化(输出)的对象
        Student obj = new Student(&quot;海绵宝宝&quot;,3,&quot;大海底部&quot;,&#39;男&#39;);
        //3.通过OOS流对象来序列化输出Student对象
        out.writeObject(obj);
        写入文件。
    
    反序列化:
        反序列化：ObjectInputStream
            构造方法:
            ObjectInputStream(InputStream in) 创建从指定 InputStream 读取的 ObjectInputStream
            普通方法:
            readObject() 从 ObjectInputStream 读取对象
        ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;D://ready//1.txt&quot;));
        //2.通过流对象反序列化生成指定对象
        Object o = in.readObject();
        System.out.println(o);
        System.out.println(&quot;恭喜您!反序列化成功!&quot;);

java集合框架:
    泛型声明:
        方法:
            public  static &lt;T&gt; void print(T[] array)&#123;&#125;
            &lt;T&gt; T[] toArray(T[] a)&#123;&#125;;
        类:
            public interface Collection&lt;E&gt; extends Iterable&lt;E&gt; &#123;&#125;
            public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable
    
    Collection方法:
        add(E e),addAll(Collection&lt;? extends E&gt; c),clear(),contains(Object o)
        equals(Object o),hashCode(),Iterator&lt;E&gt; iterator(),remove(Object o) 
        boolean retainAll(Collection&lt;?&gt; c)//取交集,size(),Object[] toArray(),&lt;T&gt; T[] toArray(T[] a)   
    
    集合的继承结构:
        Collection接口
        List 接口【数据有下标，有序，可重复】
        ArrayList子类
        LinkedList子类
        Set 接口【数据无下标，无序，不可重复】
        HashSet子类
        Map 接口【键值对的方式存数据】
        HashMap子类
        
        List集合(相对于Collection&lt;E&gt;方法):
            indexOf(Object o),lastIndexOf(Object o),get(int index),E set(int index, E element),List&lt;E&gt; subList(int fromIndex, int toIndex) 
    
    HashMap使用:
        Map&lt;Integer,String&gt; map = new HashMap&lt;&gt;();
        HashMap的结构是数组+链表 或者 数组+红黑树 的形式
        HashMap底层的Entry[ ]数组，初始容量为16，加载因子是0.75f,扩容按约为2倍扩容
        当存放数据时,会根据hash(key)%n算法来计算数据的存放位置，n就是数组的长度,其实也就是集合的容量
        当计算到的位置之前没有存过数据的时候,会直接存放数据
        当计算的位置,有数据时,会发生hash冲突/hash碰撞
        解决的办法就是采用链表的结构,在数组中指定位置处以后元素之后插入新的元素
        也就是说数组中的元素都是最早加入的节点
        如果链表的长度&gt;8时，数组长度到64，链表会转为红黑树，当链表的长度&lt;6时，会重新恢复成链表

        迭代方式:
            第一种:
                Set&lt;Integer&gt; set = map.keySet();
                Iterator&lt;Integer&gt; it = set.iterator();
                while (it.hasNext())&#123;
                    Integer key = it.next();
                    String value = map.get(key);
                    System.out.println(&quot;(&quot;+key+&quot;=&quot;+value+&quot;)&quot;);
                &#125;
            第二种:
                Set&lt;Map.Entry&lt;Integer, String&gt;&gt; entries = map.entrySet();
                Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = entries.iterator();
                while (iterator.hasNext())&#123;
                    //System.out.println(&quot;(&quot;+iterator.next()+&quot;)&quot;);
                    Map.Entry&lt;Integer,String&gt; entry= iterator.next();
                    Integer key1 = entry.getKey();
                    String value = entry.getValue();
                    System.out.println(&quot;*&quot;+key1+&quot;=&quot;+value);
                &#125;
    ArrayList:
        存在java.util包中
        内部是用数组结构存放数据,封装数组的操作,每个对象都有下标
        内部数组默认的初始容量是10,如果不够会以1.5倍的容量增长
        查询快,增删数据效率会低
    LinkedList:
        内存地址不连续，靠节点连接
        也是有下标的，从0开始，也就是说头结点是0号节点
        普通节点保存的是上一个节点的地址与下一个节点的地址
        头结点保存的只有下一个节点的地址，为节点保存的只有上一个节点的地址
    set自定义类去重:
        /*如果set中存放的是我们自定义的类型
        * 需要给自定义类中添加重写的equals()与hashCode(),才会去重
        * 不然会认为s2和s3的地址值不同，是两个不同的对象，不会去重*/
            1.创建学生类
            2.创建属性并封装
            3.生成全参构造
            4.重写equals和hashcode方法

进程和线程:
    电脑的操作系统OS:
        进程:谷歌 IDEA
        线程:如果有一个线程:单线程程序
        如果有多个线程:多线程程序
    线程的状态
    由于线程状态比较复杂,我们由易到难,先学习线程的三种基础状态及其转换,简称”三态模型” :
        就绪(可运行)状态：线程已经准备好运行，只要获得CPU，就可立即执行
        执行(运行)状态：线程已经获得CPU，其程序正在运行的状态
        阻塞状态：正在运行的线程由于某些事件（I/O请求等）暂时无法执行的状态，即线程执行阻
    synchronized是Java中的关键字，是一种同步锁。它修饰的对象有以下几种：
        1. 修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号&#123;&#125;括起来的代码，作用的对象是调用这个代码块的对象；
        2. 修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象；
        3. 修改一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象；
        4. 修改一个类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。
    
    synchronized同步关键字可以用来修饰代码块,称为同步代码块,使用的锁对象类型任意，但注意：必须唯一！
    synchronized同步关键字可以用来修饰方法,称为同步方法
    同步的缺点是会降低程序的执行效率，但我们为了保证线程的安全,有些性能是必须要牺牲的
    但是为了性能,加锁的范围需要控制好,比如我们不需要给整个商场加锁,试衣间加锁就可以了

    案例:
        class TicketThreadV3 extends Thread&#123;
        static int tickets = 100;
        static Object o = new Object();
        @Override
        public void run() &#123;
                while (true)&#123;
                    if(tickets&gt;0)&#123;
                        try &#123;
                            Thread.sleep(1000);
                        &#125; catch (InterruptedException e) &#123;
                            e.printStackTrace();
                        &#125;
                    &#125;
                    synchronized (o)&#123;//锁对象只要唯一就行，TicketThreadV3.class
                        if (tickets &lt;= 0) break;
                        System.out.println(Thread.currentThread().getName()+&quot;   &quot;+tickets--);
                    &#125;
                &#125;
            &#125;
        &#125;
        
        /*同步锁：给容易出现问题的代码加了一把锁，包裹了所有可能会出现数据安全的代码
        * 加锁之后，就有了同步(排队)的效果，但是，加锁的范围需要考虑
        * 不能太大，太大，干啥都得排队，太小，锁不住，还是会有安全隐患*/
        class TicketThreadV2 implements Runnable&#123;
            public Integer tickets = 100;
            Object o = new Object();//创建锁对象，不重卖
            @Override
            public void run() &#123;
                while (true) &#123;
                    /*同步代码块:synchronized(锁对象)&#123;会出现安全隐患的所有代码&#125;
                    * 在同步代码块中的代码，同一时刻只会被一个线程执行
                    * 同步代码块必须保证所有线程对象使用同一把唯一的锁
                    * 锁对象必须唯一！！！锁对象的类型不做限制，唯一就行*/
                    //synchronized (o)&#123;&#125;这样锁不唯一

                    synchronized (o)&#123;
                        if(tickets&gt;0)&#123;
                            try &#123;
                                Thread.sleep(1000);
                            &#125; catch (InterruptedException e) &#123;
                                e.printStackTrace();
                            &#125;
                            System.out.println(Thread.currentThread().getName()+&quot;   &quot;+tickets--);
                        &#125;
                        if (tickets &lt;= 0) break;
                    &#125;


                &#125;
            &#125;
        &#125;
        
        线程池:
</code></pre>
<p>​            </p>
<pre><code>        3 拓展:线程锁
            3.1 悲观锁和乐观锁
            悲观锁：像它的名字一样，对于并发间操作产生的线程安全问题持悲观状态.
            悲观锁认为竞争总是会发生，因此每次对某资源进行操作时，都会持有一个独占的锁,就像synchronized,不管三七二十一，直接上了锁就操作资源了。

            乐观锁：还是像它的名字一样，对于并发间操作产生的线程安全问题持乐观状态.
            乐观锁认为竞争不总是会发生，因此它不需要持有锁，将”比较-替换”这两个动作作为一个原子操作尝试去修改内存中的变量，如果失败则表示发生冲突，那么就应该有相应的重试逻辑。
        3.2 两种常见的锁
            static ReentrantReadWriteLock lock = new ReentrantReadWriteLock(true);
            //2.在操作共享资源前上锁
            lock.writeLock().lock();
            lock.writeLock().unlock();
            
            synchronized 互斥锁（悲观锁，有罪假设）
            采用synchronized修饰符实现的同步机制叫做互斥锁机制，它所获得的锁叫做互斥锁。
            每个对象都有一个monitor(锁标记)，当线程拥有这个锁标记时才能访问这个资源，没有锁标记便进入锁池。任何一个对象系统都会为其创建一个互斥锁，这个锁是为了分配给线程的，防止打断原子操作。每个对象的锁只能分配给一个线程，因此叫做互斥锁。

            ReentrantLock 排他锁（悲观锁，有罪假设）
            ReentrantLock是排他锁，排他锁在同一时刻仅有一个线程可以进行访问，实际上独占锁是一种相对比较保守的锁策略，在这种情况下任何“读/读”、“读/写”、“写/写”操作都不能同时发生，这在一定程度上降低了吞吐量。然而读操作之间不存在数据竞争问题，如果”读/读”操作能够以共享锁的方式进行，那会进一步提升性能。

            ReentrantReadWriteLock 读写锁（乐观锁，无罪假设）
            因此引入了ReentrantReadWriteLock，顾名思义，ReentrantReadWriteLock是Reentrant（可重入）Read（读）Write（写）Lock（锁），我们下面称它为读写锁。
            读写锁内部又分为读锁和写锁，读锁可以在没有写锁的时候被多个线程同时持有，写锁是独占的。
            读锁和写锁分离从而提升程序性能，读写锁主要应用于读多写少的场景。

注解和反射配合使用:
    @Override:用来标识重写
    @Target 注解用在哪里：类上、方法上、属性上等等
    描述注解存在的位置：
        ElementType.TYPE 应用于类的元素
        ElementType.METHOD 应用于方法级
        ElementType.FIELD 应用于字段或属性(成员变量)
        ElementType.ANNOTATION_TYPE 应用于注解类型
        ElementType.CONSTRUCTOR 应用于构造函数
        ElementType.LOCAL_VARIABLE 应用于局部变量
        ElementType.PACKAGE 应用于包声明
        ElementType.PARAMETER 应用于方法的参数

    @Retention 注解的生命周期：源文件中、字节码文件中、运行中
    Class&lt;?&gt; c = st.getClass();
    Field[] fArr = c.getDeclaredFields();//获取本类所有属性，包括私有属性
    //    fArr = c.getFields();//只获取公有属性，且包括继承来的属性
    for (Field field : fArr) &#123;
        field.setAccessible(true);//注意，我们的模板类写的是几个私有成员，这条是开启权限，使得我们都能够操作和读取私有属性的值
        System.out.println(field.getName()+&quot;:&quot; +field.get(st));
    &#125;
    System.out.println(&quot;----------反射+注解示例1:没有注解的不打印&quot;);
    for (Field field : fArr) &#123;
        field.setAccessible(true);//注意，我们的模板类写的是几个私有成员，这条是开启权限，使得我们都能够操作和读取私有属性的值
        MyField anno = field.getDeclaredAnnotation(MyField.class);
        if(null==anno)
            continue;
        System.out.println(field.getName()+&quot;:&quot; +field.get(st));
    &#125;
    
Date使用:
    常用时间缩写
    GMT 格林尼治时间 = UTC 协调世界时间
    UTC + 时区差 ＝ 本地时间,我们是在东八区，东加西减，所以
    CST 中国标准时间：China Standard Time UT+8:00
    Date d = new Date();
    //SimpleDateFormat sdf = new SimpleDateFormat();
    SimpleDateFormat sdf2 = new SimpleDateFormat(&quot;yyyy/MM/dd hh:mm:ss&quot;);
    //3.通过刚刚创建好的工具类对象转换日期的格式
    String s = sdf2.format(d);
    //自定义时间格式：2021/09/23 10:21:39
    System.out.println(s);
    String s2 = &quot;2021/9/23 22:24:03&quot;;
    SimpleDateFormat sdf3 = new SimpleDateFormat(&quot;yyyy/MM/dd hh:mm:ss&quot;);
    Date d2= sdf3.parse(s2);
    System.out.println(d2);//Thu Sep 23 22:24:03 CST 2021
</code></pre>
<p>JDBC：<br>    Class.forName(“com.mysql.cj.jdbc.Driver”);<br>    Connection connection = DriverManager.getConnection(url,user,pwd);<br>    Statement statement = connection.createStatement();<br>    ResultSet rs=statement.executeQuery(“select * from courses”);<br>    while (rs.next()){<br>        String a = rs.getString(1);<br>        String b = rs.getString(2);<br>        String c = rs.getString(3);<br>        System.out.println(a+b+c);<br>    }<br>    format使用教程:<br>        str=String.format(“Hi,%s”, “飞龙”);    // 格式化字符串<br>        System.out.printf(“3&gt;7的结果是：%b %n”, 3&gt;7);<br>        System.out.printf(“100的16进制数是：%x %n”, 100);<br>        System.out.printf(“字母A的散列码是：%h %n”, ‘A’);
        </p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>FFmpeg压缩视频</title>
    <url>/2022/02/16/%E8%A7%86%E9%A2%91%E5%8E%8B%E5%88%B6/</url>
    <content><![CDATA[<h1 id="FFmpeg压制bilibili视频随便写写"><a href="#FFmpeg压制bilibili视频随便写写" class="headerlink" title="FFmpeg压制bilibili视频随便写写"></a>FFmpeg压制bilibili视频随便写写</h1><p>先看下压制要求</p>
<p><img src="https://s2.loli.net/2022/02/25/ies6VuQbmoKx4yt.png" alt="image-20220225160956524"></p>
<p>视频：</p>
<p>分辨率： 1080P</p>
<p>码率 6000</p>
<p>码率峰值 24000（其实如果不是你的视频特别奇葩，是不会超过限制的）不过 后黑压制基本GG</p>
<p>gopsize 10秒 按帧率可以计算一下（例 60fps * 10 = 600, 也就是600帧里一定要有个关键帧）</p>
<p>色彩空间 位深度： yuv420 8位。</p>
<h3 id="编码器和参数选择"><a href="#编码器和参数选择" class="headerlink" title="编码器和参数选择"></a>编码器和参数选择</h3><p>依据要求：</p>
<p>x264编码器： 软编码，目前来讲市面上最好的H264编码器了。软编码会比硬编码效果好不少</p>
<p>Profile main: main profile默认的色彩空间是标准的 yuv420p。8位的位深度，yuv420。无需再设置。（注：yuv420p、NV12、yuy2等格式的差别基本也是我面试音视频工程师（图像处理方向）的必考题之一）</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>基础编码参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i 12.30下午视频补.mp4 -c:v libx264 -profile:v main -c:a aac -b:v 320k 1.mp4</span><br></pre></td></tr></table></figure>

<p>ffmpeg -i videoplayback.mp4 -c:v libx264 -b:v 6000k -profile:v main -s 1920x1080 -c:a aac -b:a 320k 1.mp4</p>
<p>-i videoplayback.mp4： 视频文件</p>
<p>-c:v libx264 ：选用x264编码器</p>
<p>-b:v 6000k： 码率</p>
<p>-s 1920x1080： 分辨率 </p>
<h3 id="特别注意：如果原片低于改分辨率一定要缺省（不写）因为拉伸画面不会有超分辨的效果。而且随着分辨率增加，相同码率情况下，清晰度一定偏低"><a href="#特别注意：如果原片低于改分辨率一定要缺省（不写）因为拉伸画面不会有超分辨的效果。而且随着分辨率增加，相同码率情况下，清晰度一定偏低" class="headerlink" title="特别注意：如果原片低于改分辨率一定要缺省（不写）因为拉伸画面不会有超分辨的效果。而且随着分辨率增加，相同码率情况下，清晰度一定偏低"></a>特别注意：如果原片低于改分辨率一定要缺省（不写）因为拉伸画面不会有超分辨的效果。而且随着分辨率增加，相同码率情况下，清晰度一定偏低</h3><h1 id="用编码时间换清晰度的参数"><a href="#用编码时间换清晰度的参数" class="headerlink" title="用编码时间换清晰度的参数"></a>用编码时间换清晰度的参数</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i 12.30下午视频.mp4 -c:v libx264 -profile:v main -c:a aac -b:v 220k -x264opts crf=30 1.mp4</span><br></pre></td></tr></table></figure>

<p>ffmpeg -i videoplayback.mp4 -preset:v slower -c:v libx264 -b:v 6000k -profile:v main -s 1920x1080 -c:a aac -b:a 320k 1.mp4</p>
<p>-preset:v slower : 较慢编码 （编码速度越慢编出来的越清晰。不过我觉得很多人大概等不起）</p>
<p>可选值： ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow and placebo </p>
<h4 id="进一步精细调整编码损失"><a href="#进一步精细调整编码损失" class="headerlink" title="进一步精细调整编码损失"></a>进一步精细调整编码损失</h4><p>ffmpeg -i videoplayback.mp4 -preset:v slower -c:v libx264 -b:v 6000k -profile:v main -s 1920x1080 -c:a aac -b:a 320k -x264opts crf=18 1.mp4 </p>
<p>-x264opts crf=18: 值越大损失越严重 取值区间 0-51（悠着点写）</p>
<h3 id="另一种方式"><a href="#另一种方式" class="headerlink" title="另一种方式"></a>另一种方式</h3><h4 id="获取音频文件"><a href="#获取音频文件" class="headerlink" title="获取音频文件"></a>获取音频文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;D:\MarukoToolbox\tools\ffmpeg.exe&quot; -i &quot;D:\达内视频\12.30下午视频.mp4&quot; -vn -sn -v 0 -c:a pcm_s16le -f wav pipe:  | &quot;D:\MarukoToolbox\tools\neroAacEnc.exe&quot; -ignorelength -lc -br 128000 -if - -of &quot;D:\MarukoToolbox\temp\12.30下午视频_atemp.mp4&quot; </span><br></pre></td></tr></table></figure>

<h4 id="获取视频文件"><a href="#获取视频文件" class="headerlink" title="获取视频文件"></a>获取视频文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;D:\MarukoToolbox\tools\x264_32-8bit.exe&quot; --crf 30 --preset 8  -I 150 -r 4 -b 3 --me umh -i 1 --scenecut 60 -f 1:1 --qcomp 0.5 --psy-rd 0.3:0 --aq-mode 2 --aq-strength 0.8 -o &quot;D:\MarukoToolbox\temp\12.30下午视频_vtemp.mp4&quot; &quot;D:\达内视频\12.30下午视频.mp4&quot; </span><br></pre></td></tr></table></figure>

<h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;D:\MarukoToolbox\tools\mp4box.exe&quot; -add &quot;D:\MarukoToolbox\temp\12.30下午视频_vtemp.mp4#trackID=1:name=&quot; -add &quot;D:\MarukoToolbox\temp\12.30下午视频_atemp.mp4#trackID=1:name=&quot; -new &quot;D:\达内视频\12.30下午视频_x264.mp4&quot; </span><br><span class="line">IsoMedia import 12.30下午视频_vtemp.mp4 - track ID 1 - Video (size 1280 x 720)</span><br></pre></td></tr></table></figure>



<h2 id="ffmpeg的简单用法"><a href="#ffmpeg的简单用法" class="headerlink" title="ffmpeg的简单用法"></a>ffmpeg的简单用法</h2><h3 id="转码"><a href="#转码" class="headerlink" title="转码"></a>转码</h3><p>最简单命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i out.ogv -vcodec h264 out.mp4</span><br><span class="line">ffmpeg -i out.ogv -vcodec mpeg4 out.mp4</span><br><span class="line">ffmpeg -i out.ogv -vcodec libxvid out.mp4</span><br><span class="line">ffmpeg -i out.mp4 -vcodec wmv1 out.wmv</span><br><span class="line">ffmpeg -i out.mp4 -vcodec wmv2 out.wmv</span><br></pre></td></tr></table></figure>

<p>-i 后面是输入文件名。-vcodec 后面是编码格式，h264 最佳，但 Windows 系统默认不安装。如果是要插入 ppt 的视频，选择 wmv1 或 wmv2 基本上万无一失。</p>
<p>附加选项：-r 指定帧率，-s 指定分辨率，-b 指定比特率；于此同时可以对声道进行转码，-acodec 指定音频编码，-ab 指定音频比特率，-ac 指定声道数，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i out.ogv -s 640x480 -b 500k -vcodec h264 -r 29.97 -acodec libfaac -ab 48k -ac 2 out.mp4</span><br></pre></td></tr></table></figure>

<h3 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h3><p>用 -ss 和 -t 选项， 从第 30 秒开始，向后截取 10 秒的视频，并保存：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.wmv -ss 00:00:30.0 -c copy -t 00:00:10.0 output.wmv</span><br><span class="line">ffmpeg -i input.wmv -ss 30 -c copy -t 10 output.wmv</span><br></pre></td></tr></table></figure>

<p>达成相同效果，也可以用 -ss 和 -to 选项， 从第 30 秒截取到第 40 秒：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.wmv -ss 30 -c copy -to 40 output.wmv</span><br></pre></td></tr></table></figure>

<p>值得注意的是，ffmpeg 为了加速，会使用关键帧技术， 所以有时剪切出来的结果在起止时间上未必准确。 通常来说，把 -ss 选项放在 -i 之前，会使用关键帧技术； 把 -ss 选项放在 -i 之后，则不使用关键帧技术。 如果要使用关键帧技术又要保留时间戳，可以加上 -copyts 选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -ss 00:01:00 -i video.mp4 -to 00:02:00 -c copy -copyts cut.mp4</span><br></pre></td></tr></table></figure>

<h3 id="合并-1"><a href="#合并-1" class="headerlink" title="合并"></a>合并</h3><p>把两个视频文件合并成一个。</p>
<p>简单地使用 concat demuxer，示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat mylist.txt</span><br><span class="line">file &#x27;/path/to/file1&#x27;</span><br><span class="line">file &#x27;/path/to/file2&#x27;</span><br><span class="line">file &#x27;/path/to/file3&#x27;</span><br><span class="line"></span><br><span class="line">$ ffmpeg -f concat -i mylist.txt -c copy output</span><br></pre></td></tr></table></figure>

<p>更多时候，由于输入文件的多样性，需要转成中间格式再合成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input1.avi -qscale:v 1 intermediate1.mpg</span><br><span class="line">ffmpeg -i input2.avi -qscale:v 1 intermediate2.mpg</span><br><span class="line">cat intermediate1.mpg intermediate2.mpg &gt; intermediate_all.mpg</span><br><span class="line">ffmpeg -i intermediate_all.mpg -qscale:v 2 output.avi</span><br></pre></td></tr></table></figure>

<h3 id="调整播放速度"><a href="#调整播放速度" class="headerlink" title="调整播放速度"></a>调整播放速度</h3><p>加速四倍：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i TheOrigin.mp4 -vf  <span class="string">&quot;setpts=0.25*PTS&quot;</span> UpTheOrigin.mp4</span><br></pre></td></tr></table></figure>

<p>四倍慢速：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i TheOrigin.mp4 -vf <span class="string">&quot;setpts=4*PTS&quot;</span> DownTheOrigin.mp4</span><br></pre></td></tr></table></figure>

<h3 id="帧率设置"><a href="#帧率设置" class="headerlink" title="帧率设置"></a>帧率设置</h3><p>使用-r选项<br>语法是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input -r fps output</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">ffmpeg -<span class="selector-tag">i</span> <span class="selector-tag">input</span><span class="selector-class">.avi</span> -r <span class="number">30</span> output<span class="selector-class">.mp4</span></span><br></pre></td></tr></table></figure>

<h3 id="使用fps-filter"><a href="#使用fps-filter" class="headerlink" title="使用fps filter"></a>使用fps filter</h3><p>另一个设置帧率是用fps filter，特别是在filterchains使用时非常有用。<br> 例如：修改输入文件的帧率到25</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -v clip.mpg -vf fps=fps=25 clip.webm</span><br></pre></td></tr></table></figure>

<h3 id="比特率设置"><a href="#比特率设置" class="headerlink" title="比特率设置"></a>比特率设置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i file.avi -b 1.5M file.mp4</span><br><span class="line">ffmpeg -i input.avi -b:v 1500K output.mp4</span><br></pre></td></tr></table></figure>

<h3 id="CBR设置"><a href="#CBR设置" class="headerlink" title="CBR设置"></a>CBR设置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i in.avi -b 0.5M -minrate 0.5M -maxrate 0.5M -bufsize 1M output.mkv</span><br></pre></td></tr></table></figure>

<h3 id="设置输出文件的最大size"><a href="#设置输出文件的最大size" class="headerlink" title="设置输出文件的最大size"></a>设置输出文件的最大size</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用-fs选项。</span><br><span class="line">例如设置输出文件的最大的size为10M</span><br><span class="line"></span><br><span class="line">ffmpeg -i input.avi -fs 10MB output.mp4</span><br></pre></td></tr></table></figure>

<h3 id="文件大小计算"><a href="#文件大小计算" class="headerlink" title="文件大小计算"></a>文件大小计算</h3><p>文件的大小是是音视频流大小的和。<br> 视频流的大小的方程式是(除以8是由bits到bytes的转换):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">video_size = video_bitrate * time_in_seconds / 8;</span><br></pre></td></tr></table></figure>

<p>如果音频是解压缩的，计算公式是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">audio_size = smpaling_rate * bit_depth * channels * time_in_second / 8;</span><br></pre></td></tr></table></figure>

<p>例如：计算10分钟的视频， 1500kbits/s 视频比特率和 128kbits/s的音频比特率，用下面的计算方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file_size = video_size + audio_size;</span><br><span class="line">file_size = (video_bitrate + audio_bitrate) * time_in_seconds / 8;</span><br><span class="line">file_size = (1500 kbits/s + 128kbits/s) * 600s</span><br><span class="line">file_size = 1628kbits/s * 600s</span><br><span class="line">file_size = 976800kb = 976800000 b / 8 = 122100000 B / 1024 = 119238.28125KB</span><br><span class="line">file_size = 119238.28125 KB / 1024 = 116.443634033203125MB = 116.44M</span><br></pre></td></tr></table></figure>

















]]></content>
      <categories>
        <category>FFmpeg</category>
      </categories>
  </entry>
  <entry>
    <title>达内老师链接</title>
    <url>/2021/12/23/%E8%BE%BE%E5%86%85%E8%80%81%E5%B8%88%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/langlangKing520/article/details/121034505?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164022271416780271545027%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164022271416780271545027&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-121034505.pc_search_result_cache&utm_term=cgblpx%E5%88%98%E4%BD%A9%E9%9C%9E&spm=1018.2226.3001.4187">所有老师链接</a></p>
]]></content>
      <categories>
        <category>website</category>
      </categories>
  </entry>
  <entry>
    <title>面试题总结</title>
    <url>/2022/02/16/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="第一次面试总结"><a href="#第一次面试总结" class="headerlink" title="第一次面试总结"></a>第一次面试总结</h1><h1 id="1-创建对象的方式有哪些？"><a href="#1-创建对象的方式有哪些？" class="headerlink" title="1.创建对象的方式有哪些？"></a>1.创建对象的方式有哪些？</h1><p>Java中创建对象的5种方式：</p>
<h5 id="1-使用new关键字"><a href="#1-使用new关键字" class="headerlink" title="1.使用new关键字"></a>1.使用new关键字</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Employee emp1 = new Employee();</span><br></pre></td></tr></table></figure>

<h5 id="2-使用Class类的newInstance方法"><a href="#2-使用Class类的newInstance方法" class="headerlink" title="2.使用Class类的newInstance方法"></a>2.使用Class类的newInstance方法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Employee emp2 = (Employee) Class.forName(&quot;org.programming.mitra.exercises.Employee&quot;).newInstance();</span><br><span class="line">或者</span><br><span class="line">Employee emp2 = Employee.class.newInstance();</span><br></pre></td></tr></table></figure>

<h5 id="3-使用Constructor类的newInstance方法"><a href="#3-使用Constructor类的newInstance方法" class="headerlink" title="3.使用Constructor类的newInstance方法"></a>3.使用Constructor类的newInstance方法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Constructor&lt;Employee&gt; constructor = Employee.class.getConstructor();</span><br><span class="line">Employee emp3 = constructor.newInstance();</span><br></pre></td></tr></table></figure>

<h5 id="4-使用clone方法"><a href="#4-使用clone方法" class="headerlink" title="4.使用clone方法"></a>4.使用clone方法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Employee emp4 = (Employee) emp3.clone();</span><br></pre></td></tr></table></figure>

<h5 id="5-使用反序列化"><a href="#5-使用反序列化" class="headerlink" title="5.使用反序列化"></a>5.使用反序列化</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;data.obj&quot;));</span><br></pre></td></tr></table></figure>

<h1 id="2-AutoWare和-Resource区别"><a href="#2-AutoWare和-Resource区别" class="headerlink" title="2.@AutoWare和@Resource区别"></a>2.@AutoWare和@Resource区别</h1><p>@AutoWare默认基于类型注入，当和Qulifier结合的时候，就可以基于Bean名称注入了。</p>
<p>@Resource(“Bean名称”)默认基于Bean名称注入，但是加上type，就可以基于类型注入了。</p>
<p><img src="https://s2.loli.net/2022/03/09/hiDWzn9dxvyLAFM.png" alt="image-20220309093614273"></p>
<h4 id="所以才有：-Resource-AutoWare-Qulifier"><a href="#所以才有：-Resource-AutoWare-Qulifier" class="headerlink" title="所以才有：@Resource=@AutoWare+@Qulifier"></a>所以才有：@Resource=@AutoWare+@Qulifier</h4><h1 id="3-如何把MySQL一张表的数据插入到另一张表。"><a href="#3-如何把MySQL一张表的数据插入到另一张表。" class="headerlink" title="3.如何把MySQL一张表的数据插入到另一张表。"></a>3.如何把MySQL一张表的数据插入到另一张表。</h1><h4 id="1-表结构一样"><a href="#1-表结构一样" class="headerlink" title="1. 表结构一样"></a>1. 表结构一样</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表1 select * from 表2</span><br></pre></td></tr></table></figure>

<h4 id="2-表结构不一样"><a href="#2-表结构不一样" class="headerlink" title="2. 表结构不一样"></a>2. 表结构不一样</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表1 (列名1,列名2,列名3)</span><br><span class="line"> select  列1,列2,列3 from 表2</span><br></pre></td></tr></table></figure>

<h4 id="3、只从另外一个表取部分字段"><a href="#3、只从另外一个表取部分字段" class="headerlink" title="3、只从另外一个表取部分字段"></a>3、只从另外一个表取部分字段</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表1 (列名1,列名2,列名3) values(列1,列2,(select 列3 from 表2));</span><br></pre></td></tr></table></figure>

<h1 id="4-如何将一个库的一个表的数据复制到另一个库中的一个表"><a href="#4-如何将一个库的一个表的数据复制到另一个库中的一个表" class="headerlink" title="4.如何将一个库的一个表的数据复制到另一个库中的一个表"></a>4.如何将一个库的一个表的数据复制到另一个库中的一个表</h1><h5 id="情况一：如果-库-中没有这个表"><a href="#情况一：如果-库-中没有这个表" class="headerlink" title="情况一：如果 库 中没有这个表"></a>情况一：如果 库 中没有这个表</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Create table Table2 (Select * from Table1);</span><br><span class="line">create table course (select * from exam.course)</span><br><span class="line">create table exam_copy.course (select * from exam.course)</span><br></pre></td></tr></table></figure>

<p>这种语句代替</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vale1, value2, value3 <span class="keyword">into</span> Table2 <span class="keyword">from</span> Table1;</span><br></pre></td></tr></table></figure>

<h5 id="情况二：结构不一样或者你要指定字段"><a href="#情况二：结构不一样或者你要指定字段" class="headerlink" title="情况二：结构不一样或者你要指定字段"></a>情况二：结构不一样或者你要指定字段</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert   库2..表2   select   字段1，字段2   from   库1..表1　where 条件</span><br></pre></td></tr></table></figure>

<h5 id="情况三：结构一样"><a href="#情况三：结构一样" class="headerlink" title="情况三：结构一样"></a>情况三：结构一样</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into data2.table2 select * from data1.table1</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE mytbl_new LIKE production.mytbl;</span><br><span class="line">INSERT mytbl_new SELECT * FROM production.mytbl; </span><br></pre></td></tr></table></figure>

<h1 id="5-sql分库分表。"><a href="#5-sql分库分表。" class="headerlink" title="5.sql分库分表。"></a>5.sql分库分表。</h1><p>当表的数据达到500百万，需要进行分库分表（通过数据库中间件进行分库分表），我只了解mycat。</p>
<p>垂直拆分-分库：垂直切分是按照业务将表进行分类，分布到不同的数据库上。</p>
<h5 id="一个问题：在两台主机上的两个数据库中的表，能否关联查询？"><a href="#一个问题：在两台主机上的两个数据库中的表，能否关联查询？" class="headerlink" title="一个问题：在两台主机上的两个数据库中的表，能否关联查询？"></a>一个问题：在两台主机上的两个数据库中的表，能否关联查询？</h5><h5 id="答案：不可以关联查询"><a href="#答案：不可以关联查询" class="headerlink" title="答案：不可以关联查询"></a>答案：不可以关联查询</h5><h5 id="分库原则：有紧密关联关系的表应该在一个库里面，相互没有关联关系的表可以分到不同的库里面。"><a href="#分库原则：有紧密关联关系的表应该在一个库里面，相互没有关联关系的表可以分到不同的库里面。" class="headerlink" title="分库原则：有紧密关联关系的表应该在一个库里面，相互没有关联关系的表可以分到不同的库里面。"></a>分库原则：有紧密关联关系的表应该在一个库里面，相互没有关联关系的表可以分到不同的库里面。</h5><p>水平拆分-分表：</p>
<p>对于垂直拆分，水平拆分不是对表进行分类，而是按照表中的某个字段的某种规则分散到多个数据库中。每个表中包含一部分数据。水平拆分是对数据的行进行切分。</p>
<p><img src="https://s2.loli.net/2022/03/09/7xYi6ZSeB8hjv2N.png" alt="image-20220309095652761"></p>
<h3 id="常用分片规则"><a href="#常用分片规则" class="headerlink" title="常用分片规则"></a>常用分片规则</h3><p>1.取模  2.分片枚举 3.范围约定 4.按日期（天）分片</p>
<h1 id="6-分布式锁"><a href="#6-分布式锁" class="headerlink" title="6.分布式锁"></a>6.分布式锁</h1><h2 id="建议自己敲一遍，加深印象"><a href="#建议自己敲一遍，加深印象" class="headerlink" title="建议自己敲一遍，加深印象"></a>建议自己敲一遍，加深印象</h2><h5 id="RedisDistributeLock："><a href="#RedisDistributeLock：" class="headerlink" title="RedisDistributeLock："></a>RedisDistributeLock：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 该类是一个基于Redis实现的分布式锁，在需要使用分布式锁的地方，都可以使用该类来进行加锁和释放锁</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class RedisDistributeLock &#123;</span><br><span class="line"></span><br><span class="line">    // 分布式锁前缀名</span><br><span class="line">    private static final String REDIS_LOCK_PREFIX = &quot;redis_lock_&quot;;</span><br><span class="line"></span><br><span class="line">    // 成功标识</span><br><span class="line">    private static final Long SUCCESS = 1L;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加锁</span><br><span class="line">     *</span><br><span class="line">     * @param lockName       锁的名字，用于区分不同业务，最终加锁的key为分布式锁前缀+锁的名字</span><br><span class="line">     * @param acquireTimeOut 请求超时时间，单位毫秒，一个线程不能一直尝试加锁，这样会导致请求的堆积，约定一个时间，在该时间内尝试加锁是有效的，否则不给予加锁</span><br><span class="line">     * @param expireTime     分布式锁过期时间，单位毫秒，防止死锁的出现，需要设置一个兜底的过期时间</span><br><span class="line">     * @return 唯一值，返回一个唯一值作为存入Redis的value值，用于解锁使用，这个值可以是UUID，数据库唯一ID或成的Code</span><br><span class="line">     */</span><br><span class="line">    public String getLock(String lockName, Long acquireTimeOut, Long expireTime) &#123;</span><br><span class="line">        // 生成当前线程的唯一值</span><br><span class="line">        String uniqueValue = UUID.randomUUID().toString();</span><br><span class="line">        // 设置当前线程可以获取锁的最大毫秒数</span><br><span class="line">        long endTime = System.currentTimeMillis() + acquireTimeOut;</span><br><span class="line">        // 如果当前系统时间还没有超过可以获取锁的最大时间，那么就尝试获取锁</span><br><span class="line">        while (System.currentTimeMillis() &lt; endTime) &#123;</span><br><span class="line">            // 使用lua脚本来实现redis原子性操作，这个命令表示设置key，如果key存在则设置失败返回0，否则成功返回1</span><br><span class="line">            String luaScript = &quot;if (redis.call(&#x27;setnx&#x27;, KEYS[1], ARGV[1]) == 1) then&quot; +</span><br><span class="line">                    &quot;    return redis.call(&#x27;expire&#x27;, KEYS[1], ARGV[2]);&quot; +</span><br><span class="line">                    &quot;else&quot; +</span><br><span class="line">                    &quot;    return 0;&quot; +</span><br><span class="line">                    &quot;end&quot;;</span><br><span class="line"></span><br><span class="line">            RedisScript&lt;Long&gt; redisScript = new DefaultRedisScript&lt;&gt;(luaScript, Long.class);</span><br><span class="line">            // 尝试加锁</span><br><span class="line">            Object result = redisTemplate.execute(redisScript, Collections.singletonList(REDIS_LOCK_PREFIX + lockName), uniqueValue, String.valueOf(expireTime / 1000));</span><br><span class="line">            // 如果设置key成功，代表加锁成功</span><br><span class="line">            if (SUCCESS.equals(result)) &#123;</span><br><span class="line">                return uniqueValue;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                // 如果未拿到锁，那么立刻重新获取不是很好，稍等片刻再继续尝试</span><br><span class="line">                Thread.sleep(100);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 超过了当前线程可以获取锁的时间，那么直接返回</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解锁</span><br><span class="line">     *</span><br><span class="line">     * @param lockName    锁的名字，用于区分不同业务，最终加锁的key为分布式锁前缀+锁的名字</span><br><span class="line">     * @param uniqueValue 唯一值，存入Redis时的value值，用于区分解锁的线程是否是加锁线程</span><br><span class="line">     */</span><br><span class="line">    public void releaseLock(String lockName, String uniqueValue) &#123;</span><br><span class="line">        if (!StringUtils.isEmpty(lockName) &amp;&amp; !StringUtils.isEmpty(uniqueValue)) &#123;</span><br><span class="line">            // 判断下唯一值是否相同，目的是自己的锁自己解，不要把别的线程锁给解了</span><br><span class="line">            String luaScript = &quot;if (redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1]) then&quot; +</span><br><span class="line">                    &quot;    return redis.call(&#x27;del&#x27;, KEYS[1]);&quot; +</span><br><span class="line">                    &quot;else&quot; +</span><br><span class="line">                    &quot;    return 0;&quot; +</span><br><span class="line">                    &quot;end&quot;;</span><br><span class="line">            RedisScript&lt;Long&gt; redisScript = new DefaultRedisScript&lt;&gt;(luaScript, Long.class);</span><br><span class="line">            // 执行解锁lua脚本</span><br><span class="line">            redisTemplate.execute(redisScript, Collections.singletonList(REDIS_LOCK_PREFIX + lockName), uniqueValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">    RedisDistributeLock redisDistributeLock;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">/*public int updateByPrimaryKeyStore(Integer id) &#123;</span><br><span class="line">        System.out.println(new Date());</span><br><span class="line"></span><br><span class="line">        int update = 0;</span><br><span class="line">        //查一下商品库存</span><br><span class="line">        Goods goods = goodsMapper.selectByPrimaryKey(id);</span><br><span class="line">        String uniqueValue = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //判断库存是否大于0</span><br><span class="line">            if (goods.getStore() &gt; 0) &#123;</span><br><span class="line">                //获取分布式锁</span><br><span class="line">                uniqueValue = redisDistributeLock.getLock(&quot;store&quot;,</span><br><span class="line">                        5000L, 8000L);</span><br><span class="line">                if(uniqueValue != null)&#123;</span><br><span class="line">                    //再次查一下商品库存</span><br><span class="line">                    Goods goods2 = goodsMapper.selectByPrimaryKey(id);</span><br><span class="line">                    if (goods2.getStore() &gt; 0) &#123;</span><br><span class="line">                        update = goodsMapper.updateByPrimaryKeyStore(id);</span><br><span class="line">                        if (goods2.getStore() &gt;= 0) &#123;</span><br><span class="line">                            System.out.println(&quot;减库存成功，可以下订单&quot;);</span><br><span class="line">                            return update;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;减库存失败，不能下订单&quot;);</span><br><span class="line">            //返回结果</span><br><span class="line">            return update;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            //释放分布式锁</span><br><span class="line">            redisDistributeLock.releaseLock(&quot;store&quot;, uniqueValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;*/</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(OversoldApplication.class, args);</span><br><span class="line">        GoodsService goodsService = context.getBean(&quot;goodsService&quot;, GoodsService.class);</span><br><span class="line">        //创建一个确定的线程池</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(16);</span><br><span class="line">        for (int i = 0; i &lt; 16; i++) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(100);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //提交线程到线程池去执行</span><br><span class="line">            executorService.submit(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //等待，线程就位，但是不运行</span><br><span class="line">                        countDownLatch.await();</span><br><span class="line">                        System.out.println(&quot;Thread:&quot; + Thread.currentThread().getName() + &quot;, time: &quot; + System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">                        //执行业务代码</span><br><span class="line">                        goodsService.updateByPrimaryKeyStore(1);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //倒计算器 -1，那么16个线程就同时开始执行，那么就达到并发效果</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="第二次面试总结"><a href="#第二次面试总结" class="headerlink" title="第二次面试总结"></a>第二次面试总结</h1><h2 id="今日题库新增："><a href="#今日题库新增：" class="headerlink" title="今日题库新增："></a>今日题库新增：</h2><h3 id="简述一下springboot："><a href="#简述一下springboot：" class="headerlink" title="简述一下springboot："></a>简述一下springboot：</h3><h3 id="springboot自动装配的原理："><a href="#springboot自动装配的原理：" class="headerlink" title="springboot自动装配的原理："></a>springboot自动装配的原理：</h3><h3 id="开启springboot特性有几种方式；"><a href="#开启springboot特性有几种方式；" class="headerlink" title="开启springboot特性有几种方式；"></a>开启springboot特性有几种方式；</h3><h3 id="springboot有几种配置文件；"><a href="#springboot有几种配置文件；" class="headerlink" title="springboot有几种配置文件；"></a>springboot有几种配置文件；</h3><h3 id="springboot配置文件有几种格式；"><a href="#springboot配置文件有几种格式；" class="headerlink" title="springboot配置文件有几种格式；"></a>springboot配置文件有几种格式；</h3><h3 id="springboot与springmvc的区别；"><a href="#springboot与springmvc的区别；" class="headerlink" title="springboot与springmvc的区别；"></a>springboot与springmvc的区别；</h3><h3 id="springboot热部署的几种方式；"><a href="#springboot热部署的几种方式；" class="headerlink" title="springboot热部署的几种方式；"></a>springboot热部署的几种方式；</h3><h3 id="两种方式："><a href="#两种方式：" class="headerlink" title="两种方式："></a>两种方式：</h3><h3 id="微服务，集群，分布式的区别"><a href="#微服务，集群，分布式的区别" class="headerlink" title="微服务，集群，分布式的区别"></a>微服务，集群，分布式的区别</h3><h1 id="开科唯识技术面试："><a href="#开科唯识技术面试：" class="headerlink" title="开科唯识技术面试："></a>开科唯识技术面试：</h1><p>1.有没有做过代码的优化？<br>2.使用过vue？Vue的核心技术是啥？<br>3.说说最近一次做的项目<br>4.你觉得项目的技术难点是啥？<br>5.你说你做过购物车模块，那说说如果同一个用户重复买同一件商品，你怎么处理？（超卖）<br>6.你有什么想要对我提问的吗？</p>
<h1 id="笔试题"><a href="#笔试题" class="headerlink" title="笔试题"></a>笔试题</h1><img src="https://s2.loli.net/2022/03/18/9rOFApsKuaHwDhg.png" alt="image-20220318192528392" style="zoom:25%;" />

<img src="https://s2.loli.net/2022/03/18/9rOFApsKuaHwDhg.png" style="zoom:25%;" />

<img src="https://s2.loli.net/2022/03/18/CH9Dr6WO8Mveos4.png" alt="image-20220318192608307" style="zoom:25%;" />

<img src="https://s2.loli.net/2022/03/18/nZQwLdKEzIjSYJB.png" alt="image-20220318192701693" style="zoom:25%;" />

<img src="https://s2.loli.net/2022/03/18/zeMhyEKkrGiIjBF.png" style="zoom:25%;" />



<img src="https://s2.loli.net/2022/03/18/7aXqolH9j8yYZxO.png" alt="image-20220318192921068" style="zoom:25%;" />

<img src="https://s2.loli.net/2022/03/18/i3xqtyw9Gvh5R7I.png" alt="image-20220318192943161" style="zoom:25%;" />

<h1 id="软通线上面试："><a href="#软通线上面试：" class="headerlink" title="软通线上面试："></a>软通线上面试：</h1><p>1.map的遍历方式你知道几种？具体实现？<br>2.Try catch 后面的finally什么情况下执行？什么情况下不执行？如果方法有返回值，retune在finally中会执行吗？<br>3.你用过的设计模式有哪些？说说最简单的单例模式的实现？<br>4.SpringMVC的实现过程？<br>5.Mybatis的配置文件中使用哪些标签？罗列几个<br>6.数据库单表查询，多表查询，（上次08级的笔试题）<br>7.为什么要进行分库分表操作？<br>8.Linux常用指令，创建文件，文件夹，删除文件中的部分数据，保存并退出</p>
]]></content>
      <categories>
        <category>面试总结</category>
      </categories>
  </entry>
</search>
