<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021年一月新番</title>
    <url>/2021/12/22/2021%E5%B9%B4%E4%B8%80%E6%9C%88%E6%96%B0%E7%95%AA/</url>
    <content><![CDATA[<h1 id="老番续作"><a href="#老番续作" class="headerlink" title="老番续作"></a>老番续作</h1><p>《擅长捉弄人的高木同学》第三季</p>
<p>期待着，期待着，《擅长捉弄人的高木同学》第三季的动画时间终于确定在明年一月上映，想想再过不久就又可以吃到高木同学和西片两人的狗粮了，还真是让人兴奋呢！（如果《擅长捉弄人的（元）高木同学》能动画化岂不是更刺激吗？）</p>
<p><img src="/img/2022(1).jpg"></p>
<h3 id="《公主连结！Re-Dive-》第二季"><a href="#《公主连结！Re-Dive-》第二季" class="headerlink" title="《公主连结！Re:Dive 》第二季"></a>《公主连结！Re:Dive 》第二季</h3><p>说实话，这部动画一开始是拒绝的，毕竟骑士君呆头呆脑的让我很难有代入感，怎奈臭鼬实在是太可爱了，不知不觉第一季就看完了。如果你是爱猫人士的话不妨关注一下！</p>
<p><img src="/img/2021(2).jpg"></p>
<h3 id="《魔法科高校的劣等生-追忆篇》"><a href="#《魔法科高校的劣等生-追忆篇》" class="headerlink" title="《魔法科高校的劣等生 追忆篇》"></a>《魔法科高校的劣等生 追忆篇》</h3><p>这已经是这个作品的第三期动画化，不得不说“抗中奇侠”司波达也在日本还是很有人气的，虽然这部作品在政治方面有一些敏感遭受一些“爱国网友”的抵制，但是整体感觉还是很不错的，如果你还没看过前两部推荐看一下！</p>
<p><img src="/img/2021(3).jpg"></p>
<h3 id="进击的巨人最终季"><a href="#进击的巨人最终季" class="headerlink" title="进击的巨人最终季"></a>进击的巨人最终季</h3><p><img src="/img/2021(4).jpg"></p>
<h3 id="现实主义勇者的王国再建记-第二季"><a href="#现实主义勇者的王国再建记-第二季" class="headerlink" title="现实主义勇者的王国再建记(第二季)"></a>现实主义勇者的王国再建记(第二季)</h3><p>轻小说《现实主义勇者的王国再建记》讲述了被召唤到异世界的相马一也的冒险历程。在故事中，原本是为了保护自己而献出富国强兵的计策，因而受到国王赏识，竟然还要让位给相马一也，作为国王女儿的婚约者，可以说是无路可逃。因此，相马一也为了国家的再建募集所需人才，他将遇到什么样的人呢？</p>
<p><img src="/img/2022(7).jpg"></p>
<h3 id="平凡的职业造就最强-第三季"><a href="#平凡的职业造就最强-第三季" class="headerlink" title="平凡的职业造就最强(第三季)"></a>平凡的职业造就最强(第三季)</h3><p><img src="/img/2022(8).jpg"></p>
<h3 id="瓦尼塔斯的手记-第二季"><a href="#瓦尼塔斯的手记-第二季" class="headerlink" title="瓦尼塔斯的手记(第二季)"></a>瓦尼塔斯的手记(第二季)</h3><p>《潘多拉之心》作者望月淳的新作</p>
<p><img src="/img/2022(9).jpg"></p>
<h1 id="漫改动画"><a href="#漫改动画" class="headerlink" title="漫改动画"></a>漫改动画</h1><h3 id="怪人开发部的黑井桑"><a href="#怪人开发部的黑井桑" class="headerlink" title="怪人开发部的黑井桑"></a>怪人开发部的黑井桑</h3><p><img src="/img/2022(10).jpg"></p>
<h3 id="东方少年"><a href="#东方少年" class="headerlink" title="东方少年"></a>东方少年</h3><p>电视动画《#东方少年#》改编自大高忍原作的同名漫画作品，由ACGT制作， 预计于2022年播出。</p>
<p><img src="/img/2022(11).jpg"></p>
<h3 id="终末的病毒"><a href="#终末的病毒" class="headerlink" title="终末的病毒"></a>终末的病毒</h3><p>故事发生在未来的2040年。男主【怜人】是国立先端医科大学的学生，患有了罕见的病，可惜药物需要在5年后才能研发出来，无奈【怜人】在与青梅竹马【绘理沙】表白之后接受了长达5年的冷冻睡眠治疗。</p>
<p>过了5年后，【怜人】被唤醒，第一映入眼帘的是大姐姐执行官【周防美来】，紫色头发，身穿黑色制服，左眼下有泪痣，总是一脸冷漠的表情。</p>
<p>经她介绍，在2041年，一种专门感染男性的新型病毒【MK】开始在世界各地蔓延，病毒通过空气传播且传染力超强。被感染者的细胞死亡、皮肤变为紫色并伴随出血症状，三日内即可致死。</p>
<p>4年时间，全世界99.9%的男性皆感染病毒而死，剩下50亿的女人，但是接受冷冻治疗的男主却不明原因获得了MK病毒的抗体，对于能够免疫病毒的男性已经成了世界的稀缺资源……..</p>
<p><img src="/img/2022(12).jpg"></p>
<h3 id="蔷薇王的葬列"><a href="#蔷薇王的葬列" class="headerlink" title="蔷薇王的葬列"></a>蔷薇王的葬列</h3><p>十五世纪赫赫有名的两大家族──红蔷薇兰开斯特与白蔷薇约克所掀起的蔷薇战争。<a href="https://baike.baidu.com/item/%E7%BA%A6%E5%85%8B%E7%8E%8B%E6%9C%9D/8631122">约克王朝</a>的最後一任国王「理查三世」，因为一个不为人知的天大秘密，一出生就被母亲视为恶魔之子。无法受到母亲关爱的理查，便将协助自己的父亲登上王位视为活下去的最大动力。在一次偶然的机会下，理查遇到了一位自称牧羊人的神秘男子，他的人生也开始有了转变。</p>
<p><img src="/img/2022(13).jpg"></p>
<h3 id="Slow-Loop"><a href="#Slow-Loop" class="headerlink" title="Slow Loop"></a>Slow Loop</h3><p>电视动画片<em>SLOW LOOP</em>改编自内野舞子在<em>Manga Time Kirara Forward</em>连载的同名漫画作品 [1] ，由CONNECT负责动画制作，秋田谷典昭担任导演，<a href="https://baike.baidu.com/item/%E5%B1%B1%E7%94%B0%E7%94%B1%E9%A6%99/19315916">山田由香</a>担任总编剧，泷本祥子负责角色设计 [2] ，于2022年1月7日起在<a href="https://baike.baidu.com/item/AT-X/8056947">AT-X</a>、<a href="https://baike.baidu.com/item/%E4%B8%9C%E4%BA%AC%E9%A6%96%E9%83%BD%E7%94%B5%E8%A7%86%E5%8F%B0/22089563">东京首都电视台</a>、<a href="https://baike.baidu.com/item/SUN%E7%94%B5%E8%A7%86%E5%8F%B0/2999198">SUN电视台</a>、KBS京都、<a href="https://baike.baidu.com/item/%E7%88%B1%E7%9F%A5%E7%94%B5%E8%A7%86%E5%8F%B0/6746269">爱知电视台</a>、BS11播出</p>
<p>在海边，少女日和独自享受过世的父亲教给她的飞钓。和往常一样钓鱼的时候，突然遇到准备下水的天真烂漫的少女小春。</p>
<p>两个人决定一起钓鱼，但她们实际上是父母再婚对象的女儿……</p>
<p>要不要和因为意外的相遇而成为“姐妹”的日和与小春一起，一边钓鱼一边悠闲地度过呢？</p>
<p><img src="/img/2022(14).jpg"></p>
<h3 id="明日酱的水手服"><a href="#明日酱的水手服" class="headerlink" title="明日酱的水手服"></a>明日酱的水手服</h3><p>“第一次”是“无论多少次”——。<br>　　故事的舞台是乡下的名门女子中学私立梅学园。明天穿这个学校的水手服是小路的“梦想”。少女“梦想”的中学水手服生活终于开始了。广阔、绿意盎然的田园风光。缓缓流逝的青春时光。<br>　　乡下×中学生×水手服“能交到100个朋友吗？”博以柔软的笔触赠与的温柔校园故事…</p>
<p><img src="/img/2022(15).jpg"></p>
<h3 id="与变成了异世界美少女的大叔一起冒险"><a href="#与变成了异世界美少女的大叔一起冒险" class="headerlink" title="与变成了异世界美少女的大叔一起冒险"></a>与变成了异世界美少女的大叔一起冒险</h3><p>津留崎优&amp;池泽真的漫画《#与变成了异世界美少女的大叔一起冒险#》宣布TV动画化~<br>　　【简介】<br>　　经由全<del>裸</del>的女神大人之手，没有女人缘的大叔和他的帅气亲友一起进行了异世界转移！ 但是没想到女神大人却恶作剧一般的将他转移后的肉体变成了绝世的美少女！？<br>　　于是为了取回男儿之身，他与亲友一同踏上了打倒魔王的旅程——！！<br>　　由「变成了美少女的大叔」和「帅气大叔」为您带来的，充满了狂气的异世界冒险恋爱喜剧开幕了！！</p>
<p><img src="/img/2022(16).jpg"></p>
<h3 id="更衣人偶坠入爱河"><a href="#更衣人偶坠入爱河" class="headerlink" title="更衣人偶坠入爱河"></a>更衣人偶坠入爱河</h3><p>电视动画片《更衣人偶坠入爱河》改编自福田晋一创作的同名漫画作品，于2021年4月15日宣布动画决定的消息 [1-2] 。该片由CloverWorks负责制作，于2022年1月播出。</p>
<p><img src="/img/2022(17).jpg"></p>
<h1 id="轻改动画"><a href="#轻改动画" class="headerlink" title="轻改动画"></a>轻改动画</h1><h3 id="天才王子的赤字国家振兴术"><a href="#天才王子的赤字国家振兴术" class="headerlink" title="天才王子的赤字国家振兴术"></a>天才王子的赤字国家振兴术</h3><p>电视动画片《天才王子的赤字国家重生术》改编自鸟羽彻创作的轻小说作品《<a href="https://baike.baidu.com/item/%E5%A4%A9%E6%89%8D%E7%8E%8B%E5%AD%90%E7%9A%84%E8%B5%A4%E5%AD%97%E5%9B%BD%E5%AE%B6%E9%87%8D%E7%94%9F%E6%9C%AF%EF%BD%9E%E5%AF%B9%E4%BA%86%EF%BC%8C%E5%B0%B1%E6%9D%A5%E5%8D%96%E5%9B%BD%E5%90%A7%EF%BD%9E/24016057">天才王子的赤字国家重生术～对了，就来卖国吧～</a>》，于2021年1月31日宣布动画决定。</p>
<p><img src="/img/2022(18).jpg"></p>
<h3 id="自称贤者弟子的贤者（轻改）"><a href="#自称贤者弟子的贤者（轻改）" class="headerlink" title="自称贤者弟子的贤者（轻改）"></a>自称贤者弟子的贤者（轻改）</h3><p>一部异世界转生动画，讲述一位男性玩家咲森鉴来到游戏世界，转生成为一位美少女的奇幻冒险之旅。值得一提的是角色原案是<strong>藤原老师</strong>，因此画面看是来很是华丽。</p>
<p>无限可能性扩大的VRMO-PRPG『电弧·地球在线』。</p>
<p>由玩家建立的阿尔卡特王国的九个贤者之一</p>
<p>充满威严的老年传唤术士丹伯夫也是玩家之一。</p>
<p>有一天，他发现了世界的异常。</p>
<p>产生了游戏中没有的味觉和嗅觉，也不能注销。</p>
<p>而且，NPC还做出了很有人情味的反应。</p>
<p>—那是游戏毫无疑问成为现实的证明。</p>
<p>而且在这个世界上已经过了30年了。</p>
<p>然后，不知道怎么回事，丹布尔夫因为各种原因，变成了一个既年幼又美丽的少女！</p>
<p>为了解开急剧变化的世界之谜</p>
<p>丹伯夫以贤者的弟子米拉为名出发。</p>
<p>在冒险的尽头等待的东西是一。</p>
<p><img src="/img/2022(19).jpg"></p>
<h3 id="里亚德录大地"><a href="#里亚德录大地" class="headerlink" title="里亚德录大地"></a>里亚德录大地</h3><p>电视动画片《里亚德录大地》改编自Ceez创作的同名小说作品，于2021年2月22日宣布动画化决定的消息 [1] 。该片由MAHO FILM负责动画制作，于2022年1月5日起播出。</p>
<p><img src="/img/2022(20).jpg"></p>
<h3 id="平家物语"><a href="#平家物语" class="headerlink" title="平家物语"></a>平家物语</h3><p>电视动画片《平家物语》改编自古川日出男所译的日本古代同名长篇小说作品，于2021年9月3日宣布动画化的消息。该片由Science SARU负责制作，于2022年1月起在<a href="https://baike.baidu.com/item/%E5%AF%8C%E5%A3%AB%E7%94%B5%E8%A7%86%E5%8F%B0/768542">富士电视台</a>的“＋Ultra”栏目播出。此外，该片亦于2021年9月15日起在流媒体平台FOD先行播放</p>
<p><img src="/img/2022(21).jpg"></p>
<h1 id="其他动画"><a href="#其他动画" class="headerlink" title="其他动画"></a>其他动画</h1><h3 id="CUE！"><a href="#CUE！" class="headerlink" title="CUE！"></a>CUE！</h3><p>电视动画片《CUE!》改编自恋爱养成类游戏《[CUE! -See You Everyday-](<a href="https://baike.baidu.com/item/CUE">https://baike.baidu.com/item/CUE</a>! -See You Everyday-/54198083)》，于2020年11月宣布动画化决定，由梦太公司、Graphinica负责制作。</p>
<p><img src="/img/2022(22).jpg"></p>
<h3 id="TRIBE-NINE"><a href="#TRIBE-NINE" class="headerlink" title="TRIBE NINE"></a>TRIBE NINE</h3><p><img src="/img/2022(24).jpg"></p>
<h3 id="永远的831"><a href="#永远的831" class="headerlink" title="永远的831"></a>永远的831</h3><p>神山健治导演、剧本的原创长篇动画《永远的831》将作为WOWOW开台30周年纪念作品，在2022年1月开播！</p>
<p><img src="/img/2022(23).jpg"></p>
]]></content>
      <categories>
        <category>动漫</category>
      </categories>
  </entry>
  <entry>
    <title>JAVASCRIPT基础</title>
    <url>/2021/12/27/JAVASCRIPT%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JAVASCRIPT</category>
      </categories>
  </entry>
  <entry>
    <title>JAVA加密算法简介</title>
    <url>/2021/12/31/JAVA%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV134411T7rq">看雪视频</a></p>
<h2 id="URL编码算法"><a href="#URL编码算法" class="headerlink" title="URL编码算法:"></a>URL编码算法:</h2><p>URL编码规则:</p>
<p><img src="https://s2.loli.net/2021/12/31/9t8xMgmaNolh1Sq.png" alt="image-20211231095801508"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String original = <span class="string">&quot;URL 参数&quot;</span>;</span><br><span class="line">String encoded = URLEncoder.encode(original, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">System.out.println(encoded);</span><br><span class="line">String ori = <span class="keyword">new</span> String(URLDecoder.decode(encoded, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">System.out.println(ori);</span><br></pre></td></tr></table></figure>

<h2 id="Base64编码"><a href="#Base64编码" class="headerlink" title="Base64编码:"></a>Base64编码:</h2><p><img src="https://s2.loli.net/2021/12/31/SDmYX4sdPZg5UO9.png" alt="image-20211231103138487"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String original = <span class="string">&quot;URL 参数&quot;</span>;</span><br><span class="line">String b64 = Base64.getEncoder().encodeToString(original.getBytes());</span><br><span class="line">System.out.println(b64);</span><br><span class="line">String ori = <span class="keyword">new</span> String(Base64.getDecoder().decode(b64),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">System.out.println(ori);</span><br></pre></td></tr></table></figure>

<h2 id="MD5算法"><a href="#MD5算法" class="headerlink" title="MD5算法"></a>MD5算法</h2><p><img src="https://s2.loli.net/2021/12/31/8hoUbXVPnWC5R7K.png" alt="image-20211231103314919"></p>
<p><img src="https://s2.loli.net/2021/12/31/qkXZRalIgzjMiUF.png" alt="image-20211231105456295"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String original = <span class="string">&quot;URL 参数&quot;</span>;</span><br><span class="line">MessageDigest md = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    md=MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">md.update(original.getBytes());</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;%032x&quot;</span>, <span class="keyword">new</span> BigInteger(<span class="number">1</span>, md.digest())));</span><br></pre></td></tr></table></figure>

<h4 id="加盐数据"><a href="#加盐数据" class="headerlink" title="加盐数据"></a>加盐数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String original = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">String salt = <span class="string">&quot;Random salt&quot;</span>;</span><br><span class="line">MessageDigest md = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    md=MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">md.update((salt+original).getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;%032x&quot;</span>, <span class="keyword">new</span> BigInteger(<span class="number">1</span>, md.digest())));</span><br></pre></td></tr></table></figure>

<h2 id="SHA-1加密算法"><a href="#SHA-1加密算法" class="headerlink" title="SHA-1加密算法"></a>SHA-1加密算法</h2><p><img src="https://s2.loli.net/2021/12/31/YaLQGlTI4O9MUkn.png" alt="image-20211231143424988"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String s = &quot;SHA1摘要算法测试&quot;;</span><br><span class="line">MessageDigest md = null;</span><br><span class="line">try &#123;</span><br><span class="line">    md=MessageDigest.getInstance(&quot;SHA-256&quot;);//SHA-256,md5,SHA-1，RipeMD160</span><br><span class="line">&#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">md.update(s.getBytes(&quot;UTF-8&quot;));</span><br><span class="line">byte[] r = md.digest();</span><br><span class="line">System.out.println(String.format(&quot;%x&quot;, new BigInteger(1, r)).length());</span><br></pre></td></tr></table></figure>

<h2 id="HmacMD5算法："><a href="#HmacMD5算法：" class="headerlink" title="HmacMD5算法："></a>HmacMD5算法：</h2><p><img src="https://s2.loli.net/2021/12/31/FKa1u4f93SRTs5O.png" alt="image-20211231151944093"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String algorithm = &quot;HmacSHA1&quot;;</span><br><span class="line">String data=&quot;helloworld&quot;;</span><br><span class="line">KeyGenerator keyGen = null;</span><br><span class="line">keyGen = KeyGenerator.getInstance(algorithm);</span><br><span class="line">SecretKey skey = keyGen.generateKey();</span><br><span class="line">Mac mac = null;</span><br><span class="line">mac = Mac.getInstance(algorithm);</span><br><span class="line">mac.init(skey);</span><br><span class="line">mac.update(data.getBytes(&quot;UTF-8&quot;));</span><br><span class="line">byte[] result = mac.doFinal();</span><br><span class="line">System.out.println(String.format(&quot;%x&quot;,new BigInteger(1,result)));</span><br></pre></td></tr></table></figure>

<h2 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法:"></a>对称加密算法:</h2><p><img src="https://s2.loli.net/2021/12/31/TBzAEOkXGZ29mCh.png" alt="image-20211231152023524"></p>
<p><img src="https://s2.loli.net/2021/12/31/PGgpCNm4S2zYQxq.png" alt="image-20211231152049436"></p>
<p><img src="https://s2.loli.net/2021/12/31/knf2PUJNjX8BAuw.png" alt="image-20211231152108989"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] key = <span class="string">&quot;1234567890abcdef&quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">String message=<span class="string">&quot;Hello,world! encrypted using AES&quot;</span>;</span><br><span class="line"><span class="keyword">byte</span>[] data = message.getBytes(StandardCharsets.UTF_8);</span><br><span class="line"><span class="keyword">byte</span>[] encrypted=encrypted(key, data);</span><br><span class="line">System.out.println(Base64.getEncoder().encodeToString(encrypted));</span><br><span class="line"><span class="keyword">byte</span>[] decrypted = decrypted(key, encrypted);</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(decrypted,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] encrypted(<span class="keyword">byte</span>[] key,<span class="keyword">byte</span>[] data) <span class="keyword">throws</span> NoSuchPaddingException, NoSuchAlgorithmException, BadPaddingException, IllegalBlockSizeException, InvalidKeyException &#123;</span><br><span class="line">        String CIPHER_NAME = <span class="string">&quot;AES/ECB/PKCS5Padding&quot;</span>;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(CIPHER_NAME);</span><br><span class="line">        SecretKeySpec keySpec = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, keySpec);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] decrypted(<span class="keyword">byte</span>[] key,<span class="keyword">byte</span>[] data) <span class="keyword">throws</span> NoSuchPaddingException, NoSuchAlgorithmException, BadPaddingException, IllegalBlockSizeException, InvalidKeyException &#123;</span><br><span class="line">        String CIPHER_NAME = <span class="string">&quot;AES/ECB/PKCS5Padding&quot;</span>;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(CIPHER_NAME);</span><br><span class="line">        SecretKeySpec keySpec = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, keySpec);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="口令加密算法"><a href="#口令加密算法" class="headerlink" title="口令加密算法"></a>口令加密算法</h2><p><img src="https://s2.loli.net/2021/12/31/64gyFvG1iBxEJVP.png" alt="image-20211231155250957"></p>
<p><img src="https://s2.loli.net/2021/12/31/c7QGiHVYmFBXjUe.png" alt="image-20211231155328590"></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>OSS学习记录</title>
    <url>/2021/12/31/OSS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h4 id="模板方法模式，代理模式"><a href="#模板方法模式，代理模式" class="headerlink" title="模板方法模式，代理模式"></a>模板方法模式，代理模式</h4><h1 id="统一认证工程设计及实现"><a href="#统一认证工程设计及实现" class="headerlink" title="统一认证工程设计及实现"></a>统一认证工程设计及实现</h1><h2 id="业务描述"><a href="#业务描述" class="headerlink" title="业务描述"></a>业务描述</h2><p>用户登陆时调用此工程对用户身份进行统一身份认证和授权。</p>
<h2 id="创建工程及初始化"><a href="#创建工程及初始化" class="headerlink" title="创建工程及初始化"></a>创建工程及初始化</h2><p>第一步：创建sso-auth工程，如图所示</p>
<p><img src="https://s2.loli.net/2022/01/04/ngxdpOQhN3w1tlL.png" alt="image-20220104091133689"></p>
<p>第二步：打开sso-auth工程中的pom文件，然后添加如下依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--SSO技术方案:SpringSecurity+JWT+oauth2--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--open feign--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<p>第三步：在sso-auth工程中创建bootstrap.yml文件，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8071</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: sso-auth</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: localhost:8848</span><br><span class="line">      config:</span><br><span class="line">        server-addr: localhost:8848</span><br></pre></td></tr></table></figure>

<p>第四步 添加项目启动类，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">@EnableFeignClients</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class AuthApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(AuthApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="启动并访问项目"><a href="#启动并访问项目" class="headerlink" title="启动并访问项目"></a>启动并访问项目</h2><p>项目启动时，系统会默认生成一个登陆密码，例如：</p>
<p><img src="https://s2.loli.net/2022/01/04/17Kks3oExTRn6mQ.png" alt="image-20220104091259745"></p>
<p>打开浏览器输入<a href="http://localhost:8071呈现登陆页面,例如：">http://localhost:8071呈现登陆页面,例如：</a></p>
<p><img src="C:\Users\tarena\AppData\Roaming\Typora\typora-user-images\image-20220104091320505.png" alt="image-20220104091320505"></p>
<p>其中，默认用户名为user，密码为系统启动时，在控制台呈现的密码。执行登陆测试,登陆成功进入如下界面（因为没有定义登陆页面，所以会出现404）：</p>
<p><img src="https://s2.loli.net/2022/01/04/l1yKGRuE2Be3qDO.png" alt="image-20220104091346321"></p>
<h2 id="定义用户信息处理对象"><a href="#定义用户信息处理对象" class="headerlink" title="定义用户信息处理对象"></a>定义用户信息处理对象</h2><p>第一步：定义User对象，用于封装从数据库查询到的用户信息，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.auth.pojo;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">@Data</span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 4831304712151465443L;</span><br><span class="line">    private Long id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    private String status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步：定义远程Service对象，用于实现远程用户信息调用，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.auth.service;</span><br><span class="line"></span><br><span class="line">import com.jt.auth.pojo.User;</span><br><span class="line">import org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@FeignClient(value = &quot;sso-system&quot;, contextId =&quot;remoteUserService&quot; )</span><br><span class="line">public interface RemoteUserService &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/user/login/&#123;username&#125;&quot;)</span><br><span class="line">    User selectUserByUsername( @PathVariable(&quot;username&quot;) String username);</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/user/permission/&#123;userId&#125;&quot;)</span><br><span class="line">    List&lt;String&gt; selectUserPermissions(@PathVariable(&quot;userId&quot;) Long userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步：定义用户登陆业务逻辑处理对象，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.auth.service;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.core.authority.AuthorityUtils;</span><br><span class="line">import org.springframework.security.core.userdetails.User;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line">import org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line">import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Service</span><br><span class="line">public class UserDetailsServiceImpl implements UserDetailsService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RemoteUserService remoteUserService;</span><br><span class="line">    /**</span><br><span class="line">     * 基于用户名获取数据库中的用户信息</span><br><span class="line">     * @param username 这个username来自客户端</span><br><span class="line">     * @return</span><br><span class="line">     * @throws UsernameNotFoundException</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public UserDetails loadUserByUsername(String username)</span><br><span class="line">            throws UsernameNotFoundException &#123;</span><br><span class="line">        //基于feign方式获取远程数据并封装</span><br><span class="line">        //1.基于用户名获取用户信息</span><br><span class="line">        com.jt.auth.pojo.User user=</span><br><span class="line">        remoteUserService.selectUserByUsername(username);</span><br><span class="line">        if(user==null)</span><br><span class="line">            throw new UsernameNotFoundException(&quot;用户不存在&quot;);</span><br><span class="line">        //2.基于用于id查询用户权限</span><br><span class="line">        List&lt;String&gt; permissions=</span><br><span class="line">        remoteUserService.selectUserPermissions(user.getId());</span><br><span class="line">        log.info(&quot;permissions &#123;&#125;&quot;,permissions);</span><br><span class="line">        //3.对查询结果进行封装并返回</span><br><span class="line">        User userInfo= new User(username,</span><br><span class="line">                user.getPassword(),</span><br><span class="line">                AuthorityUtils.createAuthorityList(permissions.toArray(new String[]&#123;&#125;)));</span><br><span class="line">        //......</span><br><span class="line">        return userInfo;</span><br><span class="line">        //返回给认证中心,认证中心会基于用户输入的密码以及数据库的密码做一个比对</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="定义Security配置类"><a href="#定义Security配置类" class="headerlink" title="定义Security配置类"></a>定义Security配置类</h2><p>定义Spring Security配置类，在此类中配置认证规则，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.auth.config;</span><br><span class="line"></span><br><span class="line">import org.codehaus.jackson.map.ObjectMapper;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line">import org.springframework.security.core.Authentication;</span><br><span class="line">import org.springframework.security.core.AuthenticationException;</span><br><span class="line">import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line">import org.springframework.security.web.authentication.AuthenticationFailureHandler;</span><br><span class="line">import org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当我们在执行登录操作时,底层逻辑(了解):</span><br><span class="line"> * 1)Filter(过滤器)</span><br><span class="line"> * 2)AuthenticationManager (认证管理器)</span><br><span class="line"> * 3)AuthenticationProvider(认证服务处理器)</span><br><span class="line"> * 4)UserDetailsService(负责用户信息的获取及封装)</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">     /**</span><br><span class="line">     * 初始化加密对象</span><br><span class="line">     * 此对象提供了一种不可逆的加密方式,相对于md5方式会更加安全</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public BCryptPasswordEncoder passwordEncoder()&#123;</span><br><span class="line">        return new BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 定义认证管理器对象，这个对象负责完成用户信息的认证，</span><br><span class="line">     * 即判定用户身份信息的合法性，在基于oauth2协议完成认</span><br><span class="line">     * 证时，需要此对象，所以这里讲此对象拿出来交给spring管理</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    @Override</span><br><span class="line">    public AuthenticationManager authenticationManagerBean()</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">      return super.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**配置认证规则*/</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        //super.configure(http);//默认所有请求都要认证</span><br><span class="line">        //1.禁用跨域攻击(先这么写，不写会报403异常)</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        //2.放行所有资源的访问(后续可以基于选择对资源进行认证和放行)</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().permitAll();</span><br><span class="line">        //3.自定义定义登录成功和失败以后的处理逻辑(可选)</span><br><span class="line">        //假如没有如下设置登录成功会显示404</span><br><span class="line">        http.formLogin()//这句话会对外暴露一个登录路径/login</span><br><span class="line">                 .successHandler(successHandler())</span><br><span class="line">                 .failureHandler(failureHandler());</span><br><span class="line">    &#125;</span><br><span class="line">    //定义认证成功处理器</span><br><span class="line">    //登录成功以后返回json数据</span><br><span class="line">    @Bean</span><br><span class="line">    public AuthenticationSuccessHandler successHandler()&#123;</span><br><span class="line">         //lambda</span><br><span class="line">         return (request,response,authentication)-&gt;&#123;</span><br><span class="line">             //构建map对象封装到要响应到客户端的数据</span><br><span class="line">             Map&lt;String,Object&gt; map=new HashMap&lt;&gt;();</span><br><span class="line">             map.put(&quot;state&quot;,200);</span><br><span class="line">             map.put(&quot;message&quot;, &quot;login ok&quot;);</span><br><span class="line">             //将map对象转换为json格式字符串并写到客户端</span><br><span class="line">             writeJsonToClient(response,map);</span><br><span class="line">         &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    //定义登录失败处理器</span><br><span class="line">    @Bean</span><br><span class="line">    public AuthenticationFailureHandler failureHandler()&#123;</span><br><span class="line">        return (request,response,exception)-&gt;&#123;</span><br><span class="line">            //构建map对象封装到要响应到客户端的数据</span><br><span class="line">            Map&lt;String,Object&gt; map=new HashMap&lt;&gt;();</span><br><span class="line">            map.put(&quot;state&quot;,500);</span><br><span class="line">            map.put(&quot;message&quot;, &quot;login error&quot;);</span><br><span class="line">            //将map对象转换为json格式字符串并写到客户端</span><br><span class="line">            writeJsonToClient(response,map);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    private void writeJsonToClient(</span><br><span class="line">            HttpServletResponse response,</span><br><span class="line">            Map&lt;String,Object&gt; map) throws IOException &#123;</span><br><span class="line">         //将map对象,转换为json</span><br><span class="line">          String json=new ObjectMapper().writeValueAsString(map);</span><br><span class="line">          //设置响应数据的编码方式</span><br><span class="line">          response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">          //设置响应数据的类型</span><br><span class="line">          response.setContentType(&quot;application/json;charset=utf-8&quot;);</span><br><span class="line">          //将数据响应到客户端</span><br><span class="line">          PrintWriter out=response.getWriter();</span><br><span class="line">          out.println(json);</span><br><span class="line">          out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基于Postman进行访问测试"><a href="#基于Postman进行访问测试" class="headerlink" title="基于Postman进行访问测试"></a>基于Postman进行访问测试</h2><p>启动sso-system,sso-auth服务，然后基于postman访问网关,执行登录测试,例如：</p>
<p><img src="https://s2.loli.net/2022/01/04/QP6pRc8OjAqbtLw.png" alt="image-20220104091647298"></p>
<h2 id="Security-认证流程分析（了解）"><a href="#Security-认证流程分析（了解）" class="headerlink" title="Security 认证流程分析（了解）"></a>Security 认证流程分析（了解）</h2><p>目前的登陆操作，也就是用户的认证操作，其实现主要基于Spring Security框架，其认证简易流程如下：</p>
<p><img src="https://s2.loli.net/2022/01/04/HToxLXFSY5BhsJb.png" alt="image-20220104091709209"></p>
<p>构建令牌生成及配置对象<br>本次我们借助JWT(Json Web Token-是一种json格式）方式将用户相关信息进行组织和加密,并作为响应令牌(Token),从服务端响应到客户端,客户端接收到这个JWT令牌之后,将其保存在客户端(例如localStorage),然后携带令牌访问资源服务器,资源服务器获取并解析令牌的合法性,基于解析结果判定是否允许用户访问资源.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.auth.config;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line">import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;</span><br><span class="line">import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 在此配置类中配置令牌的生成，存储策略，验签方式(令牌合法性)。</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class TokenConfig &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置令牌的存储策略,对于oauth2规范中提供了这样的几种策略</span><br><span class="line">     * 1)JdbcTokenStore(这里是要将token存储到关系型数据库)</span><br><span class="line">     * 2)RedisTokenStore(这是要将token存储到redis数据库-key/value)</span><br><span class="line">     * 3)JwtTokenStore(这里是将产生的token信息存储客户端，并且token</span><br><span class="line">     * 中可以以自包含的形式存储一些用户信息)</span><br><span class="line">     * 4)....</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public TokenStore tokenStore()&#123;</span><br><span class="line">        //这里采用JWT方式生成和存储令牌信息</span><br><span class="line">        return new JwtTokenStore(jwtAccessTokenConverter());</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 配置令牌的创建及验签方式</span><br><span class="line">     * 基于此对象创建的令牌信息会封装到OAuth2AccessToken类型的对象中</span><br><span class="line">     * 然后再存储到TokenStore对象，外界需要时，会从tokenStore进行获取。</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public JwtAccessTokenConverter jwtAccessTokenConverter()&#123;</span><br><span class="line">        JwtAccessTokenConverter jwtAccessTokenConverter=</span><br><span class="line">                new JwtAccessTokenConverter();</span><br><span class="line">        //JWT令牌构成：header(签名算法，令牌类型),payload(数据部分),Signing(签名)</span><br><span class="line">        //这里的签名可以简单理解为加密，加密时会使用header中算法以及我们自己提供的密钥，</span><br><span class="line">        //这里加密的目的是为了防止令牌被篡改。（这里密钥要保管好，要存储在服务端）</span><br><span class="line">        jwtAccessTokenConverter.setSigningKey(SIGNING_KEY);//设置密钥</span><br><span class="line">        return jwtAccessTokenConverter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * JWT 令牌签名时使用的密钥(可以理解为盐值加密中的盐)</span><br><span class="line">     * 1)生成的令牌需要这个密钥进行签名</span><br><span class="line">     * 2)获取的令牌需要使用这个密钥进行验签(校验令牌合法性，是否被篡改过)</span><br><span class="line">     */</span><br><span class="line">    private static final String SIGNING_KEY=&quot;auth&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="定义Oauth2认证授权配置"><a href="#定义Oauth2认证授权配置" class="headerlink" title="定义Oauth2认证授权配置"></a>定义Oauth2认证授权配置</h2><p>第一步：所有零件准备好了开始拼装最后的主体部分，这个主体部分就是授权服务器的核心配置.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.auth.config;</span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.http.HttpMethod;</span><br><span class="line">import org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line">import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line">import org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line">import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;</span><br><span class="line">import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;</span><br><span class="line">import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;</span><br><span class="line">import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;</span><br><span class="line">import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;</span><br><span class="line">import org.springframework.security.oauth2.provider.token.AuthorizationServerTokenServices;</span><br><span class="line">import org.springframework.security.oauth2.provider.token.DefaultTokenServices;</span><br><span class="line">import org.springframework.security.oauth2.provider.token.TokenEnhancer;</span><br><span class="line">import org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line">import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;</span><br><span class="line">import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;</span><br><span class="line"></span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Oauth2 是一种认证授权规范，它基于认证和授权定义了一套规则，在这套规则中规定了</span><br><span class="line"> * 实现一套认证授权系统需要哪些对象：</span><br><span class="line"> * 1)系统资源(数据)</span><br><span class="line"> * 2)资源拥有者(用户)</span><br><span class="line"> * 3)管理资源的服务器</span><br><span class="line"> * 4)对用户进行认证和授权的服务器</span><br><span class="line"> * 5)客户端系统(负责提交用户身份信息的系统)</span><br><span class="line"> *</span><br><span class="line"> * 思考：对于一个认证授权系统来讲，需要什么？：</span><br><span class="line"> * 1)提供一个认证的入口？(客户端去哪里认证)</span><br><span class="line"> * 2)客户端应该携带什么信息去认证？(username,password,....)</span><br><span class="line"> * 3)服务端通过谁去对客户端进行认证(一个负责认证的对象)？</span><br><span class="line"> */</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@Configuration</span><br><span class="line">@EnableAuthorizationServer //在oauth2规范中启动认证和授权</span><br><span class="line">public class Oauth2Config extends AuthorizationServerConfigurerAdapter &#123;</span><br><span class="line">    //@Autowired</span><br><span class="line">    private AuthenticationManager authenticationManager;</span><br><span class="line">    //@Autowired</span><br><span class="line">    private BCryptPasswordEncoder passwordEncoder;</span><br><span class="line">    //@Autowired</span><br><span class="line">    private JwtAccessTokenConverter jwtAccessTokenConverter;</span><br><span class="line">    //@Autowired</span><br><span class="line">    private TokenStore tokenStore;</span><br><span class="line"></span><br><span class="line">    //提供一个认证的入口(客户端去哪里认证)？(http://ip:port/.....)</span><br><span class="line">    @Override</span><br><span class="line">    public void configure(AuthorizationServerSecurityConfigurer security) throws Exception &#123;</span><br><span class="line">        //super.configure(security);</span><br><span class="line">        //对外发布认证入口(/oauth/token),认证通过服务端会生成一个令牌</span><br><span class="line">        security.tokenKeyAccess(&quot;permitAll()&quot;)</span><br><span class="line">        //对外发布检查令牌的入口(/oauth/check_token)</span><br><span class="line">        .checkTokenAccess(&quot;permitAll()&quot;)</span><br><span class="line">        //允许用户通过表单方式提交认证,完成认证</span><br><span class="line">        .allowFormAuthenticationForClients();</span><br><span class="line">    &#125;</span><br><span class="line">    //定义客户端应该携带什么信息去认证？</span><br><span class="line">    //指明哪些对象可以到这里进行认证(哪个客户端对象需要什么特点)。</span><br><span class="line">    @Override</span><br><span class="line">    public void configure(ClientDetailsServiceConfigurer clients) throws Exception &#123;</span><br><span class="line">        //super.configure(clients);</span><br><span class="line">        clients.inMemory()</span><br><span class="line">                //客户端标识</span><br><span class="line">                .withClient(&quot;gateway-client&quot;)</span><br><span class="line">                //客户端密钥(随意)</span><br><span class="line">                .secret(passwordEncoder.encode(&quot;123456&quot;))</span><br><span class="line">                //指定认证类型(码密,刷新令牌，三方令牌，...)</span><br><span class="line">                .authorizedGrantTypes(&quot;password&quot;,&quot;refresh_token&quot;)</span><br><span class="line">                //作用域(在这里可以理解为只要包含我们规定信息的客户端都可以进行认证)</span><br><span class="line">                .scopes(&quot;all&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //提供一个负责认证授权的对象？(完成客户端认证后会颁发令牌，默认令牌格式是uuid方式的)</span><br><span class="line">    @Override</span><br><span class="line">    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception &#123;</span><br><span class="line">        //super.configure(endpoints);</span><br><span class="line">        //设置认证授权对象</span><br><span class="line">        endpoints.authenticationManager(authenticationManager)</span><br><span class="line">        //设置令牌业务对象(此对象提供令牌创建及有效机制设置)</span><br><span class="line">        .tokenServices(tokenService())//不写，默认是uuid</span><br><span class="line">        //设置允许对哪些请求方式进行认证(默认支支持post):可选</span><br><span class="line">        .allowedTokenEndpointRequestMethods(HttpMethod.GET,HttpMethod.POST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public AuthorizationServerTokenServices tokenService()&#123;</span><br><span class="line">        //1.构建token业务对象</span><br><span class="line">        DefaultTokenServices ts=new DefaultTokenServices();</span><br><span class="line">        //2.设置令牌生成机制(创建令牌的方式，存储用户状态信息的方式)</span><br><span class="line">        ts.setTokenStore(tokenStore);</span><br><span class="line">        //3.设置令牌增强(改变默认令牌创建方式，没有这句话默认是UUID)</span><br><span class="line">        ts.setTokenEnhancer(jwtAccessTokenConverter);</span><br><span class="line">        //4.设置令牌有效时长(可选)</span><br><span class="line">        ts.setAccessTokenValiditySeconds(3600);</span><br><span class="line">        //5.设置刷新令牌以及它的有效时时长(可选)</span><br><span class="line">        ts.setSupportRefreshToken(true);</span><br><span class="line">        ts.setRefreshTokenValiditySeconds(3600*24);</span><br><span class="line">        return ts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h2><h4 id="工程模式，责任链模式，代理模式，模板方法模式，装饰器模式"><a href="#工程模式，责任链模式，代理模式，模板方法模式，装饰器模式" class="headerlink" title="工程模式，责任链模式，代理模式，模板方法模式，装饰器模式"></a>工程模式，责任链模式，代理模式，模板方法模式，装饰器模式</h4>]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>Sentinel限流熔断应用实践</title>
    <url>/2021/12/27/Sentinel%E9%99%90%E6%B5%81%E7%86%94%E6%96%AD%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器:"></a>拦截器:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==preHandler==&quot;</span>);</span><br><span class="line">        LocalTime now = LocalTime.now();</span><br><span class="line">        <span class="keyword">int</span> hour = now.getHour();</span><br><span class="line">        <span class="keyword">if</span>(hour&lt;<span class="number">6</span>||hour&gt;<span class="number">23</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;请在6到23点之间访问&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册拦截器(添加到spring容器)，并指定拦截规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> TimeInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/provider/sentinel01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1、preHandle<br>调用时间：Controller方法处理之前</p>
<p>执行顺序：链式Intercepter情况下，Intercepter按照声明的顺序一个接一个执行</p>
<p>若返回false，则中断执行，注意：不会进入afterCompletion</p>
<p>2、postHandle<br>调用前提：preHandle返回true</p>
<p>调用时间：Controller方法处理完之后，DispatcherServlet进行视图的渲染之前，也就是说在这个方法中你可以对ModelAndView进行操作</p>
<p>执行顺序：链式Intercepter情况下，Intercepter按照声明的顺序倒着执行。</p>
<p>备注：postHandle虽然post打头，但post、get方法都能处理</p>
<p>3、afterCompletion<br>调用前提：preHandle返回true</p>
<p>调用时间：DispatcherServlet进行视图的渲染之后</p>
<p>多用于清理资源</p>
]]></content>
      <categories>
        <category>Sentinel</category>
      </categories>
  </entry>
  <entry>
    <title>Elasticsearch学习</title>
    <url>/2021/12/31/elasticsearch/</url>
    <content><![CDATA[<h1 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h1><h3 id="京东搜索项目实战："><a href="#京东搜索项目实战：" class="headerlink" title="京东搜索项目实战："></a>京东搜索项目实战：</h3><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><h4 id="数据问题-数据库，消息队列中获取，都可以成为数据源"><a href="#数据问题-数据库，消息队列中获取，都可以成为数据源" class="headerlink" title="数据问题?数据库，消息队列中获取，都可以成为数据源"></a>数据问题?数据库，消息队列中获取，都可以成为数据源</h4><h5 id="爬取数据：（获取请求返回页面信息，筛选处我们想要的数据就可以了"><a href="#爬取数据：（获取请求返回页面信息，筛选处我们想要的数据就可以了" class="headerlink" title="爬取数据：（获取请求返回页面信息，筛选处我们想要的数据就可以了)"></a>爬取数据：（获取请求返回页面信息，筛选处我们想要的数据就可以了)</h5><p>jsoup包！</p>
<p>1.导入依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jsoup解析网页</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.jsoup&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jsoup&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.10.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><h3 id="搜索高亮"><a href="#搜索高亮" class="headerlink" title="搜索高亮"></a>搜索高亮</h3>]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>动漫网站推荐</title>
    <url>/2021/12/25/hello-world/</url>
    <content><![CDATA[<span id="more"></span>

<p><a href="https://www.agefans.live/">AGE动漫</a></p>
<p><a href="https://www.bilibili.com/">哔哩哔哩</a></p>
<p><a href="https://www.acfun.cn/">ACFUN</a></p>
<p><a href="http://www.milimili.in/">米粒米粒</a></p>
]]></content>
      <categories>
        <category>动漫</category>
      </categories>
      <tags>
        <tag>推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo框架搭建博客</title>
    <url>/2016/10/12/index/</url>
    <content><![CDATA[<h1 id="Hexo-theme-diaspora"><a href="#Hexo-theme-diaspora" class="headerlink" title="Hexo-theme-diaspora"></a>Hexo-theme-diaspora</h1><p><strong><a href="http://fech.in/">在线预览 | PREVIEW </a></strong></p>
<p>一款基于WP移植的Hexo主题，适合喜欢摄影，影评，乐评和玩弄文字的你，干净，清新； 响应式，Ajax，更多好玩的等你来发现。 </p>
<blockquote>
<p>再次感谢原作者创作出这么精美的主题 <a href="https://github.com/LoeiFy/Diaspora">@Loeify</a> 。如果你喜欢，请捐助原作者。</p>
</blockquote>
<p><img src="https://fech.in/static/images/Diaspora.jpg" alt="cover"></p>
<h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/Fechin/hexo-theme-diaspora.git themes/diaspora</span><br></pre></td></tr></table></figure>


<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>修改Hexo配置文件 <code>_config.yml</code> 主题项设置为diaspora</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">diaspora</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>

<h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><p>注意：请在更时主题时备份<code>_config.yml</code>配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/diaspora</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>


<h3 id="新建文章模板"><a href="#新建文章模板" class="headerlink" title="新建文章模板"></a>新建文章模板</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: My awesome title</span><br><span class="line">date: 2016-10-12 18:38:45</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">    -</span> 分类1</span><br><span class="line"><span class="bullet">    -</span> 分类2</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">    -</span> 标签1</span><br><span class="line"><span class="bullet">    -</span> 标签2</span><br><span class="line">mp3: http://domain.com/awesome.mp3</span><br><span class="line"><span class="section">cover: http://domain.com/awesome.jpg</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<h3 id="创建分类页"><a href="#创建分类页" class="headerlink" title="创建分类页"></a>创建分类页</h3><p>1 新建一个页面，命名为 categories 。命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>2 编辑刚新建的页面，将页面的类型设置为 categories</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>主题将自动为这个页面显示所有分类。</p>
<h3 id="创建标签页"><a href="#创建标签页" class="headerlink" title="创建标签页"></a>创建标签页</h3><p>1 新建一个页面，命名为 tags 。命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<p>2 编辑刚新建的页面，将页面的类型设置为 tags</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>主题将自动为这个页面显示所有标签。</p>
<h3 id="创建搜索页"><a href="#创建搜索页" class="headerlink" title="创建搜索页"></a>创建搜索页</h3><p>1 需要安装hexo的搜索插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>2 配置hexo全局配置文件（请将生成的索引文件放在网站根目录或修改主题js文件的path值）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>3 新建一个页面，命名为 search 。命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page search</span><br></pre></td></tr></table></figure>

<p>4 编辑刚新建的页面，将页面的类型设置为 search</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: search</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;search&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>5 在主题配置文件启用本地搜索</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#本地搜索,请将索引文件放在网站根目录</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">    <span class="comment">#是否启用</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>主题将自动为这个页面显示搜索功能。</p>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 头部菜单，title: link</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives</span>  </span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示目录</span></span><br><span class="line"><span class="attr">TOC:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否自动播放音乐</span></span><br><span class="line"><span class="attr">autoplay:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认音乐（随机播放）</span></span><br><span class="line"><span class="attr">mp3:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">http://link.hhtjim.com/163/425570952.mp3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">http://link.hhtjim.com/163/425570952.mp3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页封面图, 为空时取文章的cover作为封面(注意跨域问题,建议使用同源图片)</span></span><br><span class="line"><span class="attr">welcome_cover:</span> <span class="string">/img/welcome-cover.jpg</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认文章封面图（随机调用,支持外链）</span></span><br><span class="line"><span class="attr">cover:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">/img/cover.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/img/welcome-cover.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示Twitter分享卡片图像(图像尺寸要求：1200*600，creatorid不需要带@符号。注意：链接必须是完整url，否则Twitter将无法读取图片信息）</span></span><br><span class="line"><span class="attr">twitterpic:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">src:</span> <span class="string">https://bangdream.moe/img/ident.png</span></span><br><span class="line">  <span class="attr">creatorid:</span> <span class="string">yourtwitteridhere</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否关闭默认滚动条</span></span><br><span class="line"><span class="attr">scrollbar:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地搜索,请将索引文件放在网站根目录,或修改主题js文件的path值</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">    <span class="comment"># 是否启用</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示 一言(hitokoto)</span></span><br><span class="line"><span class="attr">hitokoto:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接(可选:facebook,twitter,github,wechat,email)</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">    <span class="attr">facebook:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">twitter:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">wechat:</span> <span class="string">/img/logo.png</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">mailto:xxxx@gmail.com</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 备案</span></span><br><span class="line"><span class="attr">beian:</span> </span><br><span class="line">    <span class="comment"># 是否显示备案信息</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否在主页面最底下显示备案信息(虽然丑，但是完全满足规定要求)</span></span><br><span class="line">    <span class="attr">enableFooter:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 备案号</span></span><br><span class="line">    <span class="attr">beianInfo:</span> <span class="string">冀ICP备xxxxxxx号</span></span><br><span class="line">    <span class="comment"># 链接地址</span></span><br><span class="line">    <span class="attr">link:</span> <span class="string">http://www.beian.miit.gov.cn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否使用mathjax</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Gitalk 评论插件（https://github.com/gitalk/gitalk）</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">    <span class="comment"># 是否启用评论功能</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 是否自动展开评论框</span></span><br><span class="line">    <span class="attr">autoExpand:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 应用编号</span></span><br><span class="line">    <span class="attr">clientID:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 应用秘钥</span></span><br><span class="line">    <span class="attr">clientSecret:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># issue仓库名</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># Github名</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># Github名</span></span><br><span class="line">    <span class="attr">admin:</span> [<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">    <span class="comment"># Ensure uniqueness and length less than 50</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">location.pathname</span></span><br><span class="line">    <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">    <span class="attr">distractionFreeMode:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站关键字</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">Fechin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要使用google_analytics进行统计的话，这里需要配置ID</span></span><br><span class="line"><span class="attr">google_analytics:</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站ico</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rss文件</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">atom.xml</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>mysql基础总结</title>
    <url>/2021/12/23/mysql%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="01、什么是数据库，为什么要学习数据库"><a href="#01、什么是数据库，为什么要学习数据库" class="headerlink" title="01、什么是数据库，为什么要学习数据库"></a>01、什么是数据库，为什么要学习数据库</h1><p>javaEE：企业级java开发  Web</p>
<p>前端（页面：展示，数据！）</p>
<p>后台（连接点：连接数据库JDBC，连接前端（控制，控制视图跳转，和给前端传递数据））</p>
<p>数据库（存数据）</p>
<h2 id="1-为什么学习数据库"><a href="#1-为什么学习数据库" class="headerlink" title="1.为什么学习数据库"></a>1.为什么学习数据库</h2><ol>
<li>岗位需求</li>
<li>现在的世界，大数据时代，得数据者得天下</li>
<li>被迫需求：存数据</li>
<li> <strong>数据库是所有软件体系中最核心的存在</strong></li>
</ol>
<h2 id="2-什么是数据库"><a href="#2-什么是数据库" class="headerlink" title="2.什么是数据库"></a>2.什么是数据库</h2><p>数据库（DB,database）</p>
<p>概念：数据仓库，软件，安装在操作系统(window,linux,mac…)之上。SQL，可以存储大量的数据，500w！</p>
<p>作用：存储数据，管理数据</p>
<h1 id="02、初始MySQL，关系型和非关系型数据库区别"><a href="#02、初始MySQL，关系型和非关系型数据库区别" class="headerlink" title="02、初始MySQL，关系型和非关系型数据库区别"></a>02、初始MySQL，关系型和非关系型数据库区别</h1><h2 id="1-数据库分类"><a href="#1-数据库分类" class="headerlink" title="1.数据库分类"></a>1.数据库分类</h2><p><strong>关系型数据库：(SQL)</strong></p>
<ul>
<li>MySQL、oracle、SqlServer、DB2、SQLLITE</li>
<li>通过表和表之间，行和列之间的关系进行数据的存储。</li>
</ul>
<p><strong>非关系型数据库：(NoSQL) not only</strong></p>
<ul>
<li>Redis、mongdb</li>
<li>非关系型数据库，对象存储，通过对象的自身的属性来决定。</li>
</ul>
<p><strong>DBMS(数据库管理系统)</strong></p>
<ul>
<li>数据库的管理软件，科学有效的管理我们的数据，维护和获取数据</li>
<li>MySQL，数据库管理系统</li>
</ul>
<h2 id="2-MySQL简介"><a href="#2-MySQL简介" class="headerlink" title="2.MySQL简介"></a>2.MySQL简介</h2><p>MySQL是一个**<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/696511">关系型数据库管理系统</a>**</p>
<p>前世：瑞典MySQL AB 公司开发</p>
<p>今生：属于 <a href="https://baike.baidu.com/item/Oracle">Oracle</a> 旗下产品</p>
<p>MySQL是最好的 <a href="https://baike.baidu.com/item/RDBMS/1048260">RDBMS</a> (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p>
<p>开源的数据库软件</p>
<p>体积小、速度快、总体拥有成本低，招人成本比较低，所以人必须会用~</p>
<p>中小型网站，或者大型网站，集群！</p>
<p>官网：<a href="https://www.mysql.com/">MySQL</a></p>
<p>安装建议：</p>
<ol>
<li>尽量不要使用exe，注册表</li>
<li>尽可能使用压缩包安装~</li>
</ol>
<h1 id="03、安装MySQL详细说明"><a href="#03、安装MySQL详细说明" class="headerlink" title="03、安装MySQL详细说明"></a>03、安装MySQL详细说明</h1><h2 id="1-1安装MariaDB-选择安装一个-建议玛利亚"><a href="#1-1安装MariaDB-选择安装一个-建议玛利亚" class="headerlink" title="1.1安装MariaDB(选择安装一个,建议玛利亚)"></a>1.1安装MariaDB(选择安装一个,建议玛利亚)</h2><p>一直下一步就行,如果电脑上安装了mysql,那么把端口号改成3307,账号密码都设置为root</p>
<h2 id="1-2安装mysql-选一个安装-不要装两个"><a href="#1-2安装mysql-选一个安装-不要装两个" class="headerlink" title="1.2安装mysql(选一个安装,不要装两个)"></a>1.2安装mysql(选一个安装,不要装两个)</h2><p>建议安装mysql8,一直下一步就行了,安装mysql5步骤有点复杂,就不去搞了</p>
<p>如果你想cmd直接启动mysql就去加一个系统变量Path即可</p>
<ol>
<li><p>如果你没有配置环境变量,那么就去你mysql的安装路径下面的bin目录上面的搜索框输入cmd后按回车(-p后面不要加空格)</p>
<p>如果要进入mariaDB,就进入MariaDB的bin目录,在搜索框输入cmd后按回车</p>
</li>
</ol>
<h2 id="2-安装遇到的问题"><a href="#2-安装遇到的问题" class="headerlink" title="2.安装遇到的问题"></a>2.安装遇到的问题</h2><ol>
<li>执行mysqld -install报错如下的话</li>
</ol>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210610221326629.png" alt="image-20210610221326629"></p>
<p>可以先安装下面这个即可</p>
<p><a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=40784">Download Visual C++ Redistributable Packages for Visual Studio 2013 from Official Microsoft Download Center</a></p>
<h1 id="04、sqlyog软件安装和使用"><a href="#04、sqlyog软件安装和使用" class="headerlink" title="04、sqlyog软件安装和使用"></a>04、sqlyog软件安装和使用</h1><ol>
<li>无脑安装</li>
<li>注册</li>
<li>打开连接数据库</li>
</ol>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210614090411318.png" alt="image-20210614090411318"></p>
<p>界面</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210614090317586.png" alt="image-20210614090317586"></p>
<p>这里与之前data文件夹对应</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210614090352253.png" alt="image-20210614090352253"></p>
<ol start="4">
<li><p>新建一个数据库 school</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210614090908854.png" alt="image-20210614090908854"></p>
<p>查看历史记录可以查到对应如下语句：</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210614091135625.png" alt="image-20210614091135625"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `school`<span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci; </span><br></pre></td></tr></table></figure>

<p>==每一个sqlyog的执行操作，本质就是对应了一个sql,可以在软件的历史记录中查看==</p>
</li>
<li><p>新建一张表student（id，姓名，年龄）</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210614091827019.png" alt="image-20210614091827019"></p>
</li>
<li><p>查看表</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210614092224514.png" alt="image-20210614092224514"></p>
</li>
<li><p>自己尝试添加多条记录</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210614092313191.png" alt="image-20210614092313191"></p>
</li>
</ol>
<h1 id="05、基本的命令行操作"><a href="#05、基本的命令行操作" class="headerlink" title="05、基本的命令行操作"></a>05、基本的命令行操作</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p  <span class="comment">-- 连接数据库(p后面不要加空格)</span></span><br><span class="line"></span><br><span class="line">update mysql.user <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;123456&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> host<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span>; <span class="comment">-- 修改用户密码 不要去乱改密码!!!!,教你不是让你去改密码,是让你知道遇到了可以怎么做</span></span><br><span class="line"></span><br><span class="line">flush privileges; <span class="comment">-- 刷新权限</span></span><br><span class="line"><span class="comment">----------------------------</span></span><br><span class="line"><span class="comment">-- 所有的语句都使用;结尾</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> databases; <span class="comment">-- 查看所有的数据库</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> use school; <span class="comment">-- 切换数据库  use 数据库名</span></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables; <span class="comment">-- 显示数据库中所有表的信息</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">describe</span> student; <span class="comment">-- 显示表的详细信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database bs;  <span class="comment">-- 创建一个数据库（这里过于简洁，后面详细介绍）</span></span><br><span class="line"></span><br><span class="line">exit <span class="comment">-- 退出连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单行注释</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>DDL 数据库<strong>定义</strong>语言</p>
<p>DML 数据库<strong>操作</strong>语言</p>
<p>DQL 数据库<strong>查询</strong>语言</p>
<p>DCL 数据库<strong>控制</strong>语言</p>
<h1 id="06、操作数据库语句"><a href="#06、操作数据库语句" class="headerlink" title="06、操作数据库语句"></a>06、操作数据库语句</h1><p>操作数据库 -&gt; 操作数据库中表 -&gt;操作数据库中表的数据</p>
<p>==mysql关键字不区分大小写==</p>
<h2 id="1-操作数据库（了解）"><a href="#1-操作数据库（了解）" class="headerlink" title="1.操作数据库（了解）"></a>1.操作数据库（了解）</h2><ol>
<li><p>创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] student;</span><br></pre></td></tr></table></figure></li>
<li><p>删除数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] zyy;</span><br></pre></td></tr></table></figure></li>
<li><p>使用数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 如果你的表名或者字段名是一个特殊字符，就需要带上``</span></span><br><span class="line"><span class="keyword">USER</span> `student`;</span><br></pre></td></tr></table></figure></li>
<li><p>查看数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES; <span class="comment">-- 查看所有的数据库</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>学习思路</strong></p>
<ol>
<li>==对比sqlyog的可视化操作==</li>
<li>固定的语法或者关键字必须强行记住！</li>
</ol>
<h1 id="07、列的数据类型讲解"><a href="#07、列的数据类型讲解" class="headerlink" title="07、列的数据类型讲解"></a>07、列的数据类型讲解</h1><blockquote>
<p>数值</p>
</blockquote>
<ul>
<li>tinyint         十分小的数据        1个字节</li>
<li>smallint       较小的数据           2个字节</li>
<li>mediumint  中等大小的数据   3个字节</li>
<li><strong>int                 标准的整数           4个字节</strong></li>
<li>bigint            较大的数据           8个字节</li>
<li>float              浮点数                   4个字节</li>
<li>double         浮点数                   8个字节</li>
<li><strong>decimal       字符串形式的浮点数 （金融计算的时候，一般是使用decimal）</strong></li>
</ul>
<blockquote>
<p>字符串</p>
</blockquote>
<ul>
<li>char         字符串固定大小的  0~255</li>
<li><strong>varchar   可变字符串  0~65535</strong>  （常量的变量  String）</li>
<li>tinytext    微型文本  2^8 -1</li>
<li><strong>text          文件串  2^16 -1</strong>  (保存大文本)</li>
</ul>
<blockquote>
<p>时间日期</p>
</blockquote>
<ul>
<li>date YYYY-MM-DD  日期格式</li>
<li>time HH:mm:ss    时间格式</li>
<li><strong>datetime  YYYY-MM-DD HH:mm:ss 最常用的时间格式</strong></li>
<li><strong>timestamp  时间戳，1970.1.1到现在的毫秒数！较为常用！</strong></li>
<li>year 年份表示</li>
</ul>
<blockquote>
<p>null</p>
</blockquote>
<ul>
<li>没有值，未知</li>
<li>==注意：不要使用NULL进行运算，结果为NULL==</li>
</ul>
<h1 id="08、数据库的字段属性-重点"><a href="#08、数据库的字段属性-重点" class="headerlink" title="08、数据库的字段属性(重点)"></a>08、数据库的字段属性(重点)</h1><p><strong>Unsigned:</strong></p>
<ul>
<li>无符号的整数</li>
<li>声明了该列不能声明为负数</li>
</ul>
<p><strong>Zerofill:</strong></p>
<ul>
<li>0填充的</li>
<li>不足的位数，使用0来填充   int(3)  5 — 005</li>
</ul>
<p><strong>自增：</strong></p>
<ul>
<li>通用理解为自增，自动在上一条记录的基础上+1（默认）</li>
<li>通常用来设计唯一的主键，index，必须是整数类型</li>
<li>可以自定义设计主键自增的起始值和步长</li>
</ul>
<p><strong>非空</strong> null/not null：</p>
<ul>
<li>not null，如果不给他赋值，就会报错</li>
<li>null，如果不给他赋值，默认就是null</li>
</ul>
<p><strong>默认：</strong></p>
<ul>
<li>设置默认的值</li>
<li>如果不赋值，就会存默认值</li>
</ul>
<p>拓展：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">每个表，都必须存在以下五个字段  未来做项目用的，表示一个记录存在的意义</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">id          主键</span></span><br><span class="line"><span class="comment">version     乐观锁</span></span><br><span class="line"><span class="comment">is_delete   伪删除</span></span><br><span class="line"><span class="comment">gmt_create  创建时间</span></span><br><span class="line"><span class="comment">gmt_update  修改时间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h1 id="09、创建数据库表"><a href="#09、创建数据库表" class="headerlink" title="09、创建数据库表"></a>09、创建数据库表</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建student学生表，使用sql创建</span></span><br><span class="line"><span class="comment">-- 学号 姓名 性别 出生日期 家庭地址  email</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意点：使用英文()  表的名称和字段尽量使用``括起来</span></span><br><span class="line"><span class="comment">-- AUTO_INCREMENT 自增</span></span><br><span class="line"><span class="comment">-- 字符串使用单引号括起来</span></span><br><span class="line"><span class="comment">-- 所有的语句后面加上英文逗号，最后一个不加</span></span><br><span class="line"><span class="comment">-- PRIMARY KEY主键，一个表一般只有一个唯一的主键</span></span><br><span class="line"><span class="comment">-- COMMIT后面加注释</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  `birthday` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">  `address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭地址&#x27;</span>,</span><br><span class="line">  `email` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>

<p>格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] `表名` (</span><br><span class="line">    `字段名` 列类型[属性]  [索引]  [注释],</span><br><span class="line">    `字段名` 列类型[属性]  [索引]  [注释],</span><br><span class="line">    `字段名` 列类型[属性]  [索引]  [注释],</span><br><span class="line">    ...</span><br><span class="line">)[表类型][字符集设置][注释]</span><br></pre></td></tr></table></figure>



<p>常用命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE `cgb2109` ; <span class="comment">-- 查看创建数据库的语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student`; <span class="comment">-- 查看student数据表的定义语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> `student`; <span class="comment">-- 查看表的结构</span></span><br></pre></td></tr></table></figure>



<h1 id="10、MyIASM和InnoDB区别"><a href="#10、MyIASM和InnoDB区别" class="headerlink" title="10、MyIASM和InnoDB区别"></a>10、MyIASM和InnoDB区别</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关于数据库引擎</span></span><br><span class="line"><span class="comment">INNODB 默认使用</span></span><br><span class="line"><span class="comment">MYISAM 早些年使用的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th></th>
<th>MYISAM</th>
<th>INNODB</th>
</tr>
</thead>
<tbody><tr>
<td>事务支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>数据行锁定</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>外键约束</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>全文索引</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>表空间的大小</td>
<td>较小</td>
<td>较大，约为MYISAM的2倍</td>
</tr>
</tbody></table>
<p>常规使用操作：</p>
<ul>
<li>MYISAM 节约空间，速度较快</li>
<li>INNODB 安全性高，事务的处理，多表多用户操作</li>
</ul>
<blockquote>
<p>在物理空间存在的位置</p>
</blockquote>
<p>所有的数据库文件都存在data目录下，一个文件夹就对应一个数据库</p>
<p>本质还是文件的存储！</p>
<p>mysql引擎在物理文件上的区别</p>
<ul>
<li>INNODB 在数据库表中只有一个*.frm文件，以及上级目录下的ibdata1文件</li>
<li>MYISAM 对应的文件<ul>
<li>*.frm  表结构的定义文件</li>
<li>*.MYD 数据文件(data)</li>
<li>*.MYI 索引文件 (index)</li>
</ul>
</li>
</ul>
<blockquote>
<p>设置数据库表的字符集编码</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>

<p>不设置的话，会是mysql默认的字符集编码（不支持中文）</p>
<p>mysql的默认编码是Latin1,不支持中文</p>
<p>在my.ini中配置默认的编码</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">character-set-server</span>=utf8</span><br></pre></td></tr></table></figure>



<h1 id="11、修改和删除数据表字段"><a href="#11、修改和删除数据表字段" class="headerlink" title="11、修改和删除数据表字段"></a>11、修改和删除数据表字段</h1><blockquote>
<p>修改</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表名 ALTER TABLE `原表名` RENAME AS `新表名`;</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `teacher` RENAME <span class="keyword">AS</span> `teacher1`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 新增表的字段  ALTER TABLE `表名` ADD 字段名 列属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `teacher1` <span class="keyword">ADD</span> age <span class="type">INT</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的字段（重命名，修改约束！）</span></span><br><span class="line"><span class="comment">-- ALTER TABLE `表名` MODIFY 字段名 列属性; </span></span><br><span class="line"><span class="comment">-- ALTER TABLE `表名` CHANGE 原字段名 现字段名 列属性;</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `teacher1` MODIFY age <span class="type">VARCHAR</span>(<span class="number">3</span>); <span class="comment">-- 修改约束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `teacher1` CHANGE age age1 <span class="type">INT</span>(<span class="number">3</span>);<span class="comment">-- 字段重命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表的字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `teacher1` <span class="keyword">DROP</span> age1;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>删除</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除表（如果存在再删除）</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> teacher1;</span><br></pre></td></tr></table></figure>

<p>==所有的创建和删除操作尽量加上判断，以免报错~==</p>
<p>注意点：</p>
<ul>
<li>``字段，使用这个包裹</li>
<li>注释 – /**/</li>
<li>sql关键字大小写不敏感，建议大写写小写</li>
<li>所有的符号全部用英文</li>
</ul>
<h1 id="12、数据库级别的外键（了解）"><a href="#12、数据库级别的外键（了解）" class="headerlink" title="12、数据库级别的外键（了解）"></a>12、数据库级别的外键（了解）</h1><blockquote>
<p>方式一：创建表的时候，增加约束（麻烦，比较复杂）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 年级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `grade` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 先删除之前的学生表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生表 id_grade 字段 需要引用年级表的 id字段</span></span><br><span class="line"><span class="comment">-- 定义外键key</span></span><br><span class="line"><span class="comment">-- 给这个外键添加约束（执行引用） references 引用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  `birthday` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">  `address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭地址&#x27;</span>,</span><br><span class="line">  `email` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  `id_grade` <span class="type">INT</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(`id`),</span><br><span class="line">  KEY `fk_id_grade`(`id_grade`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fk_id_grade` <span class="keyword">FOREIGN</span> KEY (`id_grade`) <span class="keyword">REFERENCES</span> `grade` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210620095301587.png" alt="image-20210620095301587"></p>
<p>删除有外键关系的表的时候，必须要先删除引用别人的表（从表），再删除被引用的表（主表）</p>
<blockquote>
<p>方式二：创建表成功后，添加外键约束</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 年级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `grade` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  `birthday` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">  `address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭地址&#x27;</span>,</span><br><span class="line">  `email` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  `id_grade` <span class="type">INT</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- DROP TABLE `grade`;</span></span><br><span class="line"><span class="comment">-- DROP TABLE `student`;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表的时候没有外键关系</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` </span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> `fk_id_grade` <span class="keyword">FOREIGN</span> KEY (`id_grade`) <span class="keyword">REFERENCES</span> `grade` (`id`);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALTER TABLE 表 ADD CONSTRAINT 约束名 FOREIGN KEY (作为外键的列) REFERENCES 哪个表 (哪个字段)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上的操作都是物理外键，数据库级别的外键，我们不建议使用（避免数据库过多造成困扰！）</p>
<p><strong>最佳实践</strong></p>
<ul>
<li>数据库就是单纯的表，只用来存数据，只有行(数据)和列（字段）</li>
<li>我们想使用多张表的数据，想使用外键<strong>（程序去实现）</strong></li>
</ul>
<h1 id="13、insert语句详解"><a href="#13、insert语句详解" class="headerlink" title="13、insert语句详解"></a>13、insert语句详解</h1><p><strong>数据库意义</strong>：数据存储，数据管理</p>
<p>DML语言：数据库操作语言</p>
<ul>
<li>增</li>
<li>删</li>
<li>改</li>
</ul>
<blockquote>
<p>insert</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入语言</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- INSERT INTO `表名`(`字段1`,`字段2`,`字段3`...) VALUES(&#x27;值1&#x27;,&#x27;值2&#x27;,&#x27;值3&#x27;...);</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade`(`name`) <span class="keyword">VALUES</span>(<span class="string">&#x27;大四&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`,`birthday`,`id_grade`) <span class="keyword">VALUES</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;1995-11-20&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="comment">-- 一般写插入语句，我们一定要数据和字段一一对应。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多条</span></span><br><span class="line"><span class="comment">-- INSERT INTO `表名`(`字段1`,`字段2`...) VALUES(&#x27;值1&#x27;,&#x27;值2&#x27;...),(&#x27;值1&#x27;,&#x27;值2&#x27;...)...;</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade`(`name`) <span class="keyword">VALUES</span>(<span class="string">&#x27;大一&#x27;</span>),(<span class="string">&#x27;大二&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`,`birthday`,`id_grade`) <span class="keyword">VALUES</span>(<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;1994-11-20&#x27;</span>,<span class="string">&#x27;2&#x27;</span>),(<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;1995-11-20&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ul>
<li>字段和字段之间使用逗号隔开</li>
<li>字段是可以省略，但是后面的值必须要一一对应，不能少</li>
<li>可以同时插入多条数据，VALUES后面的值，需要使用逗号分开<code>VALUES(),()...</code></li>
</ul>
<h1 id="14、update语句详解"><a href="#14、update语句详解" class="headerlink" title="14、update语句详解"></a>14、update语句详解</h1><blockquote>
<p>update</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改学员名字</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;zyy&#x27;</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="comment">-- 通过多个条件定位数据</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;hehe&#x27;</span> <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;zyy&#x27;</span> <span class="keyword">AND</span> id_grade<span class="operator">=</span><span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"><span class="comment">-- 不指定条件的情况，会改动所有的表</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;all&#x27;</span>;</span><br><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="comment">-- UPDATE 表名 SET 列名=值[,列名=值,列名=值,列名=值...] [WHERE 条件]</span></span><br></pre></td></tr></table></figure>

<p>条件：where 字句 运算符 id等于某个值，大于某个值，在某个区间内修改</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
<th>范围</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>等于</td>
<td>5=6</td>
<td>false</td>
</tr>
<tr>
<td>&lt;&gt; 或者 !=</td>
<td>不等于</td>
<td>5!=6</td>
<td>true</td>
</tr>
<tr>
<td>&gt;</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&gt;=</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;=</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BETWEEN … AND …</td>
<td>某个范围内</td>
<td>BETWEEN 1 AND 3</td>
<td>[1,3]</td>
</tr>
<tr>
<td>AND</td>
<td>和 &amp;&amp;</td>
<td>5&gt;1 and 1&gt;2</td>
<td>false</td>
</tr>
<tr>
<td>OR</td>
<td>或 ||</td>
<td>5&gt;1 or 1&gt;2</td>
<td>true</td>
</tr>
</tbody></table>
<p>注意事项：</p>
<ul>
<li><p>列尽量带上``</p>
</li>
<li><p>条件，筛选的条件，如果没有指定，则会修改所有的列</p>
</li>
<li><p>value，可以是一个具体的值，也可以是一个变量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE `student` <span class="keyword">SET</span> birthday<span class="operator">=</span><span class="built_in">CURRENT_TIME</span> <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;hehe&#x27;</span> <span class="keyword">AND</span> id_grade<span class="operator">=</span><span class="string">&#x27;2&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>多个设置的属性之间，使用英文逗号隔开（后面trim,可以干掉多余的逗号）</p>
</li>
</ul>
<h1 id="15、delete和truncate详解"><a href="#15、delete和truncate详解" class="headerlink" title="15、delete和truncate详解"></a>15、delete和truncate详解</h1><blockquote>
<p>delete</p>
</blockquote>
<p>语法： <code>delete from 表名 [where 条件]</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除数据（避免这样写，会全部删除）</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"><span class="comment">-- 删除指定数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>truncate</p>
</blockquote>
<p>作用：完全清空一个数据库表，标的结构和索引约束不会变！</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 清空表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> `student`;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>delete 和 truncate 区别</p>
</blockquote>
<ul>
<li>相同点：都能删除数据，都不会删除表结构</li>
<li>不同：<ul>
<li>truncate 重新设置自增列，计数器会归零</li>
<li>truncate 不会影响事务</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 测试 delete 和 truncate 区别</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test`(</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `coll` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不会影响自增</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `test`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 自增归零</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> `test`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` (`coll`) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>),(<span class="string">&#x27;2&#x27;</span>),(<span class="string">&#x27;3&#x27;</span>),(<span class="string">&#x27;4&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>了解即可<code>delete 删除的问题</code>,重启数据库,现象</p>
<ul>
<li>innoDB  自增列会从1开始（存在内存当中的，断电即失）</li>
<li>MyISAM  继续上一个自增量开始（存在文件中，不会丢失）</li>
</ul>
<h1 id="16、基本的select语句和别名使用（重点）"><a href="#16、基本的select语句和别名使用（重点）" class="headerlink" title="16、基本的select语句和别名使用（重点）"></a>16、基本的select语句和别名使用（重点）</h1><p>DQL（data query language:数据查询语言）</p>
<ul>
<li>所有的查询操作都用它 select</li>
<li>简单的查询，复杂的查询它都能做</li>
<li><strong>数据库中最核心的语言，最重要的语句</strong></li>
<li>使用频率最高的语句</li>
</ul>
<p>select 语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>]</span><br><span class="line">&#123;<span class="operator">*</span> <span class="operator">|</span> table.<span class="operator">*</span> <span class="operator">|</span> [table.field1[<span class="keyword">as</span> alias1][,table.field2[<span class="keyword">as</span> alias2]][,...]]&#125;</span><br><span class="line"><span class="keyword">FROM</span> table_name [<span class="keyword">as</span> table_alias]</span><br><span class="line">    [<span class="keyword">left</span> <span class="operator">|</span> <span class="keyword">right</span> <span class="operator">|</span> <span class="keyword">inner</span> <span class="keyword">join</span> table_name2]  <span class="comment">-- 联合查询</span></span><br><span class="line">    [<span class="keyword">WHERE</span> ...]  <span class="comment">-- 指定结果需满足的条件</span></span><br><span class="line">    [<span class="keyword">GROUP</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定结果按照哪几个字段来分组</span></span><br><span class="line">    [<span class="keyword">HAVING</span>]  <span class="comment">-- 过滤分组的记录必须满足的次要条件</span></span><br><span class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定查询记录按一个或多个条件排序</span></span><br><span class="line">    [LIMIT &#123;[<span class="keyword">offset</span>,]row_count <span class="operator">|</span> row_countOFFSET <span class="keyword">offset</span>&#125;];</span><br><span class="line">    <span class="comment">--  指定查询的记录从哪条至哪条</span></span><br></pre></td></tr></table></figure>

<p>注意：[]括号代表可选的，{}括号代表必选的</p>
<h2 id="指定查询字段"><a href="#指定查询字段" class="headerlink" title="指定查询字段"></a>指定查询字段</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> `school`;</span><br><span class="line"><span class="comment">-- 创建一个school数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `school`;</span><br><span class="line"><span class="comment">-- 使用school数据库</span></span><br><span class="line">USE `school`;</span><br><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `student`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student`(</span><br><span class="line">    `student_no` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    `login_pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `student_name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生姓名&#x27;</span>,</span><br><span class="line">    `sex` TINYINT(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别，0或1&#x27;</span>,</span><br><span class="line">    `grade_id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级编号&#x27;</span>,</span><br><span class="line">    `phone` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系电话&#x27;</span>,</span><br><span class="line">    `address` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">    `born_date` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生时间&#x27;</span>,</span><br><span class="line">    `email` <span class="type">VARCHAR</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱账号&#x27;</span>,</span><br><span class="line">    `identity_card` <span class="type">VARCHAR</span>(<span class="number">18</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;身份证号&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`student_no`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建年级表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `grade`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `grade`(</span><br><span class="line">  `grade_id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级编号&#x27;</span>,</span><br><span class="line">  `grade_name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY (`grade_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建科目表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `subject`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `subject`(</span><br><span class="line">  `subject_no`<span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;课程编号&#x27;</span>,</span><br><span class="line">  `subject_name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;课程名称&#x27;</span>,</span><br><span class="line">  `class_hour` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学时&#x27;</span>,</span><br><span class="line">  `grade_id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级编号&#x27;</span>,</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY (`subject_no`)</span><br><span class="line">)ENGINE <span class="operator">=</span> INNODB  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建成绩表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">result</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">result</span>`(</span><br><span class="line">  `student_no` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">  `subject_no` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;课程编号&#x27;</span>,</span><br><span class="line">  `exam_date` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;考试日期&#x27;</span>,</span><br><span class="line">  `student_result` <span class="type">INT</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;考试成绩&#x27;</span></span><br><span class="line">  )ENGINE <span class="operator">=</span> INNODB <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line">  </span><br><span class="line"><span class="comment">-- 插入学生数据 其余自行添加 这里只添加了2行</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`student_no`,`login_pwd`,`student_name`,`sex`,`grade_id`,`phone`,`address`,`born_date`,`email`,`identity_card`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1000</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;张伟&#x27;</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="string">&#x27;13800001234&#x27;</span>,<span class="string">&#x27;北京朝阳&#x27;</span>,<span class="string">&#x27;1980-1-1&#x27;</span>,<span class="string">&#x27;text123@qq.com&#x27;</span>,<span class="string">&#x27;123456198001011234&#x27;</span>),</span><br><span class="line">(<span class="number">1001</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;赵强&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="string">&#x27;13800002222&#x27;</span>,<span class="string">&#x27;广东深圳&#x27;</span>,<span class="string">&#x27;1990-1-1&#x27;</span>,<span class="string">&#x27;text111@qq.com&#x27;</span>,<span class="string">&#x27;123456199001011233&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入年级数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade` (`grade_id`,`grade_name`) <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;大一&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;大二&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;大三&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;大四&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;预科班&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入科目数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `subject`(`subject_no`,`subject_name`,`class_hour`,`grade_id`)<span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;高等数学-1&#x27;</span>,<span class="number">110</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;高等数学-2&#x27;</span>,<span class="number">110</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;高等数学-3&#x27;</span>,<span class="number">100</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;高等数学-4&#x27;</span>,<span class="number">130</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;C语言-1&#x27;</span>,<span class="number">110</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">&#x27;C语言-2&#x27;</span>,<span class="number">110</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">7</span>,<span class="string">&#x27;C语言-3&#x27;</span>,<span class="number">100</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">8</span>,<span class="string">&#x27;C语言-4&#x27;</span>,<span class="number">130</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">9</span>,<span class="string">&#x27;Java程序设计-1&#x27;</span>,<span class="number">110</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">10</span>,<span class="string">&#x27;Java程序设计-2&#x27;</span>,<span class="number">110</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">11</span>,<span class="string">&#x27;Java程序设计-3&#x27;</span>,<span class="number">100</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">12</span>,<span class="string">&#x27;Java程序设计-4&#x27;</span>,<span class="number">130</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">13</span>,<span class="string">&#x27;数据库结构-1&#x27;</span>,<span class="number">110</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">14</span>,<span class="string">&#x27;数据库结构-2&#x27;</span>,<span class="number">110</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">15</span>,<span class="string">&#x27;数据库结构-3&#x27;</span>,<span class="number">100</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">16</span>,<span class="string">&#x27;数据库结构-4&#x27;</span>,<span class="number">130</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">17</span>,<span class="string">&#x27;C#基础&#x27;</span>,<span class="number">130</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入成绩数据  这里仅插入了一组，其余自行添加</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">result</span>`(`student_no`,`subject_no`,`exam_date`,`student_result`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1000</span>,<span class="number">1</span>,<span class="string">&#x27;2013-11-11 16:00:00&#x27;</span>,<span class="number">85</span>),</span><br><span class="line">(<span class="number">1000</span>,<span class="number">2</span>,<span class="string">&#x27;2013-11-12 16:00:00&#x27;</span>,<span class="number">70</span>),</span><br><span class="line">(<span class="number">1000</span>,<span class="number">3</span>,<span class="string">&#x27;2013-11-11 09:00:00&#x27;</span>,<span class="number">68</span>),</span><br><span class="line">(<span class="number">1000</span>,<span class="number">4</span>,<span class="string">&#x27;2013-11-13 16:00:00&#x27;</span>,<span class="number">98</span>),</span><br><span class="line">(<span class="number">1000</span>,<span class="number">5</span>,<span class="string">&#x27;2013-11-14 16:00:00&#x27;</span>,<span class="number">58</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询全部的学生   SELECT 字段 FROM 表名;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定字段</span></span><br><span class="line"><span class="keyword">SELECT</span> student_name, student_no <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 别名，给结果起一个名字 AS  可以给字段起别名，也可以给表起别名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> student_name <span class="keyword">AS</span> <span class="string">&#x27;学号&#x27;</span>, student_no <span class="keyword">AS</span> <span class="string">&#x27;姓名&#x27;</span> <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数 concat(a,b)</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;姓名：&#x27;</span>, student_no)  <span class="keyword">AS</span> <span class="string">&#x27;新姓名&#x27;</span> <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>有的时候，列表名不是那么见名知意，我们可以起别名</p>
</blockquote>
<h1 id="17、去重及数据库的表达式"><a href="#17、去重及数据库的表达式" class="headerlink" title="17、去重及数据库的表达式"></a>17、去重及数据库的表达式</h1><blockquote>
<p>去重 distinct</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询全部的考试成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="comment">-- 查询有哪些同学参加了考试</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no` <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="comment">-- 发现重复数据，去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `student_no` <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>数据库的列（表达式）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询系统版本（函数）</span></span><br><span class="line"> <span class="keyword">SELECT</span> VERSION();</span><br><span class="line"> <span class="comment">-- 用来计算（表达式）</span></span><br><span class="line"> <span class="keyword">SELECT</span> <span class="number">100</span><span class="operator">*</span><span class="number">3</span> <span class="number">-1</span> ;</span><br><span class="line"> <span class="comment">-- 查询自增的步长（变量）</span></span><br><span class="line"> <span class="keyword">SELECT</span> @<span class="variable">@auto</span>_increment_increment;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">-- 学员考试成绩 +1 查看</span></span><br><span class="line"> <span class="keyword">SELECT</span> `student_no`,`student_result` <span class="operator">+</span> <span class="number">1</span> <span class="keyword">AS</span> <span class="string">&#x27;提分后&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></figure>

<p>数据库中的表达式： 文本值，列，Null，函数，计算表达式，系统变量</p>
<p>select <code>表达式</code> from 表名</p>
<h1 id="18、where子句之逻辑运算符"><a href="#18、where子句之逻辑运算符" class="headerlink" title="18、where子句之逻辑运算符"></a>18、where子句之逻辑运算符</h1><p>作用：检索数据中<code>符合条件</code>的值</p>
<p>搜索的条件由一个或者多个表达式组成，结果布尔值</p>
<blockquote>
<p>逻辑运算符</p>
</blockquote>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>and    &amp;&amp;</td>
<td>a and b     a&amp;&amp;b</td>
<td>逻辑与</td>
</tr>
<tr>
<td>or     ||</td>
<td>a orb     a||b</td>
<td>逻辑或</td>
</tr>
<tr>
<td>not   !</td>
<td>not a     !a</td>
<td>逻辑非</td>
</tr>
</tbody></table>
<p>==尽量适应英文字母==</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询考试成绩在 95 ~ 100分之间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> student_no,student_result <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- and</span></span><br><span class="line"><span class="keyword">SELECT</span> student_no,student_result <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> student_result<span class="operator">&gt;</span><span class="number">95</span> <span class="keyword">AND</span> student_result<span class="operator">&lt;=</span><span class="number">100</span>;</span><br><span class="line"><span class="comment">-- &amp;&amp; </span></span><br><span class="line"><span class="keyword">SELECT</span> student_no,student_result <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> student_result<span class="operator">&gt;</span><span class="number">95</span> <span class="operator">&amp;&amp;</span> student_result<span class="operator">&lt;=</span><span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模糊查询（区间）</span></span><br><span class="line"><span class="keyword">SELECT</span> student_no,student_result <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> student_result <span class="keyword">BETWEEN</span> <span class="number">95</span> <span class="keyword">AND</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 除了1000号学生之外的学生的成绩</span></span><br><span class="line"><span class="comment">-- !=</span></span><br><span class="line"><span class="keyword">SELECT</span> student_no,student_result <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> student_no <span class="operator">!=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="comment">-- not</span></span><br><span class="line"><span class="keyword">SELECT</span> student_no,student_result <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> student_no <span class="operator">=</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></figure>



<h1 id="19、模糊查询操作符详解"><a href="#19、模糊查询操作符详解" class="headerlink" title="19、模糊查询操作符详解"></a>19、模糊查询操作符详解</h1><blockquote>
<p>模糊查询：比较运算符</p>
</blockquote>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>IS NULL</td>
<td>a is null</td>
<td>如果操作符为null，结果为真</td>
</tr>
<tr>
<td>IS NOT NULL</td>
<td>a is not null</td>
<td>如果操作符不为null，结果为真</td>
</tr>
<tr>
<td>BWTWEEN…AND…</td>
<td>a between b and c</td>
<td>若a在b和c之间，则结果为真</td>
</tr>
<tr>
<td>LIKE</td>
<td>a like b</td>
<td>SQL匹配，如果a匹配b,则结果为真</td>
</tr>
<tr>
<td>IN</td>
<td>a in (a1,a2,a3,…)</td>
<td>假设a在a1或者a2或者a3,…其中的某一个，则结果为真</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- like 结合 </span></span><br><span class="line"><span class="comment">--   %（代表0到任意个字符）</span></span><br><span class="line"><span class="comment">--   _（代表1）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学，名字后面只有一个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> <span class="string">&#x27;刘_&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学，名字后面有两个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> <span class="string">&#x27;刘__&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询名字中间有嘉字的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> student_name <span class="keyword">LIKE</span> <span class="string">&#x27;%%嘉%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- in (具体的一个或者多个值)</span></span><br><span class="line"><span class="comment">-- 查询学号1001,1002,1003号学号</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> student_no <span class="keyword">IN</span> (<span class="string">&#x27;1001&#x27;</span>,<span class="string">&#x27;1002&#x27;</span>,<span class="string">&#x27;1003&#x27;</span>);</span><br><span class="line"><span class="comment">-- 查询在北京的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> address <span class="keyword">IN</span> (<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- null</span></span><br><span class="line"><span class="comment">-- 查询地址为空的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> address <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> address <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- not null</span></span><br><span class="line"><span class="comment">-- 查询有出生日期的同学 不为空</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> born_date <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询没有出生日期的同学 为空</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> born_date <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>



<h1 id="20、联表查询join-on详解"><a href="#20、联表查询join-on详解" class="headerlink" title="20、联表查询join on详解"></a>20、联表查询join on详解</h1><blockquote>
<p>join 对比</p>
</blockquote>
<p>七种join理论</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/20181103160140252.png" alt="在这里插入图片描述"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--   =========连表查询==================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询参加了考试的同学（学号，姓名，科目编号，分数）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- join on 连接查询</span></span><br><span class="line"><span class="comment">-- where 等值查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- inner join</span></span><br><span class="line"><span class="keyword">SELECT</span> st.`student_no`,st.`student_name`,re.`subject_no`,re.`student_result` </span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> st</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> re <span class="keyword">ON</span> </span><br><span class="line">st.`student_no`<span class="operator">=</span>re.`student_no`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- right join</span></span><br><span class="line"><span class="keyword">SELECT</span> st.`student_no`,st.`student_name`,re.`subject_no`,re.`student_result` </span><br><span class="line"><span class="keyword">FROM</span> student st</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> re <span class="keyword">ON</span> </span><br><span class="line">st.`student_no`<span class="operator">=</span>re.`student_no`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- left join</span></span><br><span class="line"><span class="keyword">SELECT</span> st.`student_no`,st.`student_name`,re.`subject_no`,re.`student_result` </span><br><span class="line"><span class="keyword">FROM</span> student st</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> re <span class="keyword">ON</span> </span><br><span class="line">st.`student_no`<span class="operator">=</span>re.`student_no`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询缺考的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> st.`student_no`,st.`student_name`,re.`subject_no`,re.`student_result` </span><br><span class="line"><span class="keyword">FROM</span> student st</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> re <span class="keyword">ON</span> </span><br><span class="line">st.`student_no`<span class="operator">=</span>re.`student_no`</span><br><span class="line"><span class="keyword">WHERE</span> re.`student_result` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询了参加考试的同学信息（学号，学生姓名，科目名称，分数）</span></span><br><span class="line"><span class="keyword">SELECT</span> stu.`student_no`,stu.`student_name`,sub.`subject_name`,res.`student_result`</span><br><span class="line"><span class="keyword">FROM</span> `student` stu</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` res </span><br><span class="line"><span class="keyword">ON</span> res.`student_no`<span class="operator">=</span>stu.`student_no`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> res.`subject_no`<span class="operator">=</span>sub.`subject_no`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学员所属的年级（学号，学生的姓名，年级名称）</span></span><br><span class="line"><span class="keyword">SELECT</span> `student_no`,`student_name`,`grade_name`</span><br><span class="line"><span class="keyword">FROM</span> student stu</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `grade` gra</span><br><span class="line"><span class="keyword">ON</span> stu.`grade_id`<span class="operator">=</span>gra.`grade_id`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询了参加数据结构-1考试的同学信息（学号，学生姓名，科目名称，分数）</span></span><br><span class="line"><span class="keyword">SELECT</span> stu.`student_no`,stu.`student_name`,sub.`subject_name`,res.`student_result`</span><br><span class="line"><span class="keyword">FROM</span> student stu</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` res</span><br><span class="line"><span class="keyword">ON</span> stu.`student_no` <span class="operator">=</span> res.`student_no`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> res.`subject_no`<span class="operator">=</span>sub.`subject_no`</span><br><span class="line"><span class="keyword">WHERE</span> sub.`subject_name`<span class="operator">=</span><span class="string">&#x27;数据结构-1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 我要查询哪些数据 select ...</span></span><br><span class="line"><span class="comment">-- 从哪几个表中查 from 表 XXX join 连接的表 on 交叉条件</span></span><br><span class="line"><span class="comment">-- 假设存在一种多张表查询，慢慢来，先查询两张表然后再慢慢增加</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>操作</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>inner join</td>
<td>如果表中至少有一个匹配，就返回行</td>
</tr>
<tr>
<td>left join</td>
<td>会从左边中返回所有的值，即使右表中没有匹配</td>
</tr>
<tr>
<td>right join</td>
<td>会从右边中返回所有的值，即使左表中没有匹配</td>
</tr>
</tbody></table>
<h1 id="21、自连接及联表查询"><a href="#21、自连接及联表查询" class="headerlink" title="21、自连接及联表查询"></a>21、自连接及联表查询</h1><blockquote>
<p>自连接</p>
</blockquote>
<p>自己的表和自己的表连接，核心：==一张表拆为两张一样的表即可==</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="comment">-- unsigned 无符号</span></span><br><span class="line"><span class="comment">-- auto_increment=9 自增的起始值</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `category` ;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `category` (</span><br><span class="line">  `category_id` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主题id&#x27;</span>,</span><br><span class="line">  `pid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;父id&#x27;</span>,</span><br><span class="line">  `category_name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主题名字&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`category_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">9</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入值</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `category`(`category_id`,`pid`,`category_name`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;信息技术&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;软件开发&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;数据库&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;美术设计&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;web开发&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;ps技术&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;办公信息&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `category`;</span><br></pre></td></tr></table></figure>

<p>父类</p>
<table>
<thead>
<tr>
<th>pid</th>
<th>category_id</th>
<th>category_name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2</td>
<td>信息技术</td>
</tr>
<tr>
<td>1</td>
<td>3</td>
<td>软件开发</td>
</tr>
<tr>
<td>1</td>
<td>5</td>
<td>美术设计</td>
</tr>
</tbody></table>
<p>子类</p>
<table>
<thead>
<tr>
<th>pid</th>
<th>category_id</th>
<th>category_name</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td>4</td>
<td>数据库</td>
</tr>
<tr>
<td>2</td>
<td>8</td>
<td>办公信息</td>
</tr>
<tr>
<td>3</td>
<td>6</td>
<td>web开发</td>
</tr>
<tr>
<td>5</td>
<td>7</td>
<td>ps技术</td>
</tr>
</tbody></table>
<p>操作：查询父类对应的子类关系</p>
<table>
<thead>
<tr>
<th>父类</th>
<th>子类</th>
</tr>
</thead>
<tbody><tr>
<td>信息技术</td>
<td>办公信息</td>
</tr>
<tr>
<td>软件开发</td>
<td>数据库</td>
</tr>
<tr>
<td>软件开发</td>
<td>web开发</td>
</tr>
<tr>
<td>美术设计</td>
<td>ps技术</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询父子信息，把一张表看为两个一模一样的表</span></span><br><span class="line"><span class="keyword">SELECT</span> a.`category_name` <span class="keyword">AS</span> <span class="string">&#x27;父栏目&#x27;</span>,b.`category_name` <span class="keyword">AS</span> <span class="string">&#x27;子栏目&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> `category` <span class="keyword">AS</span> a, `category` <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.`category_id`<span class="operator">=</span>b.`pid`;</span><br></pre></td></tr></table></figure>



<h1 id="22、分页和排序"><a href="#22、分页和排序" class="headerlink" title="22、分页和排序"></a>22、分页和排序</h1><blockquote>
<p>排序</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 排序： 升序 ASC  降序 DESC</span></span><br><span class="line"><span class="comment">-- ORDER BY 通过那个字段排序，怎么排</span></span><br><span class="line"><span class="comment">-- 查询的结果根据成绩降序 排序</span></span><br><span class="line"><span class="keyword">SELECT</span> stu.`student_no`,stu.`student_name`,sub.`subject_name`,res.`student_result`</span><br><span class="line"><span class="keyword">FROM</span> student stu</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` res</span><br><span class="line"><span class="keyword">ON</span> stu.`student_no` <span class="operator">=</span> res.`student_no`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> res.`subject_no`<span class="operator">=</span>sub.`subject_no`</span><br><span class="line"><span class="keyword">WHERE</span> sub.`subject_name`<span class="operator">=</span><span class="string">&#x27;数据结构-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `student_result` <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 100w</span></span><br><span class="line"><span class="comment">-- 为什么要分页</span></span><br><span class="line"><span class="comment">-- 缓解数据库压力，给人更好的体验   瀑布流</span></span><br><span class="line"><span class="comment">-- 分页，每页只显示五条数据</span></span><br><span class="line"><span class="comment">-- 语法 ： limit 起始值，页面的大小</span></span><br><span class="line"><span class="comment">-- 网页应用：当前，总的页数，每页大小</span></span><br><span class="line"><span class="comment">-- LIMIT 0,5    1~5</span></span><br><span class="line"><span class="comment">-- LIMIT 1,5    2~6</span></span><br><span class="line"><span class="comment">-- LIMIT 6,5</span></span><br><span class="line"><span class="keyword">SELECT</span> stu.`student_no`,stu.`student_name`,sub.`subject_name`,res.`student_result`</span><br><span class="line"><span class="keyword">FROM</span> student stu</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` res</span><br><span class="line"><span class="keyword">ON</span> stu.`student_no` <span class="operator">=</span> res.`student_no`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> res.`subject_no`<span class="operator">=</span>sub.`subject_no`</span><br><span class="line"><span class="keyword">WHERE</span> sub.`subject_name`<span class="operator">=</span><span class="string">&#x27;数据结构-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `student_result` <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">1</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 第一页 limit 0,5    (1-1)*5</span></span><br><span class="line"><span class="comment">-- 第二页 limit 5,5    (2-1)*5</span></span><br><span class="line"><span class="comment">-- 第三页 limit 10,5   (3-1)*5</span></span><br><span class="line"><span class="comment">-- 第N页 limit 10,5    (n-1)*pageSize,pageSize</span></span><br><span class="line"><span class="comment">-- pageSize,页面大小</span></span><br><span class="line"><span class="comment">-- (n-1)*pageSize，起始值</span></span><br><span class="line"><span class="comment">-- n，当前页</span></span><br><span class="line"><span class="comment">-- 总页数 = (数据总数%页面大小==0)? (数据总数/页面大小) : (数据总数/页面大小 + 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询科目高等数学-2，课程成绩排名前十的学生，并且分数要大于60的学生信息（学号，姓名，课程名称，分数）</span></span><br><span class="line"><span class="keyword">SELECT</span> stu.`student_no`,stu.`student_name`,sub.`subject_name`,res.`student_result`</span><br><span class="line"><span class="keyword">FROM</span> student stu</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> stu.`grade_id`<span class="operator">=</span>sub.`grade_id`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` res</span><br><span class="line"><span class="keyword">ON</span> sub.`subject_no`<span class="operator">=</span>res.`subject_no`</span><br><span class="line"><span class="keyword">WHERE</span> sub.`subject_name`<span class="operator">=</span><span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> res.`student_result`<span class="operator">&gt;</span><span class="number">60</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> res.`student_result`</span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>语法： <code>limit (查询起始下标,页面大小)</code></p>
<h1 id="23、子查询和嵌套查询"><a href="#23、子查询和嵌套查询" class="headerlink" title="23、子查询和嵌套查询"></a>23、子查询和嵌套查询</h1><p>where（这个值是计算出来的）</p>
<p>本质：<code>在where语句中嵌套一个子查询语句</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 1.查询数据库结构-1的所有考试结果（学号，科目名，成绩），降序排列</span></span><br><span class="line"><span class="comment">-- 方式1：使用连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> res.`student_no`,res.`subject_no`,res.`student_result`</span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">result</span>` res</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> res.`subject_no`<span class="operator">=</span>sub.`subject_no`</span><br><span class="line"><span class="keyword">WHERE</span> sub.`subject_name`<span class="operator">=</span><span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> res.`student_result` <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用子查询(由里及外)</span></span><br><span class="line"><span class="keyword">SELECT</span> res.`student_no`,res.`subject_no`,res.`student_result`</span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">result</span>` res</span><br><span class="line"><span class="keyword">WHERE</span> res.`subject_no` <span class="operator">=</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> sub.`subject_no`</span><br><span class="line">  <span class="keyword">FROM</span> `subject` sub</span><br><span class="line">  <span class="keyword">WHERE</span> sub.`subject_name`<span class="operator">=</span><span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> res.`student_result` <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分数不小于80分的学生的学号和姓名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> stu.`student_no`,stu.`student_name`</span><br><span class="line"><span class="keyword">FROM</span> student stu</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> res</span><br><span class="line"><span class="keyword">ON</span> stu.`student_no`<span class="operator">=</span>res.`student_no`</span><br><span class="line"><span class="keyword">WHERE</span> res.`student_result` <span class="operator">&gt;</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在这个基础上增加一个科目，查询课程为高等数学-2，且分数不小于80分的学生的学号和姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> stu.`student_no`,stu.`student_name`</span><br><span class="line"><span class="keyword">FROM</span> student stu</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> res</span><br><span class="line"><span class="keyword">ON</span> stu.`student_no`<span class="operator">=</span>res.`student_no`</span><br><span class="line"><span class="keyword">WHERE</span> res.`student_result` <span class="operator">&gt;</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">AND</span> res.`subject_no`<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">SELECT</span> sub.`subject_no` <span class="keyword">FROM</span> `subject` sub</span><br><span class="line"><span class="keyword">WHERE</span> sub.`subject_name`<span class="operator">=</span><span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> stu.`student_no`,stu.`student_name`</span><br><span class="line"><span class="keyword">FROM</span> student stu</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> res</span><br><span class="line"><span class="keyword">ON</span> stu.`student_no`<span class="operator">=</span>res.`student_no`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> res.`subject_no`<span class="operator">=</span>sub.`subject_no`</span><br><span class="line"><span class="keyword">WHERE</span> sub.`subject_name`<span class="operator">=</span><span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> res.`student_result` <span class="operator">&gt;</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--  再次改造（由里及外）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `student_no`,`student_name` <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> student_no <span class="keyword">IN</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> student_no <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="keyword">WHERE</span> `student_result` <span class="operator">&gt;</span> <span class="number">80</span> <span class="keyword">AND</span> subject_no <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> subject_no <span class="keyword">FROM</span> `subject` <span class="keyword">WHERE</span> `subject_name`<span class="operator">=</span><span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h1 id="24、MySQL常用函数"><a href="#24、MySQL常用函数" class="headerlink" title="24、MySQL常用函数"></a>24、MySQL常用函数</h1><p>官网：<a href="https://dev.mysql.com/doc/refman/5.7/en/">参考手册</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-8</span>); <span class="comment">-- 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">9.4</span>) ;<span class="comment">-- 向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">9.4</span>);<span class="comment">-- 向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> RAND(); <span class="comment">-- 返回一个0~1之间的随机数</span></span><br><span class="line"><span class="keyword">SELECT</span> SIGN(<span class="number">-10</span>); <span class="comment">-- 判断一个数的符号，0 返回0 负数返回-1 正数返回1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;哈哈&#x27;</span>); <span class="comment">-- 字符串长度</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;爱&#x27;</span>,<span class="string">&#x27;你&#x27;</span>); <span class="comment">-- 拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;我爱编程helloworld&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;超级热爱&#x27;</span>); <span class="comment">-- 插入，替换</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;ZYY&#x27;</span>); <span class="comment">-- 小写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;zyy&#x27;</span>); <span class="comment">-- 大写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;zyy&#x27;</span>,<span class="string">&#x27;y&#x27;</span>); <span class="comment">-- 返回第一次出现的子串的索引</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;坚持就能成功&#x27;</span>,<span class="string">&#x27;坚持&#x27;</span>,<span class="string">&#x27;努力&#x27;</span>); <span class="comment">-- 替换出现的指定字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;坚持就能成功&#x27;</span>, <span class="number">5</span>, <span class="number">2</span>); <span class="comment">-- 返回指定的子字符串（源字符串，截取的位置，截取的长度）</span></span><br><span class="line"><span class="keyword">SELECT</span> REVERSE(<span class="string">&#x27;清晨我上马&#x27;</span>); <span class="comment">-- 反转</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间和日期函数（记住！）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>(); <span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE(); <span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW(); <span class="comment">-- 获取当前的时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIME</span>(); <span class="comment">-- 获取本地时间</span></span><br><span class="line"><span class="keyword">SELECT</span> SYSDATE(); <span class="comment">-- 获取系统时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW()); <span class="comment">-- 年</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(NOW()); <span class="comment">-- 月</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(NOW()); <span class="comment">-- 日</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(NOW()); <span class="comment">-- 时</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(NOW()); <span class="comment">-- 分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(NOW()); <span class="comment">-- 秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 系统</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SYSTEM_USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> VERSION();</span><br></pre></td></tr></table></figure>





<h1 id="25、聚合函数及分组过滤"><a href="#25、聚合函数及分组过滤" class="headerlink" title="25、聚合函数及分组过滤"></a>25、聚合函数及分组过滤</h1><table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>count()</td>
<td>计数</td>
</tr>
<tr>
<td>sum()</td>
<td>求和</td>
</tr>
<tr>
<td>avg()</td>
<td>平均值</td>
</tr>
<tr>
<td>max()</td>
<td>最大值</td>
</tr>
<tr>
<td>min()</td>
<td>最小值</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 聚合函数</span></span><br><span class="line"><span class="comment">-- 都能统计 表中数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- count(字段) 会忽略所有的null值(想查询一个表中有多少个记录，就使用这个count())</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(student_name) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- COUNT(*) 不会忽略所有的null值 本质计算行数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- COUNT(1) 不会忽略所有的null值 本质计算行数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(student_result) <span class="keyword">AS</span> <span class="string">&#x27;总和&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(student_result) <span class="keyword">AS</span> <span class="string">&#x27;平均分&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(student_result) <span class="keyword">AS</span> <span class="string">&#x27;最高分&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(student_result) <span class="keyword">AS</span> <span class="string">&#x27;最低分&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询不同课程的平均分，最高分，最低分</span></span><br><span class="line"><span class="keyword">SELECT</span> sub.subject_name <span class="keyword">AS</span> <span class="string">&#x27;课程&#x27;</span>,</span><br><span class="line"><span class="built_in">AVG</span>(res.student_result) <span class="keyword">AS</span> <span class="string">&#x27;平均分&#x27;</span>,</span><br><span class="line"><span class="built_in">MAX</span>(res.student_result) <span class="keyword">AS</span> <span class="string">&#x27;最高分&#x27;</span>,</span><br><span class="line"><span class="built_in">MIN</span>(res.student_result) <span class="keyword">AS</span> <span class="string">&#x27;最低分&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> res</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> res.`subject_no`<span class="operator">=</span>sub.`subject_no`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> res.`subject_no`</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(res.student_result) <span class="operator">&gt;</span><span class="number">80</span>;</span><br></pre></td></tr></table></figure>



<h1 id="26、拓展之数据库级别的md5加密"><a href="#26、拓展之数据库级别的md5加密" class="headerlink" title="26、拓展之数据库级别的md5加密"></a>26、拓展之数据库级别的md5加密</h1><p>什么是MD5?</p>
<p>主要增加算法复杂度和不可逆性。</p>
<p>MD5不可逆，具体的值的md5是一样的</p>
<p>MD5破解网站的原理，背后有一个字典，MD5加密后的值，加密前的值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `testmd5`(</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `pwd` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 明文密码</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `testmd5`(`id`,`name`,`pwd`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `testmd5`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 加密</span></span><br><span class="line">UPDATE testmd5 <span class="keyword">SET</span> pwd<span class="operator">=</span>MD5(pwd) <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入的时候加密</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `testmd5`(`id`,`name`,`pwd`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;小明&#x27;</span>,MD5(<span class="string">&#x27;123456&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何校验，将用户传递进来的密码，进行MD5加密，然后比对加密后的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `testmd5` <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;小明&#x27;</span> <span class="keyword">AND</span> pwd <span class="operator">=</span> MD5(<span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h1 id="27、总结"><a href="#27、总结" class="headerlink" title="27、总结"></a>27、总结</h1><p>去看另外一个word文档,上面分类介绍</p>
<p><img src="C:\Users\86940\AppData\Roaming\Typora\typora-user-images\image-20211109141500749.png" alt="image-20211109141500749"></p>
<h1 id="28、事务ACID原则、脏读、不可重复读、幻读"><a href="#28、事务ACID原则、脏读、不可重复读、幻读" class="headerlink" title="28、事务ACID原则、脏读、不可重复读、幻读"></a>28、事务ACID原则、脏读、不可重复读、幻读</h1><h2 id="1-什么是事务"><a href="#1-什么是事务" class="headerlink" title="1.什么是事务"></a>1.什么是事务</h2><p>==要么都成功，要么都失败==</p>
<p>将一组sql放到一个批次中取执行</p>
<blockquote>
<p>事务原则：ACID原则 原子性 、一致性、隔离性、持久性     （脏读，幻读。。。）</p>
</blockquote>
<p>参考博客链接：<a href="https://blog.csdn.net/dengjili/article/details/82468576">事务ACID理解</a></p>
<p><strong>原子性（Atomicity）</strong></p>
<p>要么都成功，要么都失败</p>
<p><strong>一致性（Consistency）</strong></p>
<p>事务前后的数据完整性要保持一致</p>
<p>下图操作前和操作后的总和都是1000</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/20180906211811672" alt="这里写图片描述"></p>
<p><strong>隔离性（Isolation）</strong></p>
<p>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</p>
<p><strong>持久性（Durability）</strong></p>
<p>事务一旦移交不可逆，被持久化到数据库中</p>
<blockquote>
<p>隔离所导致的一些问题</p>
</blockquote>
<h3 id="脏读："><a href="#脏读：" class="headerlink" title="脏读："></a>脏读：</h3><p>1、在事务A执行过程中，事务A对数据资源进行了修改，事务B读取了事务A修改后的数据。</p>
<p>2、由于某些原因，事务A并没有完成提交，发生了RollBack操作，则事务B读取的数据就是脏数据。</p>
<p>这种<strong>读取到另一个事务未提交的数据的现象就是脏读(Dirty Read)。</strong></p>
<p><img src="https://pic1.zhimg.com/80/v2-a1664b7cde8c890093f4198afead9bff_720w.jpg?source=1940ef5c" alt="img"></p>
<h3 id="不可重复读："><a href="#不可重复读：" class="headerlink" title="不可重复读："></a>不可重复读：</h3><p>事务B读取了两次数据资源，在这两次读取的过程中事务A修改了数据，导致事务B在这两次读取出来的数据不一致。</p>
<p>这种**==在同一个事务中==，前后两次读取的数据不一致的现象就是不可重复读(Nonrepeatable Read)。**</p>
<p><img src="https://pic1.zhimg.com/50/v2-dbdf320962deee0f4e39e11ade7983d3_720w.jpg?source=1940ef5c" alt="img"></p>
<h3 id="虚读-幻读"><a href="#虚读-幻读" class="headerlink" title="虚读(幻读)"></a>虚读(幻读)</h3><p>事务B前后两次读取同一个范围的数据，在事务B两次读取的过程中事务A新增了数据，导致事务B后一次读取到前一次查询没有看到的行。</p>
<p>幻读和不可重复读有些类似，但是<strong>幻读强调的是集合的增减，而不是单条数据的更新。</strong></p>
<p><img src="https://pic2.zhimg.com/80/v2-554873c313a8f6ae06b1a536bb289265_720w.jpg?source=1940ef5c" alt="img"></p>
<h3 id="第一类更新丢失"><a href="#第一类更新丢失" class="headerlink" title="第一类更新丢失"></a>第一类更新丢失</h3><p>事务A和事务B都对数据进行更新，但是事务A由于某种原因事务回滚了，把已经提交的事务B的更新数据给覆盖了。这种现象就是第一类更新丢失。</p>
<p><img src="https://pic1.zhimg.com/80/v2-df373501c48e4bba633c859944394e53_720w.jpg?source=1940ef5c" alt="img"></p>
<h3 id="第二类更新丢失"><a href="#第二类更新丢失" class="headerlink" title="第二类更新丢失"></a>第二类更新丢失</h3><p>其实跟第一类更新丢失有点类似，也是两个事务同时对数据进行更新，但是事务A的更新把已提交的事务B的更新数据给覆盖了。这种现象就是第二类更新丢失。</p>
<p><img src="https://pic2.zhimg.com/80/v2-b865701afea8e74b2370187c4837da49_720w.jpg?source=1940ef5c" alt="img"></p>
<h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p>为了解决以上的问题，主流的关系型数据库都会提供四种事务的隔离级别。事务隔离级别从低到高分别是：读未提交，读已提交，可重复读，串行化。事务隔离级别越高，越能保证数据的一致性和完整性，但是执行效率也越低，所以在设置数据库的事务隔离级别时需要做一下权衡，mysql默认是可重复读</p>
<h4 id="读未提交"><a href="#读未提交" class="headerlink" title="读未提交"></a>读未提交</h4><p>读未提交(Read Uncommitted)，是最低的隔离级别，<strong>所有的事务都可以看到其他未提交的事务的执行结果。</strong>只能防止第一类更新丢失，不能解决脏读，可重复读，幻读，所以很少应用于实际项目。</p>
<h4 id="读已提交"><a href="#读已提交" class="headerlink" title="读已提交"></a>读已提交</h4><p>读已提交(Read Committed)，在该隔离级别下，<strong>一个事务的更新操作只有在该事务提交之后，另外一个事务才可能读取到同一笔数据更新后的结果。</strong>可以防止脏读和第一类更新丢失，但是不能解决可重复和幻读的问题。</p>
<h4 id="可重复读（重要）"><a href="#可重复读（重要）" class="headerlink" title="可重复读（重要）"></a>可重复读（重要）</h4><p>可重复读(Repeatable Read)，mysql默认的隔离级别。在该隔离级别下，<strong>一个事务多次读同一个数据，在这个事务还没有结束时，其他事务不能访问该数据（包括了读写）</strong>，这样就可以在同一个事务内两次读到的数据是一样的。可以防止脏读、不可重复读、第一类更新丢失，第二类更新丢失的问题，不过还是会出现幻读。</p>
<h4 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h4><p>串行化(Serializable)，这是最高的隔离级别。它要求事务序列化执行，事务只能一个接着一个的执行，不能并发执行。在这个级别，可以解决上面提到的所有并发问题，但是可能导致大量的超时现象和锁竞争，通常不会用这个隔离级别。</p>
<p><img src="https://pica.zhimg.com/80/v2-25ed812ff748a38bd3e4127db1ed7a48_720w.jpg?source=1940ef5c" alt="img"></p>
<h2 id="扩展：回滚机制"><a href="#扩展：回滚机制" class="headerlink" title="扩展：回滚机制"></a>扩展：回滚机制</h2><p>在mysql中，恢复机制是通过回滚日志（undo log）实现的，所有的事务进行的修改都会先记录到这个回滚日志中，然后在堆数据库中的对应进行写入。</p>
<p>mysql的事务是由redo和undo的，redo操作的所有信息都是记录到重做日志（redo_log）中，也就是说当一个事务做commit操作时，需要先把这个事务的操作写到redo_log中，然后在把这些操作flush到磁盘上，当出现故障时，只需要读取redo_log，然后在重新flush到磁盘就行了。</p>
<p>而对于undo就比较麻烦，mysql在处理事务时，会在数据共享表空间里申请一个段就做segment段，用保存undo信息，当在处理rollback，不是完完全全的物理undo，而是逻辑undo，也就是说会之前的操作进行反操作（对于每个insert，回滚时会执行delete；对于每个delete，回滚时会执行insert；对于每个update，回滚时会执行一个相反的update，把数据改回去。），但是这些共享表空间是不进行回收的。这些表空间的回收需要由mysql的master thread进程进行回收。</p>
<h1 id="29、测试事务实现转账"><a href="#29、测试事务实现转账" class="headerlink" title="29、测试事务实现转账"></a>29、测试事务实现转账</h1><blockquote>
<p>执行事务</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 事务</span></span><br><span class="line"><span class="comment">-- mysql 是默认开启事务自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关闭</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line"><span class="comment">-- 开启（默认的）</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动处理事务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">-- 关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;  <span class="comment">-- 标记一个事务的开始，从这个之后的sql都在同一个事务内</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> XX</span><br><span class="line"><span class="keyword">INSERT</span> XX</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交 ： 持久化</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 回滚 ： 回到的原来的样子（失败）</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="comment">-- 事务结束</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 开启自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 了解</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">-- 设置一个事务的保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">-- 回滚到保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">-- 撤销保存点</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>模拟场景</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 转账</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE shop <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用shop数据库</span></span><br><span class="line"><span class="keyword">USER</span> `shop`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account`(</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `money` <span class="type">DECIMAL</span>(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 初始化数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(`name`,`money`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;A&#x27;</span>,<span class="number">2000.00</span>),</span><br><span class="line">(<span class="string">&#x27;B&#x27;</span>,<span class="number">10000.00</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模拟转账</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>; <span class="comment">-- 关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">START</span> TRANSACTION; <span class="comment">-- 开启事务 （一组事务）</span></span><br><span class="line"></span><br><span class="line">UPDATE account <span class="keyword">SET</span> `money`<span class="operator">=</span>`money`<span class="number">-500</span> <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;A&#x27;</span>; <span class="comment">-- A减500</span></span><br><span class="line">UPDATE account <span class="keyword">SET</span> `money`<span class="operator">=</span>`money`<span class="operator">+</span><span class="number">500</span> <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;B&#x27;</span>; <span class="comment">-- B加500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>; <span class="comment">-- 提交事务，就会被持久化了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span>; <span class="comment">-- 回滚</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 恢复自动提交</span></span><br></pre></td></tr></table></figure>



<h1 id="30、索引介绍及索引的分类"><a href="#30、索引介绍及索引的分类" class="headerlink" title="30、索引介绍及索引的分类"></a>30、索引介绍及索引的分类</h1><blockquote>
<p>Msql官方对索引的定义为：<strong>索引（index）是帮助MySQL高效获取数据的数据结构</strong>。</p>
<p>提取句子主干，就可以得到索引的本质：索引是数据结构。</p>
</blockquote>
<h2 id="1-索引的分类"><a href="#1-索引的分类" class="headerlink" title="1.索引的分类"></a>1.索引的分类</h2><blockquote>
<p>在一个表中，主键索引只能有一个，唯一索引可以有多个</p>
</blockquote>
<ul>
<li>主键索引（primary key）<ul>
<li>唯一的标识，主键不可重复，只能有一个列作为主键</li>
</ul>
</li>
<li>唯一索引 （unique key）<ul>
<li>避免重复的列出现，可以重复，多个列都可以标示为唯一索引</li>
</ul>
</li>
<li>常规索引（key/index）<ul>
<li>默认的 index 或者key关键字来设置</li>
</ul>
</li>
<li>全文索引（FullText）<ul>
<li>在特定的数据库引擎下才有，myisam</li>
<li>快速定位数据</li>
</ul>
</li>
</ul>
<p>基础语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 索引的使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1.在创建表的时候给字段增加索引</span></span><br><span class="line"><span class="comment">-- 2.创建完毕后，增加索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示所有的索引信息</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 新增一个索引 (索引名) 列名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> KEY `UK_IDENTITY_CARD` (`identity_card`);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> KEY `K_STUDENT_NAME`(`student_name`);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student`  <span class="keyword">ADD</span> FULLTEXT INDEX `FI_PHONE` (`phone`);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- explain 分析sql执行的状况</span></span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student; <span class="comment">-- 非全文索引</span></span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(`phone`) AGAINST(<span class="string">&#x27;138&#x27;</span>); <span class="comment">-- 全文索引</span></span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/jiadajing267/article/details/81269067">【MySQL优化】——看懂explain_漫漫长途，终有回转；余味苦涩，终有回甘-CSDN博客_explain</a></p>
<h1 id="31、SQL编程创建100万条数据测试索引"><a href="#31、SQL编程创建100万条数据测试索引" class="headerlink" title="31、SQL编程创建100万条数据测试索引"></a>31、SQL编程创建100万条数据测试索引</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> app_user (</span><br><span class="line">  `id` <span class="type">BIGINT</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">50</span>)  <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;用户昵称&#x27;</span>,</span><br><span class="line">  `email` <span class="type">VARCHAR</span>(<span class="number">50</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户邮箱&#x27;</span>,</span><br><span class="line">  `phone` <span class="type">VARCHAR</span>(<span class="number">20</span>)  <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">  `gender` TINYINT(<span class="number">4</span>)  UNSIGNED <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;性别（0：男  1：女）&#x27;</span>,</span><br><span class="line">  `password` <span class="type">VARCHAR</span>(<span class="number">100</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `age` TINYINT(<span class="number">4</span>)  <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `create_time` DATETIME  <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">TIMESTAMP</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;app用户表&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入100万数据b (函数)</span></span><br><span class="line"></span><br><span class="line">DELIMITER $$ <span class="comment">-- 写函数之前必须要写，标志</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000000</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">  WHILE i<span class="operator">&lt;</span>num DO</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> app_user(`name`,`email`,`phone`,`gender`,`password`,`age`)</span><br><span class="line">    <span class="keyword">VALUES</span>(CONCAT(<span class="string">&#x27;用户&#x27;</span>,i),<span class="string">&#x27;123345@qq.com&#x27;</span>,CONCAT(<span class="string">&#x27;18&#x27;</span>,<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span>((<span class="number">999999999</span><span class="number">-100000000</span>)<span class="operator">+</span><span class="number">100000000</span>))),<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">2</span>),UUID(),<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">100</span>));</span><br><span class="line">    <span class="keyword">SET</span> i <span class="operator">=</span> i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">  <span class="keyword">END</span> WHILE;</span><br><span class="line">  <span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行函数</span></span><br><span class="line"><span class="keyword">SELECT</span> mock_data();</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数中间的插入脚本</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> app_user(`name`,</span><br><span class="line">`email`,</span><br><span class="line">`phone`,</span><br><span class="line">`gender`,</span><br><span class="line">`password`,</span><br><span class="line">`age`)</span><br><span class="line"><span class="keyword">VALUES</span>(CONCAT(<span class="string">&#x27;用户X&#x27;</span>),</span><br><span class="line"><span class="string">&#x27;123345@qq.com&#x27;</span>,</span><br><span class="line">CONCAT(<span class="string">&#x27;18&#x27;</span>,<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span>((<span class="number">999999999</span><span class="number">-100000000</span>)<span class="operator">+</span><span class="number">100000000</span>))),</span><br><span class="line"><span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">2</span>),</span><br><span class="line">UUID(),</span><br><span class="line"><span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">100</span>));</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 加索引前</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>; <span class="comment">-- 0.440 sec</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建索引</span></span><br><span class="line"><span class="comment">-- id_表名_字段名  索引名</span></span><br><span class="line"><span class="comment">-- CREATE INDEX 索引名 ON 表名(`字段名`);</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX id_app_user_name <span class="keyword">ON</span> app_user(`name`);</span><br><span class="line"> <span class="comment">-- 加索引后</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>; <span class="comment">-- 0.002 sec</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>加索引前</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704114603590.png" alt="image-20210704114603590"></p>
<p>加索引后</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704114402938.png" alt="image-20210704114402938"></p>
<p><strong>索引在小数据量的时候，用处不大，但是再大数据的时候，区分十分明显</strong></p>
<h1 id="32、索引原则"><a href="#32、索引原则" class="headerlink" title="32、索引原则"></a>32、索引原则</h1><ul>
<li>索引不是越多越好</li>
<li>不要对经常变动的数据加索引</li>
<li>小数据量的表不需要加索引</li>
<li>索引一般加载常用来查询的字段上</li>
</ul>
<blockquote>
<p>索引的数据结构</p>
</blockquote>
<p>Hash类型的索引</p>
<p>bree ：innodb的默认数据结构</p>
<p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">CodingLabs - MySQL索引背后的数据结构及算法原理</a></p>
<h1 id="33、数据库用户管理"><a href="#33、数据库用户管理" class="headerlink" title="33、数据库用户管理"></a>33、数据库用户管理</h1><blockquote>
<p>sql yog 可视化管理</p>
</blockquote>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704145840971.png" alt="image-20210704145840971"></p>
<blockquote>
<p>sql 命令操作</p>
</blockquote>
<p>用户表：mysql.user</p>
<p>本质:读这张表进行增删改查</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> zyy IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码(修改当前用户密码)</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码(修改指定用户密码)</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> zyy <span class="operator">=</span> PASSWORD(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重命名  RENAME 原名子 zyy TO 新名字;</span></span><br><span class="line">RENAME <span class="keyword">USER</span> zyy <span class="keyword">TO</span> newzyy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户授权  ALL PRIVILEGES 全部的权限，库，表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALL PRIVILEGES 除了给别人授权不行，其他都能干</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> newzyy;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> newzyy; <span class="comment">-- 查看指定用户的权限</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> root<span class="variable">@localhost</span>; <span class="comment">-- 查看root用户的权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销权限   REVOKE哪些权限，在哪个库，给谁撤销</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">FROM</span> newzyy;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> newzyy;</span><br></pre></td></tr></table></figure>

<h1 id="34、MySQL备份"><a href="#34、MySQL备份" class="headerlink" title="34、MySQL备份"></a>34、MySQL备份</h1><p>为什么要备份？</p>
<ul>
<li>保证重要的数据不丢失</li>
<li>数据转移</li>
</ul>
<p>mysql数据库备份的方式</p>
<ul>
<li><p>直接拷贝物理文件</p>
</li>
<li><p>在sqlyog这种可视化工具中手动导出</p>
<ul>
<li><p>在想要导出的表或者库中，右键，</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704155338509.png" alt="image-20210704155338509"></p>
</li>
</ul>
</li>
<li><p>使用命令行导出 mysqldump 命令行使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一张表 mysqldump -h主机 -u用户名 -p密码 数据库 表名 &gt;物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -p123456 school student &gt;D:/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多张表 mysqldump -h主机 -u用户名 -p密码 数据库 表名1 表名2 &gt;物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -p123456 school student result &gt;D:/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库 mysqldump -h主机 -u用户名 -p密码 数据库 &gt;物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -p123456 school &gt;D:/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入</span></span><br><span class="line"><span class="comment"># 登录的情况下，切换到指定的数据库</span></span><br><span class="line"><span class="comment"># source 备份文件</span></span><br><span class="line"><span class="comment"># 也可以这样</span></span><br><span class="line">mysql -u用户名 -p密码 库名&lt;备份文件</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704161230594.png" alt="image-20210704161230594"></p>
</li>
</ul>
<p>假设你要备份数据库，防止数据丢失。</p>
<p>把数据库给别人，直接给sql即可。</p>
<h1 id="35、如何设计一个项目的数据库"><a href="#35、如何设计一个项目的数据库" class="headerlink" title="35、如何设计一个项目的数据库"></a>35、如何设计一个项目的数据库</h1><h2 id="1-为什么需要设计"><a href="#1-为什么需要设计" class="headerlink" title="1.为什么需要设计"></a>1.为什么需要设计</h2><p>==当数据库比较复杂的时候，我们就需要设计了==</p>
<p><strong>糟糕的数据库设计</strong></p>
<ul>
<li>数据冗余，浪费空间</li>
<li>数据库插入和删除都会麻烦、异常（屏蔽使用物理外键）</li>
<li>程序的性能差</li>
<li>看不懂数据库里面的内容是干嘛的(不遵循命名规则)</li>
</ul>
<p><strong>良好的数据库设计</strong></p>
<ul>
<li>节省内存空间</li>
<li>保证数据库的完整性</li>
<li>方便我们开发系统</li>
<li>见名知意,方便数据库整理</li>
</ul>
<p><strong>软件开发中，关于数据库的设计</strong></p>
<ul>
<li>分析需求，分析业务和需要处理的数据库的需求</li>
<li>概要设计：设计关系图E-R图</li>
</ul>
<p><strong>设计数据库的步骤（个人博客）</strong></p>
<ul>
<li><p>收集信息，分析需求</p>
<ul>
<li><p>用户表（用户登录注销，用户的个人信息，写博客，创建分类）</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704162821445.png" alt="image-20210704162821445"></p>
</li>
<li><p>分类表（文章分类，谁创建的）</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704163120753.png" alt="image-20210704163120753"></p>
</li>
<li><p>文章表（文章信息）</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704164131400.png" alt="image-20210704164131400"></p>
</li>
<li><p>评论表</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704164555263.png" alt="image-20210704164555263"></p>
</li>
<li><p>友链表（友情链接信息）</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704164938625.png" alt="image-20210704164938625"></p>
</li>
<li><p>自定义表（系统信息，某个关键的字，或者一些主字段） <code>key:value</code></p>
</li>
<li><p>关注表(粉丝数)</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704165556127.png" alt="image-20210704165556127"></p>
</li>
<li><p>说说表（发表心情， id…content…create_time）</p>
</li>
</ul>
</li>
<li><p>标识实体（把需求落到每个字段）</p>
</li>
<li><p>标识实体之间的关系</p>
<ul>
<li>写博客：user –&gt; blog</li>
<li>创建分类：user –&gt; category</li>
<li>关注：user –&gt; user</li>
<li>友链：links</li>
<li>评论：user –&gt; user –&gt; blog</li>
</ul>
</li>
</ul>
<p>(bbs / crm)</p>
<h1 id="36、数据库三大范式（了解）"><a href="#36、数据库三大范式（了解）" class="headerlink" title="36、数据库三大范式（了解）"></a>36、数据库三大范式（了解）</h1><p><strong>为什么需要数据规范化？</strong></p>
<ul>
<li>信息重复</li>
<li>更新异常</li>
<li>插入异常<ul>
<li>无法正常显示信息</li>
</ul>
</li>
<li>删除异常<ul>
<li>丢失有效的信息</li>
</ul>
</li>
</ul>
<blockquote>
<p>三大范式</p>
</blockquote>
<p><strong>第一范式（1NF）</strong></p>
<p>原子性：保证每一列不可再分</p>
<p><strong>第二范式（2NF）</strong></p>
<p>前提：满足第一范式</p>
<p>第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。</p>
<p>每张表只描述一件事情</p>
<p><strong>第三范式（3NF）</strong></p>
<p>前提：满足第一范式和第二范式</p>
<p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p>
<p>规范数据库的设计</p>
<p><strong>规范性和性能的问题</strong></p>
<p>关联查询的表不得超过三张表</p>
<ul>
<li>考虑商业化的需求和目标（成本，用户体验）数据库的性能更加重要</li>
<li>在规范性能的问题的时候，需要适当的考虑一下规范性</li>
<li>故意给某些表增加一些冗余的字段。（从多表查询中变为单表查询）</li>
<li>故意增加一些计算列（从大数据库降低为小数据量的查询：索引）</li>
</ul>
<h1 id="37、数据库驱动和JDBC"><a href="#37、数据库驱动和JDBC" class="headerlink" title="37、数据库驱动和JDBC"></a>37、数据库驱动和JDBC</h1><h2 id="1-数据库驱动"><a href="#1-数据库驱动" class="headerlink" title="1.数据库驱动"></a>1.数据库驱动</h2><p>驱动：声卡，显卡，数据库</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210713212553844.png" alt="image-20210713212553844"></p>
<p>数据库驱动程序由<strong>数据库厂商</strong>或者<strong>其他一些专门开发数据库驱动程序的厂商</strong>提供,它们用来提供给<strong>外部应用程序</strong>一个访问这个数据库的接口</p>
<h2 id="2-JDBC"><a href="#2-JDBC" class="headerlink" title="2.JDBC"></a>2.JDBC</h2><p>JDBC(Java Database Connectivity， Java 数 据 库 连 接)是 一 种可用于执行 SQL 语句的 Java API(Application Programming Interface， 应用程序设计接口)。它由一些 Java 语言编写的类和接口组成。JDBC 为数据库应用开发人员、数据库前台开发人员提供了一种标准的应用程序设计接口， 使开发人员可以用纯 Java 语言编写完整的数据库应用程序。</p>
<p>JDBC 通过调用其接口提供的方法， 提供了 Java 应用程序与各种数据库服务器之间的连接服务</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210713213250382.png" alt="image-20210713213250382"></p>
<p><strong>java.sql:是jdbc2.0之前的东西</strong></p>
<p>包含的接口和类采用传统的C/S体系结构设计思想.主要功能针对基本数据库编程服务,如生成连接,执行语句以及准备语句和运行批处理语句.也有一些高级功能如批处理更新,可滚动结果集,事务隔离以及SQL数据类型</p>
<p><strong>javax.sql:包含jdbc3.0的新特性</strong></p>
<p>引入了JDBC编程方面一些主要的体系结构改变,并且为连接管理,分布式事务处理和老式连接提供了更好的抽象.这个包也引入了容器管理的连接缓冲池,分布式事务以及行集(rowset)</p>
<p><em><strong>*javax.sql.*提供了很多新特性,是对java.sql的补充,具体提供了一下方面的功能<br> (1)Datasource接口提供了一种可选择性的方式去建立连接<br> (2)提供了连接池的支持<br> (3)增加了分布式的事务处理机制<br> (4)增加了rowset*</strong></em></p>
<p><em><strong>*(注意javax.sql.*并不是包含java.sql.*，它俩一起组成了访问数据的类)*</strong></em></p>
<p>还需要导入一个数据库驱动包 例如: mysql-connector-java-5.1.47.jar</p>
<h1 id="38、第一个JDBC程序"><a href="#38、第一个JDBC程序" class="headerlink" title="38、第一个JDBC程序"></a>38、第一个JDBC程序</h1><blockquote>
<p>创建测试数据库</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE jdbcstudy <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> jdbcstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users(</span><br><span class="line">  `id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">  `password` <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">  `email` <span class="type">VARCHAR</span>(<span class="number">60</span>),</span><br><span class="line">  `birthday` <span class="type">DATE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(`id`,`name`,`password`,`email`,`birthday`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;小胖&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;xp@qq.com&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;小屠&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;xt@qq.com&#x27;</span>,<span class="string">&#x27;2000-02-02&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;小徐&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;xx@qq.com&#x27;</span>,<span class="string">&#x27;2000-03-03&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li><p>创建一个普通项目</p>
</li>
<li><p>导入数据库驱动（jar包）</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210713215804024.png" alt="image-20210713215804024"></p>
</li>
<li><p>编写测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCStudy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line"><span class="comment">//        DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span></span><br><span class="line">        <span class="comment">//推荐这种写法加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.用户信息和URL</span></span><br><span class="line">        <span class="comment">// useSSL=true可能会报错</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false&quot;</span>;</span><br><span class="line">        String userName = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String passWord = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="comment">//3.连接成功，数据库对象 Connection代表数据库</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, userName, passWord);</span><br><span class="line">        <span class="comment">//4.执行SQl的对象 Statement 执行的sql对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        <span class="comment">//5.执行SQL的对象 去 执行SQL ，可能存在结果，查看返回的结果</span></span><br><span class="line">        String sql = <span class="string">&quot;SELECT * FROM users&quot;</span>;</span><br><span class="line">        <span class="comment">//返回的结果集 结果集中封装了我们全部的查询的结果</span></span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line">        <span class="comment">//System.out.println(resultSet);</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id=&quot;</span>+resultSet.getString(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span>+resultSet.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;password=&quot;</span>+resultSet.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;email=&quot;</span>+resultSet.getString(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;birthday=&quot;</span>+resultSet.getString(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*while (resultSet.next()) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;id=&quot;+resultSet.getObject(&quot;id&quot;));</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;name=&quot;+resultSet.getObject(&quot;name&quot;));</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;password=&quot;+resultSet.getObject(&quot;password&quot;));</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;email=&quot;+resultSet.getObject(&quot;email&quot;));</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;birthday=&quot;+resultSet.getObject(&quot;birthday&quot;));</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;===============================&quot;);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改操作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Connection connection = DriverManager.getConnection(url, userName, passWord);</span></span><br><span class="line">        <span class="comment">//Statement statement = connection.createStatement();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//String sql1 = &quot;insert into users(插入的表字段给我对应好,不然出错了不要问我为什么) values(写你想插入的内容呗)&quot;;</span></span><br><span class="line">        String sql1 = <span class="string">&quot;INSERT INTO users(`id`,`name`,`password`,`email`,`birthday`)\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;VALUES (4,&#x27;小虎&#x27;,&#x27;123456&#x27;,&#x27;xh@qq.com&#x27;,&#x27;2000-04-04&#x27;)&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> num = statement.executeUpdate(sql1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;插入成功~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.释放连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>步骤总结：</p>
<ol>
<li>加载驱动</li>
<li>连接数据库DriverManager</li>
<li>获取执行SQL的对象 Statement</li>
<li>获得返回的结果集</li>
<li>释放连接</li>
</ol>
<h1 id="39、JDBC中对象1解释"><a href="#39、JDBC中对象1解释" class="headerlink" title="39、JDBC中对象1解释"></a>39、JDBC中对象1解释</h1><blockquote>
<p>DriverManager</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.加载驱动</span></span><br><span class="line"><span class="comment">//DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span></span><br><span class="line"><span class="comment">//推荐这种写法加载驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">Connection connection = DriverManager.getConnection(url, userName, passWord);</span><br><span class="line"><span class="comment">// connection代表数据库</span></span><br><span class="line"><span class="comment">// 数据库设置自动提交</span></span><br><span class="line"><span class="comment">// 事务提交</span></span><br><span class="line"><span class="comment">// 事务回滚</span></span><br><span class="line">connection.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">connection.commit();</span><br><span class="line">connection.rollback();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>URL</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String url = <span class="string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mysql默认端口3306 你们改成了3307</span></span><br><span class="line"><span class="comment">// 协议://主机地址:端口号/数据库名?参数1&amp;参数2&amp;参数3</span></span><br><span class="line"><span class="comment">// oracle默认端口1521</span></span><br><span class="line"><span class="comment">// jdbc:oracle:thin:@localhost:1521:sid</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Statement 执行sql对象  、  PreparedStatement 执行sql对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">&quot;SELECT * FROM users&quot;</span>;<span class="comment">//编写SQL</span></span><br><span class="line"></span><br><span class="line">statement.executeQuery();<span class="comment">//执行查询 返回ResultSet</span></span><br><span class="line">statement.executeUpdate();<span class="comment">//新增，删除，修改，都用这个，返回受影响的行数</span></span><br><span class="line">statement.execute();<span class="comment">//执行任何SQL</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ResultSet 查询的结果集，封装了所有的查询结果</p>
</blockquote>
<p>获得指定的数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在不知道列类型的情况下使用</span></span><br><span class="line">resultSet.getObject();</span><br><span class="line"><span class="comment">//如果知道列类型，就使用指定的类型</span></span><br><span class="line">resultSet.getString();</span><br><span class="line">resultSet.getInt();</span><br><span class="line">resultSet.getDouble();</span><br><span class="line">resultSet.getBigDecimal();</span><br><span class="line">resultSet.getFloat();</span><br><span class="line">resultSet.getDate();</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>

<p>遍历，指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.beforeFirst();<span class="comment">//移动到最前面</span></span><br><span class="line">resultSet.afterLast();<span class="comment">//移动到最后面</span></span><br><span class="line">resultSet.next();<span class="comment">//移动到下一个数据</span></span><br><span class="line">resultSet.previous();<span class="comment">//移动到前一行</span></span><br><span class="line">resultSet.absolute(row);<span class="comment">//移动到指定行</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>释放资源</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();<span class="comment">//消耗资源</span></span><br></pre></td></tr></table></figure>



<h1 id="40、statement对象详解"><a href="#40、statement对象详解" class="headerlink" title="40、statement对象详解"></a>40、statement对象详解</h1><p>==jdbc中的statement对象用于向数据库发送SQL语句，想完成对数据库的增删改查，只需要通过这个对象向数据库发送增删改查语句即可。==</p>
<p>Statement对象的executeUpdate方法，用于向数据库发送增、删、改的SQL语句，executeUpdate执行完后，将会返回一个整数（即增删改语句导致了数据库几行数据发送了变化）。</p>
<p>Statement.executeQuery方法用于向数据库发送查询语句，executeQuery方法返回代表查询结果的ResultSet对象。</p>
<blockquote>
<p>CRUD操作-create</p>
</blockquote>
<p>使用executeUpdate(String sql)方法完成数据添加操作，示例操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement statement = connection.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;insert into user(...) values(...)&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = statement.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;插入成功~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>CRUD操作-delete</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement statement = connection.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;delete from user where id=1&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = statement.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;删除成功~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>CRUD操作-update</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement statement = connection.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;update user set name=&#x27;&#x27; where name =&#x27;&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = statement.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;修改成功~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>CRUD操作-read</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement statement = connection.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;SELECT * FROM users&quot;</span>;</span><br><span class="line">ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">    <span class="comment">//根据获取列的数据类型，分别调用resultSet的相应方法映射到java对象中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>代码实现</p>
</blockquote>
<ol>
<li><p>提取工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//输入流  你要输入什么?                               我要输入db.properties配置文件所以我要拿到它</span></span><br><span class="line">            <span class="comment">//拿到配置文件过后你要往哪里塞?   我要往JdbcUtils这个类里面塞,所以要通过类加载器拿到它</span></span><br><span class="line">            InputStream in = JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">            <span class="comment">//你有了properties文件过后,要通过Properties来让java认识</span></span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//Properties调用它的加载方法即load()方法来把你的流对象解析出来让java使用</span></span><br><span class="line">            properties.load(in);</span><br><span class="line"></span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            username = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//驱动只用加载一次</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection con, Statement st, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>配置文件db.properties</p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210714221731402.png" alt="image-20210714221731402"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/jdbcstudy?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写增删改的方法，<code>executeUpdate</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="comment">//测试插入</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            st = con.createStatement();</span><br><span class="line">            String sql = <span class="string">&quot;INSERT INTO users(`id`,`name`,`password`,`email`,`birthday`)\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VALUES (5,&#x27;小杨&#x27;,&#x27;123456&#x27;,&#x27;xy@qq.com&#x27;,&#x27;2000-05-05&#x27;)&quot;</span>;</span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="comment">//测试删除</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDelete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            st = con.createStatement();</span><br><span class="line">            String sql = <span class="string">&quot;DELETE FROM users WHERE `id`=5&quot;</span>;</span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试更新</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUpdate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            st = con.createStatement();</span><br><span class="line">            String sql = <span class="string">&quot;UPDATE users SET birthday=&#x27;2001-01-01&#x27; WHERE id=1&quot;</span>;</span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;更新成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zyy.lesson02.utils.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestSelect</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSelect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            st = con.createStatement();</span><br><span class="line">            String sql = <span class="string">&quot;SELECT * FROM users WHERE id=1&quot;</span>;</span><br><span class="line">            rs = st.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id=&quot;</span>+rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;name=&quot;</span>+rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="41、sql注入问题"><a href="#41、sql注入问题" class="headerlink" title="41、sql注入问题"></a>41、sql注入问题</h1><p>sql存在漏洞，会被攻击导致数据泄露 ==SQL会被拼接==</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">package cn.bs.sqlAttack;</span><br><span class="line">import cn.bs.jdbcS.JDBCUtils;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">public class SqlInjection &#123;</span><br><span class="line">    public <span class="keyword">static</span> void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span>正常登录</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>        login(&quot;小胖&quot;,&quot;1234567&quot;);</span><br><span class="line"></span><br><span class="line">        <span class="operator">/</span><span class="operator">/</span><span class="keyword">sql</span>注入</span><br><span class="line">        login(&quot;&#x27; or &#x27;1=1&quot;,&quot;123456&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录业务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">static</span> void login(String userName, String password) &#123;</span><br><span class="line">        Connection con <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line">        Statement st <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line">        try &#123;</span><br><span class="line">            con <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line">            st <span class="operator">=</span> con.createStatement();</span><br><span class="line">            String <span class="keyword">sql</span> <span class="operator">=</span> &quot;SELECT * FROM users WHERE `name`=&#x27;&quot;<span class="operator">+</span>userName<span class="operator">+</span>&quot;&#x27; AND `password`=&#x27;&quot;<span class="operator">+</span>password<span class="operator">+</span>&quot;&#x27;&quot;;</span><br><span class="line">            <span class="operator">/</span><span class="operator">/</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;1=1&#x27;</span> <span class="keyword">AND</span> `password`<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span></span><br><span class="line">            System.out.println(<span class="keyword">sql</span>);</span><br><span class="line">            rs <span class="operator">=</span> st.executeQuery(<span class="keyword">sql</span>);</span><br><span class="line">            while (rs.next()) &#123;</span><br><span class="line">                System.out.println(&quot;id=&quot;<span class="operator">+</span>rs.getInt(&quot;id&quot;));</span><br><span class="line">                System.out.println(&quot;name=&quot;<span class="operator">+</span>rs.getString(&quot;name&quot;));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (<span class="keyword">SQLException</span> e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>导致结果：错误的用户名或者密码可以获取到全部的用户信息</p>
<p><img src="C:\Users\86940\AppData\Roaming\Typora\typora-user-images\image-20211109173710081.png" alt="image-20211109173710081"></p>
<h1 id="42、PreparedStatement对象"><a href="#42、PreparedStatement对象" class="headerlink" title="42、PreparedStatement对象"></a>42、PreparedStatement对象</h1><p>PreparedStatement可以防止SQL注入，效率更好</p>
<ol>
<li><p>新增</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs.sqlAttack;</span><br><span class="line"><span class="keyword">import</span> cn.bs.jdbcS.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//使用?占位符代替参数</span></span><br><span class="line">            String sql = <span class="string">&quot;INSERT INTO users(`id`,`name`,`password`,`email`,`birthday`) VALUES (?,?,?,?,?)&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译SQL，先写SQL，然后不执行</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>, <span class="string">&quot;小枪&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>, <span class="string">&quot;xq@qq.com&quot;</span>);</span><br><span class="line">            st.setDate(<span class="number">5</span>, <span class="keyword">new</span> java.sql.Date(<span class="keyword">new</span> java.util.Date().getTime()));</span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs.sqlAttack;</span><br><span class="line"><span class="keyword">import</span> cn.bs.jdbcS.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDelete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//使用?占位符代替参数</span></span><br><span class="line">            String sql = <span class="string">&quot;DELETE FROM users WHERE `id`=?&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译SQL，先写SQL，然后不执行</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>更新</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zyy.lesson02.utils.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestUpdate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUpdate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//使用?占位符代替参数</span></span><br><span class="line">            String sql = <span class="string">&quot;UPDATE users SET birthday=? WHERE id=?&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译SQL，先写SQL，然后不执行</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setDate(<span class="number">1</span>, <span class="keyword">new</span> java.sql.Date(<span class="keyword">new</span> java.util.Date().getTime()));</span><br><span class="line">            st.setInt(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;修改成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs.sqlAttack;</span><br><span class="line"><span class="keyword">import</span> cn.bs.jdbcS.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSelect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//使用?占位符代替参数</span></span><br><span class="line">            String sql = <span class="string">&quot;SELECT * FROM users WHERE id=?&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译SQL，先写SQL，然后不执行</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            rs = st.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id=&quot;</span>+rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;name=&quot;</span>+rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>防止sql注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bs.sqlAttack;</span><br><span class="line"><span class="keyword">import</span> cn.bs.jdbcS.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlDefense</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//正常登录</span></span><br><span class="line"><span class="comment">//        login(&quot;小胖&quot;,&quot;123456&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//sql注入</span></span><br><span class="line">        login(<span class="string">&quot;&#x27; or &#x27;1=1&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录业务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String userName, String password)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">// PreparedStatement 防止SQL注入的本质，把传递进来的参数当做字符</span></span><br><span class="line">            <span class="comment">// 假设其中存在转义字符，比如说&#x27;会被直接转义</span></span><br><span class="line">            String sql = <span class="string">&quot;SELECT * FROM users WHERE `name`=? AND `password`=?&quot;</span>;</span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            st.setString(<span class="number">1</span>, userName);</span><br><span class="line">            st.setString(<span class="number">2</span>, password);</span><br><span class="line">            rs = st.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id=&quot;</span> + rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;name=&quot;</span> + rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行结果：查不到任何结果</p>
</li>
</ol>
<h1 id="43、使用idea连接数据库"><a href="#43、使用idea连接数据库" class="headerlink" title="43、使用idea连接数据库"></a>43、使用idea连接数据库</h1><p><img src="C:\Users\86940\AppData\Roaming\Typora\typora-user-images\image-20211109183511865.png" alt="image-20211109183511865"></p>
<p>连接成功后，就可以选择数据库</p>
<p><img src="C:\Users\86940\AppData\Roaming\Typora\typora-user-images\image-20211109183808415.png" alt="image-20211109183808415"></p>
<p>双击数据库</p>
<p><img src="C:\Users\86940\AppData\Roaming\Typora\typora-user-images\image-20211109185132457.png" alt="image-20211109185132457"></p>
<p><img src="C:\Users\86940\AppData\Roaming\Typora\typora-user-images\image-20211109185148013.png" alt="image-20211109185148013"></p>
<p>idea编写sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> account</span><br><span class="line">(</span><br><span class="line">    id    <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name  <span class="type">varchar</span>(<span class="number">40</span>),</span><br><span class="line">    money <span class="type">float</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account(name, money)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;A&#x27;</span>, <span class="number">1000</span>),</span><br><span class="line">       (<span class="string">&#x27;B&#x27;</span>, <span class="number">1000</span>),</span><br><span class="line">       (<span class="string">&#x27;C&#x27;</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>



<h1 id="44、JDBC操作事务"><a href="#44、JDBC操作事务" class="headerlink" title="44、JDBC操作事务"></a>44、JDBC操作事务</h1><p>==要么都成功，要么都失败==</p>
<blockquote>
<p>ACID原则</p>
</blockquote>
<p>原子性：要么全部成功，要么全部失败</p>
<p>一致性：总数不变</p>
<p>隔离性：多个进程互不干扰</p>
<p>持久性：一旦提交不可逆，持久化到数据库了</p>
<p>隔离性的问题：</p>
<p>脏读：一个事务读取了另外一个没有提交的事务</p>
<p>不可重复读：在同一个事务内，重复读取表中数据，表数据发生了改变</p>
<p>幻读：在一个事务内，读取到了别人插入的数据，导致前后读出来的结果不一致</p>
<blockquote>
<p>代码实现</p>
</blockquote>
<ol>
<li>开启事务<code>con.setAutoCommit(false);</code></li>
<li>一组业务执行完毕，提交事务</li>
<li>可以在catch语句中显示的定义回滚语句，但是默认失败就会回滚</li>
</ol>
<p>正常情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zyy.lesson02.utils.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestTransaction1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/07/15 21:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransaction1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//关闭自动提交 自动会开启事务</span></span><br><span class="line">            con.setAutoCommit(<span class="keyword">false</span>);<span class="comment">//开启事务</span></span><br><span class="line">            <span class="comment">// A 转 B 100元</span></span><br><span class="line">            String sql1 = <span class="string">&quot;update account set money=money-100 where name=&#x27;A&#x27;&quot;</span>;</span><br><span class="line">            ps = con.prepareStatement(sql1);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">            String sql2 = <span class="string">&quot;update account set money=money+100 where name=&#x27;B&#x27;&quot;</span>;</span><br><span class="line">            ps = con.prepareStatement(sql2);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">            <span class="comment">//业务完毕，提交事务</span></span><br><span class="line">            con.commit();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;A 转 B 100元 成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>异常情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zyy.lesson02.utils.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestTransaction1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/07/15 21:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransaction2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//关闭自动提交 自动会开启事务</span></span><br><span class="line">            con.setAutoCommit(<span class="keyword">false</span>);<span class="comment">//开启事务</span></span><br><span class="line">            <span class="comment">// A 转 B 100元</span></span><br><span class="line">            String sql1 = <span class="string">&quot;update account set money=money-100 where name=&#x27;A&#x27;&quot;</span>;</span><br><span class="line">            ps = con.prepareStatement(sql1);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//默认失败</span></span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">1</span>/<span class="number">0</span>; <span class="comment">//一定会异常</span></span><br><span class="line"></span><br><span class="line">            String sql2 = <span class="string">&quot;update account set money=money+100 where name=&#x27;B&#x27;&quot;</span>;</span><br><span class="line">            ps = con.prepareStatement(sql2);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">            <span class="comment">//业务完毕，提交事务</span></span><br><span class="line">            con.commit();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;A 转 B 100元 成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//如果异常，默认也会回滚，下面不写也可以</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                con.rollback();</span></span><br><span class="line"><span class="comment">//            &#125; catch (SQLException ex) &#123;</span></span><br><span class="line"><span class="comment">//                ex.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(con, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="45、DBCP-C3P0连接池"><a href="#45、DBCP-C3P0连接池" class="headerlink" title="45、DBCP-C3P0连接池"></a>45、DBCP-C3P0连接池</h1><p>数据库连接 – 执行完毕 – 释放</p>
<p>连接– 释放  是十分浪费系统资源的</p>
<p>池化技术：准备一些预先的资源，过来就连接预先准备好的</p>
<p>最小连接数：10(常用连接)</p>
<p>最大连接数：100 （业务最高承载上线）</p>
<p>等待超时：100ms</p>
<p>编写连接池，实现一个接口DataSource</p>
<blockquote>
<p>开源数据源实现</p>
</blockquote>
<p>DBCP</p>
<p>C3p0</p>
<p>Druid:阿里巴巴</p>
<p>使用了这些数据库连接池之后，我们在项目开发中就不需要编写连接数据库的代码了</p>
<blockquote>
<p>DBCP</p>
</blockquote>
<p>需要用到的jar包</p>
<p>commons-dbcp-1.4</p>
<p>commons-pool-1.6</p>
<p>配置文件dbcp.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#连接设置</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#初始化连接</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#最大连接数量</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">50</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#最大空闲连接</span></span><br><span class="line"><span class="attr">maxIdle</span>=<span class="string">20</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#最小空闲连接</span></span><br><span class="line"><span class="attr">minIdle</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#超时等待时间以毫秒为单位 6000毫秒/1000等于60秒</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">60000</span></span><br><span class="line"><span class="comment">#JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：【属性名=property;】</span></span><br><span class="line"><span class="comment">#注意：user 与 password 两个属性会被明确地传递，因此这里不需要包含他们。</span></span><br><span class="line"><span class="attr">connectionProperties</span>=<span class="string">useUnicode=true;characterEncoding=UTF8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#指定由连接池所创建的连接的自动提交（auto-commit）状态。</span></span><br><span class="line"><span class="attr">defaultAutoCommit</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#driver default 指定由连接池所创建的连接的只读（read-only）状态。</span></span><br><span class="line"><span class="comment">#如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：Informix）</span></span><br><span class="line"><span class="attr">defaultReadOnly</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。</span></span><br><span class="line"><span class="comment">#可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE</span></span><br><span class="line"><span class="attr">defaultTransactionIsolation</span>=<span class="string">READ_COMMITTED</span></span><br></pre></td></tr></table></figure>

<p>工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp.BasicDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: JDBCDBCPUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/07/14 17:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDBCPUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream in = JDBCDBCPUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;dbcp.properties&quot;</span>);</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(in);</span><br><span class="line">            <span class="comment">//创建数据源 工厂模式</span></span><br><span class="line">            dataSource = BasicDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//从数据源中获取连接</span></span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection con, Statement st, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zyy.lesson02.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> com.zyy.lesson05.utils.JDBCDBCPUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestDBCP</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/07/15 22:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDBCP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCDBCPUtils.getConnection();</span><br><span class="line">            <span class="comment">//使用?占位符代替参数</span></span><br><span class="line">            String sql = <span class="string">&quot;INSERT INTO users(`id`,`name`,`password`,`email`,`birthday`) VALUES (?,?,?,?,?)&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译SQL，先写SQL，然后不执行</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>, <span class="string">&quot;钱七&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>, <span class="string">&quot;qianqi@sina.com&quot;</span>);</span><br><span class="line">            st.setDate(<span class="number">5</span>, <span class="keyword">new</span> java.sql.Date(<span class="keyword">new</span> java.util.Date().getTime()));</span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCDBCPUtils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>C3P0</p>
</blockquote>
<p>需要用到的jar包</p>
<p>c3p0-0.9.5.5.jar</p>
<p>mchange-commons-java-0.2.19.jar</p>
<p>配置文件c3p0-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    c3p0的缺省（默认）配置</span></span><br><span class="line"><span class="comment">    如果在代码中ComboPooledDataSource ds=new ComboPooledDataSource();这样写就表示使用的是c3p0的缺省（默认）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquiredIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    c3p0的命名配置</span></span><br><span class="line"><span class="comment">    如果在代码中ComboPooledDataSource ds=new ComboPooledDataSource(&quot;MySQL&quot;);这样写就表示使用的是name是MySQL</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name-config</span> <span class="attr">name</span>=<span class="string">&quot;MySQL&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquiredIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">name-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: JDBCC3P0Utils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/07/14 17:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCC3P0Utils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//private static ComboPooledDataSource dataSource = null;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//代码的方式配置</span></span><br><span class="line"><span class="comment">//            dataSource = new ComboPooledDataSource();</span></span><br><span class="line"><span class="comment">//            dataSource.setDriverClass();</span></span><br><span class="line"><span class="comment">//            dataSource.setJdbcUrl();</span></span><br><span class="line"><span class="comment">//            dataSource.setUser();</span></span><br><span class="line"><span class="comment">//            dataSource.setPassword();</span></span><br><span class="line"><span class="comment">//            dataSource.setMaxPoolSize();</span></span><br><span class="line"><span class="comment">//            dataSource.setMinPoolSize();</span></span><br><span class="line">            <span class="comment">//配置文件写法</span></span><br><span class="line">            dataSource = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;MySQL&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//从数据源中获取连接</span></span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection con, Statement st, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zyy.lesson05.utils.JDBCC3P0Utils;</span><br><span class="line"><span class="keyword">import</span> com.zyy.lesson05.utils.JDBCDBCPUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestC3P0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/07/15 22:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestC3P0</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCC3P0Utils.getConnection();</span><br><span class="line">            <span class="comment">//使用?占位符代替参数</span></span><br><span class="line">            String sql = <span class="string">&quot;INSERT INTO users(`id`,`name`,`password`,`email`,`birthday`) VALUES (?,?,?,?,?)&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译SQL，先写SQL，然后不执行</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>, <span class="string">&quot;刘八&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>, <span class="string">&quot;liuba@sina.com&quot;</span>);</span><br><span class="line">            st.setDate(<span class="number">5</span>, <span class="keyword">new</span> java.sql.Date(<span class="keyword">new</span> java.util.Date().getTime()));</span><br><span class="line">            <span class="keyword">int</span> num = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCC3P0Utils.release(con, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结</p>
</blockquote>
<p>无论用什么数据源，本质还是一样的，DataSource接口不会变，方法就不会变</p>
<p><a href="https://www.apache.org/index.html#projects-list">Welcome to The Apache Software Foundation!</a></p>
<p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210719174041225.png" alt="image-20210719174041225"></p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>nacos配置中心</title>
    <url>/2021/12/23/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<h1 id="nacos配置中心"><a href="#nacos配置中心" class="headerlink" title="nacos配置中心"></a>nacos配置中心</h1>]]></content>
      <categories>
        <category>nacos</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>达内老师链接</title>
    <url>/2021/12/23/%E8%BE%BE%E5%86%85%E8%80%81%E5%B8%88%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/langlangKing520/article/details/121034505?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164022271416780271545027%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164022271416780271545027&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-121034505.pc_search_result_cache&utm_term=cgblpx%E5%88%98%E4%BD%A9%E9%9C%9E&spm=1018.2226.3001.4187">所有老师链接</a></p>
]]></content>
      <categories>
        <category>website</category>
      </categories>
  </entry>
  <entry>
    <title>nacos入门</title>
    <url>/2021/12/23/nacos%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><a href="https://gitee.com/the-world-is-new/three-part">测试文件地址</a></p>
<h1 id="注册中心简介"><a href="#注册中心简介" class="headerlink" title="注册中心简介"></a>注册中心简介</h1><p>背景分析<br>在微服务中，首先需要面对的问题就是如何查找服务(软件即服务)，其次,就是如何在不同的服务之间进行通信？如何更好更方便的管理应用中的每一个服务，如何建立各个服务之间联系的纽带，由此注册中心诞生（例如淘宝网卖家提供服务，买家调用服务）。<br>市面上常用注册中心有Zookeeper(雅虎Apache),Eureka(Netfix),Nacos(Alibaba),Consul(Google),那他们分别都有什么特点，我们如何进行选型呢？我们主要从社区活跃度,稳定性,功能,性能等方面进行考虑即可.本次微服务的学习,我们选择Nacos,它很好的支持了阿里的双11活动,不仅可以做注册中心，还可以作为配置中心，稳定性和性能都很好。</p>
<h1 id="构建Nacos服务"><a href="#构建Nacos服务" class="headerlink" title="构建Nacos服务"></a>构建Nacos服务</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>第一：确保你电脑已配置JAVA_HOME环境变量(Nacos启动时需要)</p>
<p>第二：确保你的MySQL版本为5.7以上（MariaDB10.5以上)</p>
<h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><p>第一步：Nacos下载,可在浏览器直接输入如下地址：</p>
<p><a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p>
<p><img src="https://img-blog.csdnimg.cn/5c366dd1cf2442568e182a2ae13dd2a2.png" alt="在这里插入图片描述"></p>
<p>第三步：解压Nacos（最好不要解压到中文目录下），其目录结构如下：</p>
<p><img src="https://img-blog.csdnimg.cn/8d139f02efdf46f48a97179bde2d0f20.png" alt="在这里插入图片描述"></p>
<h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><p>第一步：打开操作系统命令行，登陆mysql，执行课前资料中的sql脚本，不是nacos/conf目录下自带的。<br>例如,我们可以使用mysql自带客户端,在命令行首先登录mysql,然后执行如下指令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> d:/nacos-mysql.sql </span><br></pre></td></tr></table></figure>

<p>会有一个表nacos_config</p>
<p>第二步：打开/nacos/conf/application.properties里打开默认配置，并基于你当前环境配置要连接的数据库，连接数据库时使用的用户名和密码(假如前面有”#”要将其去掉)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">###If use MySQL as datasource:</span><br><span class="line"></span><br><span class="line">spring.datasource.platform=mysql</span><br><span class="line"></span><br><span class="line">###Count of DB:</span><br><span class="line"></span><br><span class="line">db.num=1</span><br><span class="line"></span><br><span class="line">###Connect URL of DB:</span><br><span class="line"></span><br><span class="line">db.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span><br><span class="line">db.user.0=root</span><br><span class="line">db.password.0=root</span><br></pre></td></tr></table></figure>

<p>服务启动与访问<br>第一步:启动Nacos服务（nacos的bin目录去通过指令启动）。</p>
<p>​        Linux/Unix/Mac启动命令(standalone代表着单机模式运行，非集群模式):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./startup.sh -m standalone</span><br></pre></td></tr></table></figure>

<p>​        Windows启动命令(standalone代表着单机模式运行，非集群模式):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure>

<p>第二步:访问Nacos服务。</p>
<p>打开浏览器，输入<a href="http://localhost:8848/nacos%E5%9C%B0%E5%9D%80">http://localhost:8848/nacos地址</a></p>
<p>其中，默认账号密码为nacos/nacos.</p>
<h1 id="服务注册与调用入门（重点）"><a href="#服务注册与调用入门（重点）" class="headerlink" title="服务注册与调用入门（重点）"></a>服务注册与调用入门（重点）</h1><h2 id="业务描述"><a href="#业务描述" class="headerlink" title="业务描述"></a>业务描述</h2><p>创建两个项目Module分别为服务提供者和服务消费者（假如已有则无需创建），两者都要注册到NacosServer中(这个server本质上就是一个web服务，端口默认为8848)，然后服务提供者可以为服务消费者提供远端调用服务(例如支付服务为服务提供方，订单服务为服务消费方)，如图所示：<br><img src="https://img-blog.csdnimg.cn/4421daf970c54d658be898ace0b09c73.png" alt="在这里插入图片描述"></p>
<h2 id="生产者服务创建及注册"><a href="#生产者服务创建及注册" class="headerlink" title="生产者服务创建及注册"></a>生产者服务创建及注册</h2><p>父工程maven的pom.xml配置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;module&gt;sca-consumer&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;sca-gateway&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;sca-provider&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;sca-common&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--统一依赖版本(spring boot,spring cloud,spring cloud alibaba)</span><br><span class="line">注意，这里只做版本管理--&gt;</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--Spring Boot--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.3.2.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;&lt;!--允许scope的值为import时，type的值必须pom--&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt; &lt;!--这里的import类似java中的import--&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--Spring Cloud (Spring Cloud 工程依赖于spring boot)，</span><br><span class="line">        spring cloud中定义的是一些微服务规范。--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;Hoxton.SR9&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--Spring Cloud Alibaba (这套依赖是基于Spring Cloud规范，做了具体的落地实现)--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2.6.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line">&lt;!--定义公共依赖(lombok,test)--&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">            &lt;!--springboot 2.2以后版本默认单元测试使用的是junit5，</span><br><span class="line">            所以junit4以前的测试引擎不在需要--&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">            &lt;/exclusion&gt;</span><br><span class="line">        &lt;/exclusions&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;!--定义统一编译运行环境(jdk)--&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;!--定义maven的编译插件--&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;source&gt;8&lt;/source&gt;</span><br><span class="line">                &lt;target&gt;8&lt;/target&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure>

<p>添加依赖:</p>
<pre><code>&lt;dependencies&gt;
    &lt;!--Web服务--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;!--服务的注册和发现(我们要讲服务注册到nacos)--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>第二步：创建并修改配置文件application.yml(或者application.properties)，实现服务注册，关键代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">   port: 8081</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: sca-provider #进行服务注册必须配置服务名</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: localhost:8848</span><br></pre></td></tr></table></figure>

<p>第三步：创建启动类(假如已有则无需定义)，关键代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt;</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class ProviderApplication &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    SpringApplication.run(ProviderApplication.class, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第四步：启动启动类，然后刷先nacos服务，检测是否服务注册成功，如图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/1ba763e2644440efbc5f46f3762f6533.png" alt="在这里插入图片描述"></p>
<p>第五步:停掉sca-provider服务，然后不断刷新nacos服务列表，检查服务的健康状态。</p>
<h2 id="消费者服务发现及调用"><a href="#消费者服务发现及调用" class="headerlink" title="消费者服务发现及调用"></a>消费者服务发现及调用</h2><p>第一步: 在sca-provider项目中创建服务提供方对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.provider.controller;</span><br><span class="line">   /**定义Controller对象(这个对象在spring mvc中给他的定义是handler),</span><br><span class="line">    * 基于此对象处理客户端的请求*/</span><br><span class="line">   @RestController</span><br><span class="line">   public class ProviderController&#123;</span><br><span class="line">       //@Value默认读取项目配置文件中配置的内容</span><br><span class="line">       //8080为没有读到server.port的值时,给定的默认值</span><br><span class="line">       @Value(&quot;$&#123;server.port:8080&#125;&quot;)</span><br><span class="line">       private String server;</span><br><span class="line">       //http://localhost:8081/provider/echo/tedu</span><br><span class="line">       @GetMapping(&quot;/provider/echo/&#123;msg&#125;&quot;)</span><br><span class="line">       public String doRestEcho1(@PathVariable String msg)&#123;</span><br><span class="line">           return server+&quot; say hello &quot;+msg;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>第二步：创建服务消费者工程（module名为sca-consumer，假如已有则无需创建），继承parent工程（01-sca），其pom.xml文件内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;artifactId&gt;sca-consumer&lt;/artifactId&gt;</span><br><span class="line">    </span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">    &lt;!--Web服务--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--服务的注册和发现(我们要讲服务注册到nacos)--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<p>第三步：创建sca-consumer服务中的配置文件application.yml，关键代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8090</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: sca-consumer #服务注册时，服务名必须配置</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: localhost:8848 #从哪里去查找服务</span><br></pre></td></tr></table></figure>

<p>第四步：创建消费端启动类并实现服务消费，关键代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt;</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class ConsumerApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第五步:在sca-consumer启动类中添加如下方法,用于创建RestTemplate对象.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean public RestTemplate restTemplate()&#123;*//基于此对象实现远端服务调用*    return new RestTemplate(); &#125;</span><br></pre></td></tr></table></figure>

<p>第六步:定义sca-consumer服务的消费端Controller,在此对象方法内部实现远端服务调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.consumer.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line"> * 定义服务消费端Controller,在这个Controller对象</span><br><span class="line"> * 的方法中实现对远端服务sca-provider的调用</span><br><span class="line">   */</span><br><span class="line">   @RestController</span><br><span class="line">   public class ConsumerController &#123;</span><br><span class="line">   /**</span><br><span class="line">    * 从spring容器获取一个RestTemplate对象,</span><br><span class="line">    * 基于此对象实现远端服务调用</span><br><span class="line">      */</span><br><span class="line">      @Autowired</span><br><span class="line">      private RestTemplate restTemplate;</span><br><span class="line">      /**</span><br><span class="line">    * 在此方法中通过一个RestTemplate对象调用远端sca-provider中的服务</span><br><span class="line">    * @return</span><br><span class="line">    * 访问此方法的url: http://localhost:8090/consumer/doRestEcho1</span><br><span class="line">      */</span><br><span class="line">      @GetMapping(&quot;/consumer/doRestEcho1&quot;)</span><br><span class="line">      public String doRestEcho01()&#123;</span><br><span class="line">      //1.定义要调用的远端服务的url</span><br><span class="line">      String url=&quot;http://localhost:8081/provider/echo/8090&quot;;</span><br><span class="line">      //2.基于restTemplate对象中的相关方法进行服务调用</span><br><span class="line">      return restTemplate.getForObject(url, String.class);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第七步：启动消费者服务，并在浏览器输入<a href="http://localhost:8090/consumer/doRestEcho1%E5%9C%B0%E5%9D%80%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8090/consumer/doRestEcho1地址进行访问测试。</a></p>
<h1 id="服务负载均衡设计及实现（重点）"><a href="#服务负载均衡设计及实现（重点）" class="headerlink" title="服务负载均衡设计及实现（重点）"></a>服务负载均衡设计及实现（重点）</h1><p>业务描述<br>一个服务实例可以处理请求是有限的,假如服务实例的并发访问比较大,我们会启动多个服务实例,让这些服务实例采用一定策略均衡(轮询,权重,随机,hash等)的处理并发请求,在Nacos中服务的负载均衡(Nacos客户端负载均衡)是如何应用的?</p>
<p>LoadBalancerClient应用<br>LoadBalancerClient对象可以从nacos中基于服务名获取服务实例，然后在工程中基于特点算法实现负载均衡方式的调用，案例实现如下：</p>
<p>第一步:修改ConsumerController类,注入LoadBalancerClient对象,并添加doRestEcho2方法,然后进行服务访问.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">  private LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line">  @Value(&quot;$&#123;spring.application.name:8090&#125;&quot;)</span><br><span class="line">  private String appName;</span><br><span class="line"></span><br><span class="line">  @GetMapping(&quot;/consumer/doRestEcho02&quot;)</span><br><span class="line"> public String doRestEcho02()&#123;</span><br><span class="line">     ServiceInstance serviceInstance = loadBalancerClient.choose(&quot;sca-provider&quot;);</span><br><span class="line">     String url = String.format(&quot;http://%s:%s/provider/echo/%s&quot;,serviceInstance.getHost(),serviceInstance.getPort(),appName);</span><br><span class="line">     System.out.println(&quot;request url:&quot;+url);</span><br><span class="line">     return restTemplate.getForObject(url, String.class);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>第二步：打开Idea服务启动配置，如图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/fd5b4ccc3ed64e3f9db36562548fd02e.png" alt="在这里插入图片描述"></p>
<p>第四步：修改sca-provider的配置文件端口，分别以8081，8082端口方式进行启动。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8082</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: sca-provider</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: localhost:8848</span><br></pre></td></tr></table></figure>

<p>第五步：启动成功以后，访问nacos的服务列表，检测服务是否成功注册，如图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/61f5fe11dbe74d0088bad185a8b25b37.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/50a56d6d947e4b18a0adec0ba867f4a7.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/efb6499e92904cbea7653f61082e639b.png" alt="在这里插入图片描述"></p>
<p>第六步：启动sca-consumer项目模块，打开浏览器对consumer服务进行访问，访问时不断刷新，检测页面数据变化。</p>
<p>说明，这里多个实例并发提供服务的方式为负载均衡，这里的负载均衡实现默认是因为Nacos集成了Ribbon来实现的，Ribbon配合RestTemplate，可以非常容易的实现服务之间的访问。Ribbon是Spring Cloud核心组件之一，它提供的最重要的功能就是客户端的负载均衡(客户端可以采用一定算法,例如轮询访问，访问服务端实例信息)，这个功能可以让我们轻松地将面向服务的REST模版请求自动转换成客户端负载均衡方式的服务调用。</p>
<h2 id="LoadBalanced"><a href="#LoadBalanced" class="headerlink" title="@LoadBalanced"></a>@LoadBalanced</h2><p>当使用RestTemplate进行远程服务调用时，假如需要负载均衡,还可以在RestTemplate对象构建时，使用@LoadBalanced对构建RestTemplate的方法进行修饰，例如在ConsumerApplication中构建名字为loadBalancedRestTemplate的RestTemplate对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">@LoadBalanced</span><br><span class="line">public RestTemplate loadBalancedRestTemplate()&#123;</span><br><span class="line">    return new RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在需要RestTemplate实现负载均衡调用的地方进行依赖注入.例如在ConsumerController类中添加loadBalancedRestTemplate属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private RestTemplate loadBalancedRestTemplate;</span><br></pre></td></tr></table></figure>

<p>接下来，可以在对应的服务端调用方的方法内，基于RestTemplate借助服务名进行服务调用， 例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;/consumer/doRestEcho3&quot;)</span><br><span class="line">public String doRestEcho03()&#123;</span><br><span class="line">    String url=String.format(&quot;http://%s/provider/echo/%s&quot;,&quot;sca-provider&quot;,appName);</span><br><span class="line">    //向服务提供方发起http请求,获取响应数据</span><br><span class="line">    return loadBalancedRestTemplate.getForObject(</span><br><span class="line">            url,//要请求的服务的地址</span><br><span class="line">            String.class);//String.class为请求服务的响应结果类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RestTemplate在发送请求的时候会被LoadBalancerInterceptor拦截，它的作用就是用于RestTemplate的负载均衡，LoadBalancerInterceptor将负载均衡的核心逻辑交给了loadBalancer，核心代码如下所示(了解):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public ClientHttpResponse intercept(final HttpRequest request, </span><br><span class="line">    final byte[] body, final ClientHttpRequestExecution execution) throws IOException &#123;</span><br><span class="line">	final URI originalUri = request.getURI();</span><br><span class="line">	String serviceName = originalUri.getHost();</span><br><span class="line">	return this.loadBalancer.execute(serviceName, </span><br><span class="line">    requestFactory.createRequest(request, body, execution));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@LoadBalanced注解是属于Spring，而不是Ribbon的，Spring在初始化容器的时候，如果检测到Bean被@LoadBalanced注解，Spring会为其设置LoadBalancerInterceptor的拦截器。</p>
<h2 id="Ribbon负载均衡策略-了解"><a href="#Ribbon负载均衡策略-了解" class="headerlink" title="Ribbon负载均衡策略(了解)"></a>Ribbon负载均衡策略(了解)</h2><p>基于Ribbon方式的负载均衡，Netflix默认提供了七种负载均衡策略，对于SpringCloud Alibaba解决方案中又提供了NacosRule策略，默认的负载均衡策略是轮训策略。如图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/fb4e370978ad467b90ea81ca176f179e.png" alt="在这里插入图片描述"></p>
<p>当系统提供的负载均衡策略不能满足我们需求时，我们还可以基于IRule接口自己定义策略.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public IRule rule()&#123;</span><br><span class="line">return new RandomRule();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">底层默认逻辑实现，@ConditionalOnMissingBean注解配合@Bean注解一起使用时，</span><br><span class="line">会在没有指定Bean时，才去创建这个Bean对象。</span><br><span class="line">@Bean</span><br><span class="line">@ConditionalOnMissingBean(IRule.class)</span><br><span class="line">public IRule rule()&#123;</span><br><span class="line">return new BestAvailableRule();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">小节面试分析</span><br><span class="line">@Bean注解的作用?(一般用于配置类内部,描述相关方法,用于告诉spring此方法的返回值要交给spring管理,bean的名字默认为方法名,假如需要指定名字可以@Bean(“bean的名字”),最多的应用场景是整合第三方的资源-对象)</span><br><span class="line">@Autowired注解的作用?(此注解用于描述属性,构造方法,set方法等,用于告诉spring框架,按找一定的规则为属性进行DI操作,默认按属性,方法参数类型查找对应的对象,假如只找到一个,则直接注入,类型多个时还会按照属性名或方法参数名进行值的注入,假如名字也不同,就出报错.)</span><br><span class="line">Nacos中的负责均衡底层是如何实现的?(通过Ribbon实现,Ribbon中定义了一些负载均衡算法,然后基于这些算法从服务实例中获取一个实例为消费方法提供服务)</span><br><span class="line">Ribbon 是什么？(Netflix公司提供的负载均衡客户端,一般应用于服务的消费方法)</span><br><span class="line">Ribbon 可以解决什么问题? (基于负载均衡策略进行服务调用, 所有策略都会实现IRule接口)</span><br><span class="line">Ribbon 内置的负载策略都有哪些?(8种,可以通过查看IRule接口的实现类进行分析)</span><br><span class="line">@LoadBalanced的作用是什么？(描述RestTemplate对象,用于告诉Spring框架，在使用RestTempalte进行服务调用时，这个调用过程会被一个拦截器进行拦截,然后在拦截器内部,启动负载均衡策略。)</span><br><span class="line">我们可以自己定义负载均衡策略吗？(可以，基于IRule接口进行策略定义,也可以参考NacosRule进行实现)</span><br></pre></td></tr></table></figure>

<p>拓展:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#sca-provider服务的负载均衡配置</span><br><span class="line">sca-provider:</span><br><span class="line">  ribbon: #ribbon是一个负载均衡组件，是Ribbon组件中提供了IRule接口及相关实现</span><br><span class="line">    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule</span><br></pre></td></tr></table></figure>



<h1 id="基于Feign的远程服务调用（重点）"><a href="#基于Feign的远程服务调用（重点）" class="headerlink" title="基于Feign的远程服务调用（重点）"></a>基于Feign的远程服务调用（重点）</h1><h2 id="背景分析"><a href="#背景分析" class="headerlink" title="背景分析"></a>背景分析</h2><p>服务消费方基于rest方式请求服务提供方的服务时，一种直接的方式就是自己拼接url，拼接参数然后实现服务调用，但每次服务调用都需要这样拼接，代码量复杂且不易维护，此时Feign诞生。</p>
<h2 id="Feign是什么"><a href="#Feign是什么" class="headerlink" title="Feign是什么"></a>Feign是什么</h2><p>Feign 是一种声明式Web服务客户端，底层封装了对Rest技术的应用,通过Feign可以简化服务消费方对远程服务提供方法的调用实现。如图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/163741e4cff44e7aa714bb003c9b2672.png" alt="在这里插入图片描述"></p>
<p>Feign 最早是由 Netflix 公司进行维护的，后来 Netflix 不再对其进行维护，最终 Feign 由一些社区进行维护，更名为 OpenFeign。</p>
<h2 id="Feign应用实践（掌握）"><a href="#Feign应用实践（掌握）" class="headerlink" title="Feign应用实践（掌握）"></a>Feign应用实践（掌握）</h2><p>第一步：在服务消费方，添加项目依赖(SpringCloud团队基于OpenFeign研发了starter)，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>第二步：在启动类上添加@EnableFeignClients注解，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@EnableFeignClients</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class ConsumerApplication &#123;…&#125;</span><br></pre></td></tr></table></figure>

<p>第三步：定义Http请求API，基于此API借助OpenFeign访问远端服务，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.consumer.service;</span><br><span class="line">@FeignClient(name=&quot;sca-provider&quot;)//sca-provider为服务提供者名称</span><br><span class="line">public interface RemoteProviderService&#123;</span><br><span class="line">    @GetMapping(&quot;/provider/echo/&#123;string&#125;&quot;)//前提是远端需要有这个服务</span><br><span class="line">    public String echoMessage(@PathVariable(&quot;string&quot;) String string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，@FeignClient描述的接口底层会为其创建实现类。</p>
<p>第四步：创建FeignConsumerController中并添加feign访问，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.consumer.controller;</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/consumer/ &quot;)</span><br><span class="line">public class FeignConsumerController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RemoteProviderService remoteProviderService;</span><br><span class="line">    /**基于feign方式的服务调用*/</span><br><span class="line">    @GetMapping(&quot;/echo/&#123;msg&#125;&quot;)</span><br><span class="line">    public String doFeignEcho(@PathVariable  String msg)&#123;</span><br><span class="line">        //基于feign方式进行远端服务调用(前提是服务必须存在)</span><br><span class="line">        return remoteProviderService.echoMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第五步：启动消费者服务，在浏览器中直接通过feign客户端进行访问，如图所示（反复刷新检测其响应结果）：</p>
<p><img src="https://img-blog.csdnimg.cn/d89e1e76746141a6bab78830a82af589.png" alt="在这里插入图片描述"></p>
<p>其启动异常如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The bean &#x27;optimization-user.FeignClientSpecification&#x27;, defined in null, could not be registered. A bean with that name has already been defined in null and overriding is disabled.</span><br></pre></td></tr></table></figure>

<p>此时我们需要为远程调用服务接口指定一个contextId,作为远程调用服务的唯一标识（这个标识是Bean对象的名字）即可,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@FeignClient(name=&quot;sca-provider&quot;,contextId=&quot;remoteProviderService&quot;)//sca-provider为服务提供者名称</span><br><span class="line">interface RemoteProviderService&#123;</span><br><span class="line">    @GetMapping(&quot;/provider/echo/&#123;string&#125;&quot;)//前提是远端需要有这个服务</span><br><span class="line">    public String echoMessage(@PathVariable(&quot;string&quot;) String string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有,当我们在进行远程服务调用时,假如调用的服务突然不可用了或者调用过程超时了,怎么办呢?一般服务消费端会给出具体的容错方案,例如，在Feign应用中通过FallbackFactory接口的实现类进行默认的相关处理，例如:</p>
<p>第一步:定义FallbackFactory接口的实现,代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.cy.service.factory;</span><br><span class="line">/**</span><br><span class="line"> * 基于此对象处理RemoteProviderService接口调用时出现的服务中断,超时等问题</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class ProviderFallbackFactory implements FallbackFactory&lt;RemoteProviderService&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 此方法会在RemoteProviderService接口服务调用时,出现了异常后执行.</span><br><span class="line">     * @param throwable 用于接收异常</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public RemoteProviderService create(Throwable throwable) &#123;</span><br><span class="line">        return (msg)-&gt;&#123;</span><br><span class="line">                return &quot;服务维护中,稍等片刻再访问&quot;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步:在Feign访问接口中应用FallbackFactory对象,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@FeignClient(name = &quot;sca-provider&quot;, contextId = &quot;remoteProviderService&quot;,</span><br><span class="line">             fallbackFactory = ProviderFallbackFactory.class)//sca-provider为nacos中的服务名</span><br><span class="line">public interface RemoteProviderService &#123;</span><br><span class="line">    @GetMapping(&quot;/provider/echo/&#123;msg&#125;&quot;)</span><br><span class="line">    public String echoMsg(@PathVariable String msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步:在配置文件application.yml中添加如下配置,启动feign方式调用时的服务中断处理机制.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">feign:  </span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: true #默认值为false</span><br></pre></td></tr></table></figure>

<p>第四步:在服务提供方对应的调用方法中添加Thread.sleep(5000)模拟耗时操作,然后启动服务进行访问测试.</p>
<h2 id="Feign-调用过程分析（了解）"><a href="#Feign-调用过程分析（了解）" class="headerlink" title="Feign 调用过程分析（了解）"></a>Feign 调用过程分析（了解）</h2><h3 id="Feign应用过程分析（底层逻辑先了解）："><a href="#Feign应用过程分析（底层逻辑先了解）：" class="headerlink" title="Feign应用过程分析（底层逻辑先了解）："></a>Feign应用过程分析（底层逻辑先了解）：</h3><p>1)通过 @EnableFeignCleints 注解告诉springcloud,启动 Feign Starter 组件。</p>
<ol start="2">
<li>Feign Starter 会在项目启动过程中注册全局配置，扫描包下所由@FeignClient注解描述的接口，然后由系统底层创建接口实现类(JDK代理类)，并构建类的对象，然后交给spring管理(注册 IOC 容器)。</li>
<li>Feign接口被调用时，底层代理对象会将接口中的请求信息通过编码器创建 Request对象，基于此对象进行远程过程调用。</li>
<li>Feign客户端请求对象会经Ribbon进行负载均衡，挑选出一个健康的 Server 实例（instance）。</li>
<li>Feign客户端会携带 Request 调用远端服务并返回一个响应。</li>
<li>Feign客户端对象对Response信息进行解析然后返回客户端。</li>
</ol>
<h2 id="小节面试分析"><a href="#小节面试分析" class="headerlink" title="小节面试分析"></a>小节面试分析</h2><p>为什么使用feign?(基于Feign可以更加友好的实现服务调用，简化服务消费方对服务提供方方法的调用)。<br>@FeignClient注解的作用是什么？(告诉Feign Starter，在项目启动时，为此注解描述的接口创建实现类-代理类)<br>Feign方式的调用，底层负载均衡是如何实现的？(Ribbon)<br>@EnableFeignCleints 注解的作用是什么？（描述配置类，例如启动类）</p>
<h2 id="总结-Summary"><a href="#总结-Summary" class="headerlink" title="总结(Summary)"></a>总结(Summary)</h2><h3 id="重难点分析"><a href="#重难点分析" class="headerlink" title="重难点分析"></a>重难点分析</h3><p>何为注册中心？(用于记录服务信息的一个web服务，例如淘宝平台，滴滴平台，美团外卖平台，……)<br>注册中心的核心对象？(服务提供方，服务消费方，注册中心-Registry)<br>市面上常用注册中心？(Google-Consul,Alibaba-Nacos,…)<br>Nacos安装、启动、服务的注册、发现机制以及实现过程<br>服务调用时RestTemplate对象的应用。<br>基于Feign方式的服务调用及基本原理？</p>
<h2 id="FAQ分析"><a href="#FAQ分析" class="headerlink" title="FAQ分析"></a>FAQ分析</h2><p>Nacos是什么，提供了什么特性(服务的注册、发现、配置)？<br>你为什么会选择Nacos?（活跃度、稳定、性能、学习成本）<br>Nacos的官网？(nacos.io)<br>Nacos在github的源码？(github.com/alibaba/nacos)<br>Nacos在windows环境下安装?(解压即可使用)<br>Nacos在windows中的的初步配置？(application.properties访问数据库的数据源)<br>Nacos服务注册的基本过程？（服务启动时发送web请求）<br>Nacos服务消费的基本过程？（服务启动时获取服务实例，然后调用服务）<br>Nacos服务负载均衡逻辑及设计实现？(Ribbon)<br>注册中心的核心数据是什么？（服务的名字和它对应的网络地址）<br>注册中心中心核心数据的存取为什么会采用读写锁?(底层安全和性能)<br>Nacos健康检查的方式？(基于心跳包机制进行实现)<br>Nacos是如何保证高可用的?(重试，本地缓存、集群)<br>RestTemplate的基本作用是什么？<br>Feign是什么，它的应用是怎样的，feign应用过程中的代理对象是如何创建的（JDK）？<br>Feign方式的调用过程，其负载均衡是如何实现？(Ribbon)<br>Bug分析<br>404  //找不到页面<br>400    //请求出错 由于语法格式有误,服务器无法理解此请求。<br>405    //Request method ‘GET’ not supported(405-用来访问本页面的HTTP方法不被允许)这是因为浏览器访问网站是GET请求，后端服务器本地址只接受POST请求。<br>500    //服务器错误</p>
<p>414    //服务器接收数据处理错误。一般controller层</p>
]]></content>
      <categories>
        <category>nacos</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>Vue引入bootstrap,swiper,echarts</title>
    <url>/2021/12/31/Vue%E5%BC%95%E5%85%A5bootstrap%E5%92%8Cswiper/</url>
    <content><![CDATA[<h2 id="导入命令"><a href="#导入命令" class="headerlink" title="导入命令:"></a>导入命令:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install bootstrap@3.4.1 --save-dev</span><br><span class="line">cnpm install jquery@3.6.0 --save-dev</span><br><span class="line">cnpm install popper.js@1.16.1 --save-dev</span><br><span class="line">cnpm install echarts@4.9.0 --save-dev</span><br></pre></td></tr></table></figure>

<h2 id="修改文件webpack-base-conf-js"><a href="#修改文件webpack-base-conf-js" class="headerlink" title="修改文件webpack.base.conf.js:"></a>修改文件webpack.base.conf.js:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const webpack = require(&quot;webpack&quot;);</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    new webpack.ProvidePlugin(&#123;</span><br><span class="line">      jQuery: &#x27;jquery&#x27;,</span><br><span class="line">      $: &#x27;jquery&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/01/07/O4A6CZMrHQaEcxq.png" alt="image-20211231160630426"></p>
<h2 id="修改main-js文件"><a href="#修改main-js文件" class="headerlink" title="修改main.js文件:"></a>修改main.js文件:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;bootstrap/dist/css/bootstrap.min.css&#x27;</span><br><span class="line">import &#x27;bootstrap/dist/js/bootstrap.min.js&#x27;</span><br><span class="line">import $ from &#x27;jquery&#x27; ;</span><br></pre></td></tr></table></figure>

<h2 id="导入测试："><a href="#导入测试：" class="headerlink" title="导入测试："></a>导入测试：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;nav aria-label=&quot;Page navigation&quot;&gt;</span><br><span class="line">  &lt;ul class=&quot;pagination&quot;&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href=&quot;#&quot; aria-label=&quot;Previous&quot;&gt;</span><br><span class="line">        &lt;span aria-hidden=&quot;true&quot;&gt;&amp;laquo;&lt;/span&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;4&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;5&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href=&quot;#&quot; aria-label=&quot;Next&quot;&gt;</span><br><span class="line">        &lt;span aria-hidden=&quot;true&quot;&gt;&amp;raquo;&lt;/span&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/nav&gt;</span><br></pre></td></tr></table></figure>

<h2 id="导入swiper："><a href="#导入swiper：" class="headerlink" title="导入swiper："></a>导入swiper：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install swiper@3.4.2 --save-dev</span><br></pre></td></tr></table></figure>

<h2 id="在main-js中引入："><a href="#在main-js中引入：" class="headerlink" title="在main.js中引入："></a>在main.js中引入：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;swiper/dist/css/swiper.min.css&#x27;</span><br><span class="line">import &#x27;swiper/dist/js/swiper.min&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="或在引用页面导入："><a href="#或在引用页面导入：" class="headerlink" title="或在引用页面导入："></a>或在引用页面导入：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;div class=&quot;swiper-container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;swiper-wrapper&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;swiper-slide&quot;&gt;Slide 1&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;swiper-slide&quot;&gt;Slide 2&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;swiper-slide&quot;&gt;Slide 3&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 如果需要分页器 --&gt;</span><br><span class="line">        &lt;div class=&quot;swiper-pagination&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 如果需要导航按钮 --&gt;</span><br><span class="line">        &lt;div class=&quot;swiper-button-prev&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;swiper-button-next&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 如果需要滚动条 --&gt;</span><br><span class="line">    &lt;!--    &lt;div class=&quot;swiper-scrollbar&quot;&gt;&lt;/div&gt;--&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  //引入</span><br><span class="line">import &#x27;swiper/dist/css/swiper.min.css&#x27;</span><br><span class="line">import &#x27;swiper/dist/js/swiper.min&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#x27;Welcome to Your Vue.js App&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      new Swiper (&#x27;.swiper-container&#x27;, &#123;</span><br><span class="line">        freeMode : true,</span><br><span class="line">        freeModeSticky : true</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="引入echarts"><a href="#引入echarts" class="headerlink" title="引入echarts:"></a>引入echarts:</h3><h2 id="全局引入"><a href="#全局引入" class="headerlink" title="全局引入"></a>全局引入</h2><h4 id="在main-js中引入"><a href="#在main-js中引入" class="headerlink" title="在main.js中引入"></a>在main.js中引入</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import echarts from &#x27;echarts&#x27;</span><br><span class="line">Vue.prototype.$echarts = echarts</span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用:"></a>使用:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;myChart&quot; :style=&quot;&#123;width: &#x27;300px&#x27;, height: &#x27;300px&#x27;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">      drawLine()&#123;</span><br><span class="line">              // 基于准备好的dom，初始化echarts实例</span><br><span class="line">              let myChart = this.$echarts.init(document.getElementById(&#x27;myChart&#x27;))</span><br><span class="line">              // 绘制图表</span><br><span class="line">              myChart.setOption(&#123;</span><br><span class="line">                  title: &#123; text: &#x27;在Vue中使用echarts&#x27; &#125;,</span><br><span class="line">                  tooltip: &#123;&#125;,</span><br><span class="line">                  xAxis: &#123;</span><br><span class="line">                      data: [&quot;衬衫&quot;,&quot;羊毛衫&quot;,&quot;雪纺衫&quot;,&quot;裤子&quot;,&quot;高跟鞋&quot;,&quot;袜子&quot;]</span><br><span class="line">                  &#125;,</span><br><span class="line">                  yAxis: &#123;&#125;,</span><br><span class="line">                  series: [&#123;</span><br><span class="line">                      name: &#x27;销量&#x27;,</span><br><span class="line">                      type: &#x27;bar&#x27;,</span><br><span class="line">                      data: [5, 20, 36, 10, 10, 20]</span><br><span class="line">                  &#125;]</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      new Swiper (&#x27;.swiper-container&#x27;, &#123;</span><br><span class="line"></span><br><span class="line">        prevButton:&#x27;.swiper-button-prev&#x27;,</span><br><span class="line">        nextButton:&#x27;.swiper-button-next&#x27;,</span><br><span class="line">        autoplay: 1000,//可选选项，自动滑动</span><br><span class="line">        pagination : &#x27;.swiper-pagination&#x27;,</span><br><span class="line">        autoplayDisableOnInteraction:false,</span><br><span class="line">      &#125;);</span><br><span class="line">      this.drawLine();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="按需引入"><a href="#按需引入" class="headerlink" title="按需引入"></a>按需引入</h2><h3 id="在模块中引入"><a href="#在模块中引入" class="headerlink" title="在模块中引入"></a>在模块中引入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 按需引入</span><br><span class="line">// 引入 ECharts 主模块</span><br><span class="line">var echarts = require(&#x27;echarts/lib/echarts&#x27;);</span><br><span class="line">// 引入柱状图</span><br><span class="line">require(&#x27;echarts/lib/chart/bar&#x27;);</span><br><span class="line">// 引入提示框和标题组件</span><br><span class="line">require(&#x27;echarts/lib/component/tooltip&#x27;);</span><br><span class="line">require(&#x27;echarts/lib/component/title&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用:"></a>使用:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;myChart&quot; :style=&quot;&#123;width: &#x27;300px&#x27;, height: &#x27;300px&#x27;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">mounted()&#123;</span><br><span class="line">   this.drawLine();</span><br><span class="line"> &#125;,</span><br><span class="line"> methods: &#123;</span><br><span class="line">   drawLine()&#123;</span><br><span class="line">       // 基于准备好的dom，初始化echarts实例</span><br><span class="line">       let myChart = echarts.init(document.getElementById(&#x27;myChart&#x27;))</span><br><span class="line">       // 绘制图表</span><br><span class="line">       myChart.setOption(&#123;</span><br><span class="line">           title: &#123; text: &#x27;在Vue中使用echarts&#x27; &#125;,</span><br><span class="line">           tooltip: &#123;&#125;,</span><br><span class="line">           xAxis: &#123;</span><br><span class="line">               data: [&quot;衬衫&quot;,&quot;羊毛衫&quot;,&quot;雪纺衫&quot;,&quot;裤子&quot;,&quot;高跟鞋&quot;,&quot;袜子&quot;]</span><br><span class="line">           &#125;,</span><br><span class="line">           yAxis: &#123;&#125;,</span><br><span class="line">           series: [&#123;</span><br><span class="line">               name: &#x27;销量&#x27;,</span><br><span class="line">               type: &#x27;bar&#x27;,</span><br><span class="line">               data: [5, 20, 36, 10, 10, 20]</span><br><span class="line">           &#125;]</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security</title>
    <url>/2022/01/02/Spring-Security/</url>
    <content><![CDATA[<h2 id="单点登陆系统解决方案设计"><a href="#单点登陆系统解决方案设计" class="headerlink" title="单点登陆系统解决方案设计"></a>单点登陆系统解决方案设计</h2><ul>
<li><p>解决方案1：用户登陆成功以后，将用户登陆状态存储到redis数据库，例如：</p>
<p><img src="https://s2.loli.net/2022/01/02/kNXm3WpAeJsMuaO.png" alt="image-20220102213249449"></p>
<p><strong>说明,在这套方案中,用户登录成功后,会基于UUID生成一个token,然后与用户信息绑定在一起存储到数据库.后续用户在访问资源时,基于token从数据库查询用户状态,这种方式因为要基于数据库存储和查询用户状态,所以性能表现一般.</strong></p>
<ul>
<li><p>解决方案2：用户登陆成功以后，将用户信息存储到token（令牌），然后写到客户端进行存储。（本次设计方案）</p>
<p><img src="https://s2.loli.net/2022/01/02/o7m31DfnadlW4E8.png" alt="image-20220102213424982"></p>
</li>
</ul>
</li>
</ul>
<h2 id="工程结构设计"><a href="#工程结构设计" class="headerlink" title="工程结构设计"></a>工程结构设计</h2><p>基于服务的划分，设计工程结构如下：</p>
<p><img src="https://s2.loli.net/2022/01/02/kfv7z5N8YT2LgVG.png" alt="image-20220102213522034"></p>
<h1 id="SSO父工程创建及初始化"><a href="#SSO父工程创建及初始化" class="headerlink" title="SSO父工程创建及初始化"></a>SSO父工程创建及初始化</h1><h2 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h2><p>第一步：创建父工程，例如：</p>
<p><img src="https://s2.loli.net/2022/01/02/p6mwGPcuY4BvhLT.png" alt="image-20220102213631000"></p>
<p>第二步：删除父工程src目录(可选)。</p>
<h2 id="父工程pom文件初始配置"><a href="#父工程pom文件初始配置" class="headerlink" title="父工程pom文件初始配置"></a>父工程pom文件初始配置</h2><p>初始化pom文件内容，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.jt&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;02-sso&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;!--maven父工程的pom文件中一般要定义子模块,</span><br><span class="line">    子工程中所需依赖版本的管理,公共依赖并且父工程的打包方式一般为pom方式--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--第一步: 定义子工程中核心依赖的版本管理(注意,只是版本管理)--&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;!--spring boot 核心依赖版本定义(spring官方定义)--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.3.2.RELEASE&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--Spring Cloud 微服务规范(由spring官方定义)--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;Hoxton.SR9&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;&lt;!--假如scope是import,type必须为pom--&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;&lt;!--引入三方依赖的版本设计--&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--Spring Cloud alibaba 依赖版本管理 (参考官方说明)--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.2.6.RELEASE&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line">    &lt;!--第二步: 添加子工程的所需要的公共依赖--&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--lombok 依赖,子工程中假如需要lombok,不需要再引入--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;&lt;!--provided 表示此依赖仅在编译阶段有效--&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--单元测试依赖,子工程中需要单元测试时,不需要再次引入此依赖了--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;&lt;!--test表示只能在test目录下使用此依赖--&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;&lt;!--排除一些不需要的依赖--&gt;</span><br><span class="line">                    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--其它依赖...--&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;!--第三步: 定义当前工程模块及子工程的的统一编译和运行版本--&gt;</span><br><span class="line">    &lt;build&gt;&lt;!--项目构建配置,我们基于maven完成项目的编译,测试,打包等操作,</span><br><span class="line">    都是基于pom.xml完成这一列的操作,但是编译和打包的配置都是要写到build元素</span><br><span class="line">    内的,而具体的编译和打包配置,又需要plugin去实现,plugin元素不是必须的,maven</span><br><span class="line">    有默认的plugin配置,常用插件可去本地库进行查看--&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!--通过maven-compiler-plugin插件设置项目</span><br><span class="line">            的统一的jdk编译和运行版本--&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;!--假如本地库没有这个版本,这里会出现红色字体错误--&gt;</span><br><span class="line">                &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;8&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;8&lt;/target&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<h1 id="系统基础服务工程设计及实现"><a href="#系统基础服务工程设计及实现" class="headerlink" title="系统基础服务工程设计及实现"></a>系统基础服务工程设计及实现</h1><h2 id="业务描述"><a href="#业务描述" class="headerlink" title="业务描述"></a>业务描述</h2><p>本次设计系统服务(System)，主要用于提供基础数据服务，例如日志信息，用户信息等。</p>
<h2 id="表结构设计"><a href="#表结构设计" class="headerlink" title="表结构设计"></a>表结构设计</h2><p>系统服务模块，基本表结构设计，例如：</p>
<p><img src="https://s2.loli.net/2022/01/02/OKc1ZLEY2tuI7wz.png" alt="image-20220102214357341"></p>
<h4 id="多对多要表之间添加一个映射表"><a href="#多对多要表之间添加一个映射表" class="headerlink" title="多对多要表之间添加一个映射表"></a>多对多要表之间添加一个映射表</h4><h2 id="工程数据初始化"><a href="#工程数据初始化" class="headerlink" title="工程数据初始化"></a>工程数据初始化</h2><p>将jt-sso.sql文件在mysql中执行一下,其过程如下:<br>第一:登录mysql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -proot</span><br></pre></td></tr></table></figure>

<p>第二:通过source指令执行jt-sso.sql文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source d:/jt-sso.sql</span><br></pre></td></tr></table></figure>

<h2 id="创建系统服务工程并初始化"><a href="#创建系统服务工程并初始化" class="headerlink" title="创建系统服务工程并初始化"></a>创建系统服务工程并初始化</h2><h4 id="系统工程的目的是和数据库建立连接"><a href="#系统工程的目的是和数据库建立连接" class="headerlink" title="系统工程的目的是和数据库建立连接"></a>系统工程的目的是和数据库建立连接</h4><p>第一步：创建sso-system工程，例如：</p>
<p><img src="https://s2.loli.net/2022/01/02/r5q8DaX7MAyFHg9.png" alt="image-20220102214511915"></p>
<p>第二步：添加项目依赖，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--1.数据库访问相关--&gt;</span><br><span class="line">        &lt;!--1.1 mysql 数据库驱动--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--1.2 mybatis plus 插件--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--服务治理相关--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--Web 服务相关--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>第三步：在项目中添加bootstrap.yml文件，其内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8061</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: sso-system</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: localhost:8848</span><br><span class="line">      config:</span><br><span class="line">        server-addr: localhost:8848</span><br><span class="line">        file-extension: yml</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:///jt-sso?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">   sentinel:</span><br><span class="line">   	transport:</span><br><span class="line">   		dashboard: localhost:8180</span><br><span class="line">   	eager:true //取消懒加载</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>说明，可将连接数据库的配置，添加到配置中心。</p>
<p>第四步：在项目中添加启动类，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SystemApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SystemApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第五步：在项目中添加单元测试类，测试数据库连接，例如：</p>
<p><img src="https://s2.loli.net/2022/01/02/YXLsVUT6xfjF5Rm.png" alt="image-20220102222044562"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt;</span><br><span class="line"></span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">public class DataSourceTests &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private DataSource dataSource;//HikariDataSource，HikariPool,CopyOnWriteArrayList()</span><br><span class="line">    @Test</span><br><span class="line">    void testGetConnection() throws SQLException &#123;</span><br><span class="line">    	//使用dataSource获取链接时，首先要获取的是连接池，然后从池中获取连接</span><br><span class="line">    	//这里有三个设计模式:单例模式，享元模式，桥接模式</span><br><span class="line">        Connection conn=</span><br><span class="line">        dataSource.getConnection();</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ThreadLocal面试"><a href="#ThreadLocal面试" class="headerlink" title="ThreadLocal面试"></a>ThreadLocal面试</h4><h4 id="面试-SPI"><a href="#面试-SPI" class="headerlink" title="面试 SPI"></a>面试 SPI</h4><h4 id="面试HikariCP"><a href="#面试HikariCP" class="headerlink" title="面试HikariCP"></a>面试HikariCP</h4><h4 id="门面设计模式"><a href="#门面设计模式" class="headerlink" title="门面设计模式"></a>门面设计模式</h4><h2 id="Pojo对象逻辑实现"><a href="#Pojo对象逻辑实现" class="headerlink" title="Pojo对象逻辑实现"></a>Pojo对象逻辑实现</h2><p>添加项目User对象，用于封装用户信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.system.pojo;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 通过此对象封装用户信息</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 4831304712151465443L;</span><br><span class="line">    private Long id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    private String status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Dao对象逻辑实现"><a href="#Dao对象逻辑实现" class="headerlink" title="Dao对象逻辑实现"></a>Dao对象逻辑实现</h2><p>第一步：创建UserMapper接口，并定义基于用户名查询用户信息，基于用户id查询用户权限信息的方法，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.system.dao;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line">import com.jt.system.pojo.User;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line">import org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">@Mapper 注解由Mybatis官方提供，用于告诉mybatis底层为此注解描述的接口</span><br><span class="line">创建其实现类及对象，然后将对象交给spring管理</span><br><span class="line">注意:@Mapper描述的数据层接口，要默认放在项目启动类所在包或子包中.会默认为spring注入一个</span><br><span class="line">Sqlsession对象。</span><br><span class="line">*/</span><br><span class="line">@Mapper</span><br><span class="line">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 基于用户名获取用户信息</span><br><span class="line">     * @param username</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Select(&quot;select id,username,password,status &quot; +</span><br><span class="line">            &quot;from tb_users &quot; +</span><br><span class="line">            &quot;where username=#&#123;username&#125;&quot;)</span><br><span class="line">    User selectUserByUsername(String username);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 基于用户id查询用户权限</span><br><span class="line">     * @param userId 用户id</span><br><span class="line">     * @return 用户的权限</span><br><span class="line">     * 涉及到的表:tb_user_roles,tb_role_menus,tb_menus</span><br><span class="line">     */</span><br><span class="line">    @Select(&quot;select distinct m.permission &quot; +</span><br><span class="line">            &quot;from tb_user_roles ur join tb_role_menus rm on ur.role_id=rm.role_id&quot; +</span><br><span class="line">            &quot;     join tb_menus m on rm.menu_id=m.id &quot; +</span><br><span class="line">            &quot;where ur.user_id=#&#123;userId&#125;&quot;)</span><br><span class="line">    List&lt;String&gt; selectUserPermissions(Long userId);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步：创建UserMapperTests类，对业务方法做单元测试，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt;</span><br><span class="line"></span><br><span class="line">import com.jt.system.pojo.User;</span><br><span class="line">import com.jt.system.dao.UserMapper;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">public class UserMapperTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void testSelectUserByUsername()&#123;</span><br><span class="line">        User user =</span><br><span class="line">        userMapper.selectUserByUsername(&quot;admin&quot;);</span><br><span class="line">        if(user == null)&#123;</span><br><span class="line">        	throw new IllegalArgumentException(&quot;user is not exits&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    void testSelectUserPermissions()&#123;</span><br><span class="line">        List&lt;String&gt; permission=</span><br><span class="line">        userMapper.selectUserPermissions(1L);</span><br><span class="line">        System.out.println(permission);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Service对象逻辑实现"><a href="#Service对象逻辑实现" class="headerlink" title="Service对象逻辑实现"></a>Service对象逻辑实现</h2><p>创建UserService接口及实现泪，定义用户及用户权限查询逻辑，代码如下：</p>
<p>第一步:定义service接口,代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.system.service;</span><br><span class="line"></span><br><span class="line">import com.jt.system.pojo.User;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface UserService &#123;</span><br><span class="line">    User selectUserByUsername(String username);</span><br><span class="line">    List&lt;String&gt; selectUserPermissions(Long userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步:定义service接口实现类,代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.system.service.impl;</span><br><span class="line"></span><br><span class="line">import com.jt.system.dao.UserMapper;</span><br><span class="line">import com.jt.system.pojo.User;</span><br><span class="line">import com.jt.system.service.UserService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line">    @Override</span><br><span class="line">    public User selectUserByUsername(String username) &#123;</span><br><span class="line">        return userMapper.selectUserByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;String&gt; selectUserPermissions(Long userId) &#123;</span><br><span class="line">        return userMapper.selectUserPermissions(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Controller对象逻辑实现"><a href="#Controller对象逻辑实现" class="headerlink" title="Controller对象逻辑实现"></a>Controller对象逻辑实现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jt.system.controller;</span><br><span class="line"></span><br><span class="line">import com.jt.system.pojo.User;</span><br><span class="line">import com.jt.system.service.UserService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/user/&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/login/&#123;username&#125;&quot;)</span><br><span class="line">    public User doSelectUserByUsername(</span><br><span class="line">            @PathVariable(&quot;username&quot;) String username)&#123;</span><br><span class="line">        return userService.selectUserByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line">    @GetMapping(&quot;/permission/&#123;userId&#125;&quot;)</span><br><span class="line">    public List&lt;String&gt; doSelectUserPermissions(</span><br><span class="line">            @PathVariable(&quot;userId&quot;) Long userId)&#123;</span><br><span class="line">        return userService.selectUserPermissions(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="启动服务进行访问测试"><a href="#启动服务进行访问测试" class="headerlink" title="启动服务进行访问测试"></a>启动服务进行访问测试</h2><p>启动sso-system工程服务，打开浏览器分别对用户及用户权限信息的获取进行访问测试</p>
<p><img src="https://s2.loli.net/2022/01/02/oYldthmi6e8NPfx.png" alt="image-20220102220734118"></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
</search>
